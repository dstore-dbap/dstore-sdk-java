// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dstore/engine/procedures/om_GetOrderSurcharges_Ad.proto

package io.dstore.engine.procs;

public final class OmGetOrderSurchargesAd {
  private OmGetOrderSurchargesAd() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ParametersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetOrderSurcharges_Ad.Parameters)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
     */
    boolean hasOrderId();
    /**
     * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
     */
    io.dstore.engine.Values.integerValue getOrderId();
    /**
     * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
     */
    io.dstore.engine.Values.integerValueOrBuilder getOrderIdOrBuilder();

    /**
     * <code>optional bool order_id_null = 1001;</code>
     */
    boolean getOrderIdNull();

    /**
     * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
     */
    boolean hasSplitByTaxes();
    /**
     * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
     */
    io.dstore.engine.Values.integerValue getSplitByTaxes();
    /**
     * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
     */
    io.dstore.engine.Values.integerValueOrBuilder getSplitByTaxesOrBuilder();

    /**
     * <code>optional bool split_by_taxes_null = 1002;</code>
     */
    boolean getSplitByTaxesNull();
  }
  /**
   * Protobuf type {@code dstore.engine.om_GetOrderSurcharges_Ad.Parameters}
   */
  public  static final class Parameters extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.om_GetOrderSurcharges_Ad.Parameters)
      ParametersOrBuilder {
    // Use Parameters.newBuilder() to construct.
    private Parameters(com.google.protobuf.GeneratedMessage.Builder builder) {
      super(builder);
    }
    private Parameters() {
      orderIdNull_ = false;
      splitByTaxesNull_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Parameters(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.engine.Values.integerValue.Builder subBuilder = null;
              if (orderId_ != null) {
                subBuilder = orderId_.toBuilder();
              }
              orderId_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(orderId_);
                orderId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.dstore.engine.Values.integerValue.Builder subBuilder = null;
              if (splitByTaxes_ != null) {
                subBuilder = splitByTaxes_.toBuilder();
              }
              splitByTaxes_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(splitByTaxes_);
                splitByTaxes_ = subBuilder.buildPartial();
              }

              break;
            }
            case 8008: {

              orderIdNull_ = input.readBool();
              break;
            }
            case 8016: {

              splitByTaxesNull_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Parameters_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Parameters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters.class, io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters.Builder.class);
    }

    public static final int ORDER_ID_FIELD_NUMBER = 1;
    private io.dstore.engine.Values.integerValue orderId_;
    /**
     * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
     */
    public boolean hasOrderId() {
      return orderId_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
     */
    public io.dstore.engine.Values.integerValue getOrderId() {
      return orderId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : orderId_;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
     */
    public io.dstore.engine.Values.integerValueOrBuilder getOrderIdOrBuilder() {
      return getOrderId();
    }

    public static final int ORDER_ID_NULL_FIELD_NUMBER = 1001;
    private boolean orderIdNull_;
    /**
     * <code>optional bool order_id_null = 1001;</code>
     */
    public boolean getOrderIdNull() {
      return orderIdNull_;
    }

    public static final int SPLIT_BY_TAXES_FIELD_NUMBER = 2;
    private io.dstore.engine.Values.integerValue splitByTaxes_;
    /**
     * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
     */
    public boolean hasSplitByTaxes() {
      return splitByTaxes_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
     */
    public io.dstore.engine.Values.integerValue getSplitByTaxes() {
      return splitByTaxes_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : splitByTaxes_;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
     */
    public io.dstore.engine.Values.integerValueOrBuilder getSplitByTaxesOrBuilder() {
      return getSplitByTaxes();
    }

    public static final int SPLIT_BY_TAXES_NULL_FIELD_NUMBER = 1002;
    private boolean splitByTaxesNull_;
    /**
     * <code>optional bool split_by_taxes_null = 1002;</code>
     */
    public boolean getSplitByTaxesNull() {
      return splitByTaxesNull_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (orderId_ != null) {
        output.writeMessage(1, getOrderId());
      }
      if (splitByTaxes_ != null) {
        output.writeMessage(2, getSplitByTaxes());
      }
      if (orderIdNull_ != false) {
        output.writeBool(1001, orderIdNull_);
      }
      if (splitByTaxesNull_ != false) {
        output.writeBool(1002, splitByTaxesNull_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (orderId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getOrderId());
      }
      if (splitByTaxes_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getSplitByTaxes());
      }
      if (orderIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1001, orderIdNull_);
      }
      if (splitByTaxesNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1002, splitByTaxesNull_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetOrderSurcharges_Ad.Parameters}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetOrderSurcharges_Ad.Parameters)
        io.dstore.engine.procs.OmGetOrderSurchargesAd.ParametersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Parameters_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Parameters_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters.class, io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters.Builder.class);
      }

      // Construct using io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (orderIdBuilder_ == null) {
          orderId_ = null;
        } else {
          orderId_ = null;
          orderIdBuilder_ = null;
        }
        orderIdNull_ = false;

        if (splitByTaxesBuilder_ == null) {
          splitByTaxes_ = null;
        } else {
          splitByTaxes_ = null;
          splitByTaxesBuilder_ = null;
        }
        splitByTaxesNull_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Parameters_descriptor;
      }

      public io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters getDefaultInstanceForType() {
        return io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters.getDefaultInstance();
      }

      public io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters build() {
        io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters buildPartial() {
        io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters result = new io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters(this);
        if (orderIdBuilder_ == null) {
          result.orderId_ = orderId_;
        } else {
          result.orderId_ = orderIdBuilder_.build();
        }
        result.orderIdNull_ = orderIdNull_;
        if (splitByTaxesBuilder_ == null) {
          result.splitByTaxes_ = splitByTaxes_;
        } else {
          result.splitByTaxes_ = splitByTaxesBuilder_.build();
        }
        result.splitByTaxesNull_ = splitByTaxesNull_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters) {
          return mergeFrom((io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters other) {
        if (other == io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters.getDefaultInstance()) return this;
        if (other.hasOrderId()) {
          mergeOrderId(other.getOrderId());
        }
        if (other.getOrderIdNull() != false) {
          setOrderIdNull(other.getOrderIdNull());
        }
        if (other.hasSplitByTaxes()) {
          mergeSplitByTaxes(other.getSplitByTaxes());
        }
        if (other.getSplitByTaxesNull() != false) {
          setSplitByTaxesNull(other.getSplitByTaxesNull());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.dstore.engine.Values.integerValue orderId_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> orderIdBuilder_;
      /**
       * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
       */
      public boolean hasOrderId() {
        return orderIdBuilder_ != null || orderId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
       */
      public io.dstore.engine.Values.integerValue getOrderId() {
        if (orderIdBuilder_ == null) {
          return orderId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : orderId_;
        } else {
          return orderIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
       */
      public Builder setOrderId(io.dstore.engine.Values.integerValue value) {
        if (orderIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          orderId_ = value;
          onChanged();
        } else {
          orderIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
       */
      public Builder setOrderId(
          io.dstore.engine.Values.integerValue.Builder builderForValue) {
        if (orderIdBuilder_ == null) {
          orderId_ = builderForValue.build();
          onChanged();
        } else {
          orderIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
       */
      public Builder mergeOrderId(io.dstore.engine.Values.integerValue value) {
        if (orderIdBuilder_ == null) {
          if (orderId_ != null) {
            orderId_ =
              io.dstore.engine.Values.integerValue.newBuilder(orderId_).mergeFrom(value).buildPartial();
          } else {
            orderId_ = value;
          }
          onChanged();
        } else {
          orderIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
       */
      public Builder clearOrderId() {
        if (orderIdBuilder_ == null) {
          orderId_ = null;
          onChanged();
        } else {
          orderId_ = null;
          orderIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
       */
      public io.dstore.engine.Values.integerValue.Builder getOrderIdBuilder() {
        
        onChanged();
        return getOrderIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getOrderIdOrBuilder() {
        if (orderIdBuilder_ != null) {
          return orderIdBuilder_.getMessageOrBuilder();
        } else {
          return orderId_ == null ?
              io.dstore.engine.Values.integerValue.getDefaultInstance() : orderId_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue order_id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
          getOrderIdFieldBuilder() {
        if (orderIdBuilder_ == null) {
          orderIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                  getOrderId(),
                  getParentForChildren(),
                  isClean());
          orderId_ = null;
        }
        return orderIdBuilder_;
      }

      private boolean orderIdNull_ ;
      /**
       * <code>optional bool order_id_null = 1001;</code>
       */
      public boolean getOrderIdNull() {
        return orderIdNull_;
      }
      /**
       * <code>optional bool order_id_null = 1001;</code>
       */
      public Builder setOrderIdNull(boolean value) {
        
        orderIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool order_id_null = 1001;</code>
       */
      public Builder clearOrderIdNull() {
        
        orderIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.engine.Values.integerValue splitByTaxes_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> splitByTaxesBuilder_;
      /**
       * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
       */
      public boolean hasSplitByTaxes() {
        return splitByTaxesBuilder_ != null || splitByTaxes_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
       */
      public io.dstore.engine.Values.integerValue getSplitByTaxes() {
        if (splitByTaxesBuilder_ == null) {
          return splitByTaxes_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : splitByTaxes_;
        } else {
          return splitByTaxesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
       */
      public Builder setSplitByTaxes(io.dstore.engine.Values.integerValue value) {
        if (splitByTaxesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          splitByTaxes_ = value;
          onChanged();
        } else {
          splitByTaxesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
       */
      public Builder setSplitByTaxes(
          io.dstore.engine.Values.integerValue.Builder builderForValue) {
        if (splitByTaxesBuilder_ == null) {
          splitByTaxes_ = builderForValue.build();
          onChanged();
        } else {
          splitByTaxesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
       */
      public Builder mergeSplitByTaxes(io.dstore.engine.Values.integerValue value) {
        if (splitByTaxesBuilder_ == null) {
          if (splitByTaxes_ != null) {
            splitByTaxes_ =
              io.dstore.engine.Values.integerValue.newBuilder(splitByTaxes_).mergeFrom(value).buildPartial();
          } else {
            splitByTaxes_ = value;
          }
          onChanged();
        } else {
          splitByTaxesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
       */
      public Builder clearSplitByTaxes() {
        if (splitByTaxesBuilder_ == null) {
          splitByTaxes_ = null;
          onChanged();
        } else {
          splitByTaxes_ = null;
          splitByTaxesBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
       */
      public io.dstore.engine.Values.integerValue.Builder getSplitByTaxesBuilder() {
        
        onChanged();
        return getSplitByTaxesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getSplitByTaxesOrBuilder() {
        if (splitByTaxesBuilder_ != null) {
          return splitByTaxesBuilder_.getMessageOrBuilder();
        } else {
          return splitByTaxes_ == null ?
              io.dstore.engine.Values.integerValue.getDefaultInstance() : splitByTaxes_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue split_by_taxes = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
          getSplitByTaxesFieldBuilder() {
        if (splitByTaxesBuilder_ == null) {
          splitByTaxesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                  getSplitByTaxes(),
                  getParentForChildren(),
                  isClean());
          splitByTaxes_ = null;
        }
        return splitByTaxesBuilder_;
      }

      private boolean splitByTaxesNull_ ;
      /**
       * <code>optional bool split_by_taxes_null = 1002;</code>
       */
      public boolean getSplitByTaxesNull() {
        return splitByTaxesNull_;
      }
      /**
       * <code>optional bool split_by_taxes_null = 1002;</code>
       */
      public Builder setSplitByTaxesNull(boolean value) {
        
        splitByTaxesNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool split_by_taxes_null = 1002;</code>
       */
      public Builder clearSplitByTaxesNull() {
        
        splitByTaxesNull_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetOrderSurcharges_Ad.Parameters)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.om_GetOrderSurcharges_Ad.Parameters)
    private static final io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters();
    }

    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    public static final com.google.protobuf.Parser<Parameters> PARSER =
        new com.google.protobuf.AbstractParser<Parameters>() {
      public Parameters parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Parameters(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Parameters> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Parameters> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procs.OmGetOrderSurchargesAd.Parameters getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetOrderSurcharges_Ad.Response)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    boolean hasError();
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    io.dstore.engine.EngineError.Error getError();
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    io.dstore.engine.EngineError.ErrorOrBuilder getErrorOrBuilder();

    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<io.dstore.engine.ProcedureMessage.Message> 
        getMessageList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.Message getMessage(int index);
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    int getMessageCount();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index);

    /**
     * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    java.util.List<io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row> 
        getRowList();
    /**
     * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row getRow(int index);
    /**
     * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    int getRowCount();
    /**
     * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    java.util.List<? extends io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.RowOrBuilder> 
        getRowOrBuilderList();
    /**
     * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.RowOrBuilder getRowOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dstore.engine.om_GetOrderSurcharges_Ad.Response}
   */
  public  static final class Response extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.om_GetOrderSurcharges_Ad.Response)
      ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessage.Builder builder) {
      super(builder);
    }
    private Response() {
      message_ = java.util.Collections.emptyList();
      row_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.engine.EngineError.Error.Builder subBuilder = null;
              if (error_ != null) {
                subBuilder = error_.toBuilder();
              }
              error_ = input.readMessage(io.dstore.engine.EngineError.Error.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(error_);
                error_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>();
                mutable_bitField0_ |= 0x00000002;
              }
              message_.add(input.readMessage(io.dstore.engine.ProcedureMessage.Message.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                row_ = new java.util.ArrayList<io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row>();
                mutable_bitField0_ |= 0x00000004;
              }
              row_.add(input.readMessage(io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = java.util.Collections.unmodifiableList(message_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = java.util.Collections.unmodifiableList(row_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.class, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Builder.class);
    }

    public interface RowOrBuilder extends
        // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetOrderSurcharges_Ad.Response.Row)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      int getRowId();

      /**
       * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
       *
       * <pre>
       * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
       * </pre>
       */
      boolean hasOriginalSurchargeValue();
      /**
       * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
       *
       * <pre>
       * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getOriginalSurchargeValue();
      /**
       * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
       *
       * <pre>
       * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getOriginalSurchargeValueOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
       *
       * <pre>
       * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
       * </pre>
       */
      boolean hasOrigSurchValUnitId();
      /**
       * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
       *
       * <pre>
       * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
       * </pre>
       */
      io.dstore.engine.Values.integerValue getOrigSurchValUnitId();
      /**
       * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
       *
       * <pre>
       * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getOrigSurchValUnitIdOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
       *
       * <pre>
       * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
       * </pre>
       */
      boolean hasOrigSurchValUnitSymbol();
      /**
       * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
       *
       * <pre>
       * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
       * </pre>
       */
      io.dstore.engine.Values.stringValue getOrigSurchValUnitSymbol();
      /**
       * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
       *
       * <pre>
       * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getOrigSurchValUnitSymbolOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
       *
       * <pre>
       * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
       * </pre>
       */
      boolean hasAppliedOnNetSum();
      /**
       * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
       *
       * <pre>
       * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getAppliedOnNetSum();
      /**
       * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
       *
       * <pre>
       * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getAppliedOnNetSumOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
       *
       * <pre>
       * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
       * </pre>
       */
      boolean hasTaxesMultiplier();
      /**
       * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
       *
       * <pre>
       * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getTaxesMultiplier();
      /**
       * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
       *
       * <pre>
       * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getTaxesMultiplierOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
       *
       * <pre>
       * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
       * </pre>
       */
      boolean hasAbsoluteNetSurcharge();
      /**
       * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
       *
       * <pre>
       * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getAbsoluteNetSurcharge();
      /**
       * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
       *
       * <pre>
       * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getAbsoluteNetSurchargeOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
       *
       * <pre>
       * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
       * </pre>
       */
      boolean hasPositionNo();
      /**
       * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
       *
       * <pre>
       * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
       * </pre>
       */
      io.dstore.engine.Values.integerValue getPositionNo();
      /**
       * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
       *
       * <pre>
       * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getPositionNoOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
       *
       * <pre>
       * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
       * </pre>
       */
      boolean hasAppliedOnGrossSum();
      /**
       * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
       *
       * <pre>
       * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getAppliedOnGrossSum();
      /**
       * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
       *
       * <pre>
       * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getAppliedOnGrossSumOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
       *
       * <pre>
       * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
       * </pre>
       */
      boolean hasCurrencyId();
      /**
       * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
       *
       * <pre>
       * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
       * </pre>
       */
      io.dstore.engine.Values.integerValue getCurrencyId();
      /**
       * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
       *
       * <pre>
       * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getCurrencyIdOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
       *
       * <pre>
       * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
       * </pre>
       */
      boolean hasCurrencySymbol();
      /**
       * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
       *
       * <pre>
       * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
       * </pre>
       */
      io.dstore.engine.Values.stringValue getCurrencySymbol();
      /**
       * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
       *
       * <pre>
       * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getCurrencySymbolOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
       *
       * <pre>
       * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
       * </pre>
       */
      boolean hasOrigSurchValIsAbsolute();
      /**
       * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
       *
       * <pre>
       * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
       * </pre>
       */
      io.dstore.engine.Values.integerValue getOrigSurchValIsAbsolute();
      /**
       * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
       *
       * <pre>
       * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getOrigSurchValIsAbsoluteOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
       *
       * <pre>
       * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
       * </pre>
       */
      boolean hasAbsoluteGrossSurcharge();
      /**
       * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
       *
       * <pre>
       * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getAbsoluteGrossSurcharge();
      /**
       * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
       *
       * <pre>
       * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getAbsoluteGrossSurchargeOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
       *
       * <pre>
       * Bezeichnung von "SurchargeTypeCategoryID"
       * </pre>
       */
      boolean hasCategoryDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
       *
       * <pre>
       * Bezeichnung von "SurchargeTypeCategoryID"
       * </pre>
       */
      io.dstore.engine.Values.stringValue getCategoryDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
       *
       * <pre>
       * Bezeichnung von "SurchargeTypeCategoryID"
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getCategoryDescriptionOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
       *
       * <pre>
       * Bezeichnung der "SurchargeTypeID"
       * </pre>
       */
      boolean hasSurchargeTypeDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
       *
       * <pre>
       * Bezeichnung der "SurchargeTypeID"
       * </pre>
       */
      io.dstore.engine.Values.stringValue getSurchargeTypeDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
       *
       * <pre>
       * Bezeichnung der "SurchargeTypeID"
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getSurchargeTypeDescriptionOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
       *
       * <pre>
       * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
       * </pre>
       */
      boolean hasSurchargeTypeId();
      /**
       * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
       *
       * <pre>
       * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
       * </pre>
       */
      io.dstore.engine.Values.integerValue getSurchargeTypeId();
      /**
       * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
       *
       * <pre>
       * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getSurchargeTypeIdOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
       *
       * <pre>
       * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
       * </pre>
       */
      boolean hasSurchargeTypeCategoryId();
      /**
       * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
       *
       * <pre>
       * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
       * </pre>
       */
      io.dstore.engine.Values.integerValue getSurchargeTypeCategoryId();
      /**
       * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
       *
       * <pre>
       * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getSurchargeTypeCategoryIdOrBuilder();
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetOrderSurcharges_Ad.Response.Row}
     */
    public  static final class Row extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:dstore.engine.om_GetOrderSurcharges_Ad.Response.Row)
        RowOrBuilder {
      // Use Row.newBuilder() to construct.
      private Row(com.google.protobuf.GeneratedMessage.Builder builder) {
        super(builder);
      }
      private Row() {
        rowId_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private Row(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 80000: {

                rowId_ = input.readInt32();
                break;
              }
              case 80010: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (originalSurchargeValue_ != null) {
                  subBuilder = originalSurchargeValue_.toBuilder();
                }
                originalSurchargeValue_ = input.readMessage(io.dstore.engine.Values.decimalValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(originalSurchargeValue_);
                  originalSurchargeValue_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80018: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (origSurchValUnitId_ != null) {
                  subBuilder = origSurchValUnitId_.toBuilder();
                }
                origSurchValUnitId_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(origSurchValUnitId_);
                  origSurchValUnitId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80026: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (origSurchValUnitSymbol_ != null) {
                  subBuilder = origSurchValUnitSymbol_.toBuilder();
                }
                origSurchValUnitSymbol_ = input.readMessage(io.dstore.engine.Values.stringValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(origSurchValUnitSymbol_);
                  origSurchValUnitSymbol_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80034: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (appliedOnNetSum_ != null) {
                  subBuilder = appliedOnNetSum_.toBuilder();
                }
                appliedOnNetSum_ = input.readMessage(io.dstore.engine.Values.decimalValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(appliedOnNetSum_);
                  appliedOnNetSum_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80042: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (taxesMultiplier_ != null) {
                  subBuilder = taxesMultiplier_.toBuilder();
                }
                taxesMultiplier_ = input.readMessage(io.dstore.engine.Values.decimalValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(taxesMultiplier_);
                  taxesMultiplier_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80050: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (absoluteNetSurcharge_ != null) {
                  subBuilder = absoluteNetSurcharge_.toBuilder();
                }
                absoluteNetSurcharge_ = input.readMessage(io.dstore.engine.Values.decimalValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(absoluteNetSurcharge_);
                  absoluteNetSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80058: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (positionNo_ != null) {
                  subBuilder = positionNo_.toBuilder();
                }
                positionNo_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(positionNo_);
                  positionNo_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80066: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (appliedOnGrossSum_ != null) {
                  subBuilder = appliedOnGrossSum_.toBuilder();
                }
                appliedOnGrossSum_ = input.readMessage(io.dstore.engine.Values.decimalValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(appliedOnGrossSum_);
                  appliedOnGrossSum_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80074: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (currencyId_ != null) {
                  subBuilder = currencyId_.toBuilder();
                }
                currencyId_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(currencyId_);
                  currencyId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80082: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (currencySymbol_ != null) {
                  subBuilder = currencySymbol_.toBuilder();
                }
                currencySymbol_ = input.readMessage(io.dstore.engine.Values.stringValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(currencySymbol_);
                  currencySymbol_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80090: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (origSurchValIsAbsolute_ != null) {
                  subBuilder = origSurchValIsAbsolute_.toBuilder();
                }
                origSurchValIsAbsolute_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(origSurchValIsAbsolute_);
                  origSurchValIsAbsolute_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80098: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (absoluteGrossSurcharge_ != null) {
                  subBuilder = absoluteGrossSurcharge_.toBuilder();
                }
                absoluteGrossSurcharge_ = input.readMessage(io.dstore.engine.Values.decimalValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(absoluteGrossSurcharge_);
                  absoluteGrossSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80106: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (categoryDescription_ != null) {
                  subBuilder = categoryDescription_.toBuilder();
                }
                categoryDescription_ = input.readMessage(io.dstore.engine.Values.stringValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(categoryDescription_);
                  categoryDescription_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80114: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (surchargeTypeDescription_ != null) {
                  subBuilder = surchargeTypeDescription_.toBuilder();
                }
                surchargeTypeDescription_ = input.readMessage(io.dstore.engine.Values.stringValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(surchargeTypeDescription_);
                  surchargeTypeDescription_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80122: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (surchargeTypeId_ != null) {
                  subBuilder = surchargeTypeId_.toBuilder();
                }
                surchargeTypeId_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(surchargeTypeId_);
                  surchargeTypeId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80130: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (surchargeTypeCategoryId_ != null) {
                  subBuilder = surchargeTypeCategoryId_.toBuilder();
                }
                surchargeTypeCategoryId_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(surchargeTypeCategoryId_);
                  surchargeTypeCategoryId_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_Row_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_Row_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.class, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.Builder.class);
      }

      public static final int ROW_ID_FIELD_NUMBER = 10000;
      private int rowId_;
      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      public int getRowId() {
        return rowId_;
      }

      public static final int ORIGINAL_SURCHARGE_VALUE_FIELD_NUMBER = 10001;
      private io.dstore.engine.Values.decimalValue originalSurchargeValue_;
      /**
       * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
       *
       * <pre>
       * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
       * </pre>
       */
      public boolean hasOriginalSurchargeValue() {
        return originalSurchargeValue_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
       *
       * <pre>
       * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getOriginalSurchargeValue() {
        return originalSurchargeValue_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : originalSurchargeValue_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
       *
       * <pre>
       * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getOriginalSurchargeValueOrBuilder() {
        return getOriginalSurchargeValue();
      }

      public static final int ORIG_SURCH_VAL_UNIT_ID_FIELD_NUMBER = 10002;
      private io.dstore.engine.Values.integerValue origSurchValUnitId_;
      /**
       * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
       *
       * <pre>
       * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
       * </pre>
       */
      public boolean hasOrigSurchValUnitId() {
        return origSurchValUnitId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
       *
       * <pre>
       * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getOrigSurchValUnitId() {
        return origSurchValUnitId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : origSurchValUnitId_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
       *
       * <pre>
       * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getOrigSurchValUnitIdOrBuilder() {
        return getOrigSurchValUnitId();
      }

      public static final int ORIG_SURCH_VAL_UNIT_SYMBOL_FIELD_NUMBER = 10003;
      private io.dstore.engine.Values.stringValue origSurchValUnitSymbol_;
      /**
       * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
       *
       * <pre>
       * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
       * </pre>
       */
      public boolean hasOrigSurchValUnitSymbol() {
        return origSurchValUnitSymbol_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
       *
       * <pre>
       * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getOrigSurchValUnitSymbol() {
        return origSurchValUnitSymbol_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : origSurchValUnitSymbol_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
       *
       * <pre>
       * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getOrigSurchValUnitSymbolOrBuilder() {
        return getOrigSurchValUnitSymbol();
      }

      public static final int APPLIED_ON_NET_SUM_FIELD_NUMBER = 10004;
      private io.dstore.engine.Values.decimalValue appliedOnNetSum_;
      /**
       * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
       *
       * <pre>
       * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
       * </pre>
       */
      public boolean hasAppliedOnNetSum() {
        return appliedOnNetSum_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
       *
       * <pre>
       * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getAppliedOnNetSum() {
        return appliedOnNetSum_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : appliedOnNetSum_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
       *
       * <pre>
       * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getAppliedOnNetSumOrBuilder() {
        return getAppliedOnNetSum();
      }

      public static final int TAXES_MULTIPLIER_FIELD_NUMBER = 10005;
      private io.dstore.engine.Values.decimalValue taxesMultiplier_;
      /**
       * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
       *
       * <pre>
       * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
       * </pre>
       */
      public boolean hasTaxesMultiplier() {
        return taxesMultiplier_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
       *
       * <pre>
       * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getTaxesMultiplier() {
        return taxesMultiplier_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : taxesMultiplier_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
       *
       * <pre>
       * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getTaxesMultiplierOrBuilder() {
        return getTaxesMultiplier();
      }

      public static final int ABSOLUTE_NET_SURCHARGE_FIELD_NUMBER = 10006;
      private io.dstore.engine.Values.decimalValue absoluteNetSurcharge_;
      /**
       * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
       *
       * <pre>
       * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
       * </pre>
       */
      public boolean hasAbsoluteNetSurcharge() {
        return absoluteNetSurcharge_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
       *
       * <pre>
       * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getAbsoluteNetSurcharge() {
        return absoluteNetSurcharge_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : absoluteNetSurcharge_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
       *
       * <pre>
       * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getAbsoluteNetSurchargeOrBuilder() {
        return getAbsoluteNetSurcharge();
      }

      public static final int POSITION_NO_FIELD_NUMBER = 10007;
      private io.dstore.engine.Values.integerValue positionNo_;
      /**
       * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
       *
       * <pre>
       * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
       * </pre>
       */
      public boolean hasPositionNo() {
        return positionNo_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
       *
       * <pre>
       * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getPositionNo() {
        return positionNo_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : positionNo_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
       *
       * <pre>
       * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getPositionNoOrBuilder() {
        return getPositionNo();
      }

      public static final int APPLIED_ON_GROSS_SUM_FIELD_NUMBER = 10008;
      private io.dstore.engine.Values.decimalValue appliedOnGrossSum_;
      /**
       * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
       *
       * <pre>
       * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
       * </pre>
       */
      public boolean hasAppliedOnGrossSum() {
        return appliedOnGrossSum_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
       *
       * <pre>
       * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getAppliedOnGrossSum() {
        return appliedOnGrossSum_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : appliedOnGrossSum_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
       *
       * <pre>
       * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getAppliedOnGrossSumOrBuilder() {
        return getAppliedOnGrossSum();
      }

      public static final int CURRENCY_ID_FIELD_NUMBER = 10009;
      private io.dstore.engine.Values.integerValue currencyId_;
      /**
       * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
       *
       * <pre>
       * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
       * </pre>
       */
      public boolean hasCurrencyId() {
        return currencyId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
       *
       * <pre>
       * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getCurrencyId() {
        return currencyId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : currencyId_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
       *
       * <pre>
       * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getCurrencyIdOrBuilder() {
        return getCurrencyId();
      }

      public static final int CURRENCY_SYMBOL_FIELD_NUMBER = 10010;
      private io.dstore.engine.Values.stringValue currencySymbol_;
      /**
       * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
       *
       * <pre>
       * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
       * </pre>
       */
      public boolean hasCurrencySymbol() {
        return currencySymbol_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
       *
       * <pre>
       * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getCurrencySymbol() {
        return currencySymbol_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : currencySymbol_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
       *
       * <pre>
       * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getCurrencySymbolOrBuilder() {
        return getCurrencySymbol();
      }

      public static final int ORIG_SURCH_VAL_IS_ABSOLUTE_FIELD_NUMBER = 10011;
      private io.dstore.engine.Values.integerValue origSurchValIsAbsolute_;
      /**
       * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
       *
       * <pre>
       * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
       * </pre>
       */
      public boolean hasOrigSurchValIsAbsolute() {
        return origSurchValIsAbsolute_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
       *
       * <pre>
       * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getOrigSurchValIsAbsolute() {
        return origSurchValIsAbsolute_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : origSurchValIsAbsolute_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
       *
       * <pre>
       * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getOrigSurchValIsAbsoluteOrBuilder() {
        return getOrigSurchValIsAbsolute();
      }

      public static final int ABSOLUTE_GROSS_SURCHARGE_FIELD_NUMBER = 10012;
      private io.dstore.engine.Values.decimalValue absoluteGrossSurcharge_;
      /**
       * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
       *
       * <pre>
       * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
       * </pre>
       */
      public boolean hasAbsoluteGrossSurcharge() {
        return absoluteGrossSurcharge_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
       *
       * <pre>
       * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getAbsoluteGrossSurcharge() {
        return absoluteGrossSurcharge_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : absoluteGrossSurcharge_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
       *
       * <pre>
       * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getAbsoluteGrossSurchargeOrBuilder() {
        return getAbsoluteGrossSurcharge();
      }

      public static final int CATEGORY_DESCRIPTION_FIELD_NUMBER = 10013;
      private io.dstore.engine.Values.stringValue categoryDescription_;
      /**
       * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
       *
       * <pre>
       * Bezeichnung von "SurchargeTypeCategoryID"
       * </pre>
       */
      public boolean hasCategoryDescription() {
        return categoryDescription_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
       *
       * <pre>
       * Bezeichnung von "SurchargeTypeCategoryID"
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getCategoryDescription() {
        return categoryDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : categoryDescription_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
       *
       * <pre>
       * Bezeichnung von "SurchargeTypeCategoryID"
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getCategoryDescriptionOrBuilder() {
        return getCategoryDescription();
      }

      public static final int SURCHARGE_TYPE_DESCRIPTION_FIELD_NUMBER = 10014;
      private io.dstore.engine.Values.stringValue surchargeTypeDescription_;
      /**
       * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
       *
       * <pre>
       * Bezeichnung der "SurchargeTypeID"
       * </pre>
       */
      public boolean hasSurchargeTypeDescription() {
        return surchargeTypeDescription_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
       *
       * <pre>
       * Bezeichnung der "SurchargeTypeID"
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getSurchargeTypeDescription() {
        return surchargeTypeDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : surchargeTypeDescription_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
       *
       * <pre>
       * Bezeichnung der "SurchargeTypeID"
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getSurchargeTypeDescriptionOrBuilder() {
        return getSurchargeTypeDescription();
      }

      public static final int SURCHARGE_TYPE_ID_FIELD_NUMBER = 10015;
      private io.dstore.engine.Values.integerValue surchargeTypeId_;
      /**
       * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
       *
       * <pre>
       * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
       * </pre>
       */
      public boolean hasSurchargeTypeId() {
        return surchargeTypeId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
       *
       * <pre>
       * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getSurchargeTypeId() {
        return surchargeTypeId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : surchargeTypeId_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
       *
       * <pre>
       * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getSurchargeTypeIdOrBuilder() {
        return getSurchargeTypeId();
      }

      public static final int SURCHARGE_TYPE_CATEGORY_ID_FIELD_NUMBER = 10016;
      private io.dstore.engine.Values.integerValue surchargeTypeCategoryId_;
      /**
       * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
       *
       * <pre>
       * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
       * </pre>
       */
      public boolean hasSurchargeTypeCategoryId() {
        return surchargeTypeCategoryId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
       *
       * <pre>
       * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getSurchargeTypeCategoryId() {
        return surchargeTypeCategoryId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : surchargeTypeCategoryId_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
       *
       * <pre>
       * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getSurchargeTypeCategoryIdOrBuilder() {
        return getSurchargeTypeCategoryId();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (rowId_ != 0) {
          output.writeInt32(10000, rowId_);
        }
        if (originalSurchargeValue_ != null) {
          output.writeMessage(10001, getOriginalSurchargeValue());
        }
        if (origSurchValUnitId_ != null) {
          output.writeMessage(10002, getOrigSurchValUnitId());
        }
        if (origSurchValUnitSymbol_ != null) {
          output.writeMessage(10003, getOrigSurchValUnitSymbol());
        }
        if (appliedOnNetSum_ != null) {
          output.writeMessage(10004, getAppliedOnNetSum());
        }
        if (taxesMultiplier_ != null) {
          output.writeMessage(10005, getTaxesMultiplier());
        }
        if (absoluteNetSurcharge_ != null) {
          output.writeMessage(10006, getAbsoluteNetSurcharge());
        }
        if (positionNo_ != null) {
          output.writeMessage(10007, getPositionNo());
        }
        if (appliedOnGrossSum_ != null) {
          output.writeMessage(10008, getAppliedOnGrossSum());
        }
        if (currencyId_ != null) {
          output.writeMessage(10009, getCurrencyId());
        }
        if (currencySymbol_ != null) {
          output.writeMessage(10010, getCurrencySymbol());
        }
        if (origSurchValIsAbsolute_ != null) {
          output.writeMessage(10011, getOrigSurchValIsAbsolute());
        }
        if (absoluteGrossSurcharge_ != null) {
          output.writeMessage(10012, getAbsoluteGrossSurcharge());
        }
        if (categoryDescription_ != null) {
          output.writeMessage(10013, getCategoryDescription());
        }
        if (surchargeTypeDescription_ != null) {
          output.writeMessage(10014, getSurchargeTypeDescription());
        }
        if (surchargeTypeId_ != null) {
          output.writeMessage(10015, getSurchargeTypeId());
        }
        if (surchargeTypeCategoryId_ != null) {
          output.writeMessage(10016, getSurchargeTypeCategoryId());
        }
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (rowId_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10000, rowId_);
        }
        if (originalSurchargeValue_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10001, getOriginalSurchargeValue());
        }
        if (origSurchValUnitId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10002, getOrigSurchValUnitId());
        }
        if (origSurchValUnitSymbol_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10003, getOrigSurchValUnitSymbol());
        }
        if (appliedOnNetSum_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10004, getAppliedOnNetSum());
        }
        if (taxesMultiplier_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10005, getTaxesMultiplier());
        }
        if (absoluteNetSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10006, getAbsoluteNetSurcharge());
        }
        if (positionNo_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10007, getPositionNo());
        }
        if (appliedOnGrossSum_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10008, getAppliedOnGrossSum());
        }
        if (currencyId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10009, getCurrencyId());
        }
        if (currencySymbol_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10010, getCurrencySymbol());
        }
        if (origSurchValIsAbsolute_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10011, getOrigSurchValIsAbsolute());
        }
        if (absoluteGrossSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10012, getAbsoluteGrossSurcharge());
        }
        if (categoryDescription_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10013, getCategoryDescription());
        }
        if (surchargeTypeDescription_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10014, getSurchargeTypeDescription());
        }
        if (surchargeTypeId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10015, getSurchargeTypeId());
        }
        if (surchargeTypeCategoryId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10016, getSurchargeTypeCategoryId());
        }
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code dstore.engine.om_GetOrderSurcharges_Ad.Response.Row}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetOrderSurcharges_Ad.Response.Row)
          io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.RowOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_Row_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_Row_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.class, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.Builder.class);
        }

        // Construct using io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          rowId_ = 0;

          if (originalSurchargeValueBuilder_ == null) {
            originalSurchargeValue_ = null;
          } else {
            originalSurchargeValue_ = null;
            originalSurchargeValueBuilder_ = null;
          }
          if (origSurchValUnitIdBuilder_ == null) {
            origSurchValUnitId_ = null;
          } else {
            origSurchValUnitId_ = null;
            origSurchValUnitIdBuilder_ = null;
          }
          if (origSurchValUnitSymbolBuilder_ == null) {
            origSurchValUnitSymbol_ = null;
          } else {
            origSurchValUnitSymbol_ = null;
            origSurchValUnitSymbolBuilder_ = null;
          }
          if (appliedOnNetSumBuilder_ == null) {
            appliedOnNetSum_ = null;
          } else {
            appliedOnNetSum_ = null;
            appliedOnNetSumBuilder_ = null;
          }
          if (taxesMultiplierBuilder_ == null) {
            taxesMultiplier_ = null;
          } else {
            taxesMultiplier_ = null;
            taxesMultiplierBuilder_ = null;
          }
          if (absoluteNetSurchargeBuilder_ == null) {
            absoluteNetSurcharge_ = null;
          } else {
            absoluteNetSurcharge_ = null;
            absoluteNetSurchargeBuilder_ = null;
          }
          if (positionNoBuilder_ == null) {
            positionNo_ = null;
          } else {
            positionNo_ = null;
            positionNoBuilder_ = null;
          }
          if (appliedOnGrossSumBuilder_ == null) {
            appliedOnGrossSum_ = null;
          } else {
            appliedOnGrossSum_ = null;
            appliedOnGrossSumBuilder_ = null;
          }
          if (currencyIdBuilder_ == null) {
            currencyId_ = null;
          } else {
            currencyId_ = null;
            currencyIdBuilder_ = null;
          }
          if (currencySymbolBuilder_ == null) {
            currencySymbol_ = null;
          } else {
            currencySymbol_ = null;
            currencySymbolBuilder_ = null;
          }
          if (origSurchValIsAbsoluteBuilder_ == null) {
            origSurchValIsAbsolute_ = null;
          } else {
            origSurchValIsAbsolute_ = null;
            origSurchValIsAbsoluteBuilder_ = null;
          }
          if (absoluteGrossSurchargeBuilder_ == null) {
            absoluteGrossSurcharge_ = null;
          } else {
            absoluteGrossSurcharge_ = null;
            absoluteGrossSurchargeBuilder_ = null;
          }
          if (categoryDescriptionBuilder_ == null) {
            categoryDescription_ = null;
          } else {
            categoryDescription_ = null;
            categoryDescriptionBuilder_ = null;
          }
          if (surchargeTypeDescriptionBuilder_ == null) {
            surchargeTypeDescription_ = null;
          } else {
            surchargeTypeDescription_ = null;
            surchargeTypeDescriptionBuilder_ = null;
          }
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeId_ = null;
          } else {
            surchargeTypeId_ = null;
            surchargeTypeIdBuilder_ = null;
          }
          if (surchargeTypeCategoryIdBuilder_ == null) {
            surchargeTypeCategoryId_ = null;
          } else {
            surchargeTypeCategoryId_ = null;
            surchargeTypeCategoryIdBuilder_ = null;
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_Row_descriptor;
        }

        public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row getDefaultInstanceForType() {
          return io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.getDefaultInstance();
        }

        public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row build() {
          io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row buildPartial() {
          io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row result = new io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row(this);
          result.rowId_ = rowId_;
          if (originalSurchargeValueBuilder_ == null) {
            result.originalSurchargeValue_ = originalSurchargeValue_;
          } else {
            result.originalSurchargeValue_ = originalSurchargeValueBuilder_.build();
          }
          if (origSurchValUnitIdBuilder_ == null) {
            result.origSurchValUnitId_ = origSurchValUnitId_;
          } else {
            result.origSurchValUnitId_ = origSurchValUnitIdBuilder_.build();
          }
          if (origSurchValUnitSymbolBuilder_ == null) {
            result.origSurchValUnitSymbol_ = origSurchValUnitSymbol_;
          } else {
            result.origSurchValUnitSymbol_ = origSurchValUnitSymbolBuilder_.build();
          }
          if (appliedOnNetSumBuilder_ == null) {
            result.appliedOnNetSum_ = appliedOnNetSum_;
          } else {
            result.appliedOnNetSum_ = appliedOnNetSumBuilder_.build();
          }
          if (taxesMultiplierBuilder_ == null) {
            result.taxesMultiplier_ = taxesMultiplier_;
          } else {
            result.taxesMultiplier_ = taxesMultiplierBuilder_.build();
          }
          if (absoluteNetSurchargeBuilder_ == null) {
            result.absoluteNetSurcharge_ = absoluteNetSurcharge_;
          } else {
            result.absoluteNetSurcharge_ = absoluteNetSurchargeBuilder_.build();
          }
          if (positionNoBuilder_ == null) {
            result.positionNo_ = positionNo_;
          } else {
            result.positionNo_ = positionNoBuilder_.build();
          }
          if (appliedOnGrossSumBuilder_ == null) {
            result.appliedOnGrossSum_ = appliedOnGrossSum_;
          } else {
            result.appliedOnGrossSum_ = appliedOnGrossSumBuilder_.build();
          }
          if (currencyIdBuilder_ == null) {
            result.currencyId_ = currencyId_;
          } else {
            result.currencyId_ = currencyIdBuilder_.build();
          }
          if (currencySymbolBuilder_ == null) {
            result.currencySymbol_ = currencySymbol_;
          } else {
            result.currencySymbol_ = currencySymbolBuilder_.build();
          }
          if (origSurchValIsAbsoluteBuilder_ == null) {
            result.origSurchValIsAbsolute_ = origSurchValIsAbsolute_;
          } else {
            result.origSurchValIsAbsolute_ = origSurchValIsAbsoluteBuilder_.build();
          }
          if (absoluteGrossSurchargeBuilder_ == null) {
            result.absoluteGrossSurcharge_ = absoluteGrossSurcharge_;
          } else {
            result.absoluteGrossSurcharge_ = absoluteGrossSurchargeBuilder_.build();
          }
          if (categoryDescriptionBuilder_ == null) {
            result.categoryDescription_ = categoryDescription_;
          } else {
            result.categoryDescription_ = categoryDescriptionBuilder_.build();
          }
          if (surchargeTypeDescriptionBuilder_ == null) {
            result.surchargeTypeDescription_ = surchargeTypeDescription_;
          } else {
            result.surchargeTypeDescription_ = surchargeTypeDescriptionBuilder_.build();
          }
          if (surchargeTypeIdBuilder_ == null) {
            result.surchargeTypeId_ = surchargeTypeId_;
          } else {
            result.surchargeTypeId_ = surchargeTypeIdBuilder_.build();
          }
          if (surchargeTypeCategoryIdBuilder_ == null) {
            result.surchargeTypeCategoryId_ = surchargeTypeCategoryId_;
          } else {
            result.surchargeTypeCategoryId_ = surchargeTypeCategoryIdBuilder_.build();
          }
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row) {
            return mergeFrom((io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row other) {
          if (other == io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.getDefaultInstance()) return this;
          if (other.getRowId() != 0) {
            setRowId(other.getRowId());
          }
          if (other.hasOriginalSurchargeValue()) {
            mergeOriginalSurchargeValue(other.getOriginalSurchargeValue());
          }
          if (other.hasOrigSurchValUnitId()) {
            mergeOrigSurchValUnitId(other.getOrigSurchValUnitId());
          }
          if (other.hasOrigSurchValUnitSymbol()) {
            mergeOrigSurchValUnitSymbol(other.getOrigSurchValUnitSymbol());
          }
          if (other.hasAppliedOnNetSum()) {
            mergeAppliedOnNetSum(other.getAppliedOnNetSum());
          }
          if (other.hasTaxesMultiplier()) {
            mergeTaxesMultiplier(other.getTaxesMultiplier());
          }
          if (other.hasAbsoluteNetSurcharge()) {
            mergeAbsoluteNetSurcharge(other.getAbsoluteNetSurcharge());
          }
          if (other.hasPositionNo()) {
            mergePositionNo(other.getPositionNo());
          }
          if (other.hasAppliedOnGrossSum()) {
            mergeAppliedOnGrossSum(other.getAppliedOnGrossSum());
          }
          if (other.hasCurrencyId()) {
            mergeCurrencyId(other.getCurrencyId());
          }
          if (other.hasCurrencySymbol()) {
            mergeCurrencySymbol(other.getCurrencySymbol());
          }
          if (other.hasOrigSurchValIsAbsolute()) {
            mergeOrigSurchValIsAbsolute(other.getOrigSurchValIsAbsolute());
          }
          if (other.hasAbsoluteGrossSurcharge()) {
            mergeAbsoluteGrossSurcharge(other.getAbsoluteGrossSurcharge());
          }
          if (other.hasCategoryDescription()) {
            mergeCategoryDescription(other.getCategoryDescription());
          }
          if (other.hasSurchargeTypeDescription()) {
            mergeSurchargeTypeDescription(other.getSurchargeTypeDescription());
          }
          if (other.hasSurchargeTypeId()) {
            mergeSurchargeTypeId(other.getSurchargeTypeId());
          }
          if (other.hasSurchargeTypeCategoryId()) {
            mergeSurchargeTypeCategoryId(other.getSurchargeTypeCategoryId());
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int rowId_ ;
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public int getRowId() {
          return rowId_;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder setRowId(int value) {
          
          rowId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder clearRowId() {
          
          rowId_ = 0;
          onChanged();
          return this;
        }

        private io.dstore.engine.Values.decimalValue originalSurchargeValue_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> originalSurchargeValueBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
         *
         * <pre>
         * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
         * </pre>
         */
        public boolean hasOriginalSurchargeValue() {
          return originalSurchargeValueBuilder_ != null || originalSurchargeValue_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
         *
         * <pre>
         * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getOriginalSurchargeValue() {
          if (originalSurchargeValueBuilder_ == null) {
            return originalSurchargeValue_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : originalSurchargeValue_;
          } else {
            return originalSurchargeValueBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
         *
         * <pre>
         * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
         * </pre>
         */
        public Builder setOriginalSurchargeValue(io.dstore.engine.Values.decimalValue value) {
          if (originalSurchargeValueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            originalSurchargeValue_ = value;
            onChanged();
          } else {
            originalSurchargeValueBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
         *
         * <pre>
         * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
         * </pre>
         */
        public Builder setOriginalSurchargeValue(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (originalSurchargeValueBuilder_ == null) {
            originalSurchargeValue_ = builderForValue.build();
            onChanged();
          } else {
            originalSurchargeValueBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
         *
         * <pre>
         * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
         * </pre>
         */
        public Builder mergeOriginalSurchargeValue(io.dstore.engine.Values.decimalValue value) {
          if (originalSurchargeValueBuilder_ == null) {
            if (originalSurchargeValue_ != null) {
              originalSurchargeValue_ =
                io.dstore.engine.Values.decimalValue.newBuilder(originalSurchargeValue_).mergeFrom(value).buildPartial();
            } else {
              originalSurchargeValue_ = value;
            }
            onChanged();
          } else {
            originalSurchargeValueBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
         *
         * <pre>
         * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
         * </pre>
         */
        public Builder clearOriginalSurchargeValue() {
          if (originalSurchargeValueBuilder_ == null) {
            originalSurchargeValue_ = null;
            onChanged();
          } else {
            originalSurchargeValue_ = null;
            originalSurchargeValueBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
         *
         * <pre>
         * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getOriginalSurchargeValueBuilder() {
          
          onChanged();
          return getOriginalSurchargeValueFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
         *
         * <pre>
         * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getOriginalSurchargeValueOrBuilder() {
          if (originalSurchargeValueBuilder_ != null) {
            return originalSurchargeValueBuilder_.getMessageOrBuilder();
          } else {
            return originalSurchargeValue_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : originalSurchargeValue_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue original_surcharge_value = 10001;</code>
         *
         * <pre>
         * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getOriginalSurchargeValueFieldBuilder() {
          if (originalSurchargeValueBuilder_ == null) {
            originalSurchargeValueBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getOriginalSurchargeValue(),
                    getParentForChildren(),
                    isClean());
            originalSurchargeValue_ = null;
          }
          return originalSurchargeValueBuilder_;
        }

        private io.dstore.engine.Values.integerValue origSurchValUnitId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> origSurchValUnitIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
         *
         * <pre>
         * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
         * </pre>
         */
        public boolean hasOrigSurchValUnitId() {
          return origSurchValUnitIdBuilder_ != null || origSurchValUnitId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
         *
         * <pre>
         * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getOrigSurchValUnitId() {
          if (origSurchValUnitIdBuilder_ == null) {
            return origSurchValUnitId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : origSurchValUnitId_;
          } else {
            return origSurchValUnitIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
         *
         * <pre>
         * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
         * </pre>
         */
        public Builder setOrigSurchValUnitId(io.dstore.engine.Values.integerValue value) {
          if (origSurchValUnitIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            origSurchValUnitId_ = value;
            onChanged();
          } else {
            origSurchValUnitIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
         *
         * <pre>
         * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
         * </pre>
         */
        public Builder setOrigSurchValUnitId(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (origSurchValUnitIdBuilder_ == null) {
            origSurchValUnitId_ = builderForValue.build();
            onChanged();
          } else {
            origSurchValUnitIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
         *
         * <pre>
         * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
         * </pre>
         */
        public Builder mergeOrigSurchValUnitId(io.dstore.engine.Values.integerValue value) {
          if (origSurchValUnitIdBuilder_ == null) {
            if (origSurchValUnitId_ != null) {
              origSurchValUnitId_ =
                io.dstore.engine.Values.integerValue.newBuilder(origSurchValUnitId_).mergeFrom(value).buildPartial();
            } else {
              origSurchValUnitId_ = value;
            }
            onChanged();
          } else {
            origSurchValUnitIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
         *
         * <pre>
         * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
         * </pre>
         */
        public Builder clearOrigSurchValUnitId() {
          if (origSurchValUnitIdBuilder_ == null) {
            origSurchValUnitId_ = null;
            onChanged();
          } else {
            origSurchValUnitId_ = null;
            origSurchValUnitIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
         *
         * <pre>
         * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getOrigSurchValUnitIdBuilder() {
          
          onChanged();
          return getOrigSurchValUnitIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
         *
         * <pre>
         * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getOrigSurchValUnitIdOrBuilder() {
          if (origSurchValUnitIdBuilder_ != null) {
            return origSurchValUnitIdBuilder_.getMessageOrBuilder();
          } else {
            return origSurchValUnitId_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : origSurchValUnitId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_unit_id = 10002;</code>
         *
         * <pre>
         * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getOrigSurchValUnitIdFieldBuilder() {
          if (origSurchValUnitIdBuilder_ == null) {
            origSurchValUnitIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getOrigSurchValUnitId(),
                    getParentForChildren(),
                    isClean());
            origSurchValUnitId_ = null;
          }
          return origSurchValUnitIdBuilder_;
        }

        private io.dstore.engine.Values.stringValue origSurchValUnitSymbol_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> origSurchValUnitSymbolBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
         *
         * <pre>
         * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
         * </pre>
         */
        public boolean hasOrigSurchValUnitSymbol() {
          return origSurchValUnitSymbolBuilder_ != null || origSurchValUnitSymbol_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
         *
         * <pre>
         * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getOrigSurchValUnitSymbol() {
          if (origSurchValUnitSymbolBuilder_ == null) {
            return origSurchValUnitSymbol_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : origSurchValUnitSymbol_;
          } else {
            return origSurchValUnitSymbolBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
         *
         * <pre>
         * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
         * </pre>
         */
        public Builder setOrigSurchValUnitSymbol(io.dstore.engine.Values.stringValue value) {
          if (origSurchValUnitSymbolBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            origSurchValUnitSymbol_ = value;
            onChanged();
          } else {
            origSurchValUnitSymbolBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
         *
         * <pre>
         * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
         * </pre>
         */
        public Builder setOrigSurchValUnitSymbol(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (origSurchValUnitSymbolBuilder_ == null) {
            origSurchValUnitSymbol_ = builderForValue.build();
            onChanged();
          } else {
            origSurchValUnitSymbolBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
         *
         * <pre>
         * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
         * </pre>
         */
        public Builder mergeOrigSurchValUnitSymbol(io.dstore.engine.Values.stringValue value) {
          if (origSurchValUnitSymbolBuilder_ == null) {
            if (origSurchValUnitSymbol_ != null) {
              origSurchValUnitSymbol_ =
                io.dstore.engine.Values.stringValue.newBuilder(origSurchValUnitSymbol_).mergeFrom(value).buildPartial();
            } else {
              origSurchValUnitSymbol_ = value;
            }
            onChanged();
          } else {
            origSurchValUnitSymbolBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
         *
         * <pre>
         * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
         * </pre>
         */
        public Builder clearOrigSurchValUnitSymbol() {
          if (origSurchValUnitSymbolBuilder_ == null) {
            origSurchValUnitSymbol_ = null;
            onChanged();
          } else {
            origSurchValUnitSymbol_ = null;
            origSurchValUnitSymbolBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
         *
         * <pre>
         * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getOrigSurchValUnitSymbolBuilder() {
          
          onChanged();
          return getOrigSurchValUnitSymbolFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
         *
         * <pre>
         * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getOrigSurchValUnitSymbolOrBuilder() {
          if (origSurchValUnitSymbolBuilder_ != null) {
            return origSurchValUnitSymbolBuilder_.getMessageOrBuilder();
          } else {
            return origSurchValUnitSymbol_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : origSurchValUnitSymbol_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue orig_surch_val_unit_symbol = 10003;</code>
         *
         * <pre>
         * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getOrigSurchValUnitSymbolFieldBuilder() {
          if (origSurchValUnitSymbolBuilder_ == null) {
            origSurchValUnitSymbolBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getOrigSurchValUnitSymbol(),
                    getParentForChildren(),
                    isClean());
            origSurchValUnitSymbol_ = null;
          }
          return origSurchValUnitSymbolBuilder_;
        }

        private io.dstore.engine.Values.decimalValue appliedOnNetSum_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> appliedOnNetSumBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public boolean hasAppliedOnNetSum() {
          return appliedOnNetSumBuilder_ != null || appliedOnNetSum_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getAppliedOnNetSum() {
          if (appliedOnNetSumBuilder_ == null) {
            return appliedOnNetSum_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : appliedOnNetSum_;
          } else {
            return appliedOnNetSumBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public Builder setAppliedOnNetSum(io.dstore.engine.Values.decimalValue value) {
          if (appliedOnNetSumBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            appliedOnNetSum_ = value;
            onChanged();
          } else {
            appliedOnNetSumBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public Builder setAppliedOnNetSum(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (appliedOnNetSumBuilder_ == null) {
            appliedOnNetSum_ = builderForValue.build();
            onChanged();
          } else {
            appliedOnNetSumBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public Builder mergeAppliedOnNetSum(io.dstore.engine.Values.decimalValue value) {
          if (appliedOnNetSumBuilder_ == null) {
            if (appliedOnNetSum_ != null) {
              appliedOnNetSum_ =
                io.dstore.engine.Values.decimalValue.newBuilder(appliedOnNetSum_).mergeFrom(value).buildPartial();
            } else {
              appliedOnNetSum_ = value;
            }
            onChanged();
          } else {
            appliedOnNetSumBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public Builder clearAppliedOnNetSum() {
          if (appliedOnNetSumBuilder_ == null) {
            appliedOnNetSum_ = null;
            onChanged();
          } else {
            appliedOnNetSum_ = null;
            appliedOnNetSumBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getAppliedOnNetSumBuilder() {
          
          onChanged();
          return getAppliedOnNetSumFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getAppliedOnNetSumOrBuilder() {
          if (appliedOnNetSumBuilder_ != null) {
            return appliedOnNetSumBuilder_.getMessageOrBuilder();
          } else {
            return appliedOnNetSum_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : appliedOnNetSum_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_net_sum = 10004;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getAppliedOnNetSumFieldBuilder() {
          if (appliedOnNetSumBuilder_ == null) {
            appliedOnNetSumBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getAppliedOnNetSum(),
                    getParentForChildren(),
                    isClean());
            appliedOnNetSum_ = null;
          }
          return appliedOnNetSumBuilder_;
        }

        private io.dstore.engine.Values.decimalValue taxesMultiplier_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> taxesMultiplierBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
         *
         * <pre>
         * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
         * </pre>
         */
        public boolean hasTaxesMultiplier() {
          return taxesMultiplierBuilder_ != null || taxesMultiplier_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
         *
         * <pre>
         * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getTaxesMultiplier() {
          if (taxesMultiplierBuilder_ == null) {
            return taxesMultiplier_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : taxesMultiplier_;
          } else {
            return taxesMultiplierBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
         *
         * <pre>
         * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
         * </pre>
         */
        public Builder setTaxesMultiplier(io.dstore.engine.Values.decimalValue value) {
          if (taxesMultiplierBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            taxesMultiplier_ = value;
            onChanged();
          } else {
            taxesMultiplierBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
         *
         * <pre>
         * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
         * </pre>
         */
        public Builder setTaxesMultiplier(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (taxesMultiplierBuilder_ == null) {
            taxesMultiplier_ = builderForValue.build();
            onChanged();
          } else {
            taxesMultiplierBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
         *
         * <pre>
         * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
         * </pre>
         */
        public Builder mergeTaxesMultiplier(io.dstore.engine.Values.decimalValue value) {
          if (taxesMultiplierBuilder_ == null) {
            if (taxesMultiplier_ != null) {
              taxesMultiplier_ =
                io.dstore.engine.Values.decimalValue.newBuilder(taxesMultiplier_).mergeFrom(value).buildPartial();
            } else {
              taxesMultiplier_ = value;
            }
            onChanged();
          } else {
            taxesMultiplierBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
         *
         * <pre>
         * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
         * </pre>
         */
        public Builder clearTaxesMultiplier() {
          if (taxesMultiplierBuilder_ == null) {
            taxesMultiplier_ = null;
            onChanged();
          } else {
            taxesMultiplier_ = null;
            taxesMultiplierBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
         *
         * <pre>
         * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getTaxesMultiplierBuilder() {
          
          onChanged();
          return getTaxesMultiplierFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
         *
         * <pre>
         * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getTaxesMultiplierOrBuilder() {
          if (taxesMultiplierBuilder_ != null) {
            return taxesMultiplierBuilder_.getMessageOrBuilder();
          } else {
            return taxesMultiplier_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : taxesMultiplier_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10005;</code>
         *
         * <pre>
         * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getTaxesMultiplierFieldBuilder() {
          if (taxesMultiplierBuilder_ == null) {
            taxesMultiplierBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getTaxesMultiplier(),
                    getParentForChildren(),
                    isClean());
            taxesMultiplier_ = null;
          }
          return taxesMultiplierBuilder_;
        }

        private io.dstore.engine.Values.decimalValue absoluteNetSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> absoluteNetSurchargeBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
         *
         * <pre>
         * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public boolean hasAbsoluteNetSurcharge() {
          return absoluteNetSurchargeBuilder_ != null || absoluteNetSurcharge_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
         *
         * <pre>
         * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getAbsoluteNetSurcharge() {
          if (absoluteNetSurchargeBuilder_ == null) {
            return absoluteNetSurcharge_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : absoluteNetSurcharge_;
          } else {
            return absoluteNetSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
         *
         * <pre>
         * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public Builder setAbsoluteNetSurcharge(io.dstore.engine.Values.decimalValue value) {
          if (absoluteNetSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            absoluteNetSurcharge_ = value;
            onChanged();
          } else {
            absoluteNetSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
         *
         * <pre>
         * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public Builder setAbsoluteNetSurcharge(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (absoluteNetSurchargeBuilder_ == null) {
            absoluteNetSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            absoluteNetSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
         *
         * <pre>
         * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public Builder mergeAbsoluteNetSurcharge(io.dstore.engine.Values.decimalValue value) {
          if (absoluteNetSurchargeBuilder_ == null) {
            if (absoluteNetSurcharge_ != null) {
              absoluteNetSurcharge_ =
                io.dstore.engine.Values.decimalValue.newBuilder(absoluteNetSurcharge_).mergeFrom(value).buildPartial();
            } else {
              absoluteNetSurcharge_ = value;
            }
            onChanged();
          } else {
            absoluteNetSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
         *
         * <pre>
         * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public Builder clearAbsoluteNetSurcharge() {
          if (absoluteNetSurchargeBuilder_ == null) {
            absoluteNetSurcharge_ = null;
            onChanged();
          } else {
            absoluteNetSurcharge_ = null;
            absoluteNetSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
         *
         * <pre>
         * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getAbsoluteNetSurchargeBuilder() {
          
          onChanged();
          return getAbsoluteNetSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
         *
         * <pre>
         * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getAbsoluteNetSurchargeOrBuilder() {
          if (absoluteNetSurchargeBuilder_ != null) {
            return absoluteNetSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return absoluteNetSurcharge_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : absoluteNetSurcharge_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_net_surcharge = 10006;</code>
         *
         * <pre>
         * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getAbsoluteNetSurchargeFieldBuilder() {
          if (absoluteNetSurchargeBuilder_ == null) {
            absoluteNetSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getAbsoluteNetSurcharge(),
                    getParentForChildren(),
                    isClean());
            absoluteNetSurcharge_ = null;
          }
          return absoluteNetSurchargeBuilder_;
        }

        private io.dstore.engine.Values.integerValue positionNo_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> positionNoBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
         *
         * <pre>
         * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
         * </pre>
         */
        public boolean hasPositionNo() {
          return positionNoBuilder_ != null || positionNo_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
         *
         * <pre>
         * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getPositionNo() {
          if (positionNoBuilder_ == null) {
            return positionNo_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : positionNo_;
          } else {
            return positionNoBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
         *
         * <pre>
         * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
         * </pre>
         */
        public Builder setPositionNo(io.dstore.engine.Values.integerValue value) {
          if (positionNoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            positionNo_ = value;
            onChanged();
          } else {
            positionNoBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
         *
         * <pre>
         * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
         * </pre>
         */
        public Builder setPositionNo(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (positionNoBuilder_ == null) {
            positionNo_ = builderForValue.build();
            onChanged();
          } else {
            positionNoBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
         *
         * <pre>
         * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
         * </pre>
         */
        public Builder mergePositionNo(io.dstore.engine.Values.integerValue value) {
          if (positionNoBuilder_ == null) {
            if (positionNo_ != null) {
              positionNo_ =
                io.dstore.engine.Values.integerValue.newBuilder(positionNo_).mergeFrom(value).buildPartial();
            } else {
              positionNo_ = value;
            }
            onChanged();
          } else {
            positionNoBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
         *
         * <pre>
         * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
         * </pre>
         */
        public Builder clearPositionNo() {
          if (positionNoBuilder_ == null) {
            positionNo_ = null;
            onChanged();
          } else {
            positionNo_ = null;
            positionNoBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
         *
         * <pre>
         * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getPositionNoBuilder() {
          
          onChanged();
          return getPositionNoFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
         *
         * <pre>
         * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getPositionNoOrBuilder() {
          if (positionNoBuilder_ != null) {
            return positionNoBuilder_.getMessageOrBuilder();
          } else {
            return positionNo_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : positionNo_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue position_no = 10007;</code>
         *
         * <pre>
         * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getPositionNoFieldBuilder() {
          if (positionNoBuilder_ == null) {
            positionNoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getPositionNo(),
                    getParentForChildren(),
                    isClean());
            positionNo_ = null;
          }
          return positionNoBuilder_;
        }

        private io.dstore.engine.Values.decimalValue appliedOnGrossSum_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> appliedOnGrossSumBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public boolean hasAppliedOnGrossSum() {
          return appliedOnGrossSumBuilder_ != null || appliedOnGrossSum_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getAppliedOnGrossSum() {
          if (appliedOnGrossSumBuilder_ == null) {
            return appliedOnGrossSum_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : appliedOnGrossSum_;
          } else {
            return appliedOnGrossSumBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public Builder setAppliedOnGrossSum(io.dstore.engine.Values.decimalValue value) {
          if (appliedOnGrossSumBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            appliedOnGrossSum_ = value;
            onChanged();
          } else {
            appliedOnGrossSumBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public Builder setAppliedOnGrossSum(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (appliedOnGrossSumBuilder_ == null) {
            appliedOnGrossSum_ = builderForValue.build();
            onChanged();
          } else {
            appliedOnGrossSumBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public Builder mergeAppliedOnGrossSum(io.dstore.engine.Values.decimalValue value) {
          if (appliedOnGrossSumBuilder_ == null) {
            if (appliedOnGrossSum_ != null) {
              appliedOnGrossSum_ =
                io.dstore.engine.Values.decimalValue.newBuilder(appliedOnGrossSum_).mergeFrom(value).buildPartial();
            } else {
              appliedOnGrossSum_ = value;
            }
            onChanged();
          } else {
            appliedOnGrossSumBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public Builder clearAppliedOnGrossSum() {
          if (appliedOnGrossSumBuilder_ == null) {
            appliedOnGrossSum_ = null;
            onChanged();
          } else {
            appliedOnGrossSum_ = null;
            appliedOnGrossSumBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getAppliedOnGrossSumBuilder() {
          
          onChanged();
          return getAppliedOnGrossSumFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getAppliedOnGrossSumOrBuilder() {
          if (appliedOnGrossSumBuilder_ != null) {
            return appliedOnGrossSumBuilder_.getMessageOrBuilder();
          } else {
            return appliedOnGrossSum_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : appliedOnGrossSum_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue applied_on_gross_sum = 10008;</code>
         *
         * <pre>
         * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getAppliedOnGrossSumFieldBuilder() {
          if (appliedOnGrossSumBuilder_ == null) {
            appliedOnGrossSumBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getAppliedOnGrossSum(),
                    getParentForChildren(),
                    isClean());
            appliedOnGrossSum_ = null;
          }
          return appliedOnGrossSumBuilder_;
        }

        private io.dstore.engine.Values.integerValue currencyId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> currencyIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
         *
         * <pre>
         * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
         * </pre>
         */
        public boolean hasCurrencyId() {
          return currencyIdBuilder_ != null || currencyId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
         *
         * <pre>
         * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getCurrencyId() {
          if (currencyIdBuilder_ == null) {
            return currencyId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : currencyId_;
          } else {
            return currencyIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
         *
         * <pre>
         * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
         * </pre>
         */
        public Builder setCurrencyId(io.dstore.engine.Values.integerValue value) {
          if (currencyIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            currencyId_ = value;
            onChanged();
          } else {
            currencyIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
         *
         * <pre>
         * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
         * </pre>
         */
        public Builder setCurrencyId(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (currencyIdBuilder_ == null) {
            currencyId_ = builderForValue.build();
            onChanged();
          } else {
            currencyIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
         *
         * <pre>
         * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
         * </pre>
         */
        public Builder mergeCurrencyId(io.dstore.engine.Values.integerValue value) {
          if (currencyIdBuilder_ == null) {
            if (currencyId_ != null) {
              currencyId_ =
                io.dstore.engine.Values.integerValue.newBuilder(currencyId_).mergeFrom(value).buildPartial();
            } else {
              currencyId_ = value;
            }
            onChanged();
          } else {
            currencyIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
         *
         * <pre>
         * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
         * </pre>
         */
        public Builder clearCurrencyId() {
          if (currencyIdBuilder_ == null) {
            currencyId_ = null;
            onChanged();
          } else {
            currencyId_ = null;
            currencyIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
         *
         * <pre>
         * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getCurrencyIdBuilder() {
          
          onChanged();
          return getCurrencyIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
         *
         * <pre>
         * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getCurrencyIdOrBuilder() {
          if (currencyIdBuilder_ != null) {
            return currencyIdBuilder_.getMessageOrBuilder();
          } else {
            return currencyId_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : currencyId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue currency_id = 10009;</code>
         *
         * <pre>
         * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getCurrencyIdFieldBuilder() {
          if (currencyIdBuilder_ == null) {
            currencyIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getCurrencyId(),
                    getParentForChildren(),
                    isClean());
            currencyId_ = null;
          }
          return currencyIdBuilder_;
        }

        private io.dstore.engine.Values.stringValue currencySymbol_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> currencySymbolBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
         *
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
         * </pre>
         */
        public boolean hasCurrencySymbol() {
          return currencySymbolBuilder_ != null || currencySymbol_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
         *
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getCurrencySymbol() {
          if (currencySymbolBuilder_ == null) {
            return currencySymbol_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : currencySymbol_;
          } else {
            return currencySymbolBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
         *
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
         * </pre>
         */
        public Builder setCurrencySymbol(io.dstore.engine.Values.stringValue value) {
          if (currencySymbolBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            currencySymbol_ = value;
            onChanged();
          } else {
            currencySymbolBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
         *
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
         * </pre>
         */
        public Builder setCurrencySymbol(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (currencySymbolBuilder_ == null) {
            currencySymbol_ = builderForValue.build();
            onChanged();
          } else {
            currencySymbolBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
         *
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
         * </pre>
         */
        public Builder mergeCurrencySymbol(io.dstore.engine.Values.stringValue value) {
          if (currencySymbolBuilder_ == null) {
            if (currencySymbol_ != null) {
              currencySymbol_ =
                io.dstore.engine.Values.stringValue.newBuilder(currencySymbol_).mergeFrom(value).buildPartial();
            } else {
              currencySymbol_ = value;
            }
            onChanged();
          } else {
            currencySymbolBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
         *
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
         * </pre>
         */
        public Builder clearCurrencySymbol() {
          if (currencySymbolBuilder_ == null) {
            currencySymbol_ = null;
            onChanged();
          } else {
            currencySymbol_ = null;
            currencySymbolBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
         *
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getCurrencySymbolBuilder() {
          
          onChanged();
          return getCurrencySymbolFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
         *
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getCurrencySymbolOrBuilder() {
          if (currencySymbolBuilder_ != null) {
            return currencySymbolBuilder_.getMessageOrBuilder();
          } else {
            return currencySymbol_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : currencySymbol_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue currency_symbol = 10010;</code>
         *
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getCurrencySymbolFieldBuilder() {
          if (currencySymbolBuilder_ == null) {
            currencySymbolBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getCurrencySymbol(),
                    getParentForChildren(),
                    isClean());
            currencySymbol_ = null;
          }
          return currencySymbolBuilder_;
        }

        private io.dstore.engine.Values.integerValue origSurchValIsAbsolute_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> origSurchValIsAbsoluteBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
         *
         * <pre>
         * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
         * </pre>
         */
        public boolean hasOrigSurchValIsAbsolute() {
          return origSurchValIsAbsoluteBuilder_ != null || origSurchValIsAbsolute_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
         *
         * <pre>
         * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getOrigSurchValIsAbsolute() {
          if (origSurchValIsAbsoluteBuilder_ == null) {
            return origSurchValIsAbsolute_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : origSurchValIsAbsolute_;
          } else {
            return origSurchValIsAbsoluteBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
         *
         * <pre>
         * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
         * </pre>
         */
        public Builder setOrigSurchValIsAbsolute(io.dstore.engine.Values.integerValue value) {
          if (origSurchValIsAbsoluteBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            origSurchValIsAbsolute_ = value;
            onChanged();
          } else {
            origSurchValIsAbsoluteBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
         *
         * <pre>
         * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
         * </pre>
         */
        public Builder setOrigSurchValIsAbsolute(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (origSurchValIsAbsoluteBuilder_ == null) {
            origSurchValIsAbsolute_ = builderForValue.build();
            onChanged();
          } else {
            origSurchValIsAbsoluteBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
         *
         * <pre>
         * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
         * </pre>
         */
        public Builder mergeOrigSurchValIsAbsolute(io.dstore.engine.Values.integerValue value) {
          if (origSurchValIsAbsoluteBuilder_ == null) {
            if (origSurchValIsAbsolute_ != null) {
              origSurchValIsAbsolute_ =
                io.dstore.engine.Values.integerValue.newBuilder(origSurchValIsAbsolute_).mergeFrom(value).buildPartial();
            } else {
              origSurchValIsAbsolute_ = value;
            }
            onChanged();
          } else {
            origSurchValIsAbsoluteBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
         *
         * <pre>
         * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
         * </pre>
         */
        public Builder clearOrigSurchValIsAbsolute() {
          if (origSurchValIsAbsoluteBuilder_ == null) {
            origSurchValIsAbsolute_ = null;
            onChanged();
          } else {
            origSurchValIsAbsolute_ = null;
            origSurchValIsAbsoluteBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
         *
         * <pre>
         * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getOrigSurchValIsAbsoluteBuilder() {
          
          onChanged();
          return getOrigSurchValIsAbsoluteFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
         *
         * <pre>
         * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getOrigSurchValIsAbsoluteOrBuilder() {
          if (origSurchValIsAbsoluteBuilder_ != null) {
            return origSurchValIsAbsoluteBuilder_.getMessageOrBuilder();
          } else {
            return origSurchValIsAbsolute_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : origSurchValIsAbsolute_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue orig_surch_val_is_absolute = 10011;</code>
         *
         * <pre>
         * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getOrigSurchValIsAbsoluteFieldBuilder() {
          if (origSurchValIsAbsoluteBuilder_ == null) {
            origSurchValIsAbsoluteBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getOrigSurchValIsAbsolute(),
                    getParentForChildren(),
                    isClean());
            origSurchValIsAbsolute_ = null;
          }
          return origSurchValIsAbsoluteBuilder_;
        }

        private io.dstore.engine.Values.decimalValue absoluteGrossSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> absoluteGrossSurchargeBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
         *
         * <pre>
         * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public boolean hasAbsoluteGrossSurcharge() {
          return absoluteGrossSurchargeBuilder_ != null || absoluteGrossSurcharge_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
         *
         * <pre>
         * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getAbsoluteGrossSurcharge() {
          if (absoluteGrossSurchargeBuilder_ == null) {
            return absoluteGrossSurcharge_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : absoluteGrossSurcharge_;
          } else {
            return absoluteGrossSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
         *
         * <pre>
         * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public Builder setAbsoluteGrossSurcharge(io.dstore.engine.Values.decimalValue value) {
          if (absoluteGrossSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            absoluteGrossSurcharge_ = value;
            onChanged();
          } else {
            absoluteGrossSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
         *
         * <pre>
         * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public Builder setAbsoluteGrossSurcharge(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (absoluteGrossSurchargeBuilder_ == null) {
            absoluteGrossSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            absoluteGrossSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
         *
         * <pre>
         * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public Builder mergeAbsoluteGrossSurcharge(io.dstore.engine.Values.decimalValue value) {
          if (absoluteGrossSurchargeBuilder_ == null) {
            if (absoluteGrossSurcharge_ != null) {
              absoluteGrossSurcharge_ =
                io.dstore.engine.Values.decimalValue.newBuilder(absoluteGrossSurcharge_).mergeFrom(value).buildPartial();
            } else {
              absoluteGrossSurcharge_ = value;
            }
            onChanged();
          } else {
            absoluteGrossSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
         *
         * <pre>
         * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public Builder clearAbsoluteGrossSurcharge() {
          if (absoluteGrossSurchargeBuilder_ == null) {
            absoluteGrossSurcharge_ = null;
            onChanged();
          } else {
            absoluteGrossSurcharge_ = null;
            absoluteGrossSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
         *
         * <pre>
         * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getAbsoluteGrossSurchargeBuilder() {
          
          onChanged();
          return getAbsoluteGrossSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
         *
         * <pre>
         * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getAbsoluteGrossSurchargeOrBuilder() {
          if (absoluteGrossSurchargeBuilder_ != null) {
            return absoluteGrossSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return absoluteGrossSurcharge_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : absoluteGrossSurcharge_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue absolute_gross_surcharge = 10012;</code>
         *
         * <pre>
         * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getAbsoluteGrossSurchargeFieldBuilder() {
          if (absoluteGrossSurchargeBuilder_ == null) {
            absoluteGrossSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getAbsoluteGrossSurcharge(),
                    getParentForChildren(),
                    isClean());
            absoluteGrossSurcharge_ = null;
          }
          return absoluteGrossSurchargeBuilder_;
        }

        private io.dstore.engine.Values.stringValue categoryDescription_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> categoryDescriptionBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
         *
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         */
        public boolean hasCategoryDescription() {
          return categoryDescriptionBuilder_ != null || categoryDescription_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
         *
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getCategoryDescription() {
          if (categoryDescriptionBuilder_ == null) {
            return categoryDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : categoryDescription_;
          } else {
            return categoryDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
         *
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         */
        public Builder setCategoryDescription(io.dstore.engine.Values.stringValue value) {
          if (categoryDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            categoryDescription_ = value;
            onChanged();
          } else {
            categoryDescriptionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
         *
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         */
        public Builder setCategoryDescription(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (categoryDescriptionBuilder_ == null) {
            categoryDescription_ = builderForValue.build();
            onChanged();
          } else {
            categoryDescriptionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
         *
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         */
        public Builder mergeCategoryDescription(io.dstore.engine.Values.stringValue value) {
          if (categoryDescriptionBuilder_ == null) {
            if (categoryDescription_ != null) {
              categoryDescription_ =
                io.dstore.engine.Values.stringValue.newBuilder(categoryDescription_).mergeFrom(value).buildPartial();
            } else {
              categoryDescription_ = value;
            }
            onChanged();
          } else {
            categoryDescriptionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
         *
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         */
        public Builder clearCategoryDescription() {
          if (categoryDescriptionBuilder_ == null) {
            categoryDescription_ = null;
            onChanged();
          } else {
            categoryDescription_ = null;
            categoryDescriptionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
         *
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getCategoryDescriptionBuilder() {
          
          onChanged();
          return getCategoryDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
         *
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getCategoryDescriptionOrBuilder() {
          if (categoryDescriptionBuilder_ != null) {
            return categoryDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return categoryDescription_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : categoryDescription_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue category_description = 10013;</code>
         *
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getCategoryDescriptionFieldBuilder() {
          if (categoryDescriptionBuilder_ == null) {
            categoryDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getCategoryDescription(),
                    getParentForChildren(),
                    isClean());
            categoryDescription_ = null;
          }
          return categoryDescriptionBuilder_;
        }

        private io.dstore.engine.Values.stringValue surchargeTypeDescription_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> surchargeTypeDescriptionBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
         *
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         */
        public boolean hasSurchargeTypeDescription() {
          return surchargeTypeDescriptionBuilder_ != null || surchargeTypeDescription_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
         *
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getSurchargeTypeDescription() {
          if (surchargeTypeDescriptionBuilder_ == null) {
            return surchargeTypeDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : surchargeTypeDescription_;
          } else {
            return surchargeTypeDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
         *
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         */
        public Builder setSurchargeTypeDescription(io.dstore.engine.Values.stringValue value) {
          if (surchargeTypeDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            surchargeTypeDescription_ = value;
            onChanged();
          } else {
            surchargeTypeDescriptionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
         *
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         */
        public Builder setSurchargeTypeDescription(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (surchargeTypeDescriptionBuilder_ == null) {
            surchargeTypeDescription_ = builderForValue.build();
            onChanged();
          } else {
            surchargeTypeDescriptionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
         *
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         */
        public Builder mergeSurchargeTypeDescription(io.dstore.engine.Values.stringValue value) {
          if (surchargeTypeDescriptionBuilder_ == null) {
            if (surchargeTypeDescription_ != null) {
              surchargeTypeDescription_ =
                io.dstore.engine.Values.stringValue.newBuilder(surchargeTypeDescription_).mergeFrom(value).buildPartial();
            } else {
              surchargeTypeDescription_ = value;
            }
            onChanged();
          } else {
            surchargeTypeDescriptionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
         *
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         */
        public Builder clearSurchargeTypeDescription() {
          if (surchargeTypeDescriptionBuilder_ == null) {
            surchargeTypeDescription_ = null;
            onChanged();
          } else {
            surchargeTypeDescription_ = null;
            surchargeTypeDescriptionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
         *
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getSurchargeTypeDescriptionBuilder() {
          
          onChanged();
          return getSurchargeTypeDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
         *
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getSurchargeTypeDescriptionOrBuilder() {
          if (surchargeTypeDescriptionBuilder_ != null) {
            return surchargeTypeDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return surchargeTypeDescription_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : surchargeTypeDescription_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue surcharge_type_description = 10014;</code>
         *
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getSurchargeTypeDescriptionFieldBuilder() {
          if (surchargeTypeDescriptionBuilder_ == null) {
            surchargeTypeDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getSurchargeTypeDescription(),
                    getParentForChildren(),
                    isClean());
            surchargeTypeDescription_ = null;
          }
          return surchargeTypeDescriptionBuilder_;
        }

        private io.dstore.engine.Values.integerValue surchargeTypeId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> surchargeTypeIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
         *
         * <pre>
         * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         */
        public boolean hasSurchargeTypeId() {
          return surchargeTypeIdBuilder_ != null || surchargeTypeId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
         *
         * <pre>
         * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getSurchargeTypeId() {
          if (surchargeTypeIdBuilder_ == null) {
            return surchargeTypeId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : surchargeTypeId_;
          } else {
            return surchargeTypeIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
         *
         * <pre>
         * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         */
        public Builder setSurchargeTypeId(io.dstore.engine.Values.integerValue value) {
          if (surchargeTypeIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            surchargeTypeId_ = value;
            onChanged();
          } else {
            surchargeTypeIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
         *
         * <pre>
         * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         */
        public Builder setSurchargeTypeId(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeId_ = builderForValue.build();
            onChanged();
          } else {
            surchargeTypeIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
         *
         * <pre>
         * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         */
        public Builder mergeSurchargeTypeId(io.dstore.engine.Values.integerValue value) {
          if (surchargeTypeIdBuilder_ == null) {
            if (surchargeTypeId_ != null) {
              surchargeTypeId_ =
                io.dstore.engine.Values.integerValue.newBuilder(surchargeTypeId_).mergeFrom(value).buildPartial();
            } else {
              surchargeTypeId_ = value;
            }
            onChanged();
          } else {
            surchargeTypeIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
         *
         * <pre>
         * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         */
        public Builder clearSurchargeTypeId() {
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeId_ = null;
            onChanged();
          } else {
            surchargeTypeId_ = null;
            surchargeTypeIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
         *
         * <pre>
         * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getSurchargeTypeIdBuilder() {
          
          onChanged();
          return getSurchargeTypeIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
         *
         * <pre>
         * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getSurchargeTypeIdOrBuilder() {
          if (surchargeTypeIdBuilder_ != null) {
            return surchargeTypeIdBuilder_.getMessageOrBuilder();
          } else {
            return surchargeTypeId_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : surchargeTypeId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_id = 10015;</code>
         *
         * <pre>
         * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getSurchargeTypeIdFieldBuilder() {
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getSurchargeTypeId(),
                    getParentForChildren(),
                    isClean());
            surchargeTypeId_ = null;
          }
          return surchargeTypeIdBuilder_;
        }

        private io.dstore.engine.Values.integerValue surchargeTypeCategoryId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> surchargeTypeCategoryIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
         *
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         */
        public boolean hasSurchargeTypeCategoryId() {
          return surchargeTypeCategoryIdBuilder_ != null || surchargeTypeCategoryId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
         *
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getSurchargeTypeCategoryId() {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            return surchargeTypeCategoryId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : surchargeTypeCategoryId_;
          } else {
            return surchargeTypeCategoryIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
         *
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         */
        public Builder setSurchargeTypeCategoryId(io.dstore.engine.Values.integerValue value) {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            surchargeTypeCategoryId_ = value;
            onChanged();
          } else {
            surchargeTypeCategoryIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
         *
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         */
        public Builder setSurchargeTypeCategoryId(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            surchargeTypeCategoryId_ = builderForValue.build();
            onChanged();
          } else {
            surchargeTypeCategoryIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
         *
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         */
        public Builder mergeSurchargeTypeCategoryId(io.dstore.engine.Values.integerValue value) {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            if (surchargeTypeCategoryId_ != null) {
              surchargeTypeCategoryId_ =
                io.dstore.engine.Values.integerValue.newBuilder(surchargeTypeCategoryId_).mergeFrom(value).buildPartial();
            } else {
              surchargeTypeCategoryId_ = value;
            }
            onChanged();
          } else {
            surchargeTypeCategoryIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
         *
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         */
        public Builder clearSurchargeTypeCategoryId() {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            surchargeTypeCategoryId_ = null;
            onChanged();
          } else {
            surchargeTypeCategoryId_ = null;
            surchargeTypeCategoryIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
         *
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getSurchargeTypeCategoryIdBuilder() {
          
          onChanged();
          return getSurchargeTypeCategoryIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
         *
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getSurchargeTypeCategoryIdOrBuilder() {
          if (surchargeTypeCategoryIdBuilder_ != null) {
            return surchargeTypeCategoryIdBuilder_.getMessageOrBuilder();
          } else {
            return surchargeTypeCategoryId_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : surchargeTypeCategoryId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue surcharge_type_category_id = 10016;</code>
         *
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getSurchargeTypeCategoryIdFieldBuilder() {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            surchargeTypeCategoryIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getSurchargeTypeCategoryId(),
                    getParentForChildren(),
                    isClean());
            surchargeTypeCategoryId_ = null;
          }
          return surchargeTypeCategoryIdBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetOrderSurcharges_Ad.Response.Row)
      }

      // @@protoc_insertion_point(class_scope:dstore.engine.om_GetOrderSurcharges_Ad.Response.Row)
      private static final io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row();
      }

      public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      public static final com.google.protobuf.Parser<Row> PARSER =
          new com.google.protobuf.AbstractParser<Row>() {
        public Row parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new Row(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<Row> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Row> getParserForType() {
        return PARSER;
      }

      public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int ERROR_FIELD_NUMBER = 1;
    private io.dstore.engine.EngineError.Error error_;
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public boolean hasError() {
      return error_ != null;
    }
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public io.dstore.engine.EngineError.Error getError() {
      return error_ == null ? io.dstore.engine.EngineError.Error.getDefaultInstance() : error_;
    }
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public io.dstore.engine.EngineError.ErrorOrBuilder getErrorOrBuilder() {
      return getError();
    }

    public static final int MESSAGE_FIELD_NUMBER = 3;
    private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_;
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public int getMessageCount() {
      return message_.size();
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
      return message_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index) {
      return message_.get(index);
    }

    public static final int ROW_FIELD_NUMBER = 4;
    private java.util.List<io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row> row_;
    /**
     * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public java.util.List<io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row> getRowList() {
      return row_;
    }
    /**
     * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public java.util.List<? extends io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.RowOrBuilder> 
        getRowOrBuilderList() {
      return row_;
    }
    /**
     * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public int getRowCount() {
      return row_.size();
    }
    /**
     * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row getRow(int index) {
      return row_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.RowOrBuilder getRowOrBuilder(
        int index) {
      return row_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (error_ != null) {
        output.writeMessage(1, getError());
      }
      for (int i = 0; i < message_.size(); i++) {
        output.writeMessage(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        output.writeMessage(4, row_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (error_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getError());
      }
      for (int i = 0; i < message_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, row_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procs.OmGetOrderSurchargesAd.Response prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetOrderSurcharges_Ad.Response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetOrderSurcharges_Ad.Response)
        io.dstore.engine.procs.OmGetOrderSurchargesAd.ResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.class, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Builder.class);
      }

      // Construct using io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMessageFieldBuilder();
          getRowFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (errorBuilder_ == null) {
          error_ = null;
        } else {
          error_ = null;
          errorBuilder_ = null;
        }
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          messageBuilder_.clear();
        }
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          rowBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procs.OmGetOrderSurchargesAd.internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_descriptor;
      }

      public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response getDefaultInstanceForType() {
        return io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.getDefaultInstance();
      }

      public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response build() {
        io.dstore.engine.procs.OmGetOrderSurchargesAd.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response buildPartial() {
        io.dstore.engine.procs.OmGetOrderSurchargesAd.Response result = new io.dstore.engine.procs.OmGetOrderSurchargesAd.Response(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (errorBuilder_ == null) {
          result.error_ = error_;
        } else {
          result.error_ = errorBuilder_.build();
        }
        if (messageBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            message_ = java.util.Collections.unmodifiableList(message_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.message_ = message_;
        } else {
          result.message_ = messageBuilder_.build();
        }
        if (rowBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            row_ = java.util.Collections.unmodifiableList(row_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.row_ = row_;
        } else {
          result.row_ = rowBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procs.OmGetOrderSurchargesAd.Response) {
          return mergeFrom((io.dstore.engine.procs.OmGetOrderSurchargesAd.Response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procs.OmGetOrderSurchargesAd.Response other) {
        if (other == io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.getDefaultInstance()) return this;
        if (other.hasError()) {
          mergeError(other.getError());
        }
        if (messageBuilder_ == null) {
          if (!other.message_.isEmpty()) {
            if (message_.isEmpty()) {
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMessageIsMutable();
              message_.addAll(other.message_);
            }
            onChanged();
          }
        } else {
          if (!other.message_.isEmpty()) {
            if (messageBuilder_.isEmpty()) {
              messageBuilder_.dispose();
              messageBuilder_ = null;
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
              messageBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMessageFieldBuilder() : null;
            } else {
              messageBuilder_.addAllMessages(other.message_);
            }
          }
        }
        if (rowBuilder_ == null) {
          if (!other.row_.isEmpty()) {
            if (row_.isEmpty()) {
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureRowIsMutable();
              row_.addAll(other.row_);
            }
            onChanged();
          }
        } else {
          if (!other.row_.isEmpty()) {
            if (rowBuilder_.isEmpty()) {
              rowBuilder_.dispose();
              rowBuilder_ = null;
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
              rowBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRowFieldBuilder() : null;
            } else {
              rowBuilder_.addAllMessages(other.row_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procs.OmGetOrderSurchargesAd.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procs.OmGetOrderSurchargesAd.Response) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private io.dstore.engine.EngineError.Error error_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.EngineError.Error, io.dstore.engine.EngineError.Error.Builder, io.dstore.engine.EngineError.ErrorOrBuilder> errorBuilder_;
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public boolean hasError() {
        return errorBuilder_ != null || error_ != null;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.EngineError.Error getError() {
        if (errorBuilder_ == null) {
          return error_ == null ? io.dstore.engine.EngineError.Error.getDefaultInstance() : error_;
        } else {
          return errorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder setError(io.dstore.engine.EngineError.Error value) {
        if (errorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          error_ = value;
          onChanged();
        } else {
          errorBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder setError(
          io.dstore.engine.EngineError.Error.Builder builderForValue) {
        if (errorBuilder_ == null) {
          error_ = builderForValue.build();
          onChanged();
        } else {
          errorBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder mergeError(io.dstore.engine.EngineError.Error value) {
        if (errorBuilder_ == null) {
          if (error_ != null) {
            error_ =
              io.dstore.engine.EngineError.Error.newBuilder(error_).mergeFrom(value).buildPartial();
          } else {
            error_ = value;
          }
          onChanged();
        } else {
          errorBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder clearError() {
        if (errorBuilder_ == null) {
          error_ = null;
          onChanged();
        } else {
          error_ = null;
          errorBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.EngineError.Error.Builder getErrorBuilder() {
        
        onChanged();
        return getErrorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.EngineError.ErrorOrBuilder getErrorOrBuilder() {
        if (errorBuilder_ != null) {
          return errorBuilder_.getMessageOrBuilder();
        } else {
          return error_ == null ?
              io.dstore.engine.EngineError.Error.getDefaultInstance() : error_;
        }
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.EngineError.Error, io.dstore.engine.EngineError.Error.Builder, io.dstore.engine.EngineError.ErrorOrBuilder> 
          getErrorFieldBuilder() {
        if (errorBuilder_ == null) {
          errorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.EngineError.Error, io.dstore.engine.EngineError.Error.Builder, io.dstore.engine.EngineError.ErrorOrBuilder>(
                  getError(),
                  getParentForChildren(),
                  isClean());
          error_ = null;
        }
        return errorBuilder_;
      }

      private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_ =
        java.util.Collections.emptyList();
      private void ensureMessageIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>(message_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> messageBuilder_;

      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
        if (messageBuilder_ == null) {
          return java.util.Collections.unmodifiableList(message_);
        } else {
          return messageBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public int getMessageCount() {
        if (messageBuilder_ == null) {
          return message_.size();
        } else {
          return messageBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);
        } else {
          return messageBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.set(index, value);
          onChanged();
        } else {
          messageBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.set(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(value);
          onChanged();
        } else {
          messageBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(index, value);
          onChanged();
        } else {
          messageBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addAllMessage(
          java.lang.Iterable<? extends io.dstore.engine.ProcedureMessage.Message> values) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, message_);
          onChanged();
        } else {
          messageBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder clearMessage() {
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          messageBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder removeMessage(int index) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.remove(index);
          onChanged();
        } else {
          messageBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder getMessageBuilder(
          int index) {
        return getMessageFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
          int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);  } else {
          return messageBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
           getMessageOrBuilderList() {
        if (messageBuilder_ != null) {
          return messageBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(message_);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder() {
        return getMessageFieldBuilder().addBuilder(
            io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder(
          int index) {
        return getMessageFieldBuilder().addBuilder(
            index, io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message.Builder> 
           getMessageBuilderList() {
        return getMessageFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
          getMessageFieldBuilder() {
        if (messageBuilder_ == null) {
          messageBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder>(
                  message_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        return messageBuilder_;
      }

      private java.util.List<io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row> row_ =
        java.util.Collections.emptyList();
      private void ensureRowIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = new java.util.ArrayList<io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row>(row_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.Builder, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.RowOrBuilder> rowBuilder_;

      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row> getRowList() {
        if (rowBuilder_ == null) {
          return java.util.Collections.unmodifiableList(row_);
        } else {
          return rowBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public int getRowCount() {
        if (rowBuilder_ == null) {
          return row_.size();
        } else {
          return rowBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row getRow(int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);
        } else {
          return rowBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder setRow(
          int index, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.set(index, value);
          onChanged();
        } else {
          rowBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder setRow(
          int index, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.set(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(value);
          onChanged();
        } else {
          rowBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          int index, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(index, value);
          onChanged();
        } else {
          rowBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          int index, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addAllRow(
          java.lang.Iterable<? extends io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row> values) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, row_);
          onChanged();
        } else {
          rowBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder clearRow() {
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          rowBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder removeRow(int index) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.remove(index);
          onChanged();
        } else {
          rowBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.Builder getRowBuilder(
          int index) {
        return getRowFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.RowOrBuilder getRowOrBuilder(
          int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);  } else {
          return rowBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<? extends io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.RowOrBuilder> 
           getRowOrBuilderList() {
        if (rowBuilder_ != null) {
          return rowBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(row_);
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.Builder addRowBuilder() {
        return getRowFieldBuilder().addBuilder(
            io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.Builder addRowBuilder(
          int index) {
        return getRowFieldBuilder().addBuilder(
            index, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.om_GetOrderSurcharges_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.Builder> 
           getRowBuilderList() {
        return getRowFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.Builder, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.RowOrBuilder> 
          getRowFieldBuilder() {
        if (rowBuilder_ == null) {
          rowBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.Row.Builder, io.dstore.engine.procs.OmGetOrderSurchargesAd.Response.RowOrBuilder>(
                  row_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          row_ = null;
        }
        return rowBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetOrderSurcharges_Ad.Response)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.om_GetOrderSurcharges_Ad.Response)
    private static final io.dstore.engine.procs.OmGetOrderSurchargesAd.Response DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procs.OmGetOrderSurchargesAd.Response();
    }

    public static io.dstore.engine.procs.OmGetOrderSurchargesAd.Response getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    public static final com.google.protobuf.Parser<Response> PARSER =
        new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Response(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Response> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procs.OmGetOrderSurchargesAd.Response getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Parameters_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Parameters_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_Row_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_Row_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n7dstore/engine/procedures/om_GetOrderSu" +
      "rcharges_Ad.proto\022&dstore.engine.om_GetO" +
      "rderSurcharges_Ad\032\032dstore/engine/values." +
      "proto\032\031dstore/engine/error.proto\032\033dstore" +
      "/engine/message.proto\"\264\001\n\nParameters\0224\n\010" +
      "order_id\030\001 \001(\0132\".dstore.engine.values.in" +
      "tegerValue\022\026\n\rorder_id_null\030\351\007 \001(\010\022:\n\016sp" +
      "lit_by_taxes\030\002 \001(\0132\".dstore.engine.value" +
      "s.integerValue\022\034\n\023split_by_taxes_null\030\352\007" +
      " \001(\010\"\362\t\n\010Response\022)\n\005error\030\001 \001(\0132\032.dstor",
      "e.engine.error.Error\022/\n\007message\030\003 \003(\0132\036." +
      "dstore.engine.message.Message\022A\n\003row\030\004 \003" +
      "(\01324.dstore.engine.om_GetOrderSurcharges" +
      "_Ad.Response.Row\032\306\010\n\003Row\022\017\n\006row_id\030\220N \001(" +
      "\005\022E\n\030original_surcharge_value\030\221N \001(\0132\".d" +
      "store.engine.values.decimalValue\022C\n\026orig" +
      "_surch_val_unit_id\030\222N \001(\0132\".dstore.engin" +
      "e.values.integerValue\022F\n\032orig_surch_val_" +
      "unit_symbol\030\223N \001(\0132!.dstore.engine.value" +
      "s.stringValue\022?\n\022applied_on_net_sum\030\224N \001",
      "(\0132\".dstore.engine.values.decimalValue\022=" +
      "\n\020taxes_multiplier\030\225N \001(\0132\".dstore.engin" +
      "e.values.decimalValue\022C\n\026absolute_net_su" +
      "rcharge\030\226N \001(\0132\".dstore.engine.values.de" +
      "cimalValue\0228\n\013position_no\030\227N \001(\0132\".dstor" +
      "e.engine.values.integerValue\022A\n\024applied_" +
      "on_gross_sum\030\230N \001(\0132\".dstore.engine.valu" +
      "es.decimalValue\0228\n\013currency_id\030\231N \001(\0132\"." +
      "dstore.engine.values.integerValue\022;\n\017cur" +
      "rency_symbol\030\232N \001(\0132!.dstore.engine.valu",
      "es.stringValue\022G\n\032orig_surch_val_is_abso" +
      "lute\030\233N \001(\0132\".dstore.engine.values.integ" +
      "erValue\022E\n\030absolute_gross_surcharge\030\234N \001" +
      "(\0132\".dstore.engine.values.decimalValue\022@" +
      "\n\024category_description\030\235N \001(\0132!.dstore.e" +
      "ngine.values.stringValue\022F\n\032surcharge_ty" +
      "pe_description\030\236N \001(\0132!.dstore.engine.va" +
      "lues.stringValue\022>\n\021surcharge_type_id\030\237N" +
      " \001(\0132\".dstore.engine.values.integerValue" +
      "\022G\n\032surcharge_type_category_id\030\240N \001(\0132\".",
      "dstore.engine.values.integerValueB\030\n\026io." +
      "dstore.engine.procsb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.dstore.engine.Values.getDescriptor(),
          io.dstore.engine.EngineError.getDescriptor(),
          io.dstore.engine.ProcedureMessage.getDescriptor(),
        }, assigner);
    internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Parameters_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Parameters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Parameters_descriptor,
        new java.lang.String[] { "OrderId", "OrderIdNull", "SplitByTaxes", "SplitByTaxesNull", });
    internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_descriptor,
        new java.lang.String[] { "Error", "Message", "Row", });
    internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_Row_descriptor =
      internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_descriptor.getNestedTypes().get(0);
    internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_Row_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_om_GetOrderSurcharges_Ad_Response_Row_descriptor,
        new java.lang.String[] { "RowId", "OriginalSurchargeValue", "OrigSurchValUnitId", "OrigSurchValUnitSymbol", "AppliedOnNetSum", "TaxesMultiplier", "AbsoluteNetSurcharge", "PositionNo", "AppliedOnGrossSum", "CurrencyId", "CurrencySymbol", "OrigSurchValIsAbsolute", "AbsoluteGrossSurcharge", "CategoryDescription", "SurchargeTypeDescription", "SurchargeTypeId", "SurchargeTypeCategoryId", });
    io.dstore.engine.Values.getDescriptor();
    io.dstore.engine.EngineError.getDescriptor();
    io.dstore.engine.ProcedureMessage.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
