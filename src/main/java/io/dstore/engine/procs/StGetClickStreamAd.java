// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dstore/engine/procedures/st_GetClickStream_Ad.proto

package io.dstore.engine.procs;

public final class StGetClickStreamAd {
  private StGetClickStreamAd() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ParametersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.st_GetClickStream_Ad.Parameters)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
     */
    boolean hasPersonId();
    /**
     * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
     */
    io.dstore.engine.Values.integerValue getPersonId();
    /**
     * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
     */
    io.dstore.engine.Values.integerValueOrBuilder getPersonIdOrBuilder();

    /**
     * <code>optional bool person_id_null = 1001;</code>
     */
    boolean getPersonIdNull();

    /**
     * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
     */
    boolean hasFromDate();
    /**
     * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
     */
    io.dstore.engine.Values.timestampValue getFromDate();
    /**
     * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
     */
    io.dstore.engine.Values.timestampValueOrBuilder getFromDateOrBuilder();

    /**
     * <code>optional bool from_date_null = 1002;</code>
     */
    boolean getFromDateNull();

    /**
     * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
     */
    boolean hasToDate();
    /**
     * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
     */
    io.dstore.engine.Values.timestampValue getToDate();
    /**
     * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
     */
    io.dstore.engine.Values.timestampValueOrBuilder getToDateOrBuilder();

    /**
     * <code>optional bool to_date_null = 1003;</code>
     */
    boolean getToDateNull();

    /**
     * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
     */
    boolean hasVisitorId();
    /**
     * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
     */
    io.dstore.engine.Values.integerValue getVisitorId();
    /**
     * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
     */
    io.dstore.engine.Values.integerValueOrBuilder getVisitorIdOrBuilder();

    /**
     * <code>optional bool visitor_id_null = 1004;</code>
     */
    boolean getVisitorIdNull();

    /**
     * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
     */
    boolean hasVisitorOrPersonIdsInOneId();
    /**
     * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
     */
    io.dstore.engine.Values.integerValue getVisitorOrPersonIdsInOneId();
    /**
     * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
     */
    io.dstore.engine.Values.integerValueOrBuilder getVisitorOrPersonIdsInOneIdOrBuilder();

    /**
     * <code>optional bool visitor_or_person_ids_in_one_id_null = 1005;</code>
     */
    boolean getVisitorOrPersonIdsInOneIdNull();

    /**
     * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
     */
    boolean hasConsiderOnlyRelationPeriod();
    /**
     * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
     */
    io.dstore.engine.Values.booleanValue getConsiderOnlyRelationPeriod();
    /**
     * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
     */
    io.dstore.engine.Values.booleanValueOrBuilder getConsiderOnlyRelationPeriodOrBuilder();

    /**
     * <code>optional bool consider_only_relation_period_null = 1006;</code>
     */
    boolean getConsiderOnlyRelationPeriodNull();

    /**
     * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
     */
    boolean hasBasicCharacteristicNumbers();
    /**
     * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
     */
    io.dstore.engine.Values.stringValue getBasicCharacteristicNumbers();
    /**
     * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
     */
    io.dstore.engine.Values.stringValueOrBuilder getBasicCharacteristicNumbersOrBuilder();

    /**
     * <code>optional bool basic_characteristic_numbers_null = 1007;</code>
     */
    boolean getBasicCharacteristicNumbersNull();
  }
  /**
   * Protobuf type {@code dstore.engine.st_GetClickStream_Ad.Parameters}
   */
  public  static final class Parameters extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.st_GetClickStream_Ad.Parameters)
      ParametersOrBuilder {
    // Use Parameters.newBuilder() to construct.
    private Parameters(com.google.protobuf.GeneratedMessage.Builder builder) {
      super(builder);
    }
    private Parameters() {
      personIdNull_ = false;
      fromDateNull_ = false;
      toDateNull_ = false;
      visitorIdNull_ = false;
      visitorOrPersonIdsInOneIdNull_ = false;
      considerOnlyRelationPeriodNull_ = false;
      basicCharacteristicNumbersNull_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Parameters(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.engine.Values.integerValue.Builder subBuilder = null;
              if (personId_ != null) {
                subBuilder = personId_.toBuilder();
              }
              personId_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(personId_);
                personId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.dstore.engine.Values.timestampValue.Builder subBuilder = null;
              if (fromDate_ != null) {
                subBuilder = fromDate_.toBuilder();
              }
              fromDate_ = input.readMessage(io.dstore.engine.Values.timestampValue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fromDate_);
                fromDate_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.dstore.engine.Values.timestampValue.Builder subBuilder = null;
              if (toDate_ != null) {
                subBuilder = toDate_.toBuilder();
              }
              toDate_ = input.readMessage(io.dstore.engine.Values.timestampValue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(toDate_);
                toDate_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              io.dstore.engine.Values.integerValue.Builder subBuilder = null;
              if (visitorId_ != null) {
                subBuilder = visitorId_.toBuilder();
              }
              visitorId_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(visitorId_);
                visitorId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              io.dstore.engine.Values.integerValue.Builder subBuilder = null;
              if (visitorOrPersonIdsInOneId_ != null) {
                subBuilder = visitorOrPersonIdsInOneId_.toBuilder();
              }
              visitorOrPersonIdsInOneId_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(visitorOrPersonIdsInOneId_);
                visitorOrPersonIdsInOneId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              io.dstore.engine.Values.booleanValue.Builder subBuilder = null;
              if (considerOnlyRelationPeriod_ != null) {
                subBuilder = considerOnlyRelationPeriod_.toBuilder();
              }
              considerOnlyRelationPeriod_ = input.readMessage(io.dstore.engine.Values.booleanValue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(considerOnlyRelationPeriod_);
                considerOnlyRelationPeriod_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              io.dstore.engine.Values.stringValue.Builder subBuilder = null;
              if (basicCharacteristicNumbers_ != null) {
                subBuilder = basicCharacteristicNumbers_.toBuilder();
              }
              basicCharacteristicNumbers_ = input.readMessage(io.dstore.engine.Values.stringValue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(basicCharacteristicNumbers_);
                basicCharacteristicNumbers_ = subBuilder.buildPartial();
              }

              break;
            }
            case 8008: {

              personIdNull_ = input.readBool();
              break;
            }
            case 8016: {

              fromDateNull_ = input.readBool();
              break;
            }
            case 8024: {

              toDateNull_ = input.readBool();
              break;
            }
            case 8032: {

              visitorIdNull_ = input.readBool();
              break;
            }
            case 8040: {

              visitorOrPersonIdsInOneIdNull_ = input.readBool();
              break;
            }
            case 8048: {

              considerOnlyRelationPeriodNull_ = input.readBool();
              break;
            }
            case 8056: {

              basicCharacteristicNumbersNull_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Parameters_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Parameters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procs.StGetClickStreamAd.Parameters.class, io.dstore.engine.procs.StGetClickStreamAd.Parameters.Builder.class);
    }

    public static final int PERSON_ID_FIELD_NUMBER = 1;
    private io.dstore.engine.Values.integerValue personId_;
    /**
     * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
     */
    public boolean hasPersonId() {
      return personId_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
     */
    public io.dstore.engine.Values.integerValue getPersonId() {
      return personId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : personId_;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
     */
    public io.dstore.engine.Values.integerValueOrBuilder getPersonIdOrBuilder() {
      return getPersonId();
    }

    public static final int PERSON_ID_NULL_FIELD_NUMBER = 1001;
    private boolean personIdNull_;
    /**
     * <code>optional bool person_id_null = 1001;</code>
     */
    public boolean getPersonIdNull() {
      return personIdNull_;
    }

    public static final int FROM_DATE_FIELD_NUMBER = 2;
    private io.dstore.engine.Values.timestampValue fromDate_;
    /**
     * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
     */
    public boolean hasFromDate() {
      return fromDate_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
     */
    public io.dstore.engine.Values.timestampValue getFromDate() {
      return fromDate_ == null ? io.dstore.engine.Values.timestampValue.getDefaultInstance() : fromDate_;
    }
    /**
     * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
     */
    public io.dstore.engine.Values.timestampValueOrBuilder getFromDateOrBuilder() {
      return getFromDate();
    }

    public static final int FROM_DATE_NULL_FIELD_NUMBER = 1002;
    private boolean fromDateNull_;
    /**
     * <code>optional bool from_date_null = 1002;</code>
     */
    public boolean getFromDateNull() {
      return fromDateNull_;
    }

    public static final int TO_DATE_FIELD_NUMBER = 3;
    private io.dstore.engine.Values.timestampValue toDate_;
    /**
     * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
     */
    public boolean hasToDate() {
      return toDate_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
     */
    public io.dstore.engine.Values.timestampValue getToDate() {
      return toDate_ == null ? io.dstore.engine.Values.timestampValue.getDefaultInstance() : toDate_;
    }
    /**
     * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
     */
    public io.dstore.engine.Values.timestampValueOrBuilder getToDateOrBuilder() {
      return getToDate();
    }

    public static final int TO_DATE_NULL_FIELD_NUMBER = 1003;
    private boolean toDateNull_;
    /**
     * <code>optional bool to_date_null = 1003;</code>
     */
    public boolean getToDateNull() {
      return toDateNull_;
    }

    public static final int VISITOR_ID_FIELD_NUMBER = 4;
    private io.dstore.engine.Values.integerValue visitorId_;
    /**
     * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
     */
    public boolean hasVisitorId() {
      return visitorId_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
     */
    public io.dstore.engine.Values.integerValue getVisitorId() {
      return visitorId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : visitorId_;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
     */
    public io.dstore.engine.Values.integerValueOrBuilder getVisitorIdOrBuilder() {
      return getVisitorId();
    }

    public static final int VISITOR_ID_NULL_FIELD_NUMBER = 1004;
    private boolean visitorIdNull_;
    /**
     * <code>optional bool visitor_id_null = 1004;</code>
     */
    public boolean getVisitorIdNull() {
      return visitorIdNull_;
    }

    public static final int VISITOR_OR_PERSON_IDS_IN_ONE_ID_FIELD_NUMBER = 5;
    private io.dstore.engine.Values.integerValue visitorOrPersonIdsInOneId_;
    /**
     * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
     */
    public boolean hasVisitorOrPersonIdsInOneId() {
      return visitorOrPersonIdsInOneId_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
     */
    public io.dstore.engine.Values.integerValue getVisitorOrPersonIdsInOneId() {
      return visitorOrPersonIdsInOneId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : visitorOrPersonIdsInOneId_;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
     */
    public io.dstore.engine.Values.integerValueOrBuilder getVisitorOrPersonIdsInOneIdOrBuilder() {
      return getVisitorOrPersonIdsInOneId();
    }

    public static final int VISITOR_OR_PERSON_IDS_IN_ONE_ID_NULL_FIELD_NUMBER = 1005;
    private boolean visitorOrPersonIdsInOneIdNull_;
    /**
     * <code>optional bool visitor_or_person_ids_in_one_id_null = 1005;</code>
     */
    public boolean getVisitorOrPersonIdsInOneIdNull() {
      return visitorOrPersonIdsInOneIdNull_;
    }

    public static final int CONSIDER_ONLY_RELATION_PERIOD_FIELD_NUMBER = 6;
    private io.dstore.engine.Values.booleanValue considerOnlyRelationPeriod_;
    /**
     * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
     */
    public boolean hasConsiderOnlyRelationPeriod() {
      return considerOnlyRelationPeriod_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
     */
    public io.dstore.engine.Values.booleanValue getConsiderOnlyRelationPeriod() {
      return considerOnlyRelationPeriod_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : considerOnlyRelationPeriod_;
    }
    /**
     * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
     */
    public io.dstore.engine.Values.booleanValueOrBuilder getConsiderOnlyRelationPeriodOrBuilder() {
      return getConsiderOnlyRelationPeriod();
    }

    public static final int CONSIDER_ONLY_RELATION_PERIOD_NULL_FIELD_NUMBER = 1006;
    private boolean considerOnlyRelationPeriodNull_;
    /**
     * <code>optional bool consider_only_relation_period_null = 1006;</code>
     */
    public boolean getConsiderOnlyRelationPeriodNull() {
      return considerOnlyRelationPeriodNull_;
    }

    public static final int BASIC_CHARACTERISTIC_NUMBERS_FIELD_NUMBER = 7;
    private io.dstore.engine.Values.stringValue basicCharacteristicNumbers_;
    /**
     * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
     */
    public boolean hasBasicCharacteristicNumbers() {
      return basicCharacteristicNumbers_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
     */
    public io.dstore.engine.Values.stringValue getBasicCharacteristicNumbers() {
      return basicCharacteristicNumbers_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : basicCharacteristicNumbers_;
    }
    /**
     * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
     */
    public io.dstore.engine.Values.stringValueOrBuilder getBasicCharacteristicNumbersOrBuilder() {
      return getBasicCharacteristicNumbers();
    }

    public static final int BASIC_CHARACTERISTIC_NUMBERS_NULL_FIELD_NUMBER = 1007;
    private boolean basicCharacteristicNumbersNull_;
    /**
     * <code>optional bool basic_characteristic_numbers_null = 1007;</code>
     */
    public boolean getBasicCharacteristicNumbersNull() {
      return basicCharacteristicNumbersNull_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (personId_ != null) {
        output.writeMessage(1, getPersonId());
      }
      if (fromDate_ != null) {
        output.writeMessage(2, getFromDate());
      }
      if (toDate_ != null) {
        output.writeMessage(3, getToDate());
      }
      if (visitorId_ != null) {
        output.writeMessage(4, getVisitorId());
      }
      if (visitorOrPersonIdsInOneId_ != null) {
        output.writeMessage(5, getVisitorOrPersonIdsInOneId());
      }
      if (considerOnlyRelationPeriod_ != null) {
        output.writeMessage(6, getConsiderOnlyRelationPeriod());
      }
      if (basicCharacteristicNumbers_ != null) {
        output.writeMessage(7, getBasicCharacteristicNumbers());
      }
      if (personIdNull_ != false) {
        output.writeBool(1001, personIdNull_);
      }
      if (fromDateNull_ != false) {
        output.writeBool(1002, fromDateNull_);
      }
      if (toDateNull_ != false) {
        output.writeBool(1003, toDateNull_);
      }
      if (visitorIdNull_ != false) {
        output.writeBool(1004, visitorIdNull_);
      }
      if (visitorOrPersonIdsInOneIdNull_ != false) {
        output.writeBool(1005, visitorOrPersonIdsInOneIdNull_);
      }
      if (considerOnlyRelationPeriodNull_ != false) {
        output.writeBool(1006, considerOnlyRelationPeriodNull_);
      }
      if (basicCharacteristicNumbersNull_ != false) {
        output.writeBool(1007, basicCharacteristicNumbersNull_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (personId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getPersonId());
      }
      if (fromDate_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getFromDate());
      }
      if (toDate_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getToDate());
      }
      if (visitorId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getVisitorId());
      }
      if (visitorOrPersonIdsInOneId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getVisitorOrPersonIdsInOneId());
      }
      if (considerOnlyRelationPeriod_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getConsiderOnlyRelationPeriod());
      }
      if (basicCharacteristicNumbers_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getBasicCharacteristicNumbers());
      }
      if (personIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1001, personIdNull_);
      }
      if (fromDateNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1002, fromDateNull_);
      }
      if (toDateNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1003, toDateNull_);
      }
      if (visitorIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1004, visitorIdNull_);
      }
      if (visitorOrPersonIdsInOneIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1005, visitorOrPersonIdsInOneIdNull_);
      }
      if (considerOnlyRelationPeriodNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1006, considerOnlyRelationPeriodNull_);
      }
      if (basicCharacteristicNumbersNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1007, basicCharacteristicNumbersNull_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procs.StGetClickStreamAd.Parameters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Parameters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Parameters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Parameters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Parameters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Parameters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Parameters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Parameters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procs.StGetClickStreamAd.Parameters prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.st_GetClickStream_Ad.Parameters}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.st_GetClickStream_Ad.Parameters)
        io.dstore.engine.procs.StGetClickStreamAd.ParametersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Parameters_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Parameters_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.StGetClickStreamAd.Parameters.class, io.dstore.engine.procs.StGetClickStreamAd.Parameters.Builder.class);
      }

      // Construct using io.dstore.engine.procs.StGetClickStreamAd.Parameters.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (personIdBuilder_ == null) {
          personId_ = null;
        } else {
          personId_ = null;
          personIdBuilder_ = null;
        }
        personIdNull_ = false;

        if (fromDateBuilder_ == null) {
          fromDate_ = null;
        } else {
          fromDate_ = null;
          fromDateBuilder_ = null;
        }
        fromDateNull_ = false;

        if (toDateBuilder_ == null) {
          toDate_ = null;
        } else {
          toDate_ = null;
          toDateBuilder_ = null;
        }
        toDateNull_ = false;

        if (visitorIdBuilder_ == null) {
          visitorId_ = null;
        } else {
          visitorId_ = null;
          visitorIdBuilder_ = null;
        }
        visitorIdNull_ = false;

        if (visitorOrPersonIdsInOneIdBuilder_ == null) {
          visitorOrPersonIdsInOneId_ = null;
        } else {
          visitorOrPersonIdsInOneId_ = null;
          visitorOrPersonIdsInOneIdBuilder_ = null;
        }
        visitorOrPersonIdsInOneIdNull_ = false;

        if (considerOnlyRelationPeriodBuilder_ == null) {
          considerOnlyRelationPeriod_ = null;
        } else {
          considerOnlyRelationPeriod_ = null;
          considerOnlyRelationPeriodBuilder_ = null;
        }
        considerOnlyRelationPeriodNull_ = false;

        if (basicCharacteristicNumbersBuilder_ == null) {
          basicCharacteristicNumbers_ = null;
        } else {
          basicCharacteristicNumbers_ = null;
          basicCharacteristicNumbersBuilder_ = null;
        }
        basicCharacteristicNumbersNull_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Parameters_descriptor;
      }

      public io.dstore.engine.procs.StGetClickStreamAd.Parameters getDefaultInstanceForType() {
        return io.dstore.engine.procs.StGetClickStreamAd.Parameters.getDefaultInstance();
      }

      public io.dstore.engine.procs.StGetClickStreamAd.Parameters build() {
        io.dstore.engine.procs.StGetClickStreamAd.Parameters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procs.StGetClickStreamAd.Parameters buildPartial() {
        io.dstore.engine.procs.StGetClickStreamAd.Parameters result = new io.dstore.engine.procs.StGetClickStreamAd.Parameters(this);
        if (personIdBuilder_ == null) {
          result.personId_ = personId_;
        } else {
          result.personId_ = personIdBuilder_.build();
        }
        result.personIdNull_ = personIdNull_;
        if (fromDateBuilder_ == null) {
          result.fromDate_ = fromDate_;
        } else {
          result.fromDate_ = fromDateBuilder_.build();
        }
        result.fromDateNull_ = fromDateNull_;
        if (toDateBuilder_ == null) {
          result.toDate_ = toDate_;
        } else {
          result.toDate_ = toDateBuilder_.build();
        }
        result.toDateNull_ = toDateNull_;
        if (visitorIdBuilder_ == null) {
          result.visitorId_ = visitorId_;
        } else {
          result.visitorId_ = visitorIdBuilder_.build();
        }
        result.visitorIdNull_ = visitorIdNull_;
        if (visitorOrPersonIdsInOneIdBuilder_ == null) {
          result.visitorOrPersonIdsInOneId_ = visitorOrPersonIdsInOneId_;
        } else {
          result.visitorOrPersonIdsInOneId_ = visitorOrPersonIdsInOneIdBuilder_.build();
        }
        result.visitorOrPersonIdsInOneIdNull_ = visitorOrPersonIdsInOneIdNull_;
        if (considerOnlyRelationPeriodBuilder_ == null) {
          result.considerOnlyRelationPeriod_ = considerOnlyRelationPeriod_;
        } else {
          result.considerOnlyRelationPeriod_ = considerOnlyRelationPeriodBuilder_.build();
        }
        result.considerOnlyRelationPeriodNull_ = considerOnlyRelationPeriodNull_;
        if (basicCharacteristicNumbersBuilder_ == null) {
          result.basicCharacteristicNumbers_ = basicCharacteristicNumbers_;
        } else {
          result.basicCharacteristicNumbers_ = basicCharacteristicNumbersBuilder_.build();
        }
        result.basicCharacteristicNumbersNull_ = basicCharacteristicNumbersNull_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procs.StGetClickStreamAd.Parameters) {
          return mergeFrom((io.dstore.engine.procs.StGetClickStreamAd.Parameters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procs.StGetClickStreamAd.Parameters other) {
        if (other == io.dstore.engine.procs.StGetClickStreamAd.Parameters.getDefaultInstance()) return this;
        if (other.hasPersonId()) {
          mergePersonId(other.getPersonId());
        }
        if (other.getPersonIdNull() != false) {
          setPersonIdNull(other.getPersonIdNull());
        }
        if (other.hasFromDate()) {
          mergeFromDate(other.getFromDate());
        }
        if (other.getFromDateNull() != false) {
          setFromDateNull(other.getFromDateNull());
        }
        if (other.hasToDate()) {
          mergeToDate(other.getToDate());
        }
        if (other.getToDateNull() != false) {
          setToDateNull(other.getToDateNull());
        }
        if (other.hasVisitorId()) {
          mergeVisitorId(other.getVisitorId());
        }
        if (other.getVisitorIdNull() != false) {
          setVisitorIdNull(other.getVisitorIdNull());
        }
        if (other.hasVisitorOrPersonIdsInOneId()) {
          mergeVisitorOrPersonIdsInOneId(other.getVisitorOrPersonIdsInOneId());
        }
        if (other.getVisitorOrPersonIdsInOneIdNull() != false) {
          setVisitorOrPersonIdsInOneIdNull(other.getVisitorOrPersonIdsInOneIdNull());
        }
        if (other.hasConsiderOnlyRelationPeriod()) {
          mergeConsiderOnlyRelationPeriod(other.getConsiderOnlyRelationPeriod());
        }
        if (other.getConsiderOnlyRelationPeriodNull() != false) {
          setConsiderOnlyRelationPeriodNull(other.getConsiderOnlyRelationPeriodNull());
        }
        if (other.hasBasicCharacteristicNumbers()) {
          mergeBasicCharacteristicNumbers(other.getBasicCharacteristicNumbers());
        }
        if (other.getBasicCharacteristicNumbersNull() != false) {
          setBasicCharacteristicNumbersNull(other.getBasicCharacteristicNumbersNull());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procs.StGetClickStreamAd.Parameters parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procs.StGetClickStreamAd.Parameters) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.dstore.engine.Values.integerValue personId_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> personIdBuilder_;
      /**
       * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
       */
      public boolean hasPersonId() {
        return personIdBuilder_ != null || personId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
       */
      public io.dstore.engine.Values.integerValue getPersonId() {
        if (personIdBuilder_ == null) {
          return personId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : personId_;
        } else {
          return personIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
       */
      public Builder setPersonId(io.dstore.engine.Values.integerValue value) {
        if (personIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          personId_ = value;
          onChanged();
        } else {
          personIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
       */
      public Builder setPersonId(
          io.dstore.engine.Values.integerValue.Builder builderForValue) {
        if (personIdBuilder_ == null) {
          personId_ = builderForValue.build();
          onChanged();
        } else {
          personIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
       */
      public Builder mergePersonId(io.dstore.engine.Values.integerValue value) {
        if (personIdBuilder_ == null) {
          if (personId_ != null) {
            personId_ =
              io.dstore.engine.Values.integerValue.newBuilder(personId_).mergeFrom(value).buildPartial();
          } else {
            personId_ = value;
          }
          onChanged();
        } else {
          personIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
       */
      public Builder clearPersonId() {
        if (personIdBuilder_ == null) {
          personId_ = null;
          onChanged();
        } else {
          personId_ = null;
          personIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
       */
      public io.dstore.engine.Values.integerValue.Builder getPersonIdBuilder() {
        
        onChanged();
        return getPersonIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getPersonIdOrBuilder() {
        if (personIdBuilder_ != null) {
          return personIdBuilder_.getMessageOrBuilder();
        } else {
          return personId_ == null ?
              io.dstore.engine.Values.integerValue.getDefaultInstance() : personId_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue person_id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
          getPersonIdFieldBuilder() {
        if (personIdBuilder_ == null) {
          personIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                  getPersonId(),
                  getParentForChildren(),
                  isClean());
          personId_ = null;
        }
        return personIdBuilder_;
      }

      private boolean personIdNull_ ;
      /**
       * <code>optional bool person_id_null = 1001;</code>
       */
      public boolean getPersonIdNull() {
        return personIdNull_;
      }
      /**
       * <code>optional bool person_id_null = 1001;</code>
       */
      public Builder setPersonIdNull(boolean value) {
        
        personIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool person_id_null = 1001;</code>
       */
      public Builder clearPersonIdNull() {
        
        personIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.engine.Values.timestampValue fromDate_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.timestampValue, io.dstore.engine.Values.timestampValue.Builder, io.dstore.engine.Values.timestampValueOrBuilder> fromDateBuilder_;
      /**
       * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
       */
      public boolean hasFromDate() {
        return fromDateBuilder_ != null || fromDate_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
       */
      public io.dstore.engine.Values.timestampValue getFromDate() {
        if (fromDateBuilder_ == null) {
          return fromDate_ == null ? io.dstore.engine.Values.timestampValue.getDefaultInstance() : fromDate_;
        } else {
          return fromDateBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
       */
      public Builder setFromDate(io.dstore.engine.Values.timestampValue value) {
        if (fromDateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fromDate_ = value;
          onChanged();
        } else {
          fromDateBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
       */
      public Builder setFromDate(
          io.dstore.engine.Values.timestampValue.Builder builderForValue) {
        if (fromDateBuilder_ == null) {
          fromDate_ = builderForValue.build();
          onChanged();
        } else {
          fromDateBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
       */
      public Builder mergeFromDate(io.dstore.engine.Values.timestampValue value) {
        if (fromDateBuilder_ == null) {
          if (fromDate_ != null) {
            fromDate_ =
              io.dstore.engine.Values.timestampValue.newBuilder(fromDate_).mergeFrom(value).buildPartial();
          } else {
            fromDate_ = value;
          }
          onChanged();
        } else {
          fromDateBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
       */
      public Builder clearFromDate() {
        if (fromDateBuilder_ == null) {
          fromDate_ = null;
          onChanged();
        } else {
          fromDate_ = null;
          fromDateBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
       */
      public io.dstore.engine.Values.timestampValue.Builder getFromDateBuilder() {
        
        onChanged();
        return getFromDateFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
       */
      public io.dstore.engine.Values.timestampValueOrBuilder getFromDateOrBuilder() {
        if (fromDateBuilder_ != null) {
          return fromDateBuilder_.getMessageOrBuilder();
        } else {
          return fromDate_ == null ?
              io.dstore.engine.Values.timestampValue.getDefaultInstance() : fromDate_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue from_date = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.timestampValue, io.dstore.engine.Values.timestampValue.Builder, io.dstore.engine.Values.timestampValueOrBuilder> 
          getFromDateFieldBuilder() {
        if (fromDateBuilder_ == null) {
          fromDateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.timestampValue, io.dstore.engine.Values.timestampValue.Builder, io.dstore.engine.Values.timestampValueOrBuilder>(
                  getFromDate(),
                  getParentForChildren(),
                  isClean());
          fromDate_ = null;
        }
        return fromDateBuilder_;
      }

      private boolean fromDateNull_ ;
      /**
       * <code>optional bool from_date_null = 1002;</code>
       */
      public boolean getFromDateNull() {
        return fromDateNull_;
      }
      /**
       * <code>optional bool from_date_null = 1002;</code>
       */
      public Builder setFromDateNull(boolean value) {
        
        fromDateNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool from_date_null = 1002;</code>
       */
      public Builder clearFromDateNull() {
        
        fromDateNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.engine.Values.timestampValue toDate_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.timestampValue, io.dstore.engine.Values.timestampValue.Builder, io.dstore.engine.Values.timestampValueOrBuilder> toDateBuilder_;
      /**
       * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
       */
      public boolean hasToDate() {
        return toDateBuilder_ != null || toDate_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
       */
      public io.dstore.engine.Values.timestampValue getToDate() {
        if (toDateBuilder_ == null) {
          return toDate_ == null ? io.dstore.engine.Values.timestampValue.getDefaultInstance() : toDate_;
        } else {
          return toDateBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
       */
      public Builder setToDate(io.dstore.engine.Values.timestampValue value) {
        if (toDateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          toDate_ = value;
          onChanged();
        } else {
          toDateBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
       */
      public Builder setToDate(
          io.dstore.engine.Values.timestampValue.Builder builderForValue) {
        if (toDateBuilder_ == null) {
          toDate_ = builderForValue.build();
          onChanged();
        } else {
          toDateBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
       */
      public Builder mergeToDate(io.dstore.engine.Values.timestampValue value) {
        if (toDateBuilder_ == null) {
          if (toDate_ != null) {
            toDate_ =
              io.dstore.engine.Values.timestampValue.newBuilder(toDate_).mergeFrom(value).buildPartial();
          } else {
            toDate_ = value;
          }
          onChanged();
        } else {
          toDateBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
       */
      public Builder clearToDate() {
        if (toDateBuilder_ == null) {
          toDate_ = null;
          onChanged();
        } else {
          toDate_ = null;
          toDateBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
       */
      public io.dstore.engine.Values.timestampValue.Builder getToDateBuilder() {
        
        onChanged();
        return getToDateFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
       */
      public io.dstore.engine.Values.timestampValueOrBuilder getToDateOrBuilder() {
        if (toDateBuilder_ != null) {
          return toDateBuilder_.getMessageOrBuilder();
        } else {
          return toDate_ == null ?
              io.dstore.engine.Values.timestampValue.getDefaultInstance() : toDate_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue to_date = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.timestampValue, io.dstore.engine.Values.timestampValue.Builder, io.dstore.engine.Values.timestampValueOrBuilder> 
          getToDateFieldBuilder() {
        if (toDateBuilder_ == null) {
          toDateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.timestampValue, io.dstore.engine.Values.timestampValue.Builder, io.dstore.engine.Values.timestampValueOrBuilder>(
                  getToDate(),
                  getParentForChildren(),
                  isClean());
          toDate_ = null;
        }
        return toDateBuilder_;
      }

      private boolean toDateNull_ ;
      /**
       * <code>optional bool to_date_null = 1003;</code>
       */
      public boolean getToDateNull() {
        return toDateNull_;
      }
      /**
       * <code>optional bool to_date_null = 1003;</code>
       */
      public Builder setToDateNull(boolean value) {
        
        toDateNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool to_date_null = 1003;</code>
       */
      public Builder clearToDateNull() {
        
        toDateNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.engine.Values.integerValue visitorId_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> visitorIdBuilder_;
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
       */
      public boolean hasVisitorId() {
        return visitorIdBuilder_ != null || visitorId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
       */
      public io.dstore.engine.Values.integerValue getVisitorId() {
        if (visitorIdBuilder_ == null) {
          return visitorId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : visitorId_;
        } else {
          return visitorIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
       */
      public Builder setVisitorId(io.dstore.engine.Values.integerValue value) {
        if (visitorIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          visitorId_ = value;
          onChanged();
        } else {
          visitorIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
       */
      public Builder setVisitorId(
          io.dstore.engine.Values.integerValue.Builder builderForValue) {
        if (visitorIdBuilder_ == null) {
          visitorId_ = builderForValue.build();
          onChanged();
        } else {
          visitorIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
       */
      public Builder mergeVisitorId(io.dstore.engine.Values.integerValue value) {
        if (visitorIdBuilder_ == null) {
          if (visitorId_ != null) {
            visitorId_ =
              io.dstore.engine.Values.integerValue.newBuilder(visitorId_).mergeFrom(value).buildPartial();
          } else {
            visitorId_ = value;
          }
          onChanged();
        } else {
          visitorIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
       */
      public Builder clearVisitorId() {
        if (visitorIdBuilder_ == null) {
          visitorId_ = null;
          onChanged();
        } else {
          visitorId_ = null;
          visitorIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
       */
      public io.dstore.engine.Values.integerValue.Builder getVisitorIdBuilder() {
        
        onChanged();
        return getVisitorIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getVisitorIdOrBuilder() {
        if (visitorIdBuilder_ != null) {
          return visitorIdBuilder_.getMessageOrBuilder();
        } else {
          return visitorId_ == null ?
              io.dstore.engine.Values.integerValue.getDefaultInstance() : visitorId_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_id = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
          getVisitorIdFieldBuilder() {
        if (visitorIdBuilder_ == null) {
          visitorIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                  getVisitorId(),
                  getParentForChildren(),
                  isClean());
          visitorId_ = null;
        }
        return visitorIdBuilder_;
      }

      private boolean visitorIdNull_ ;
      /**
       * <code>optional bool visitor_id_null = 1004;</code>
       */
      public boolean getVisitorIdNull() {
        return visitorIdNull_;
      }
      /**
       * <code>optional bool visitor_id_null = 1004;</code>
       */
      public Builder setVisitorIdNull(boolean value) {
        
        visitorIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool visitor_id_null = 1004;</code>
       */
      public Builder clearVisitorIdNull() {
        
        visitorIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.engine.Values.integerValue visitorOrPersonIdsInOneId_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> visitorOrPersonIdsInOneIdBuilder_;
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
       */
      public boolean hasVisitorOrPersonIdsInOneId() {
        return visitorOrPersonIdsInOneIdBuilder_ != null || visitorOrPersonIdsInOneId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
       */
      public io.dstore.engine.Values.integerValue getVisitorOrPersonIdsInOneId() {
        if (visitorOrPersonIdsInOneIdBuilder_ == null) {
          return visitorOrPersonIdsInOneId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : visitorOrPersonIdsInOneId_;
        } else {
          return visitorOrPersonIdsInOneIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
       */
      public Builder setVisitorOrPersonIdsInOneId(io.dstore.engine.Values.integerValue value) {
        if (visitorOrPersonIdsInOneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          visitorOrPersonIdsInOneId_ = value;
          onChanged();
        } else {
          visitorOrPersonIdsInOneIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
       */
      public Builder setVisitorOrPersonIdsInOneId(
          io.dstore.engine.Values.integerValue.Builder builderForValue) {
        if (visitorOrPersonIdsInOneIdBuilder_ == null) {
          visitorOrPersonIdsInOneId_ = builderForValue.build();
          onChanged();
        } else {
          visitorOrPersonIdsInOneIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
       */
      public Builder mergeVisitorOrPersonIdsInOneId(io.dstore.engine.Values.integerValue value) {
        if (visitorOrPersonIdsInOneIdBuilder_ == null) {
          if (visitorOrPersonIdsInOneId_ != null) {
            visitorOrPersonIdsInOneId_ =
              io.dstore.engine.Values.integerValue.newBuilder(visitorOrPersonIdsInOneId_).mergeFrom(value).buildPartial();
          } else {
            visitorOrPersonIdsInOneId_ = value;
          }
          onChanged();
        } else {
          visitorOrPersonIdsInOneIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
       */
      public Builder clearVisitorOrPersonIdsInOneId() {
        if (visitorOrPersonIdsInOneIdBuilder_ == null) {
          visitorOrPersonIdsInOneId_ = null;
          onChanged();
        } else {
          visitorOrPersonIdsInOneId_ = null;
          visitorOrPersonIdsInOneIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
       */
      public io.dstore.engine.Values.integerValue.Builder getVisitorOrPersonIdsInOneIdBuilder() {
        
        onChanged();
        return getVisitorOrPersonIdsInOneIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getVisitorOrPersonIdsInOneIdOrBuilder() {
        if (visitorOrPersonIdsInOneIdBuilder_ != null) {
          return visitorOrPersonIdsInOneIdBuilder_.getMessageOrBuilder();
        } else {
          return visitorOrPersonIdsInOneId_ == null ?
              io.dstore.engine.Values.integerValue.getDefaultInstance() : visitorOrPersonIdsInOneId_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_ids_in_one_id = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
          getVisitorOrPersonIdsInOneIdFieldBuilder() {
        if (visitorOrPersonIdsInOneIdBuilder_ == null) {
          visitorOrPersonIdsInOneIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                  getVisitorOrPersonIdsInOneId(),
                  getParentForChildren(),
                  isClean());
          visitorOrPersonIdsInOneId_ = null;
        }
        return visitorOrPersonIdsInOneIdBuilder_;
      }

      private boolean visitorOrPersonIdsInOneIdNull_ ;
      /**
       * <code>optional bool visitor_or_person_ids_in_one_id_null = 1005;</code>
       */
      public boolean getVisitorOrPersonIdsInOneIdNull() {
        return visitorOrPersonIdsInOneIdNull_;
      }
      /**
       * <code>optional bool visitor_or_person_ids_in_one_id_null = 1005;</code>
       */
      public Builder setVisitorOrPersonIdsInOneIdNull(boolean value) {
        
        visitorOrPersonIdsInOneIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool visitor_or_person_ids_in_one_id_null = 1005;</code>
       */
      public Builder clearVisitorOrPersonIdsInOneIdNull() {
        
        visitorOrPersonIdsInOneIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.engine.Values.booleanValue considerOnlyRelationPeriod_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> considerOnlyRelationPeriodBuilder_;
      /**
       * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
       */
      public boolean hasConsiderOnlyRelationPeriod() {
        return considerOnlyRelationPeriodBuilder_ != null || considerOnlyRelationPeriod_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
       */
      public io.dstore.engine.Values.booleanValue getConsiderOnlyRelationPeriod() {
        if (considerOnlyRelationPeriodBuilder_ == null) {
          return considerOnlyRelationPeriod_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : considerOnlyRelationPeriod_;
        } else {
          return considerOnlyRelationPeriodBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
       */
      public Builder setConsiderOnlyRelationPeriod(io.dstore.engine.Values.booleanValue value) {
        if (considerOnlyRelationPeriodBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          considerOnlyRelationPeriod_ = value;
          onChanged();
        } else {
          considerOnlyRelationPeriodBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
       */
      public Builder setConsiderOnlyRelationPeriod(
          io.dstore.engine.Values.booleanValue.Builder builderForValue) {
        if (considerOnlyRelationPeriodBuilder_ == null) {
          considerOnlyRelationPeriod_ = builderForValue.build();
          onChanged();
        } else {
          considerOnlyRelationPeriodBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
       */
      public Builder mergeConsiderOnlyRelationPeriod(io.dstore.engine.Values.booleanValue value) {
        if (considerOnlyRelationPeriodBuilder_ == null) {
          if (considerOnlyRelationPeriod_ != null) {
            considerOnlyRelationPeriod_ =
              io.dstore.engine.Values.booleanValue.newBuilder(considerOnlyRelationPeriod_).mergeFrom(value).buildPartial();
          } else {
            considerOnlyRelationPeriod_ = value;
          }
          onChanged();
        } else {
          considerOnlyRelationPeriodBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
       */
      public Builder clearConsiderOnlyRelationPeriod() {
        if (considerOnlyRelationPeriodBuilder_ == null) {
          considerOnlyRelationPeriod_ = null;
          onChanged();
        } else {
          considerOnlyRelationPeriod_ = null;
          considerOnlyRelationPeriodBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
       */
      public io.dstore.engine.Values.booleanValue.Builder getConsiderOnlyRelationPeriodBuilder() {
        
        onChanged();
        return getConsiderOnlyRelationPeriodFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
       */
      public io.dstore.engine.Values.booleanValueOrBuilder getConsiderOnlyRelationPeriodOrBuilder() {
        if (considerOnlyRelationPeriodBuilder_ != null) {
          return considerOnlyRelationPeriodBuilder_.getMessageOrBuilder();
        } else {
          return considerOnlyRelationPeriod_ == null ?
              io.dstore.engine.Values.booleanValue.getDefaultInstance() : considerOnlyRelationPeriod_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue consider_only_relation_period = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> 
          getConsiderOnlyRelationPeriodFieldBuilder() {
        if (considerOnlyRelationPeriodBuilder_ == null) {
          considerOnlyRelationPeriodBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder>(
                  getConsiderOnlyRelationPeriod(),
                  getParentForChildren(),
                  isClean());
          considerOnlyRelationPeriod_ = null;
        }
        return considerOnlyRelationPeriodBuilder_;
      }

      private boolean considerOnlyRelationPeriodNull_ ;
      /**
       * <code>optional bool consider_only_relation_period_null = 1006;</code>
       */
      public boolean getConsiderOnlyRelationPeriodNull() {
        return considerOnlyRelationPeriodNull_;
      }
      /**
       * <code>optional bool consider_only_relation_period_null = 1006;</code>
       */
      public Builder setConsiderOnlyRelationPeriodNull(boolean value) {
        
        considerOnlyRelationPeriodNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool consider_only_relation_period_null = 1006;</code>
       */
      public Builder clearConsiderOnlyRelationPeriodNull() {
        
        considerOnlyRelationPeriodNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.engine.Values.stringValue basicCharacteristicNumbers_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> basicCharacteristicNumbersBuilder_;
      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
       */
      public boolean hasBasicCharacteristicNumbers() {
        return basicCharacteristicNumbersBuilder_ != null || basicCharacteristicNumbers_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
       */
      public io.dstore.engine.Values.stringValue getBasicCharacteristicNumbers() {
        if (basicCharacteristicNumbersBuilder_ == null) {
          return basicCharacteristicNumbers_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : basicCharacteristicNumbers_;
        } else {
          return basicCharacteristicNumbersBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
       */
      public Builder setBasicCharacteristicNumbers(io.dstore.engine.Values.stringValue value) {
        if (basicCharacteristicNumbersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          basicCharacteristicNumbers_ = value;
          onChanged();
        } else {
          basicCharacteristicNumbersBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
       */
      public Builder setBasicCharacteristicNumbers(
          io.dstore.engine.Values.stringValue.Builder builderForValue) {
        if (basicCharacteristicNumbersBuilder_ == null) {
          basicCharacteristicNumbers_ = builderForValue.build();
          onChanged();
        } else {
          basicCharacteristicNumbersBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
       */
      public Builder mergeBasicCharacteristicNumbers(io.dstore.engine.Values.stringValue value) {
        if (basicCharacteristicNumbersBuilder_ == null) {
          if (basicCharacteristicNumbers_ != null) {
            basicCharacteristicNumbers_ =
              io.dstore.engine.Values.stringValue.newBuilder(basicCharacteristicNumbers_).mergeFrom(value).buildPartial();
          } else {
            basicCharacteristicNumbers_ = value;
          }
          onChanged();
        } else {
          basicCharacteristicNumbersBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
       */
      public Builder clearBasicCharacteristicNumbers() {
        if (basicCharacteristicNumbersBuilder_ == null) {
          basicCharacteristicNumbers_ = null;
          onChanged();
        } else {
          basicCharacteristicNumbers_ = null;
          basicCharacteristicNumbersBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
       */
      public io.dstore.engine.Values.stringValue.Builder getBasicCharacteristicNumbersBuilder() {
        
        onChanged();
        return getBasicCharacteristicNumbersFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getBasicCharacteristicNumbersOrBuilder() {
        if (basicCharacteristicNumbersBuilder_ != null) {
          return basicCharacteristicNumbersBuilder_.getMessageOrBuilder();
        } else {
          return basicCharacteristicNumbers_ == null ?
              io.dstore.engine.Values.stringValue.getDefaultInstance() : basicCharacteristicNumbers_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic_numbers = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
          getBasicCharacteristicNumbersFieldBuilder() {
        if (basicCharacteristicNumbersBuilder_ == null) {
          basicCharacteristicNumbersBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                  getBasicCharacteristicNumbers(),
                  getParentForChildren(),
                  isClean());
          basicCharacteristicNumbers_ = null;
        }
        return basicCharacteristicNumbersBuilder_;
      }

      private boolean basicCharacteristicNumbersNull_ ;
      /**
       * <code>optional bool basic_characteristic_numbers_null = 1007;</code>
       */
      public boolean getBasicCharacteristicNumbersNull() {
        return basicCharacteristicNumbersNull_;
      }
      /**
       * <code>optional bool basic_characteristic_numbers_null = 1007;</code>
       */
      public Builder setBasicCharacteristicNumbersNull(boolean value) {
        
        basicCharacteristicNumbersNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool basic_characteristic_numbers_null = 1007;</code>
       */
      public Builder clearBasicCharacteristicNumbersNull() {
        
        basicCharacteristicNumbersNull_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.st_GetClickStream_Ad.Parameters)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.st_GetClickStream_Ad.Parameters)
    private static final io.dstore.engine.procs.StGetClickStreamAd.Parameters DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procs.StGetClickStreamAd.Parameters();
    }

    public static io.dstore.engine.procs.StGetClickStreamAd.Parameters getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    public static final com.google.protobuf.Parser<Parameters> PARSER =
        new com.google.protobuf.AbstractParser<Parameters>() {
      public Parameters parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Parameters(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Parameters> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Parameters> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procs.StGetClickStreamAd.Parameters getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.st_GetClickStream_Ad.Response)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    boolean hasError();
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    io.dstore.engine.ProcedureError.Error getError();
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    io.dstore.engine.ProcedureError.ErrorOrBuilder getErrorOrBuilder();

    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<io.dstore.engine.ProcedureMessage.Message> 
        getMessageList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.Message getMessage(int index);
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    int getMessageCount();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index);

    /**
     * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    java.util.List<io.dstore.engine.procs.StGetClickStreamAd.Response.Row> 
        getRowList();
    /**
     * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    io.dstore.engine.procs.StGetClickStreamAd.Response.Row getRow(int index);
    /**
     * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    int getRowCount();
    /**
     * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    java.util.List<? extends io.dstore.engine.procs.StGetClickStreamAd.Response.RowOrBuilder> 
        getRowOrBuilderList();
    /**
     * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    io.dstore.engine.procs.StGetClickStreamAd.Response.RowOrBuilder getRowOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dstore.engine.st_GetClickStream_Ad.Response}
   */
  public  static final class Response extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.st_GetClickStream_Ad.Response)
      ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessage.Builder builder) {
      super(builder);
    }
    private Response() {
      message_ = java.util.Collections.emptyList();
      row_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.engine.ProcedureError.Error.Builder subBuilder = null;
              if (error_ != null) {
                subBuilder = error_.toBuilder();
              }
              error_ = input.readMessage(io.dstore.engine.ProcedureError.Error.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(error_);
                error_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>();
                mutable_bitField0_ |= 0x00000002;
              }
              message_.add(input.readMessage(io.dstore.engine.ProcedureMessage.Message.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                row_ = new java.util.ArrayList<io.dstore.engine.procs.StGetClickStreamAd.Response.Row>();
                mutable_bitField0_ |= 0x00000004;
              }
              row_.add(input.readMessage(io.dstore.engine.procs.StGetClickStreamAd.Response.Row.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = java.util.Collections.unmodifiableList(message_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = java.util.Collections.unmodifiableList(row_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procs.StGetClickStreamAd.Response.class, io.dstore.engine.procs.StGetClickStreamAd.Response.Builder.class);
    }

    public interface RowOrBuilder extends
        // @@protoc_insertion_point(interface_extends:dstore.engine.st_GetClickStream_Ad.Response.Row)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      int getRowId();

      /**
       * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
       *
       * <pre>
       * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
       * </pre>
       */
      boolean hasValueBelongsToRelatedId();
      /**
       * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
       *
       * <pre>
       * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
       * </pre>
       */
      io.dstore.engine.Values.booleanValue getValueBelongsToRelatedId();
      /**
       * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
       *
       * <pre>
       * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
       * </pre>
       */
      io.dstore.engine.Values.booleanValueOrBuilder getValueBelongsToRelatedIdOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
       *
       * <pre>
       * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
       * </pre>
       */
      boolean hasNodeDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
       *
       * <pre>
       * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
       * </pre>
       */
      io.dstore.engine.Values.stringValue getNodeDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
       *
       * <pre>
       * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getNodeDescriptionOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
       *
       * <pre>
       * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
       * </pre>
       */
      boolean hasVisitorOrPersonId();
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
       *
       * <pre>
       * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
       * </pre>
       */
      io.dstore.engine.Values.integerValue getVisitorOrPersonId();
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
       *
       * <pre>
       * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getVisitorOrPersonIdOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
       *
       * <pre>
       * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
       * </pre>
       */
      boolean hasDateAndTimeChar();
      /**
       * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
       *
       * <pre>
       * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
       * </pre>
       */
      io.dstore.engine.Values.stringValue getDateAndTimeChar();
      /**
       * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
       *
       * <pre>
       * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getDateAndTimeCharOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
       *
       * <pre>
       * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
       * </pre>
       */
      boolean hasBasicCharacteristic();
      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
       *
       * <pre>
       * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
       * </pre>
       */
      io.dstore.engine.Values.stringValue getBasicCharacteristic();
      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
       *
       * <pre>
       * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getBasicCharacteristicOrBuilder();

      /**
       * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
       *
       * <pre>
       * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
       * </pre>
       */
      boolean hasRelationExistsAtDateAndTime();
      /**
       * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
       *
       * <pre>
       * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
       * </pre>
       */
      io.dstore.engine.Values.booleanValue getRelationExistsAtDateAndTime();
      /**
       * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
       *
       * <pre>
       * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
       * </pre>
       */
      io.dstore.engine.Values.booleanValueOrBuilder getRelationExistsAtDateAndTimeOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
       *
       * <pre>
       * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
       * </pre>
       */
      boolean hasHTreeNodeId();
      /**
       * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
       *
       * <pre>
       * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
       * </pre>
       */
      io.dstore.engine.Values.integerValue getHTreeNodeId();
      /**
       * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
       *
       * <pre>
       * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getHTreeNodeIdOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
       *
       * <pre>
       * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
       * </pre>
       */
      boolean hasNodeId();
      /**
       * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
       *
       * <pre>
       * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
       * </pre>
       */
      io.dstore.engine.Values.integerValue getNodeId();
      /**
       * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
       *
       * <pre>
       * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getNodeIdOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
       *
       * <pre>
       * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
       * </pre>
       */
      boolean hasValue();
      /**
       * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
       *
       * <pre>
       * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getValue();
      /**
       * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
       *
       * <pre>
       * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getValueOrBuilder();

      /**
       * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
       *
       * <pre>
       * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
       * </pre>
       */
      boolean hasDateAndTime();
      /**
       * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
       *
       * <pre>
       * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
       * </pre>
       */
      io.dstore.engine.Values.timestampValue getDateAndTime();
      /**
       * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
       *
       * <pre>
       * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
       * </pre>
       */
      io.dstore.engine.Values.timestampValueOrBuilder getDateAndTimeOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
       *
       * <pre>
       * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
       * </pre>
       */
      boolean hasRelatedId();
      /**
       * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
       *
       * <pre>
       * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
       * </pre>
       */
      io.dstore.engine.Values.integerValue getRelatedId();
      /**
       * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
       *
       * <pre>
       * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getRelatedIdOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
       *
       * <pre>
       * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
       * </pre>
       */
      boolean hasBasicCharacteristicNumber();
      /**
       * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
       *
       * <pre>
       * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
       * </pre>
       */
      io.dstore.engine.Values.integerValue getBasicCharacteristicNumber();
      /**
       * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
       *
       * <pre>
       * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getBasicCharacteristicNumberOrBuilder();
    }
    /**
     * Protobuf type {@code dstore.engine.st_GetClickStream_Ad.Response.Row}
     */
    public  static final class Row extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:dstore.engine.st_GetClickStream_Ad.Response.Row)
        RowOrBuilder {
      // Use Row.newBuilder() to construct.
      private Row(com.google.protobuf.GeneratedMessage.Builder builder) {
        super(builder);
      }
      private Row() {
        rowId_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private Row(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 80000: {

                rowId_ = input.readInt32();
                break;
              }
              case 80010: {
                io.dstore.engine.Values.booleanValue.Builder subBuilder = null;
                if (valueBelongsToRelatedId_ != null) {
                  subBuilder = valueBelongsToRelatedId_.toBuilder();
                }
                valueBelongsToRelatedId_ = input.readMessage(io.dstore.engine.Values.booleanValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(valueBelongsToRelatedId_);
                  valueBelongsToRelatedId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80018: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (nodeDescription_ != null) {
                  subBuilder = nodeDescription_.toBuilder();
                }
                nodeDescription_ = input.readMessage(io.dstore.engine.Values.stringValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(nodeDescription_);
                  nodeDescription_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80026: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (visitorOrPersonId_ != null) {
                  subBuilder = visitorOrPersonId_.toBuilder();
                }
                visitorOrPersonId_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(visitorOrPersonId_);
                  visitorOrPersonId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80034: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (dateAndTimeChar_ != null) {
                  subBuilder = dateAndTimeChar_.toBuilder();
                }
                dateAndTimeChar_ = input.readMessage(io.dstore.engine.Values.stringValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(dateAndTimeChar_);
                  dateAndTimeChar_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80042: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (basicCharacteristic_ != null) {
                  subBuilder = basicCharacteristic_.toBuilder();
                }
                basicCharacteristic_ = input.readMessage(io.dstore.engine.Values.stringValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(basicCharacteristic_);
                  basicCharacteristic_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80050: {
                io.dstore.engine.Values.booleanValue.Builder subBuilder = null;
                if (relationExistsAtDateAndTime_ != null) {
                  subBuilder = relationExistsAtDateAndTime_.toBuilder();
                }
                relationExistsAtDateAndTime_ = input.readMessage(io.dstore.engine.Values.booleanValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(relationExistsAtDateAndTime_);
                  relationExistsAtDateAndTime_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80058: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (hTreeNodeId_ != null) {
                  subBuilder = hTreeNodeId_.toBuilder();
                }
                hTreeNodeId_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(hTreeNodeId_);
                  hTreeNodeId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80066: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (nodeId_ != null) {
                  subBuilder = nodeId_.toBuilder();
                }
                nodeId_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(nodeId_);
                  nodeId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80074: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (value_ != null) {
                  subBuilder = value_.toBuilder();
                }
                value_ = input.readMessage(io.dstore.engine.Values.decimalValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(value_);
                  value_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80082: {
                io.dstore.engine.Values.timestampValue.Builder subBuilder = null;
                if (dateAndTime_ != null) {
                  subBuilder = dateAndTime_.toBuilder();
                }
                dateAndTime_ = input.readMessage(io.dstore.engine.Values.timestampValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(dateAndTime_);
                  dateAndTime_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80090: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (relatedId_ != null) {
                  subBuilder = relatedId_.toBuilder();
                }
                relatedId_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(relatedId_);
                  relatedId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80098: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (basicCharacteristicNumber_ != null) {
                  subBuilder = basicCharacteristicNumber_.toBuilder();
                }
                basicCharacteristicNumber_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(basicCharacteristicNumber_);
                  basicCharacteristicNumber_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Response_Row_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Response_Row_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.StGetClickStreamAd.Response.Row.class, io.dstore.engine.procs.StGetClickStreamAd.Response.Row.Builder.class);
      }

      public static final int ROW_ID_FIELD_NUMBER = 10000;
      private int rowId_;
      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      public int getRowId() {
        return rowId_;
      }

      public static final int VALUE_BELONGS_TO_RELATED_ID_FIELD_NUMBER = 10001;
      private io.dstore.engine.Values.booleanValue valueBelongsToRelatedId_;
      /**
       * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
       *
       * <pre>
       * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
       * </pre>
       */
      public boolean hasValueBelongsToRelatedId() {
        return valueBelongsToRelatedId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
       *
       * <pre>
       * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
       * </pre>
       */
      public io.dstore.engine.Values.booleanValue getValueBelongsToRelatedId() {
        return valueBelongsToRelatedId_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : valueBelongsToRelatedId_;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
       *
       * <pre>
       * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
       * </pre>
       */
      public io.dstore.engine.Values.booleanValueOrBuilder getValueBelongsToRelatedIdOrBuilder() {
        return getValueBelongsToRelatedId();
      }

      public static final int NODE_DESCRIPTION_FIELD_NUMBER = 10002;
      private io.dstore.engine.Values.stringValue nodeDescription_;
      /**
       * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
       *
       * <pre>
       * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
       * </pre>
       */
      public boolean hasNodeDescription() {
        return nodeDescription_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
       *
       * <pre>
       * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getNodeDescription() {
        return nodeDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : nodeDescription_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
       *
       * <pre>
       * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getNodeDescriptionOrBuilder() {
        return getNodeDescription();
      }

      public static final int VISITOR_OR_PERSON_ID_FIELD_NUMBER = 10003;
      private io.dstore.engine.Values.integerValue visitorOrPersonId_;
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
       *
       * <pre>
       * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
       * </pre>
       */
      public boolean hasVisitorOrPersonId() {
        return visitorOrPersonId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
       *
       * <pre>
       * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getVisitorOrPersonId() {
        return visitorOrPersonId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : visitorOrPersonId_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
       *
       * <pre>
       * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getVisitorOrPersonIdOrBuilder() {
        return getVisitorOrPersonId();
      }

      public static final int DATE_AND_TIME_CHAR_FIELD_NUMBER = 10004;
      private io.dstore.engine.Values.stringValue dateAndTimeChar_;
      /**
       * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
       *
       * <pre>
       * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
       * </pre>
       */
      public boolean hasDateAndTimeChar() {
        return dateAndTimeChar_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
       *
       * <pre>
       * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getDateAndTimeChar() {
        return dateAndTimeChar_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : dateAndTimeChar_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
       *
       * <pre>
       * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getDateAndTimeCharOrBuilder() {
        return getDateAndTimeChar();
      }

      public static final int BASIC_CHARACTERISTIC_FIELD_NUMBER = 10005;
      private io.dstore.engine.Values.stringValue basicCharacteristic_;
      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
       *
       * <pre>
       * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
       * </pre>
       */
      public boolean hasBasicCharacteristic() {
        return basicCharacteristic_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
       *
       * <pre>
       * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getBasicCharacteristic() {
        return basicCharacteristic_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : basicCharacteristic_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
       *
       * <pre>
       * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getBasicCharacteristicOrBuilder() {
        return getBasicCharacteristic();
      }

      public static final int RELATION_EXISTS_AT_DATE_AND_TIME_FIELD_NUMBER = 10006;
      private io.dstore.engine.Values.booleanValue relationExistsAtDateAndTime_;
      /**
       * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
       *
       * <pre>
       * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
       * </pre>
       */
      public boolean hasRelationExistsAtDateAndTime() {
        return relationExistsAtDateAndTime_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
       *
       * <pre>
       * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
       * </pre>
       */
      public io.dstore.engine.Values.booleanValue getRelationExistsAtDateAndTime() {
        return relationExistsAtDateAndTime_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : relationExistsAtDateAndTime_;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
       *
       * <pre>
       * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
       * </pre>
       */
      public io.dstore.engine.Values.booleanValueOrBuilder getRelationExistsAtDateAndTimeOrBuilder() {
        return getRelationExistsAtDateAndTime();
      }

      public static final int H_TREE_NODE_ID_FIELD_NUMBER = 10007;
      private io.dstore.engine.Values.integerValue hTreeNodeId_;
      /**
       * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
       *
       * <pre>
       * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
       * </pre>
       */
      public boolean hasHTreeNodeId() {
        return hTreeNodeId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
       *
       * <pre>
       * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getHTreeNodeId() {
        return hTreeNodeId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : hTreeNodeId_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
       *
       * <pre>
       * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getHTreeNodeIdOrBuilder() {
        return getHTreeNodeId();
      }

      public static final int NODE_ID_FIELD_NUMBER = 10008;
      private io.dstore.engine.Values.integerValue nodeId_;
      /**
       * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
       *
       * <pre>
       * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
       * </pre>
       */
      public boolean hasNodeId() {
        return nodeId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
       *
       * <pre>
       * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getNodeId() {
        return nodeId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : nodeId_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
       *
       * <pre>
       * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getNodeIdOrBuilder() {
        return getNodeId();
      }

      public static final int VALUE_FIELD_NUMBER = 10009;
      private io.dstore.engine.Values.decimalValue value_;
      /**
       * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
       *
       * <pre>
       * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
       * </pre>
       */
      public boolean hasValue() {
        return value_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
       *
       * <pre>
       * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getValue() {
        return value_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : value_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
       *
       * <pre>
       * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getValueOrBuilder() {
        return getValue();
      }

      public static final int DATE_AND_TIME_FIELD_NUMBER = 10010;
      private io.dstore.engine.Values.timestampValue dateAndTime_;
      /**
       * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
       *
       * <pre>
       * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
       * </pre>
       */
      public boolean hasDateAndTime() {
        return dateAndTime_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
       *
       * <pre>
       * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
       * </pre>
       */
      public io.dstore.engine.Values.timestampValue getDateAndTime() {
        return dateAndTime_ == null ? io.dstore.engine.Values.timestampValue.getDefaultInstance() : dateAndTime_;
      }
      /**
       * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
       *
       * <pre>
       * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
       * </pre>
       */
      public io.dstore.engine.Values.timestampValueOrBuilder getDateAndTimeOrBuilder() {
        return getDateAndTime();
      }

      public static final int RELATED_ID_FIELD_NUMBER = 10011;
      private io.dstore.engine.Values.integerValue relatedId_;
      /**
       * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
       *
       * <pre>
       * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
       * </pre>
       */
      public boolean hasRelatedId() {
        return relatedId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
       *
       * <pre>
       * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getRelatedId() {
        return relatedId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : relatedId_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
       *
       * <pre>
       * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getRelatedIdOrBuilder() {
        return getRelatedId();
      }

      public static final int BASIC_CHARACTERISTIC_NUMBER_FIELD_NUMBER = 10012;
      private io.dstore.engine.Values.integerValue basicCharacteristicNumber_;
      /**
       * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
       *
       * <pre>
       * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
       * </pre>
       */
      public boolean hasBasicCharacteristicNumber() {
        return basicCharacteristicNumber_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
       *
       * <pre>
       * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getBasicCharacteristicNumber() {
        return basicCharacteristicNumber_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : basicCharacteristicNumber_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
       *
       * <pre>
       * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getBasicCharacteristicNumberOrBuilder() {
        return getBasicCharacteristicNumber();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (rowId_ != 0) {
          output.writeInt32(10000, rowId_);
        }
        if (valueBelongsToRelatedId_ != null) {
          output.writeMessage(10001, getValueBelongsToRelatedId());
        }
        if (nodeDescription_ != null) {
          output.writeMessage(10002, getNodeDescription());
        }
        if (visitorOrPersonId_ != null) {
          output.writeMessage(10003, getVisitorOrPersonId());
        }
        if (dateAndTimeChar_ != null) {
          output.writeMessage(10004, getDateAndTimeChar());
        }
        if (basicCharacteristic_ != null) {
          output.writeMessage(10005, getBasicCharacteristic());
        }
        if (relationExistsAtDateAndTime_ != null) {
          output.writeMessage(10006, getRelationExistsAtDateAndTime());
        }
        if (hTreeNodeId_ != null) {
          output.writeMessage(10007, getHTreeNodeId());
        }
        if (nodeId_ != null) {
          output.writeMessage(10008, getNodeId());
        }
        if (value_ != null) {
          output.writeMessage(10009, getValue());
        }
        if (dateAndTime_ != null) {
          output.writeMessage(10010, getDateAndTime());
        }
        if (relatedId_ != null) {
          output.writeMessage(10011, getRelatedId());
        }
        if (basicCharacteristicNumber_ != null) {
          output.writeMessage(10012, getBasicCharacteristicNumber());
        }
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (rowId_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10000, rowId_);
        }
        if (valueBelongsToRelatedId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10001, getValueBelongsToRelatedId());
        }
        if (nodeDescription_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10002, getNodeDescription());
        }
        if (visitorOrPersonId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10003, getVisitorOrPersonId());
        }
        if (dateAndTimeChar_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10004, getDateAndTimeChar());
        }
        if (basicCharacteristic_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10005, getBasicCharacteristic());
        }
        if (relationExistsAtDateAndTime_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10006, getRelationExistsAtDateAndTime());
        }
        if (hTreeNodeId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10007, getHTreeNodeId());
        }
        if (nodeId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10008, getNodeId());
        }
        if (value_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10009, getValue());
        }
        if (dateAndTime_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10010, getDateAndTime());
        }
        if (relatedId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10011, getRelatedId());
        }
        if (basicCharacteristicNumber_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10012, getBasicCharacteristicNumber());
        }
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static io.dstore.engine.procs.StGetClickStreamAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procs.StGetClickStreamAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procs.StGetClickStreamAd.Response.Row parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procs.StGetClickStreamAd.Response.Row parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procs.StGetClickStreamAd.Response.Row parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.dstore.engine.procs.StGetClickStreamAd.Response.Row parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static io.dstore.engine.procs.StGetClickStreamAd.Response.Row parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static io.dstore.engine.procs.StGetClickStreamAd.Response.Row parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static io.dstore.engine.procs.StGetClickStreamAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.dstore.engine.procs.StGetClickStreamAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.dstore.engine.procs.StGetClickStreamAd.Response.Row prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code dstore.engine.st_GetClickStream_Ad.Response.Row}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:dstore.engine.st_GetClickStream_Ad.Response.Row)
          io.dstore.engine.procs.StGetClickStreamAd.Response.RowOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Response_Row_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Response_Row_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.dstore.engine.procs.StGetClickStreamAd.Response.Row.class, io.dstore.engine.procs.StGetClickStreamAd.Response.Row.Builder.class);
        }

        // Construct using io.dstore.engine.procs.StGetClickStreamAd.Response.Row.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          rowId_ = 0;

          if (valueBelongsToRelatedIdBuilder_ == null) {
            valueBelongsToRelatedId_ = null;
          } else {
            valueBelongsToRelatedId_ = null;
            valueBelongsToRelatedIdBuilder_ = null;
          }
          if (nodeDescriptionBuilder_ == null) {
            nodeDescription_ = null;
          } else {
            nodeDescription_ = null;
            nodeDescriptionBuilder_ = null;
          }
          if (visitorOrPersonIdBuilder_ == null) {
            visitorOrPersonId_ = null;
          } else {
            visitorOrPersonId_ = null;
            visitorOrPersonIdBuilder_ = null;
          }
          if (dateAndTimeCharBuilder_ == null) {
            dateAndTimeChar_ = null;
          } else {
            dateAndTimeChar_ = null;
            dateAndTimeCharBuilder_ = null;
          }
          if (basicCharacteristicBuilder_ == null) {
            basicCharacteristic_ = null;
          } else {
            basicCharacteristic_ = null;
            basicCharacteristicBuilder_ = null;
          }
          if (relationExistsAtDateAndTimeBuilder_ == null) {
            relationExistsAtDateAndTime_ = null;
          } else {
            relationExistsAtDateAndTime_ = null;
            relationExistsAtDateAndTimeBuilder_ = null;
          }
          if (hTreeNodeIdBuilder_ == null) {
            hTreeNodeId_ = null;
          } else {
            hTreeNodeId_ = null;
            hTreeNodeIdBuilder_ = null;
          }
          if (nodeIdBuilder_ == null) {
            nodeId_ = null;
          } else {
            nodeId_ = null;
            nodeIdBuilder_ = null;
          }
          if (valueBuilder_ == null) {
            value_ = null;
          } else {
            value_ = null;
            valueBuilder_ = null;
          }
          if (dateAndTimeBuilder_ == null) {
            dateAndTime_ = null;
          } else {
            dateAndTime_ = null;
            dateAndTimeBuilder_ = null;
          }
          if (relatedIdBuilder_ == null) {
            relatedId_ = null;
          } else {
            relatedId_ = null;
            relatedIdBuilder_ = null;
          }
          if (basicCharacteristicNumberBuilder_ == null) {
            basicCharacteristicNumber_ = null;
          } else {
            basicCharacteristicNumber_ = null;
            basicCharacteristicNumberBuilder_ = null;
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Response_Row_descriptor;
        }

        public io.dstore.engine.procs.StGetClickStreamAd.Response.Row getDefaultInstanceForType() {
          return io.dstore.engine.procs.StGetClickStreamAd.Response.Row.getDefaultInstance();
        }

        public io.dstore.engine.procs.StGetClickStreamAd.Response.Row build() {
          io.dstore.engine.procs.StGetClickStreamAd.Response.Row result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.dstore.engine.procs.StGetClickStreamAd.Response.Row buildPartial() {
          io.dstore.engine.procs.StGetClickStreamAd.Response.Row result = new io.dstore.engine.procs.StGetClickStreamAd.Response.Row(this);
          result.rowId_ = rowId_;
          if (valueBelongsToRelatedIdBuilder_ == null) {
            result.valueBelongsToRelatedId_ = valueBelongsToRelatedId_;
          } else {
            result.valueBelongsToRelatedId_ = valueBelongsToRelatedIdBuilder_.build();
          }
          if (nodeDescriptionBuilder_ == null) {
            result.nodeDescription_ = nodeDescription_;
          } else {
            result.nodeDescription_ = nodeDescriptionBuilder_.build();
          }
          if (visitorOrPersonIdBuilder_ == null) {
            result.visitorOrPersonId_ = visitorOrPersonId_;
          } else {
            result.visitorOrPersonId_ = visitorOrPersonIdBuilder_.build();
          }
          if (dateAndTimeCharBuilder_ == null) {
            result.dateAndTimeChar_ = dateAndTimeChar_;
          } else {
            result.dateAndTimeChar_ = dateAndTimeCharBuilder_.build();
          }
          if (basicCharacteristicBuilder_ == null) {
            result.basicCharacteristic_ = basicCharacteristic_;
          } else {
            result.basicCharacteristic_ = basicCharacteristicBuilder_.build();
          }
          if (relationExistsAtDateAndTimeBuilder_ == null) {
            result.relationExistsAtDateAndTime_ = relationExistsAtDateAndTime_;
          } else {
            result.relationExistsAtDateAndTime_ = relationExistsAtDateAndTimeBuilder_.build();
          }
          if (hTreeNodeIdBuilder_ == null) {
            result.hTreeNodeId_ = hTreeNodeId_;
          } else {
            result.hTreeNodeId_ = hTreeNodeIdBuilder_.build();
          }
          if (nodeIdBuilder_ == null) {
            result.nodeId_ = nodeId_;
          } else {
            result.nodeId_ = nodeIdBuilder_.build();
          }
          if (valueBuilder_ == null) {
            result.value_ = value_;
          } else {
            result.value_ = valueBuilder_.build();
          }
          if (dateAndTimeBuilder_ == null) {
            result.dateAndTime_ = dateAndTime_;
          } else {
            result.dateAndTime_ = dateAndTimeBuilder_.build();
          }
          if (relatedIdBuilder_ == null) {
            result.relatedId_ = relatedId_;
          } else {
            result.relatedId_ = relatedIdBuilder_.build();
          }
          if (basicCharacteristicNumberBuilder_ == null) {
            result.basicCharacteristicNumber_ = basicCharacteristicNumber_;
          } else {
            result.basicCharacteristicNumber_ = basicCharacteristicNumberBuilder_.build();
          }
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.dstore.engine.procs.StGetClickStreamAd.Response.Row) {
            return mergeFrom((io.dstore.engine.procs.StGetClickStreamAd.Response.Row)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.dstore.engine.procs.StGetClickStreamAd.Response.Row other) {
          if (other == io.dstore.engine.procs.StGetClickStreamAd.Response.Row.getDefaultInstance()) return this;
          if (other.getRowId() != 0) {
            setRowId(other.getRowId());
          }
          if (other.hasValueBelongsToRelatedId()) {
            mergeValueBelongsToRelatedId(other.getValueBelongsToRelatedId());
          }
          if (other.hasNodeDescription()) {
            mergeNodeDescription(other.getNodeDescription());
          }
          if (other.hasVisitorOrPersonId()) {
            mergeVisitorOrPersonId(other.getVisitorOrPersonId());
          }
          if (other.hasDateAndTimeChar()) {
            mergeDateAndTimeChar(other.getDateAndTimeChar());
          }
          if (other.hasBasicCharacteristic()) {
            mergeBasicCharacteristic(other.getBasicCharacteristic());
          }
          if (other.hasRelationExistsAtDateAndTime()) {
            mergeRelationExistsAtDateAndTime(other.getRelationExistsAtDateAndTime());
          }
          if (other.hasHTreeNodeId()) {
            mergeHTreeNodeId(other.getHTreeNodeId());
          }
          if (other.hasNodeId()) {
            mergeNodeId(other.getNodeId());
          }
          if (other.hasValue()) {
            mergeValue(other.getValue());
          }
          if (other.hasDateAndTime()) {
            mergeDateAndTime(other.getDateAndTime());
          }
          if (other.hasRelatedId()) {
            mergeRelatedId(other.getRelatedId());
          }
          if (other.hasBasicCharacteristicNumber()) {
            mergeBasicCharacteristicNumber(other.getBasicCharacteristicNumber());
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.dstore.engine.procs.StGetClickStreamAd.Response.Row parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.dstore.engine.procs.StGetClickStreamAd.Response.Row) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int rowId_ ;
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public int getRowId() {
          return rowId_;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder setRowId(int value) {
          
          rowId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder clearRowId() {
          
          rowId_ = 0;
          onChanged();
          return this;
        }

        private io.dstore.engine.Values.booleanValue valueBelongsToRelatedId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> valueBelongsToRelatedIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
         *
         * <pre>
         * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
         * </pre>
         */
        public boolean hasValueBelongsToRelatedId() {
          return valueBelongsToRelatedIdBuilder_ != null || valueBelongsToRelatedId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
         *
         * <pre>
         * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
         * </pre>
         */
        public io.dstore.engine.Values.booleanValue getValueBelongsToRelatedId() {
          if (valueBelongsToRelatedIdBuilder_ == null) {
            return valueBelongsToRelatedId_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : valueBelongsToRelatedId_;
          } else {
            return valueBelongsToRelatedIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
         *
         * <pre>
         * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
         * </pre>
         */
        public Builder setValueBelongsToRelatedId(io.dstore.engine.Values.booleanValue value) {
          if (valueBelongsToRelatedIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            valueBelongsToRelatedId_ = value;
            onChanged();
          } else {
            valueBelongsToRelatedIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
         *
         * <pre>
         * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
         * </pre>
         */
        public Builder setValueBelongsToRelatedId(
            io.dstore.engine.Values.booleanValue.Builder builderForValue) {
          if (valueBelongsToRelatedIdBuilder_ == null) {
            valueBelongsToRelatedId_ = builderForValue.build();
            onChanged();
          } else {
            valueBelongsToRelatedIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
         *
         * <pre>
         * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
         * </pre>
         */
        public Builder mergeValueBelongsToRelatedId(io.dstore.engine.Values.booleanValue value) {
          if (valueBelongsToRelatedIdBuilder_ == null) {
            if (valueBelongsToRelatedId_ != null) {
              valueBelongsToRelatedId_ =
                io.dstore.engine.Values.booleanValue.newBuilder(valueBelongsToRelatedId_).mergeFrom(value).buildPartial();
            } else {
              valueBelongsToRelatedId_ = value;
            }
            onChanged();
          } else {
            valueBelongsToRelatedIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
         *
         * <pre>
         * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
         * </pre>
         */
        public Builder clearValueBelongsToRelatedId() {
          if (valueBelongsToRelatedIdBuilder_ == null) {
            valueBelongsToRelatedId_ = null;
            onChanged();
          } else {
            valueBelongsToRelatedId_ = null;
            valueBelongsToRelatedIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
         *
         * <pre>
         * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
         * </pre>
         */
        public io.dstore.engine.Values.booleanValue.Builder getValueBelongsToRelatedIdBuilder() {
          
          onChanged();
          return getValueBelongsToRelatedIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
         *
         * <pre>
         * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
         * </pre>
         */
        public io.dstore.engine.Values.booleanValueOrBuilder getValueBelongsToRelatedIdOrBuilder() {
          if (valueBelongsToRelatedIdBuilder_ != null) {
            return valueBelongsToRelatedIdBuilder_.getMessageOrBuilder();
          } else {
            return valueBelongsToRelatedId_ == null ?
                io.dstore.engine.Values.booleanValue.getDefaultInstance() : valueBelongsToRelatedId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue value_belongs_to_related_id = 10001;</code>
         *
         * <pre>
         * "0" : "Value" ist zur "VisitorOrPersonID" gespeichert"1" : "Value" ist zur "RelatedID" gespeichert
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> 
            getValueBelongsToRelatedIdFieldBuilder() {
          if (valueBelongsToRelatedIdBuilder_ == null) {
            valueBelongsToRelatedIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder>(
                    getValueBelongsToRelatedId(),
                    getParentForChildren(),
                    isClean());
            valueBelongsToRelatedId_ = null;
          }
          return valueBelongsToRelatedIdBuilder_;
        }

        private io.dstore.engine.Values.stringValue nodeDescription_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> nodeDescriptionBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
         *
         * <pre>
         * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
         * </pre>
         */
        public boolean hasNodeDescription() {
          return nodeDescriptionBuilder_ != null || nodeDescription_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
         *
         * <pre>
         * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getNodeDescription() {
          if (nodeDescriptionBuilder_ == null) {
            return nodeDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : nodeDescription_;
          } else {
            return nodeDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
         *
         * <pre>
         * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
         * </pre>
         */
        public Builder setNodeDescription(io.dstore.engine.Values.stringValue value) {
          if (nodeDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            nodeDescription_ = value;
            onChanged();
          } else {
            nodeDescriptionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
         *
         * <pre>
         * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
         * </pre>
         */
        public Builder setNodeDescription(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (nodeDescriptionBuilder_ == null) {
            nodeDescription_ = builderForValue.build();
            onChanged();
          } else {
            nodeDescriptionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
         *
         * <pre>
         * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
         * </pre>
         */
        public Builder mergeNodeDescription(io.dstore.engine.Values.stringValue value) {
          if (nodeDescriptionBuilder_ == null) {
            if (nodeDescription_ != null) {
              nodeDescription_ =
                io.dstore.engine.Values.stringValue.newBuilder(nodeDescription_).mergeFrom(value).buildPartial();
            } else {
              nodeDescription_ = value;
            }
            onChanged();
          } else {
            nodeDescriptionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
         *
         * <pre>
         * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
         * </pre>
         */
        public Builder clearNodeDescription() {
          if (nodeDescriptionBuilder_ == null) {
            nodeDescription_ = null;
            onChanged();
          } else {
            nodeDescription_ = null;
            nodeDescriptionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
         *
         * <pre>
         * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getNodeDescriptionBuilder() {
          
          onChanged();
          return getNodeDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
         *
         * <pre>
         * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getNodeDescriptionOrBuilder() {
          if (nodeDescriptionBuilder_ != null) {
            return nodeDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return nodeDescription_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : nodeDescription_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue node_description = 10002;</code>
         *
         * <pre>
         * Bezeichnung von "NodeID". Entweder die Produktbezeichnung in der Standardsprache zum Zeitpunkt "DateAndTime" oder (falls nicht vorhanden) die "NodeDescription" (aus der Tabelle "dStore").
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getNodeDescriptionFieldBuilder() {
          if (nodeDescriptionBuilder_ == null) {
            nodeDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getNodeDescription(),
                    getParentForChildren(),
                    isClean());
            nodeDescription_ = null;
          }
          return nodeDescriptionBuilder_;
        }

        private io.dstore.engine.Values.integerValue visitorOrPersonId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> visitorOrPersonIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
         *
         * <pre>
         * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
         * </pre>
         */
        public boolean hasVisitorOrPersonId() {
          return visitorOrPersonIdBuilder_ != null || visitorOrPersonId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
         *
         * <pre>
         * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getVisitorOrPersonId() {
          if (visitorOrPersonIdBuilder_ == null) {
            return visitorOrPersonId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : visitorOrPersonId_;
          } else {
            return visitorOrPersonIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
         *
         * <pre>
         * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
         * </pre>
         */
        public Builder setVisitorOrPersonId(io.dstore.engine.Values.integerValue value) {
          if (visitorOrPersonIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            visitorOrPersonId_ = value;
            onChanged();
          } else {
            visitorOrPersonIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
         *
         * <pre>
         * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
         * </pre>
         */
        public Builder setVisitorOrPersonId(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (visitorOrPersonIdBuilder_ == null) {
            visitorOrPersonId_ = builderForValue.build();
            onChanged();
          } else {
            visitorOrPersonIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
         *
         * <pre>
         * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
         * </pre>
         */
        public Builder mergeVisitorOrPersonId(io.dstore.engine.Values.integerValue value) {
          if (visitorOrPersonIdBuilder_ == null) {
            if (visitorOrPersonId_ != null) {
              visitorOrPersonId_ =
                io.dstore.engine.Values.integerValue.newBuilder(visitorOrPersonId_).mergeFrom(value).buildPartial();
            } else {
              visitorOrPersonId_ = value;
            }
            onChanged();
          } else {
            visitorOrPersonIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
         *
         * <pre>
         * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
         * </pre>
         */
        public Builder clearVisitorOrPersonId() {
          if (visitorOrPersonIdBuilder_ == null) {
            visitorOrPersonId_ = null;
            onChanged();
          } else {
            visitorOrPersonId_ = null;
            visitorOrPersonIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
         *
         * <pre>
         * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getVisitorOrPersonIdBuilder() {
          
          onChanged();
          return getVisitorOrPersonIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
         *
         * <pre>
         * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getVisitorOrPersonIdOrBuilder() {
          if (visitorOrPersonIdBuilder_ != null) {
            return visitorOrPersonIdBuilder_.getMessageOrBuilder();
          } else {
            return visitorOrPersonId_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : visitorOrPersonId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue visitor_or_person_id = 10003;</code>
         *
         * <pre>
         * Falls "&#64;VisitorOrPersonIDsInOneID = 0" ist, steht hier die "&#64;PersonID" bzw. die "&#64;VisitorID", sonst eine der IDs, die in "tempdb.dbo.OneID" übergeben wurden
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getVisitorOrPersonIdFieldBuilder() {
          if (visitorOrPersonIdBuilder_ == null) {
            visitorOrPersonIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getVisitorOrPersonId(),
                    getParentForChildren(),
                    isClean());
            visitorOrPersonId_ = null;
          }
          return visitorOrPersonIdBuilder_;
        }

        private io.dstore.engine.Values.stringValue dateAndTimeChar_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> dateAndTimeCharBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
         *
         * <pre>
         * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
         * </pre>
         */
        public boolean hasDateAndTimeChar() {
          return dateAndTimeCharBuilder_ != null || dateAndTimeChar_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
         *
         * <pre>
         * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getDateAndTimeChar() {
          if (dateAndTimeCharBuilder_ == null) {
            return dateAndTimeChar_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : dateAndTimeChar_;
          } else {
            return dateAndTimeCharBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
         *
         * <pre>
         * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
         * </pre>
         */
        public Builder setDateAndTimeChar(io.dstore.engine.Values.stringValue value) {
          if (dateAndTimeCharBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            dateAndTimeChar_ = value;
            onChanged();
          } else {
            dateAndTimeCharBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
         *
         * <pre>
         * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
         * </pre>
         */
        public Builder setDateAndTimeChar(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (dateAndTimeCharBuilder_ == null) {
            dateAndTimeChar_ = builderForValue.build();
            onChanged();
          } else {
            dateAndTimeCharBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
         *
         * <pre>
         * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
         * </pre>
         */
        public Builder mergeDateAndTimeChar(io.dstore.engine.Values.stringValue value) {
          if (dateAndTimeCharBuilder_ == null) {
            if (dateAndTimeChar_ != null) {
              dateAndTimeChar_ =
                io.dstore.engine.Values.stringValue.newBuilder(dateAndTimeChar_).mergeFrom(value).buildPartial();
            } else {
              dateAndTimeChar_ = value;
            }
            onChanged();
          } else {
            dateAndTimeCharBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
         *
         * <pre>
         * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
         * </pre>
         */
        public Builder clearDateAndTimeChar() {
          if (dateAndTimeCharBuilder_ == null) {
            dateAndTimeChar_ = null;
            onChanged();
          } else {
            dateAndTimeChar_ = null;
            dateAndTimeCharBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
         *
         * <pre>
         * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getDateAndTimeCharBuilder() {
          
          onChanged();
          return getDateAndTimeCharFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
         *
         * <pre>
         * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getDateAndTimeCharOrBuilder() {
          if (dateAndTimeCharBuilder_ != null) {
            return dateAndTimeCharBuilder_.getMessageOrBuilder();
          } else {
            return dateAndTimeChar_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : dateAndTimeChar_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue date_and_time_char = 10004;</code>
         *
         * <pre>
         * "DateAndTime" als "string" im Format "15.04.2001 14:32:55:250"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getDateAndTimeCharFieldBuilder() {
          if (dateAndTimeCharBuilder_ == null) {
            dateAndTimeCharBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getDateAndTimeChar(),
                    getParentForChildren(),
                    isClean());
            dateAndTimeChar_ = null;
          }
          return dateAndTimeCharBuilder_;
        }

        private io.dstore.engine.Values.stringValue basicCharacteristic_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> basicCharacteristicBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
         *
         * <pre>
         * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public boolean hasBasicCharacteristic() {
          return basicCharacteristicBuilder_ != null || basicCharacteristic_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
         *
         * <pre>
         * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getBasicCharacteristic() {
          if (basicCharacteristicBuilder_ == null) {
            return basicCharacteristic_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : basicCharacteristic_;
          } else {
            return basicCharacteristicBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
         *
         * <pre>
         * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public Builder setBasicCharacteristic(io.dstore.engine.Values.stringValue value) {
          if (basicCharacteristicBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            basicCharacteristic_ = value;
            onChanged();
          } else {
            basicCharacteristicBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
         *
         * <pre>
         * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public Builder setBasicCharacteristic(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (basicCharacteristicBuilder_ == null) {
            basicCharacteristic_ = builderForValue.build();
            onChanged();
          } else {
            basicCharacteristicBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
         *
         * <pre>
         * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public Builder mergeBasicCharacteristic(io.dstore.engine.Values.stringValue value) {
          if (basicCharacteristicBuilder_ == null) {
            if (basicCharacteristic_ != null) {
              basicCharacteristic_ =
                io.dstore.engine.Values.stringValue.newBuilder(basicCharacteristic_).mergeFrom(value).buildPartial();
            } else {
              basicCharacteristic_ = value;
            }
            onChanged();
          } else {
            basicCharacteristicBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
         *
         * <pre>
         * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public Builder clearBasicCharacteristic() {
          if (basicCharacteristicBuilder_ == null) {
            basicCharacteristic_ = null;
            onChanged();
          } else {
            basicCharacteristic_ = null;
            basicCharacteristicBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
         *
         * <pre>
         * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getBasicCharacteristicBuilder() {
          
          onChanged();
          return getBasicCharacteristicFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
         *
         * <pre>
         * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getBasicCharacteristicOrBuilder() {
          if (basicCharacteristicBuilder_ != null) {
            return basicCharacteristicBuilder_.getMessageOrBuilder();
          } else {
            return basicCharacteristic_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : basicCharacteristic_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue basic_characteristic = 10005;</code>
         *
         * <pre>
         * Kurzbezeichnung der Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getBasicCharacteristicFieldBuilder() {
          if (basicCharacteristicBuilder_ == null) {
            basicCharacteristicBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getBasicCharacteristic(),
                    getParentForChildren(),
                    isClean());
            basicCharacteristic_ = null;
          }
          return basicCharacteristicBuilder_;
        }

        private io.dstore.engine.Values.booleanValue relationExistsAtDateAndTime_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> relationExistsAtDateAndTimeBuilder_;
        /**
         * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
         *
         * <pre>
         * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
         * </pre>
         */
        public boolean hasRelationExistsAtDateAndTime() {
          return relationExistsAtDateAndTimeBuilder_ != null || relationExistsAtDateAndTime_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
         *
         * <pre>
         * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
         * </pre>
         */
        public io.dstore.engine.Values.booleanValue getRelationExistsAtDateAndTime() {
          if (relationExistsAtDateAndTimeBuilder_ == null) {
            return relationExistsAtDateAndTime_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : relationExistsAtDateAndTime_;
          } else {
            return relationExistsAtDateAndTimeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
         *
         * <pre>
         * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
         * </pre>
         */
        public Builder setRelationExistsAtDateAndTime(io.dstore.engine.Values.booleanValue value) {
          if (relationExistsAtDateAndTimeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            relationExistsAtDateAndTime_ = value;
            onChanged();
          } else {
            relationExistsAtDateAndTimeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
         *
         * <pre>
         * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
         * </pre>
         */
        public Builder setRelationExistsAtDateAndTime(
            io.dstore.engine.Values.booleanValue.Builder builderForValue) {
          if (relationExistsAtDateAndTimeBuilder_ == null) {
            relationExistsAtDateAndTime_ = builderForValue.build();
            onChanged();
          } else {
            relationExistsAtDateAndTimeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
         *
         * <pre>
         * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
         * </pre>
         */
        public Builder mergeRelationExistsAtDateAndTime(io.dstore.engine.Values.booleanValue value) {
          if (relationExistsAtDateAndTimeBuilder_ == null) {
            if (relationExistsAtDateAndTime_ != null) {
              relationExistsAtDateAndTime_ =
                io.dstore.engine.Values.booleanValue.newBuilder(relationExistsAtDateAndTime_).mergeFrom(value).buildPartial();
            } else {
              relationExistsAtDateAndTime_ = value;
            }
            onChanged();
          } else {
            relationExistsAtDateAndTimeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
         *
         * <pre>
         * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
         * </pre>
         */
        public Builder clearRelationExistsAtDateAndTime() {
          if (relationExistsAtDateAndTimeBuilder_ == null) {
            relationExistsAtDateAndTime_ = null;
            onChanged();
          } else {
            relationExistsAtDateAndTime_ = null;
            relationExistsAtDateAndTimeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
         *
         * <pre>
         * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
         * </pre>
         */
        public io.dstore.engine.Values.booleanValue.Builder getRelationExistsAtDateAndTimeBuilder() {
          
          onChanged();
          return getRelationExistsAtDateAndTimeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
         *
         * <pre>
         * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
         * </pre>
         */
        public io.dstore.engine.Values.booleanValueOrBuilder getRelationExistsAtDateAndTimeOrBuilder() {
          if (relationExistsAtDateAndTimeBuilder_ != null) {
            return relationExistsAtDateAndTimeBuilder_.getMessageOrBuilder();
          } else {
            return relationExistsAtDateAndTime_ == null ?
                io.dstore.engine.Values.booleanValue.getDefaultInstance() : relationExistsAtDateAndTime_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue relation_exists_at_date_and_time = 10006;</code>
         *
         * <pre>
         * "1", falls zum Zeitpunkt "DateAndTime" zwischen "VisitorOrPersonID" und "RelatedID" eine Zuordnung bestand
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> 
            getRelationExistsAtDateAndTimeFieldBuilder() {
          if (relationExistsAtDateAndTimeBuilder_ == null) {
            relationExistsAtDateAndTimeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder>(
                    getRelationExistsAtDateAndTime(),
                    getParentForChildren(),
                    isClean());
            relationExistsAtDateAndTime_ = null;
          }
          return relationExistsAtDateAndTimeBuilder_;
        }

        private io.dstore.engine.Values.integerValue hTreeNodeId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> hTreeNodeIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
         *
         * <pre>
         * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
         * </pre>
         */
        public boolean hasHTreeNodeId() {
          return hTreeNodeIdBuilder_ != null || hTreeNodeId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
         *
         * <pre>
         * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getHTreeNodeId() {
          if (hTreeNodeIdBuilder_ == null) {
            return hTreeNodeId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : hTreeNodeId_;
          } else {
            return hTreeNodeIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
         *
         * <pre>
         * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
         * </pre>
         */
        public Builder setHTreeNodeId(io.dstore.engine.Values.integerValue value) {
          if (hTreeNodeIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            hTreeNodeId_ = value;
            onChanged();
          } else {
            hTreeNodeIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
         *
         * <pre>
         * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
         * </pre>
         */
        public Builder setHTreeNodeId(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (hTreeNodeIdBuilder_ == null) {
            hTreeNodeId_ = builderForValue.build();
            onChanged();
          } else {
            hTreeNodeIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
         *
         * <pre>
         * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
         * </pre>
         */
        public Builder mergeHTreeNodeId(io.dstore.engine.Values.integerValue value) {
          if (hTreeNodeIdBuilder_ == null) {
            if (hTreeNodeId_ != null) {
              hTreeNodeId_ =
                io.dstore.engine.Values.integerValue.newBuilder(hTreeNodeId_).mergeFrom(value).buildPartial();
            } else {
              hTreeNodeId_ = value;
            }
            onChanged();
          } else {
            hTreeNodeIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
         *
         * <pre>
         * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
         * </pre>
         */
        public Builder clearHTreeNodeId() {
          if (hTreeNodeIdBuilder_ == null) {
            hTreeNodeId_ = null;
            onChanged();
          } else {
            hTreeNodeId_ = null;
            hTreeNodeIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
         *
         * <pre>
         * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getHTreeNodeIdBuilder() {
          
          onChanged();
          return getHTreeNodeIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
         *
         * <pre>
         * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getHTreeNodeIdOrBuilder() {
          if (hTreeNodeIdBuilder_ != null) {
            return hTreeNodeIdBuilder_.getMessageOrBuilder();
          } else {
            return hTreeNodeId_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : hTreeNodeId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue h_tree_node_id = 10007;</code>
         *
         * <pre>
         * ID eines Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), zu dem die statistische Information "Value" (zum Zeitpunkt "DateAndTime" in der Tabelle "DSS_StatisticData") gespeichert ist
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getHTreeNodeIdFieldBuilder() {
          if (hTreeNodeIdBuilder_ == null) {
            hTreeNodeIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getHTreeNodeId(),
                    getParentForChildren(),
                    isClean());
            hTreeNodeId_ = null;
          }
          return hTreeNodeIdBuilder_;
        }

        private io.dstore.engine.Values.integerValue nodeId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> nodeIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
         *
         * <pre>
         * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
         * </pre>
         */
        public boolean hasNodeId() {
          return nodeIdBuilder_ != null || nodeId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
         *
         * <pre>
         * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getNodeId() {
          if (nodeIdBuilder_ == null) {
            return nodeId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : nodeId_;
          } else {
            return nodeIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
         *
         * <pre>
         * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
         * </pre>
         */
        public Builder setNodeId(io.dstore.engine.Values.integerValue value) {
          if (nodeIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            nodeId_ = value;
            onChanged();
          } else {
            nodeIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
         *
         * <pre>
         * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
         * </pre>
         */
        public Builder setNodeId(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (nodeIdBuilder_ == null) {
            nodeId_ = builderForValue.build();
            onChanged();
          } else {
            nodeIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
         *
         * <pre>
         * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
         * </pre>
         */
        public Builder mergeNodeId(io.dstore.engine.Values.integerValue value) {
          if (nodeIdBuilder_ == null) {
            if (nodeId_ != null) {
              nodeId_ =
                io.dstore.engine.Values.integerValue.newBuilder(nodeId_).mergeFrom(value).buildPartial();
            } else {
              nodeId_ = value;
            }
            onChanged();
          } else {
            nodeIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
         *
         * <pre>
         * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
         * </pre>
         */
        public Builder clearNodeId() {
          if (nodeIdBuilder_ == null) {
            nodeId_ = null;
            onChanged();
          } else {
            nodeId_ = null;
            nodeIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
         *
         * <pre>
         * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getNodeIdBuilder() {
          
          onChanged();
          return getNodeIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
         *
         * <pre>
         * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getNodeIdOrBuilder() {
          if (nodeIdBuilder_ != null) {
            return nodeIdBuilder_.getMessageOrBuilder();
          } else {
            return nodeId_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : nodeId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_id = 10008;</code>
         *
         * <pre>
         * ID des zur "HTreeNodeID" zugehörigen Artikel-Elementes (auf das sich die statistische Information bezieht)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getNodeIdFieldBuilder() {
          if (nodeIdBuilder_ == null) {
            nodeIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getNodeId(),
                    getParentForChildren(),
                    isClean());
            nodeId_ = null;
          }
          return nodeIdBuilder_;
        }

        private io.dstore.engine.Values.decimalValue value_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> valueBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
         *
         * <pre>
         * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
         * </pre>
         */
        public boolean hasValue() {
          return valueBuilder_ != null || value_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
         *
         * <pre>
         * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getValue() {
          if (valueBuilder_ == null) {
            return value_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : value_;
          } else {
            return valueBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
         *
         * <pre>
         * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
         * </pre>
         */
        public Builder setValue(io.dstore.engine.Values.decimalValue value) {
          if (valueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            value_ = value;
            onChanged();
          } else {
            valueBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
         *
         * <pre>
         * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
         * </pre>
         */
        public Builder setValue(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (valueBuilder_ == null) {
            value_ = builderForValue.build();
            onChanged();
          } else {
            valueBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
         *
         * <pre>
         * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
         * </pre>
         */
        public Builder mergeValue(io.dstore.engine.Values.decimalValue value) {
          if (valueBuilder_ == null) {
            if (value_ != null) {
              value_ =
                io.dstore.engine.Values.decimalValue.newBuilder(value_).mergeFrom(value).buildPartial();
            } else {
              value_ = value;
            }
            onChanged();
          } else {
            valueBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
         *
         * <pre>
         * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
         * </pre>
         */
        public Builder clearValue() {
          if (valueBuilder_ == null) {
            value_ = null;
            onChanged();
          } else {
            value_ = null;
            valueBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
         *
         * <pre>
         * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getValueBuilder() {
          
          onChanged();
          return getValueFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
         *
         * <pre>
         * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getValueOrBuilder() {
          if (valueBuilder_ != null) {
            return valueBuilder_.getMessageOrBuilder();
          } else {
            return value_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : value_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue value = 10009;</code>
         *
         * <pre>
         * Die gespeicherte statistische Information zur Basis-Kennzahl "BasicCharacteristicNumber", z.Zt. entweder eine Anzahl (für die Basis-Kennzahl "Views" z.B.) oder ein Betrag in der Standardwährung (für die Basis-Kennzahl "Bestellumsatz")
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getValueFieldBuilder() {
          if (valueBuilder_ == null) {
            valueBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getValue(),
                    getParentForChildren(),
                    isClean());
            value_ = null;
          }
          return valueBuilder_;
        }

        private io.dstore.engine.Values.timestampValue dateAndTime_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.timestampValue, io.dstore.engine.Values.timestampValue.Builder, io.dstore.engine.Values.timestampValueOrBuilder> dateAndTimeBuilder_;
        /**
         * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
         *
         * <pre>
         * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public boolean hasDateAndTime() {
          return dateAndTimeBuilder_ != null || dateAndTime_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
         *
         * <pre>
         * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public io.dstore.engine.Values.timestampValue getDateAndTime() {
          if (dateAndTimeBuilder_ == null) {
            return dateAndTime_ == null ? io.dstore.engine.Values.timestampValue.getDefaultInstance() : dateAndTime_;
          } else {
            return dateAndTimeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
         *
         * <pre>
         * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public Builder setDateAndTime(io.dstore.engine.Values.timestampValue value) {
          if (dateAndTimeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            dateAndTime_ = value;
            onChanged();
          } else {
            dateAndTimeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
         *
         * <pre>
         * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public Builder setDateAndTime(
            io.dstore.engine.Values.timestampValue.Builder builderForValue) {
          if (dateAndTimeBuilder_ == null) {
            dateAndTime_ = builderForValue.build();
            onChanged();
          } else {
            dateAndTimeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
         *
         * <pre>
         * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public Builder mergeDateAndTime(io.dstore.engine.Values.timestampValue value) {
          if (dateAndTimeBuilder_ == null) {
            if (dateAndTime_ != null) {
              dateAndTime_ =
                io.dstore.engine.Values.timestampValue.newBuilder(dateAndTime_).mergeFrom(value).buildPartial();
            } else {
              dateAndTime_ = value;
            }
            onChanged();
          } else {
            dateAndTimeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
         *
         * <pre>
         * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public Builder clearDateAndTime() {
          if (dateAndTimeBuilder_ == null) {
            dateAndTime_ = null;
            onChanged();
          } else {
            dateAndTime_ = null;
            dateAndTimeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
         *
         * <pre>
         * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public io.dstore.engine.Values.timestampValue.Builder getDateAndTimeBuilder() {
          
          onChanged();
          return getDateAndTimeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
         *
         * <pre>
         * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        public io.dstore.engine.Values.timestampValueOrBuilder getDateAndTimeOrBuilder() {
          if (dateAndTimeBuilder_ != null) {
            return dateAndTimeBuilder_.getMessageOrBuilder();
          } else {
            return dateAndTime_ == null ?
                io.dstore.engine.Values.timestampValue.getDefaultInstance() : dateAndTime_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.timestampValue date_and_time = 10010;</code>
         *
         * <pre>
         * Zeitpunkt der statistischen Information "Value" zur Basis-Kennzahl "BasicCharacteristicNumber"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.timestampValue, io.dstore.engine.Values.timestampValue.Builder, io.dstore.engine.Values.timestampValueOrBuilder> 
            getDateAndTimeFieldBuilder() {
          if (dateAndTimeBuilder_ == null) {
            dateAndTimeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.timestampValue, io.dstore.engine.Values.timestampValue.Builder, io.dstore.engine.Values.timestampValueOrBuilder>(
                    getDateAndTime(),
                    getParentForChildren(),
                    isClean());
            dateAndTime_ = null;
          }
          return dateAndTimeBuilder_;
        }

        private io.dstore.engine.Values.integerValue relatedId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> relatedIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
         *
         * <pre>
         * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
         * </pre>
         */
        public boolean hasRelatedId() {
          return relatedIdBuilder_ != null || relatedId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
         *
         * <pre>
         * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getRelatedId() {
          if (relatedIdBuilder_ == null) {
            return relatedId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : relatedId_;
          } else {
            return relatedIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
         *
         * <pre>
         * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
         * </pre>
         */
        public Builder setRelatedId(io.dstore.engine.Values.integerValue value) {
          if (relatedIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            relatedId_ = value;
            onChanged();
          } else {
            relatedIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
         *
         * <pre>
         * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
         * </pre>
         */
        public Builder setRelatedId(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (relatedIdBuilder_ == null) {
            relatedId_ = builderForValue.build();
            onChanged();
          } else {
            relatedIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
         *
         * <pre>
         * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
         * </pre>
         */
        public Builder mergeRelatedId(io.dstore.engine.Values.integerValue value) {
          if (relatedIdBuilder_ == null) {
            if (relatedId_ != null) {
              relatedId_ =
                io.dstore.engine.Values.integerValue.newBuilder(relatedId_).mergeFrom(value).buildPartial();
            } else {
              relatedId_ = value;
            }
            onChanged();
          } else {
            relatedIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
         *
         * <pre>
         * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
         * </pre>
         */
        public Builder clearRelatedId() {
          if (relatedIdBuilder_ == null) {
            relatedId_ = null;
            onChanged();
          } else {
            relatedId_ = null;
            relatedIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
         *
         * <pre>
         * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getRelatedIdBuilder() {
          
          onChanged();
          return getRelatedIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
         *
         * <pre>
         * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getRelatedIdOrBuilder() {
          if (relatedIdBuilder_ != null) {
            return relatedIdBuilder_.getMessageOrBuilder();
          } else {
            return relatedId_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : relatedId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue related_id = 10011;</code>
         *
         * <pre>
         * Immer "NULL", wenn "ValueBelongsToRelatedID = 0" ist. Ansonsten steht hier die ID des zugeordneten Besuchers bzw. der zugeordneten Person, zu der die statistische Information "Value" gespeichert ist
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getRelatedIdFieldBuilder() {
          if (relatedIdBuilder_ == null) {
            relatedIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getRelatedId(),
                    getParentForChildren(),
                    isClean());
            relatedId_ = null;
          }
          return relatedIdBuilder_;
        }

        private io.dstore.engine.Values.integerValue basicCharacteristicNumber_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> basicCharacteristicNumberBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
         *
         * <pre>
         * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
         * </pre>
         */
        public boolean hasBasicCharacteristicNumber() {
          return basicCharacteristicNumberBuilder_ != null || basicCharacteristicNumber_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
         *
         * <pre>
         * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getBasicCharacteristicNumber() {
          if (basicCharacteristicNumberBuilder_ == null) {
            return basicCharacteristicNumber_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : basicCharacteristicNumber_;
          } else {
            return basicCharacteristicNumberBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
         *
         * <pre>
         * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
         * </pre>
         */
        public Builder setBasicCharacteristicNumber(io.dstore.engine.Values.integerValue value) {
          if (basicCharacteristicNumberBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            basicCharacteristicNumber_ = value;
            onChanged();
          } else {
            basicCharacteristicNumberBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
         *
         * <pre>
         * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
         * </pre>
         */
        public Builder setBasicCharacteristicNumber(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (basicCharacteristicNumberBuilder_ == null) {
            basicCharacteristicNumber_ = builderForValue.build();
            onChanged();
          } else {
            basicCharacteristicNumberBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
         *
         * <pre>
         * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
         * </pre>
         */
        public Builder mergeBasicCharacteristicNumber(io.dstore.engine.Values.integerValue value) {
          if (basicCharacteristicNumberBuilder_ == null) {
            if (basicCharacteristicNumber_ != null) {
              basicCharacteristicNumber_ =
                io.dstore.engine.Values.integerValue.newBuilder(basicCharacteristicNumber_).mergeFrom(value).buildPartial();
            } else {
              basicCharacteristicNumber_ = value;
            }
            onChanged();
          } else {
            basicCharacteristicNumberBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
         *
         * <pre>
         * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
         * </pre>
         */
        public Builder clearBasicCharacteristicNumber() {
          if (basicCharacteristicNumberBuilder_ == null) {
            basicCharacteristicNumber_ = null;
            onChanged();
          } else {
            basicCharacteristicNumber_ = null;
            basicCharacteristicNumberBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
         *
         * <pre>
         * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getBasicCharacteristicNumberBuilder() {
          
          onChanged();
          return getBasicCharacteristicNumberFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
         *
         * <pre>
         * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getBasicCharacteristicNumberOrBuilder() {
          if (basicCharacteristicNumberBuilder_ != null) {
            return basicCharacteristicNumberBuilder_.getMessageOrBuilder();
          } else {
            return basicCharacteristicNumber_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : basicCharacteristicNumber_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue basic_characteristic_number = 10012;</code>
         *
         * <pre>
         * Nummer der Basis-Kennzahl, auf die sich die Information "Value" bezieht (mögliche Werte : siehe "st_GetBasicCharacteristics_Ad")
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getBasicCharacteristicNumberFieldBuilder() {
          if (basicCharacteristicNumberBuilder_ == null) {
            basicCharacteristicNumberBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getBasicCharacteristicNumber(),
                    getParentForChildren(),
                    isClean());
            basicCharacteristicNumber_ = null;
          }
          return basicCharacteristicNumberBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:dstore.engine.st_GetClickStream_Ad.Response.Row)
      }

      // @@protoc_insertion_point(class_scope:dstore.engine.st_GetClickStream_Ad.Response.Row)
      private static final io.dstore.engine.procs.StGetClickStreamAd.Response.Row DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.dstore.engine.procs.StGetClickStreamAd.Response.Row();
      }

      public static io.dstore.engine.procs.StGetClickStreamAd.Response.Row getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      public static final com.google.protobuf.Parser<Row> PARSER =
          new com.google.protobuf.AbstractParser<Row>() {
        public Row parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new Row(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<Row> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Row> getParserForType() {
        return PARSER;
      }

      public io.dstore.engine.procs.StGetClickStreamAd.Response.Row getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int ERROR_FIELD_NUMBER = 1;
    private io.dstore.engine.ProcedureError.Error error_;
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public boolean hasError() {
      return error_ != null;
    }
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public io.dstore.engine.ProcedureError.Error getError() {
      return error_ == null ? io.dstore.engine.ProcedureError.Error.getDefaultInstance() : error_;
    }
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public io.dstore.engine.ProcedureError.ErrorOrBuilder getErrorOrBuilder() {
      return getError();
    }

    public static final int MESSAGE_FIELD_NUMBER = 3;
    private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_;
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public int getMessageCount() {
      return message_.size();
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
      return message_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index) {
      return message_.get(index);
    }

    public static final int ROW_FIELD_NUMBER = 4;
    private java.util.List<io.dstore.engine.procs.StGetClickStreamAd.Response.Row> row_;
    /**
     * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public java.util.List<io.dstore.engine.procs.StGetClickStreamAd.Response.Row> getRowList() {
      return row_;
    }
    /**
     * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public java.util.List<? extends io.dstore.engine.procs.StGetClickStreamAd.Response.RowOrBuilder> 
        getRowOrBuilderList() {
      return row_;
    }
    /**
     * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public int getRowCount() {
      return row_.size();
    }
    /**
     * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public io.dstore.engine.procs.StGetClickStreamAd.Response.Row getRow(int index) {
      return row_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public io.dstore.engine.procs.StGetClickStreamAd.Response.RowOrBuilder getRowOrBuilder(
        int index) {
      return row_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (error_ != null) {
        output.writeMessage(1, getError());
      }
      for (int i = 0; i < message_.size(); i++) {
        output.writeMessage(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        output.writeMessage(4, row_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (error_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getError());
      }
      for (int i = 0; i < message_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, row_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procs.StGetClickStreamAd.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.StGetClickStreamAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procs.StGetClickStreamAd.Response prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.st_GetClickStream_Ad.Response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.st_GetClickStream_Ad.Response)
        io.dstore.engine.procs.StGetClickStreamAd.ResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.StGetClickStreamAd.Response.class, io.dstore.engine.procs.StGetClickStreamAd.Response.Builder.class);
      }

      // Construct using io.dstore.engine.procs.StGetClickStreamAd.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMessageFieldBuilder();
          getRowFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (errorBuilder_ == null) {
          error_ = null;
        } else {
          error_ = null;
          errorBuilder_ = null;
        }
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          messageBuilder_.clear();
        }
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          rowBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procs.StGetClickStreamAd.internal_static_dstore_engine_st_GetClickStream_Ad_Response_descriptor;
      }

      public io.dstore.engine.procs.StGetClickStreamAd.Response getDefaultInstanceForType() {
        return io.dstore.engine.procs.StGetClickStreamAd.Response.getDefaultInstance();
      }

      public io.dstore.engine.procs.StGetClickStreamAd.Response build() {
        io.dstore.engine.procs.StGetClickStreamAd.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procs.StGetClickStreamAd.Response buildPartial() {
        io.dstore.engine.procs.StGetClickStreamAd.Response result = new io.dstore.engine.procs.StGetClickStreamAd.Response(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (errorBuilder_ == null) {
          result.error_ = error_;
        } else {
          result.error_ = errorBuilder_.build();
        }
        if (messageBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            message_ = java.util.Collections.unmodifiableList(message_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.message_ = message_;
        } else {
          result.message_ = messageBuilder_.build();
        }
        if (rowBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            row_ = java.util.Collections.unmodifiableList(row_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.row_ = row_;
        } else {
          result.row_ = rowBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procs.StGetClickStreamAd.Response) {
          return mergeFrom((io.dstore.engine.procs.StGetClickStreamAd.Response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procs.StGetClickStreamAd.Response other) {
        if (other == io.dstore.engine.procs.StGetClickStreamAd.Response.getDefaultInstance()) return this;
        if (other.hasError()) {
          mergeError(other.getError());
        }
        if (messageBuilder_ == null) {
          if (!other.message_.isEmpty()) {
            if (message_.isEmpty()) {
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMessageIsMutable();
              message_.addAll(other.message_);
            }
            onChanged();
          }
        } else {
          if (!other.message_.isEmpty()) {
            if (messageBuilder_.isEmpty()) {
              messageBuilder_.dispose();
              messageBuilder_ = null;
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
              messageBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMessageFieldBuilder() : null;
            } else {
              messageBuilder_.addAllMessages(other.message_);
            }
          }
        }
        if (rowBuilder_ == null) {
          if (!other.row_.isEmpty()) {
            if (row_.isEmpty()) {
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureRowIsMutable();
              row_.addAll(other.row_);
            }
            onChanged();
          }
        } else {
          if (!other.row_.isEmpty()) {
            if (rowBuilder_.isEmpty()) {
              rowBuilder_.dispose();
              rowBuilder_ = null;
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
              rowBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRowFieldBuilder() : null;
            } else {
              rowBuilder_.addAllMessages(other.row_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procs.StGetClickStreamAd.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procs.StGetClickStreamAd.Response) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private io.dstore.engine.ProcedureError.Error error_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.ProcedureError.Error, io.dstore.engine.ProcedureError.Error.Builder, io.dstore.engine.ProcedureError.ErrorOrBuilder> errorBuilder_;
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public boolean hasError() {
        return errorBuilder_ != null || error_ != null;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.ProcedureError.Error getError() {
        if (errorBuilder_ == null) {
          return error_ == null ? io.dstore.engine.ProcedureError.Error.getDefaultInstance() : error_;
        } else {
          return errorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder setError(io.dstore.engine.ProcedureError.Error value) {
        if (errorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          error_ = value;
          onChanged();
        } else {
          errorBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder setError(
          io.dstore.engine.ProcedureError.Error.Builder builderForValue) {
        if (errorBuilder_ == null) {
          error_ = builderForValue.build();
          onChanged();
        } else {
          errorBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder mergeError(io.dstore.engine.ProcedureError.Error value) {
        if (errorBuilder_ == null) {
          if (error_ != null) {
            error_ =
              io.dstore.engine.ProcedureError.Error.newBuilder(error_).mergeFrom(value).buildPartial();
          } else {
            error_ = value;
          }
          onChanged();
        } else {
          errorBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder clearError() {
        if (errorBuilder_ == null) {
          error_ = null;
          onChanged();
        } else {
          error_ = null;
          errorBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.ProcedureError.Error.Builder getErrorBuilder() {
        
        onChanged();
        return getErrorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.ProcedureError.ErrorOrBuilder getErrorOrBuilder() {
        if (errorBuilder_ != null) {
          return errorBuilder_.getMessageOrBuilder();
        } else {
          return error_ == null ?
              io.dstore.engine.ProcedureError.Error.getDefaultInstance() : error_;
        }
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.ProcedureError.Error, io.dstore.engine.ProcedureError.Error.Builder, io.dstore.engine.ProcedureError.ErrorOrBuilder> 
          getErrorFieldBuilder() {
        if (errorBuilder_ == null) {
          errorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.ProcedureError.Error, io.dstore.engine.ProcedureError.Error.Builder, io.dstore.engine.ProcedureError.ErrorOrBuilder>(
                  getError(),
                  getParentForChildren(),
                  isClean());
          error_ = null;
        }
        return errorBuilder_;
      }

      private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_ =
        java.util.Collections.emptyList();
      private void ensureMessageIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>(message_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> messageBuilder_;

      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
        if (messageBuilder_ == null) {
          return java.util.Collections.unmodifiableList(message_);
        } else {
          return messageBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public int getMessageCount() {
        if (messageBuilder_ == null) {
          return message_.size();
        } else {
          return messageBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);
        } else {
          return messageBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.set(index, value);
          onChanged();
        } else {
          messageBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.set(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(value);
          onChanged();
        } else {
          messageBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(index, value);
          onChanged();
        } else {
          messageBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addAllMessage(
          java.lang.Iterable<? extends io.dstore.engine.ProcedureMessage.Message> values) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, message_);
          onChanged();
        } else {
          messageBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder clearMessage() {
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          messageBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder removeMessage(int index) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.remove(index);
          onChanged();
        } else {
          messageBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder getMessageBuilder(
          int index) {
        return getMessageFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
          int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);  } else {
          return messageBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
           getMessageOrBuilderList() {
        if (messageBuilder_ != null) {
          return messageBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(message_);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder() {
        return getMessageFieldBuilder().addBuilder(
            io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder(
          int index) {
        return getMessageFieldBuilder().addBuilder(
            index, io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message.Builder> 
           getMessageBuilderList() {
        return getMessageFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
          getMessageFieldBuilder() {
        if (messageBuilder_ == null) {
          messageBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder>(
                  message_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        return messageBuilder_;
      }

      private java.util.List<io.dstore.engine.procs.StGetClickStreamAd.Response.Row> row_ =
        java.util.Collections.emptyList();
      private void ensureRowIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = new java.util.ArrayList<io.dstore.engine.procs.StGetClickStreamAd.Response.Row>(row_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procs.StGetClickStreamAd.Response.Row, io.dstore.engine.procs.StGetClickStreamAd.Response.Row.Builder, io.dstore.engine.procs.StGetClickStreamAd.Response.RowOrBuilder> rowBuilder_;

      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<io.dstore.engine.procs.StGetClickStreamAd.Response.Row> getRowList() {
        if (rowBuilder_ == null) {
          return java.util.Collections.unmodifiableList(row_);
        } else {
          return rowBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public int getRowCount() {
        if (rowBuilder_ == null) {
          return row_.size();
        } else {
          return rowBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.StGetClickStreamAd.Response.Row getRow(int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);
        } else {
          return rowBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder setRow(
          int index, io.dstore.engine.procs.StGetClickStreamAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.set(index, value);
          onChanged();
        } else {
          rowBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder setRow(
          int index, io.dstore.engine.procs.StGetClickStreamAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.set(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(io.dstore.engine.procs.StGetClickStreamAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(value);
          onChanged();
        } else {
          rowBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          int index, io.dstore.engine.procs.StGetClickStreamAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(index, value);
          onChanged();
        } else {
          rowBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          io.dstore.engine.procs.StGetClickStreamAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          int index, io.dstore.engine.procs.StGetClickStreamAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addAllRow(
          java.lang.Iterable<? extends io.dstore.engine.procs.StGetClickStreamAd.Response.Row> values) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, row_);
          onChanged();
        } else {
          rowBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder clearRow() {
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          rowBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder removeRow(int index) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.remove(index);
          onChanged();
        } else {
          rowBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.StGetClickStreamAd.Response.Row.Builder getRowBuilder(
          int index) {
        return getRowFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.StGetClickStreamAd.Response.RowOrBuilder getRowOrBuilder(
          int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);  } else {
          return rowBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<? extends io.dstore.engine.procs.StGetClickStreamAd.Response.RowOrBuilder> 
           getRowOrBuilderList() {
        if (rowBuilder_ != null) {
          return rowBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(row_);
        }
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.StGetClickStreamAd.Response.Row.Builder addRowBuilder() {
        return getRowFieldBuilder().addBuilder(
            io.dstore.engine.procs.StGetClickStreamAd.Response.Row.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.StGetClickStreamAd.Response.Row.Builder addRowBuilder(
          int index) {
        return getRowFieldBuilder().addBuilder(
            index, io.dstore.engine.procs.StGetClickStreamAd.Response.Row.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.st_GetClickStream_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<io.dstore.engine.procs.StGetClickStreamAd.Response.Row.Builder> 
           getRowBuilderList() {
        return getRowFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procs.StGetClickStreamAd.Response.Row, io.dstore.engine.procs.StGetClickStreamAd.Response.Row.Builder, io.dstore.engine.procs.StGetClickStreamAd.Response.RowOrBuilder> 
          getRowFieldBuilder() {
        if (rowBuilder_ == null) {
          rowBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.procs.StGetClickStreamAd.Response.Row, io.dstore.engine.procs.StGetClickStreamAd.Response.Row.Builder, io.dstore.engine.procs.StGetClickStreamAd.Response.RowOrBuilder>(
                  row_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          row_ = null;
        }
        return rowBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.st_GetClickStream_Ad.Response)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.st_GetClickStream_Ad.Response)
    private static final io.dstore.engine.procs.StGetClickStreamAd.Response DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procs.StGetClickStreamAd.Response();
    }

    public static io.dstore.engine.procs.StGetClickStreamAd.Response getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    public static final com.google.protobuf.Parser<Response> PARSER =
        new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Response(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Response> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procs.StGetClickStreamAd.Response getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_st_GetClickStream_Ad_Parameters_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_st_GetClickStream_Ad_Parameters_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_st_GetClickStream_Ad_Response_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_st_GetClickStream_Ad_Response_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_st_GetClickStream_Ad_Response_Row_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_st_GetClickStream_Ad_Response_Row_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n3dstore/engine/procedures/st_GetClickSt" +
      "ream_Ad.proto\022\"dstore.engine.st_GetClick" +
      "Stream_Ad\032\032dstore/engine/values.proto\032\031d" +
      "store/engine/error.proto\032\033dstore/engine/" +
      "message.proto\"\267\005\n\nParameters\0225\n\tperson_i" +
      "d\030\001 \001(\0132\".dstore.engine.values.integerVa" +
      "lue\022\027\n\016person_id_null\030\351\007 \001(\010\0227\n\tfrom_dat" +
      "e\030\002 \001(\0132$.dstore.engine.values.timestamp" +
      "Value\022\027\n\016from_date_null\030\352\007 \001(\010\0225\n\007to_dat" +
      "e\030\003 \001(\0132$.dstore.engine.values.timestamp",
      "Value\022\025\n\014to_date_null\030\353\007 \001(\010\0226\n\nvisitor_" +
      "id\030\004 \001(\0132\".dstore.engine.values.integerV" +
      "alue\022\030\n\017visitor_id_null\030\354\007 \001(\010\022K\n\037visito" +
      "r_or_person_ids_in_one_id\030\005 \001(\0132\".dstore" +
      ".engine.values.integerValue\022-\n$visitor_o" +
      "r_person_ids_in_one_id_null\030\355\007 \001(\010\022I\n\035co" +
      "nsider_only_relation_period\030\006 \001(\0132\".dsto" +
      "re.engine.values.booleanValue\022+\n\"conside" +
      "r_only_relation_period_null\030\356\007 \001(\010\022G\n\034ba" +
      "sic_characteristic_numbers\030\007 \001(\0132!.dstor",
      "e.engine.values.stringValue\022*\n!basic_cha" +
      "racteristic_numbers_null\030\357\007 \001(\010\"\302\007\n\010Resp" +
      "onse\022)\n\005error\030\001 \001(\0132\032.dstore.engine.erro" +
      "r.Error\022/\n\007message\030\003 \003(\0132\036.dstore.engine" +
      ".message.Message\022=\n\003row\030\004 \003(\01320.dstore.e" +
      "ngine.st_GetClickStream_Ad.Response.Row\032" +
      "\232\006\n\003Row\022\017\n\006row_id\030\220N \001(\005\022H\n\033value_belong" +
      "s_to_related_id\030\221N \001(\0132\".dstore.engine.v" +
      "alues.booleanValue\022<\n\020node_description\030\222" +
      "N \001(\0132!.dstore.engine.values.stringValue",
      "\022A\n\024visitor_or_person_id\030\223N \001(\0132\".dstore" +
      ".engine.values.integerValue\022>\n\022date_and_" +
      "time_char\030\224N \001(\0132!.dstore.engine.values." +
      "stringValue\022@\n\024basic_characteristic\030\225N \001" +
      "(\0132!.dstore.engine.values.stringValue\022M\n" +
      " relation_exists_at_date_and_time\030\226N \001(\013" +
      "2\".dstore.engine.values.booleanValue\022;\n\016" +
      "h_tree_node_id\030\227N \001(\0132\".dstore.engine.va" +
      "lues.integerValue\0224\n\007node_id\030\230N \001(\0132\".ds" +
      "tore.engine.values.integerValue\0222\n\005value",
      "\030\231N \001(\0132\".dstore.engine.values.decimalVa" +
      "lue\022<\n\rdate_and_time\030\232N \001(\0132$.dstore.eng" +
      "ine.values.timestampValue\0227\n\nrelated_id\030" +
      "\233N \001(\0132\".dstore.engine.values.integerVal" +
      "ue\022H\n\033basic_characteristic_number\030\234N \001(\013" +
      "2\".dstore.engine.values.integerValueB\030\n\026" +
      "io.dstore.engine.procsb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.dstore.engine.Values.getDescriptor(),
          io.dstore.engine.ProcedureError.getDescriptor(),
          io.dstore.engine.ProcedureMessage.getDescriptor(),
        }, assigner);
    internal_static_dstore_engine_st_GetClickStream_Ad_Parameters_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dstore_engine_st_GetClickStream_Ad_Parameters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_st_GetClickStream_Ad_Parameters_descriptor,
        new java.lang.String[] { "PersonId", "PersonIdNull", "FromDate", "FromDateNull", "ToDate", "ToDateNull", "VisitorId", "VisitorIdNull", "VisitorOrPersonIdsInOneId", "VisitorOrPersonIdsInOneIdNull", "ConsiderOnlyRelationPeriod", "ConsiderOnlyRelationPeriodNull", "BasicCharacteristicNumbers", "BasicCharacteristicNumbersNull", });
    internal_static_dstore_engine_st_GetClickStream_Ad_Response_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dstore_engine_st_GetClickStream_Ad_Response_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_st_GetClickStream_Ad_Response_descriptor,
        new java.lang.String[] { "Error", "Message", "Row", });
    internal_static_dstore_engine_st_GetClickStream_Ad_Response_Row_descriptor =
      internal_static_dstore_engine_st_GetClickStream_Ad_Response_descriptor.getNestedTypes().get(0);
    internal_static_dstore_engine_st_GetClickStream_Ad_Response_Row_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_st_GetClickStream_Ad_Response_Row_descriptor,
        new java.lang.String[] { "RowId", "ValueBelongsToRelatedId", "NodeDescription", "VisitorOrPersonId", "DateAndTimeChar", "BasicCharacteristic", "RelationExistsAtDateAndTime", "HTreeNodeId", "NodeId", "Value", "DateAndTime", "RelatedId", "BasicCharacteristicNumber", });
    io.dstore.engine.Values.getDescriptor();
    io.dstore.engine.ProcedureError.getDescriptor();
    io.dstore.engine.ProcedureMessage.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
