// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dstore/engine/procedures/mi_GetTaxRates.proto

package io.dstore.engine.procs;

public final class MiGetTaxRates {
  private MiGetTaxRates() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ParametersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.mi_GetTaxRates.Parameters)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
     */
    boolean hasTaxRateId();
    /**
     * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
     */
    io.dstore.engine.Values.integerValue getTaxRateId();
    /**
     * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
     */
    io.dstore.engine.Values.integerValueOrBuilder getTaxRateIdOrBuilder();

    /**
     * <code>optional bool tax_rate_id_null = 1001;</code>
     */
    boolean getTaxRateIdNull();

    /**
     * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
     */
    boolean hasOnlyActive();
    /**
     * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
     */
    io.dstore.engine.Values.booleanValue getOnlyActive();
    /**
     * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
     */
    io.dstore.engine.Values.booleanValueOrBuilder getOnlyActiveOrBuilder();

    /**
     * <code>optional bool only_active_null = 1002;</code>
     */
    boolean getOnlyActiveNull();
  }
  /**
   * Protobuf type {@code dstore.engine.mi_GetTaxRates.Parameters}
   */
  public  static final class Parameters extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.mi_GetTaxRates.Parameters)
      ParametersOrBuilder {
    // Use Parameters.newBuilder() to construct.
    private Parameters(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Parameters() {
      taxRateIdNull_ = false;
      onlyActiveNull_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Parameters(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.engine.Values.integerValue.Builder subBuilder = null;
              if (taxRateId_ != null) {
                subBuilder = taxRateId_.toBuilder();
              }
              taxRateId_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(taxRateId_);
                taxRateId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.dstore.engine.Values.booleanValue.Builder subBuilder = null;
              if (onlyActive_ != null) {
                subBuilder = onlyActive_.toBuilder();
              }
              onlyActive_ = input.readMessage(io.dstore.engine.Values.booleanValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(onlyActive_);
                onlyActive_ = subBuilder.buildPartial();
              }

              break;
            }
            case 8008: {

              taxRateIdNull_ = input.readBool();
              break;
            }
            case 8016: {

              onlyActiveNull_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Parameters_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Parameters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procs.MiGetTaxRates.Parameters.class, io.dstore.engine.procs.MiGetTaxRates.Parameters.Builder.class);
    }

    public static final int TAX_RATE_ID_FIELD_NUMBER = 1;
    private io.dstore.engine.Values.integerValue taxRateId_;
    /**
     * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
     */
    public boolean hasTaxRateId() {
      return taxRateId_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
     */
    public io.dstore.engine.Values.integerValue getTaxRateId() {
      return taxRateId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : taxRateId_;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
     */
    public io.dstore.engine.Values.integerValueOrBuilder getTaxRateIdOrBuilder() {
      return getTaxRateId();
    }

    public static final int TAX_RATE_ID_NULL_FIELD_NUMBER = 1001;
    private boolean taxRateIdNull_;
    /**
     * <code>optional bool tax_rate_id_null = 1001;</code>
     */
    public boolean getTaxRateIdNull() {
      return taxRateIdNull_;
    }

    public static final int ONLY_ACTIVE_FIELD_NUMBER = 2;
    private io.dstore.engine.Values.booleanValue onlyActive_;
    /**
     * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
     */
    public boolean hasOnlyActive() {
      return onlyActive_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
     */
    public io.dstore.engine.Values.booleanValue getOnlyActive() {
      return onlyActive_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : onlyActive_;
    }
    /**
     * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
     */
    public io.dstore.engine.Values.booleanValueOrBuilder getOnlyActiveOrBuilder() {
      return getOnlyActive();
    }

    public static final int ONLY_ACTIVE_NULL_FIELD_NUMBER = 1002;
    private boolean onlyActiveNull_;
    /**
     * <code>optional bool only_active_null = 1002;</code>
     */
    public boolean getOnlyActiveNull() {
      return onlyActiveNull_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (taxRateId_ != null) {
        output.writeMessage(1, getTaxRateId());
      }
      if (onlyActive_ != null) {
        output.writeMessage(2, getOnlyActive());
      }
      if (taxRateIdNull_ != false) {
        output.writeBool(1001, taxRateIdNull_);
      }
      if (onlyActiveNull_ != false) {
        output.writeBool(1002, onlyActiveNull_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (taxRateId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTaxRateId());
      }
      if (onlyActive_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getOnlyActive());
      }
      if (taxRateIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1001, taxRateIdNull_);
      }
      if (onlyActiveNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1002, onlyActiveNull_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procs.MiGetTaxRates.Parameters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Parameters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Parameters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Parameters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Parameters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Parameters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Parameters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Parameters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procs.MiGetTaxRates.Parameters prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.mi_GetTaxRates.Parameters}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.mi_GetTaxRates.Parameters)
        io.dstore.engine.procs.MiGetTaxRates.ParametersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Parameters_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Parameters_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.MiGetTaxRates.Parameters.class, io.dstore.engine.procs.MiGetTaxRates.Parameters.Builder.class);
      }

      // Construct using io.dstore.engine.procs.MiGetTaxRates.Parameters.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (taxRateIdBuilder_ == null) {
          taxRateId_ = null;
        } else {
          taxRateId_ = null;
          taxRateIdBuilder_ = null;
        }
        taxRateIdNull_ = false;

        if (onlyActiveBuilder_ == null) {
          onlyActive_ = null;
        } else {
          onlyActive_ = null;
          onlyActiveBuilder_ = null;
        }
        onlyActiveNull_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Parameters_descriptor;
      }

      public io.dstore.engine.procs.MiGetTaxRates.Parameters getDefaultInstanceForType() {
        return io.dstore.engine.procs.MiGetTaxRates.Parameters.getDefaultInstance();
      }

      public io.dstore.engine.procs.MiGetTaxRates.Parameters build() {
        io.dstore.engine.procs.MiGetTaxRates.Parameters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procs.MiGetTaxRates.Parameters buildPartial() {
        io.dstore.engine.procs.MiGetTaxRates.Parameters result = new io.dstore.engine.procs.MiGetTaxRates.Parameters(this);
        if (taxRateIdBuilder_ == null) {
          result.taxRateId_ = taxRateId_;
        } else {
          result.taxRateId_ = taxRateIdBuilder_.build();
        }
        result.taxRateIdNull_ = taxRateIdNull_;
        if (onlyActiveBuilder_ == null) {
          result.onlyActive_ = onlyActive_;
        } else {
          result.onlyActive_ = onlyActiveBuilder_.build();
        }
        result.onlyActiveNull_ = onlyActiveNull_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procs.MiGetTaxRates.Parameters) {
          return mergeFrom((io.dstore.engine.procs.MiGetTaxRates.Parameters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procs.MiGetTaxRates.Parameters other) {
        if (other == io.dstore.engine.procs.MiGetTaxRates.Parameters.getDefaultInstance()) return this;
        if (other.hasTaxRateId()) {
          mergeTaxRateId(other.getTaxRateId());
        }
        if (other.getTaxRateIdNull() != false) {
          setTaxRateIdNull(other.getTaxRateIdNull());
        }
        if (other.hasOnlyActive()) {
          mergeOnlyActive(other.getOnlyActive());
        }
        if (other.getOnlyActiveNull() != false) {
          setOnlyActiveNull(other.getOnlyActiveNull());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procs.MiGetTaxRates.Parameters parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procs.MiGetTaxRates.Parameters) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.dstore.engine.Values.integerValue taxRateId_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> taxRateIdBuilder_;
      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
       */
      public boolean hasTaxRateId() {
        return taxRateIdBuilder_ != null || taxRateId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
       */
      public io.dstore.engine.Values.integerValue getTaxRateId() {
        if (taxRateIdBuilder_ == null) {
          return taxRateId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : taxRateId_;
        } else {
          return taxRateIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
       */
      public Builder setTaxRateId(io.dstore.engine.Values.integerValue value) {
        if (taxRateIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          taxRateId_ = value;
          onChanged();
        } else {
          taxRateIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
       */
      public Builder setTaxRateId(
          io.dstore.engine.Values.integerValue.Builder builderForValue) {
        if (taxRateIdBuilder_ == null) {
          taxRateId_ = builderForValue.build();
          onChanged();
        } else {
          taxRateIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
       */
      public Builder mergeTaxRateId(io.dstore.engine.Values.integerValue value) {
        if (taxRateIdBuilder_ == null) {
          if (taxRateId_ != null) {
            taxRateId_ =
              io.dstore.engine.Values.integerValue.newBuilder(taxRateId_).mergeFrom(value).buildPartial();
          } else {
            taxRateId_ = value;
          }
          onChanged();
        } else {
          taxRateIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
       */
      public Builder clearTaxRateId() {
        if (taxRateIdBuilder_ == null) {
          taxRateId_ = null;
          onChanged();
        } else {
          taxRateId_ = null;
          taxRateIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
       */
      public io.dstore.engine.Values.integerValue.Builder getTaxRateIdBuilder() {
        
        onChanged();
        return getTaxRateIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getTaxRateIdOrBuilder() {
        if (taxRateIdBuilder_ != null) {
          return taxRateIdBuilder_.getMessageOrBuilder();
        } else {
          return taxRateId_ == null ?
              io.dstore.engine.Values.integerValue.getDefaultInstance() : taxRateId_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
          getTaxRateIdFieldBuilder() {
        if (taxRateIdBuilder_ == null) {
          taxRateIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                  getTaxRateId(),
                  getParentForChildren(),
                  isClean());
          taxRateId_ = null;
        }
        return taxRateIdBuilder_;
      }

      private boolean taxRateIdNull_ ;
      /**
       * <code>optional bool tax_rate_id_null = 1001;</code>
       */
      public boolean getTaxRateIdNull() {
        return taxRateIdNull_;
      }
      /**
       * <code>optional bool tax_rate_id_null = 1001;</code>
       */
      public Builder setTaxRateIdNull(boolean value) {
        
        taxRateIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool tax_rate_id_null = 1001;</code>
       */
      public Builder clearTaxRateIdNull() {
        
        taxRateIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.engine.Values.booleanValue onlyActive_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> onlyActiveBuilder_;
      /**
       * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
       */
      public boolean hasOnlyActive() {
        return onlyActiveBuilder_ != null || onlyActive_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
       */
      public io.dstore.engine.Values.booleanValue getOnlyActive() {
        if (onlyActiveBuilder_ == null) {
          return onlyActive_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : onlyActive_;
        } else {
          return onlyActiveBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
       */
      public Builder setOnlyActive(io.dstore.engine.Values.booleanValue value) {
        if (onlyActiveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          onlyActive_ = value;
          onChanged();
        } else {
          onlyActiveBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
       */
      public Builder setOnlyActive(
          io.dstore.engine.Values.booleanValue.Builder builderForValue) {
        if (onlyActiveBuilder_ == null) {
          onlyActive_ = builderForValue.build();
          onChanged();
        } else {
          onlyActiveBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
       */
      public Builder mergeOnlyActive(io.dstore.engine.Values.booleanValue value) {
        if (onlyActiveBuilder_ == null) {
          if (onlyActive_ != null) {
            onlyActive_ =
              io.dstore.engine.Values.booleanValue.newBuilder(onlyActive_).mergeFrom(value).buildPartial();
          } else {
            onlyActive_ = value;
          }
          onChanged();
        } else {
          onlyActiveBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
       */
      public Builder clearOnlyActive() {
        if (onlyActiveBuilder_ == null) {
          onlyActive_ = null;
          onChanged();
        } else {
          onlyActive_ = null;
          onlyActiveBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
       */
      public io.dstore.engine.Values.booleanValue.Builder getOnlyActiveBuilder() {
        
        onChanged();
        return getOnlyActiveFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
       */
      public io.dstore.engine.Values.booleanValueOrBuilder getOnlyActiveOrBuilder() {
        if (onlyActiveBuilder_ != null) {
          return onlyActiveBuilder_.getMessageOrBuilder();
        } else {
          return onlyActive_ == null ?
              io.dstore.engine.Values.booleanValue.getDefaultInstance() : onlyActive_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue only_active = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> 
          getOnlyActiveFieldBuilder() {
        if (onlyActiveBuilder_ == null) {
          onlyActiveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder>(
                  getOnlyActive(),
                  getParentForChildren(),
                  isClean());
          onlyActive_ = null;
        }
        return onlyActiveBuilder_;
      }

      private boolean onlyActiveNull_ ;
      /**
       * <code>optional bool only_active_null = 1002;</code>
       */
      public boolean getOnlyActiveNull() {
        return onlyActiveNull_;
      }
      /**
       * <code>optional bool only_active_null = 1002;</code>
       */
      public Builder setOnlyActiveNull(boolean value) {
        
        onlyActiveNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool only_active_null = 1002;</code>
       */
      public Builder clearOnlyActiveNull() {
        
        onlyActiveNull_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.mi_GetTaxRates.Parameters)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.mi_GetTaxRates.Parameters)
    private static final io.dstore.engine.procs.MiGetTaxRates.Parameters DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procs.MiGetTaxRates.Parameters();
    }

    public static io.dstore.engine.procs.MiGetTaxRates.Parameters getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Parameters>
        PARSER = new com.google.protobuf.AbstractParser<Parameters>() {
      public Parameters parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Parameters(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Parameters> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Parameters> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procs.MiGetTaxRates.Parameters getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.mi_GetTaxRates.Response)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    boolean hasError();
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    io.dstore.engine.EngineError.Error getError();
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    io.dstore.engine.EngineError.ErrorOrBuilder getErrorOrBuilder();

    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> 
        getMetaInformationList();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index);
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    int getMetaInformationCount();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
        getMetaInformationOrBuilderList();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
        int index);

    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<io.dstore.engine.ProcedureMessage.Message> 
        getMessageList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.Message getMessage(int index);
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    int getMessageCount();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index);

    /**
     * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    java.util.List<io.dstore.engine.procs.MiGetTaxRates.Response.Row> 
        getRowList();
    /**
     * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    io.dstore.engine.procs.MiGetTaxRates.Response.Row getRow(int index);
    /**
     * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    int getRowCount();
    /**
     * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    java.util.List<? extends io.dstore.engine.procs.MiGetTaxRates.Response.RowOrBuilder> 
        getRowOrBuilderList();
    /**
     * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    io.dstore.engine.procs.MiGetTaxRates.Response.RowOrBuilder getRowOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dstore.engine.mi_GetTaxRates.Response}
   */
  public  static final class Response extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.mi_GetTaxRates.Response)
      ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Response() {
      metaInformation_ = java.util.Collections.emptyList();
      message_ = java.util.Collections.emptyList();
      row_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.engine.EngineError.Error.Builder subBuilder = null;
              if (error_ != null) {
                subBuilder = error_.toBuilder();
              }
              error_ = input.readMessage(io.dstore.engine.EngineError.Error.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(error_);
                error_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                metaInformation_ = new java.util.ArrayList<io.dstore.engine.EngineMetaInformation.MetaInformation>();
                mutable_bitField0_ |= 0x00000002;
              }
              metaInformation_.add(input.readMessage(io.dstore.engine.EngineMetaInformation.MetaInformation.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>();
                mutable_bitField0_ |= 0x00000004;
              }
              message_.add(input.readMessage(io.dstore.engine.ProcedureMessage.Message.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                row_ = new java.util.ArrayList<io.dstore.engine.procs.MiGetTaxRates.Response.Row>();
                mutable_bitField0_ |= 0x00000008;
              }
              row_.add(input.readMessage(io.dstore.engine.procs.MiGetTaxRates.Response.Row.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          metaInformation_ = java.util.Collections.unmodifiableList(metaInformation_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          message_ = java.util.Collections.unmodifiableList(message_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          row_ = java.util.Collections.unmodifiableList(row_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procs.MiGetTaxRates.Response.class, io.dstore.engine.procs.MiGetTaxRates.Response.Builder.class);
    }

    public interface RowOrBuilder extends
        // @@protoc_insertion_point(interface_extends:dstore.engine.mi_GetTaxRates.Response.Row)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      int getRowId();

      /**
       * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
       *
       * <pre>
       * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
       * </pre>
       */
      boolean hasTaxRateDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
       *
       * <pre>
       * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
       * </pre>
       */
      io.dstore.engine.Values.stringValue getTaxRateDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
       *
       * <pre>
       * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getTaxRateDescriptionOrBuilder();

      /**
       * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
       *
       * <pre>
       * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
       * </pre>
       */
      boolean hasActive();
      /**
       * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
       *
       * <pre>
       * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
       * </pre>
       */
      io.dstore.engine.Values.booleanValue getActive();
      /**
       * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
       *
       * <pre>
       * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
       * </pre>
       */
      io.dstore.engine.Values.booleanValueOrBuilder getActiveOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
       *
       * <pre>
       * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
       * </pre>
       */
      boolean hasTaxesMultiplier();
      /**
       * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
       *
       * <pre>
       * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getTaxesMultiplier();
      /**
       * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
       *
       * <pre>
       * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getTaxesMultiplierOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
       *
       * <pre>
       * Der Steuersatz in Prozent
       * </pre>
       */
      boolean hasTaxRate();
      /**
       * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
       *
       * <pre>
       * Der Steuersatz in Prozent
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getTaxRate();
      /**
       * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
       *
       * <pre>
       * Der Steuersatz in Prozent
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getTaxRateOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
       *
       * <pre>
       * Die ID eines Steuersatzes
       * </pre>
       */
      boolean hasTaxRateId();
      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
       *
       * <pre>
       * Die ID eines Steuersatzes
       * </pre>
       */
      io.dstore.engine.Values.integerValue getTaxRateId();
      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
       *
       * <pre>
       * Die ID eines Steuersatzes
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getTaxRateIdOrBuilder();

      /**
       * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
       *
       * <pre>
       * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
       * </pre>
       */
      boolean hasUseAsFallback();
      /**
       * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
       *
       * <pre>
       * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
       * </pre>
       */
      io.dstore.engine.Values.booleanValue getUseAsFallback();
      /**
       * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
       *
       * <pre>
       * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
       * </pre>
       */
      io.dstore.engine.Values.booleanValueOrBuilder getUseAsFallbackOrBuilder();
    }
    /**
     * Protobuf type {@code dstore.engine.mi_GetTaxRates.Response.Row}
     */
    public  static final class Row extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:dstore.engine.mi_GetTaxRates.Response.Row)
        RowOrBuilder {
      // Use Row.newBuilder() to construct.
      private Row(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Row() {
        rowId_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private Row(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 80000: {

                rowId_ = input.readInt32();
                break;
              }
              case 80010: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (taxRateDescription_ != null) {
                  subBuilder = taxRateDescription_.toBuilder();
                }
                taxRateDescription_ = input.readMessage(io.dstore.engine.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(taxRateDescription_);
                  taxRateDescription_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80018: {
                io.dstore.engine.Values.booleanValue.Builder subBuilder = null;
                if (active_ != null) {
                  subBuilder = active_.toBuilder();
                }
                active_ = input.readMessage(io.dstore.engine.Values.booleanValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(active_);
                  active_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80026: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (taxesMultiplier_ != null) {
                  subBuilder = taxesMultiplier_.toBuilder();
                }
                taxesMultiplier_ = input.readMessage(io.dstore.engine.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(taxesMultiplier_);
                  taxesMultiplier_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80034: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (taxRate_ != null) {
                  subBuilder = taxRate_.toBuilder();
                }
                taxRate_ = input.readMessage(io.dstore.engine.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(taxRate_);
                  taxRate_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80042: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (taxRateId_ != null) {
                  subBuilder = taxRateId_.toBuilder();
                }
                taxRateId_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(taxRateId_);
                  taxRateId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80050: {
                io.dstore.engine.Values.booleanValue.Builder subBuilder = null;
                if (useAsFallback_ != null) {
                  subBuilder = useAsFallback_.toBuilder();
                }
                useAsFallback_ = input.readMessage(io.dstore.engine.Values.booleanValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(useAsFallback_);
                  useAsFallback_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Response_Row_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Response_Row_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.MiGetTaxRates.Response.Row.class, io.dstore.engine.procs.MiGetTaxRates.Response.Row.Builder.class);
      }

      public static final int ROW_ID_FIELD_NUMBER = 10000;
      private int rowId_;
      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      public int getRowId() {
        return rowId_;
      }

      public static final int TAX_RATE_DESCRIPTION_FIELD_NUMBER = 10001;
      private io.dstore.engine.Values.stringValue taxRateDescription_;
      /**
       * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
       *
       * <pre>
       * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
       * </pre>
       */
      public boolean hasTaxRateDescription() {
        return taxRateDescription_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
       *
       * <pre>
       * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getTaxRateDescription() {
        return taxRateDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : taxRateDescription_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
       *
       * <pre>
       * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getTaxRateDescriptionOrBuilder() {
        return getTaxRateDescription();
      }

      public static final int ACTIVE_FIELD_NUMBER = 10002;
      private io.dstore.engine.Values.booleanValue active_;
      /**
       * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
       *
       * <pre>
       * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
       * </pre>
       */
      public boolean hasActive() {
        return active_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
       *
       * <pre>
       * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
       * </pre>
       */
      public io.dstore.engine.Values.booleanValue getActive() {
        return active_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : active_;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
       *
       * <pre>
       * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
       * </pre>
       */
      public io.dstore.engine.Values.booleanValueOrBuilder getActiveOrBuilder() {
        return getActive();
      }

      public static final int TAXES_MULTIPLIER_FIELD_NUMBER = 10003;
      private io.dstore.engine.Values.decimalValue taxesMultiplier_;
      /**
       * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
       *
       * <pre>
       * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
       * </pre>
       */
      public boolean hasTaxesMultiplier() {
        return taxesMultiplier_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
       *
       * <pre>
       * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getTaxesMultiplier() {
        return taxesMultiplier_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : taxesMultiplier_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
       *
       * <pre>
       * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getTaxesMultiplierOrBuilder() {
        return getTaxesMultiplier();
      }

      public static final int TAX_RATE_FIELD_NUMBER = 10004;
      private io.dstore.engine.Values.decimalValue taxRate_;
      /**
       * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
       *
       * <pre>
       * Der Steuersatz in Prozent
       * </pre>
       */
      public boolean hasTaxRate() {
        return taxRate_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
       *
       * <pre>
       * Der Steuersatz in Prozent
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getTaxRate() {
        return taxRate_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : taxRate_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
       *
       * <pre>
       * Der Steuersatz in Prozent
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getTaxRateOrBuilder() {
        return getTaxRate();
      }

      public static final int TAX_RATE_ID_FIELD_NUMBER = 10005;
      private io.dstore.engine.Values.integerValue taxRateId_;
      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
       *
       * <pre>
       * Die ID eines Steuersatzes
       * </pre>
       */
      public boolean hasTaxRateId() {
        return taxRateId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
       *
       * <pre>
       * Die ID eines Steuersatzes
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getTaxRateId() {
        return taxRateId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : taxRateId_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
       *
       * <pre>
       * Die ID eines Steuersatzes
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getTaxRateIdOrBuilder() {
        return getTaxRateId();
      }

      public static final int USE_AS_FALLBACK_FIELD_NUMBER = 10006;
      private io.dstore.engine.Values.booleanValue useAsFallback_;
      /**
       * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
       *
       * <pre>
       * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
       * </pre>
       */
      public boolean hasUseAsFallback() {
        return useAsFallback_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
       *
       * <pre>
       * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
       * </pre>
       */
      public io.dstore.engine.Values.booleanValue getUseAsFallback() {
        return useAsFallback_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : useAsFallback_;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
       *
       * <pre>
       * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
       * </pre>
       */
      public io.dstore.engine.Values.booleanValueOrBuilder getUseAsFallbackOrBuilder() {
        return getUseAsFallback();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (rowId_ != 0) {
          output.writeInt32(10000, rowId_);
        }
        if (taxRateDescription_ != null) {
          output.writeMessage(10001, getTaxRateDescription());
        }
        if (active_ != null) {
          output.writeMessage(10002, getActive());
        }
        if (taxesMultiplier_ != null) {
          output.writeMessage(10003, getTaxesMultiplier());
        }
        if (taxRate_ != null) {
          output.writeMessage(10004, getTaxRate());
        }
        if (taxRateId_ != null) {
          output.writeMessage(10005, getTaxRateId());
        }
        if (useAsFallback_ != null) {
          output.writeMessage(10006, getUseAsFallback());
        }
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (rowId_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10000, rowId_);
        }
        if (taxRateDescription_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10001, getTaxRateDescription());
        }
        if (active_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10002, getActive());
        }
        if (taxesMultiplier_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10003, getTaxesMultiplier());
        }
        if (taxRate_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10004, getTaxRate());
        }
        if (taxRateId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10005, getTaxRateId());
        }
        if (useAsFallback_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10006, getUseAsFallback());
        }
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static io.dstore.engine.procs.MiGetTaxRates.Response.Row parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procs.MiGetTaxRates.Response.Row parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procs.MiGetTaxRates.Response.Row parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procs.MiGetTaxRates.Response.Row parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procs.MiGetTaxRates.Response.Row parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.dstore.engine.procs.MiGetTaxRates.Response.Row parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static io.dstore.engine.procs.MiGetTaxRates.Response.Row parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static io.dstore.engine.procs.MiGetTaxRates.Response.Row parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static io.dstore.engine.procs.MiGetTaxRates.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.dstore.engine.procs.MiGetTaxRates.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.dstore.engine.procs.MiGetTaxRates.Response.Row prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code dstore.engine.mi_GetTaxRates.Response.Row}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:dstore.engine.mi_GetTaxRates.Response.Row)
          io.dstore.engine.procs.MiGetTaxRates.Response.RowOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Response_Row_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Response_Row_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.dstore.engine.procs.MiGetTaxRates.Response.Row.class, io.dstore.engine.procs.MiGetTaxRates.Response.Row.Builder.class);
        }

        // Construct using io.dstore.engine.procs.MiGetTaxRates.Response.Row.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          rowId_ = 0;

          if (taxRateDescriptionBuilder_ == null) {
            taxRateDescription_ = null;
          } else {
            taxRateDescription_ = null;
            taxRateDescriptionBuilder_ = null;
          }
          if (activeBuilder_ == null) {
            active_ = null;
          } else {
            active_ = null;
            activeBuilder_ = null;
          }
          if (taxesMultiplierBuilder_ == null) {
            taxesMultiplier_ = null;
          } else {
            taxesMultiplier_ = null;
            taxesMultiplierBuilder_ = null;
          }
          if (taxRateBuilder_ == null) {
            taxRate_ = null;
          } else {
            taxRate_ = null;
            taxRateBuilder_ = null;
          }
          if (taxRateIdBuilder_ == null) {
            taxRateId_ = null;
          } else {
            taxRateId_ = null;
            taxRateIdBuilder_ = null;
          }
          if (useAsFallbackBuilder_ == null) {
            useAsFallback_ = null;
          } else {
            useAsFallback_ = null;
            useAsFallbackBuilder_ = null;
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Response_Row_descriptor;
        }

        public io.dstore.engine.procs.MiGetTaxRates.Response.Row getDefaultInstanceForType() {
          return io.dstore.engine.procs.MiGetTaxRates.Response.Row.getDefaultInstance();
        }

        public io.dstore.engine.procs.MiGetTaxRates.Response.Row build() {
          io.dstore.engine.procs.MiGetTaxRates.Response.Row result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.dstore.engine.procs.MiGetTaxRates.Response.Row buildPartial() {
          io.dstore.engine.procs.MiGetTaxRates.Response.Row result = new io.dstore.engine.procs.MiGetTaxRates.Response.Row(this);
          result.rowId_ = rowId_;
          if (taxRateDescriptionBuilder_ == null) {
            result.taxRateDescription_ = taxRateDescription_;
          } else {
            result.taxRateDescription_ = taxRateDescriptionBuilder_.build();
          }
          if (activeBuilder_ == null) {
            result.active_ = active_;
          } else {
            result.active_ = activeBuilder_.build();
          }
          if (taxesMultiplierBuilder_ == null) {
            result.taxesMultiplier_ = taxesMultiplier_;
          } else {
            result.taxesMultiplier_ = taxesMultiplierBuilder_.build();
          }
          if (taxRateBuilder_ == null) {
            result.taxRate_ = taxRate_;
          } else {
            result.taxRate_ = taxRateBuilder_.build();
          }
          if (taxRateIdBuilder_ == null) {
            result.taxRateId_ = taxRateId_;
          } else {
            result.taxRateId_ = taxRateIdBuilder_.build();
          }
          if (useAsFallbackBuilder_ == null) {
            result.useAsFallback_ = useAsFallback_;
          } else {
            result.useAsFallback_ = useAsFallbackBuilder_.build();
          }
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.dstore.engine.procs.MiGetTaxRates.Response.Row) {
            return mergeFrom((io.dstore.engine.procs.MiGetTaxRates.Response.Row)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.dstore.engine.procs.MiGetTaxRates.Response.Row other) {
          if (other == io.dstore.engine.procs.MiGetTaxRates.Response.Row.getDefaultInstance()) return this;
          if (other.getRowId() != 0) {
            setRowId(other.getRowId());
          }
          if (other.hasTaxRateDescription()) {
            mergeTaxRateDescription(other.getTaxRateDescription());
          }
          if (other.hasActive()) {
            mergeActive(other.getActive());
          }
          if (other.hasTaxesMultiplier()) {
            mergeTaxesMultiplier(other.getTaxesMultiplier());
          }
          if (other.hasTaxRate()) {
            mergeTaxRate(other.getTaxRate());
          }
          if (other.hasTaxRateId()) {
            mergeTaxRateId(other.getTaxRateId());
          }
          if (other.hasUseAsFallback()) {
            mergeUseAsFallback(other.getUseAsFallback());
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.dstore.engine.procs.MiGetTaxRates.Response.Row parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.dstore.engine.procs.MiGetTaxRates.Response.Row) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int rowId_ ;
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public int getRowId() {
          return rowId_;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder setRowId(int value) {
          
          rowId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder clearRowId() {
          
          rowId_ = 0;
          onChanged();
          return this;
        }

        private io.dstore.engine.Values.stringValue taxRateDescription_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> taxRateDescriptionBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
         *
         * <pre>
         * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
         * </pre>
         */
        public boolean hasTaxRateDescription() {
          return taxRateDescriptionBuilder_ != null || taxRateDescription_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
         *
         * <pre>
         * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getTaxRateDescription() {
          if (taxRateDescriptionBuilder_ == null) {
            return taxRateDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : taxRateDescription_;
          } else {
            return taxRateDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
         *
         * <pre>
         * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
         * </pre>
         */
        public Builder setTaxRateDescription(io.dstore.engine.Values.stringValue value) {
          if (taxRateDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            taxRateDescription_ = value;
            onChanged();
          } else {
            taxRateDescriptionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
         *
         * <pre>
         * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
         * </pre>
         */
        public Builder setTaxRateDescription(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (taxRateDescriptionBuilder_ == null) {
            taxRateDescription_ = builderForValue.build();
            onChanged();
          } else {
            taxRateDescriptionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
         *
         * <pre>
         * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
         * </pre>
         */
        public Builder mergeTaxRateDescription(io.dstore.engine.Values.stringValue value) {
          if (taxRateDescriptionBuilder_ == null) {
            if (taxRateDescription_ != null) {
              taxRateDescription_ =
                io.dstore.engine.Values.stringValue.newBuilder(taxRateDescription_).mergeFrom(value).buildPartial();
            } else {
              taxRateDescription_ = value;
            }
            onChanged();
          } else {
            taxRateDescriptionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
         *
         * <pre>
         * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
         * </pre>
         */
        public Builder clearTaxRateDescription() {
          if (taxRateDescriptionBuilder_ == null) {
            taxRateDescription_ = null;
            onChanged();
          } else {
            taxRateDescription_ = null;
            taxRateDescriptionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
         *
         * <pre>
         * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getTaxRateDescriptionBuilder() {
          
          onChanged();
          return getTaxRateDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
         *
         * <pre>
         * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getTaxRateDescriptionOrBuilder() {
          if (taxRateDescriptionBuilder_ != null) {
            return taxRateDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return taxRateDescription_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : taxRateDescription_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue tax_rate_description = 10001;</code>
         *
         * <pre>
         * Die Beschreibung des Steuersatzes (z.B. "Normalsteuersatz")
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getTaxRateDescriptionFieldBuilder() {
          if (taxRateDescriptionBuilder_ == null) {
            taxRateDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getTaxRateDescription(),
                    getParentForChildren(),
                    isClean());
            taxRateDescription_ = null;
          }
          return taxRateDescriptionBuilder_;
        }

        private io.dstore.engine.Values.booleanValue active_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> activeBuilder_;
        /**
         * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
         *
         * <pre>
         * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
         * </pre>
         */
        public boolean hasActive() {
          return activeBuilder_ != null || active_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
         *
         * <pre>
         * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
         * </pre>
         */
        public io.dstore.engine.Values.booleanValue getActive() {
          if (activeBuilder_ == null) {
            return active_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : active_;
          } else {
            return activeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
         *
         * <pre>
         * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
         * </pre>
         */
        public Builder setActive(io.dstore.engine.Values.booleanValue value) {
          if (activeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            active_ = value;
            onChanged();
          } else {
            activeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
         *
         * <pre>
         * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
         * </pre>
         */
        public Builder setActive(
            io.dstore.engine.Values.booleanValue.Builder builderForValue) {
          if (activeBuilder_ == null) {
            active_ = builderForValue.build();
            onChanged();
          } else {
            activeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
         *
         * <pre>
         * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
         * </pre>
         */
        public Builder mergeActive(io.dstore.engine.Values.booleanValue value) {
          if (activeBuilder_ == null) {
            if (active_ != null) {
              active_ =
                io.dstore.engine.Values.booleanValue.newBuilder(active_).mergeFrom(value).buildPartial();
            } else {
              active_ = value;
            }
            onChanged();
          } else {
            activeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
         *
         * <pre>
         * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
         * </pre>
         */
        public Builder clearActive() {
          if (activeBuilder_ == null) {
            active_ = null;
            onChanged();
          } else {
            active_ = null;
            activeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
         *
         * <pre>
         * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
         * </pre>
         */
        public io.dstore.engine.Values.booleanValue.Builder getActiveBuilder() {
          
          onChanged();
          return getActiveFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
         *
         * <pre>
         * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
         * </pre>
         */
        public io.dstore.engine.Values.booleanValueOrBuilder getActiveOrBuilder() {
          if (activeBuilder_ != null) {
            return activeBuilder_.getMessageOrBuilder();
          } else {
            return active_ == null ?
                io.dstore.engine.Values.booleanValue.getDefaultInstance() : active_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue active = 10002;</code>
         *
         * <pre>
         * Gibt an, ob der Steuersatz aktiv ist. Dies ist nur eine Information für "Client-Anwendungen". Engineseitig gibt es zu dieser Information keine implementierte Funktionalität.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> 
            getActiveFieldBuilder() {
          if (activeBuilder_ == null) {
            activeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder>(
                    getActive(),
                    getParentForChildren(),
                    isClean());
            active_ = null;
          }
          return activeBuilder_;
        }

        private io.dstore.engine.Values.decimalValue taxesMultiplier_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> taxesMultiplierBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
         *
         * <pre>
         * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
         * </pre>
         */
        public boolean hasTaxesMultiplier() {
          return taxesMultiplierBuilder_ != null || taxesMultiplier_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
         *
         * <pre>
         * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getTaxesMultiplier() {
          if (taxesMultiplierBuilder_ == null) {
            return taxesMultiplier_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : taxesMultiplier_;
          } else {
            return taxesMultiplierBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
         *
         * <pre>
         * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
         * </pre>
         */
        public Builder setTaxesMultiplier(io.dstore.engine.Values.decimalValue value) {
          if (taxesMultiplierBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            taxesMultiplier_ = value;
            onChanged();
          } else {
            taxesMultiplierBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
         *
         * <pre>
         * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
         * </pre>
         */
        public Builder setTaxesMultiplier(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (taxesMultiplierBuilder_ == null) {
            taxesMultiplier_ = builderForValue.build();
            onChanged();
          } else {
            taxesMultiplierBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
         *
         * <pre>
         * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
         * </pre>
         */
        public Builder mergeTaxesMultiplier(io.dstore.engine.Values.decimalValue value) {
          if (taxesMultiplierBuilder_ == null) {
            if (taxesMultiplier_ != null) {
              taxesMultiplier_ =
                io.dstore.engine.Values.decimalValue.newBuilder(taxesMultiplier_).mergeFrom(value).buildPartial();
            } else {
              taxesMultiplier_ = value;
            }
            onChanged();
          } else {
            taxesMultiplierBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
         *
         * <pre>
         * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
         * </pre>
         */
        public Builder clearTaxesMultiplier() {
          if (taxesMultiplierBuilder_ == null) {
            taxesMultiplier_ = null;
            onChanged();
          } else {
            taxesMultiplier_ = null;
            taxesMultiplierBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
         *
         * <pre>
         * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getTaxesMultiplierBuilder() {
          
          onChanged();
          return getTaxesMultiplierFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
         *
         * <pre>
         * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getTaxesMultiplierOrBuilder() {
          if (taxesMultiplierBuilder_ != null) {
            return taxesMultiplierBuilder_.getMessageOrBuilder();
          } else {
            return taxesMultiplier_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : taxesMultiplier_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue taxes_multiplier = 10003;</code>
         *
         * <pre>
         * Steuersatz als Multiplikator, d.h. im Falle von z.B. "TaxRate = 19" (ergo 19 Prozent) steht hier "1.19"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getTaxesMultiplierFieldBuilder() {
          if (taxesMultiplierBuilder_ == null) {
            taxesMultiplierBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getTaxesMultiplier(),
                    getParentForChildren(),
                    isClean());
            taxesMultiplier_ = null;
          }
          return taxesMultiplierBuilder_;
        }

        private io.dstore.engine.Values.decimalValue taxRate_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> taxRateBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz in Prozent
         * </pre>
         */
        public boolean hasTaxRate() {
          return taxRateBuilder_ != null || taxRate_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz in Prozent
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getTaxRate() {
          if (taxRateBuilder_ == null) {
            return taxRate_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : taxRate_;
          } else {
            return taxRateBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz in Prozent
         * </pre>
         */
        public Builder setTaxRate(io.dstore.engine.Values.decimalValue value) {
          if (taxRateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            taxRate_ = value;
            onChanged();
          } else {
            taxRateBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz in Prozent
         * </pre>
         */
        public Builder setTaxRate(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (taxRateBuilder_ == null) {
            taxRate_ = builderForValue.build();
            onChanged();
          } else {
            taxRateBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz in Prozent
         * </pre>
         */
        public Builder mergeTaxRate(io.dstore.engine.Values.decimalValue value) {
          if (taxRateBuilder_ == null) {
            if (taxRate_ != null) {
              taxRate_ =
                io.dstore.engine.Values.decimalValue.newBuilder(taxRate_).mergeFrom(value).buildPartial();
            } else {
              taxRate_ = value;
            }
            onChanged();
          } else {
            taxRateBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz in Prozent
         * </pre>
         */
        public Builder clearTaxRate() {
          if (taxRateBuilder_ == null) {
            taxRate_ = null;
            onChanged();
          } else {
            taxRate_ = null;
            taxRateBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz in Prozent
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getTaxRateBuilder() {
          
          onChanged();
          return getTaxRateFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz in Prozent
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getTaxRateOrBuilder() {
          if (taxRateBuilder_ != null) {
            return taxRateBuilder_.getMessageOrBuilder();
          } else {
            return taxRate_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : taxRate_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz in Prozent
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getTaxRateFieldBuilder() {
          if (taxRateBuilder_ == null) {
            taxRateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getTaxRate(),
                    getParentForChildren(),
                    isClean());
            taxRate_ = null;
          }
          return taxRateBuilder_;
        }

        private io.dstore.engine.Values.integerValue taxRateId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> taxRateIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
         *
         * <pre>
         * Die ID eines Steuersatzes
         * </pre>
         */
        public boolean hasTaxRateId() {
          return taxRateIdBuilder_ != null || taxRateId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
         *
         * <pre>
         * Die ID eines Steuersatzes
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getTaxRateId() {
          if (taxRateIdBuilder_ == null) {
            return taxRateId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : taxRateId_;
          } else {
            return taxRateIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
         *
         * <pre>
         * Die ID eines Steuersatzes
         * </pre>
         */
        public Builder setTaxRateId(io.dstore.engine.Values.integerValue value) {
          if (taxRateIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            taxRateId_ = value;
            onChanged();
          } else {
            taxRateIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
         *
         * <pre>
         * Die ID eines Steuersatzes
         * </pre>
         */
        public Builder setTaxRateId(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (taxRateIdBuilder_ == null) {
            taxRateId_ = builderForValue.build();
            onChanged();
          } else {
            taxRateIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
         *
         * <pre>
         * Die ID eines Steuersatzes
         * </pre>
         */
        public Builder mergeTaxRateId(io.dstore.engine.Values.integerValue value) {
          if (taxRateIdBuilder_ == null) {
            if (taxRateId_ != null) {
              taxRateId_ =
                io.dstore.engine.Values.integerValue.newBuilder(taxRateId_).mergeFrom(value).buildPartial();
            } else {
              taxRateId_ = value;
            }
            onChanged();
          } else {
            taxRateIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
         *
         * <pre>
         * Die ID eines Steuersatzes
         * </pre>
         */
        public Builder clearTaxRateId() {
          if (taxRateIdBuilder_ == null) {
            taxRateId_ = null;
            onChanged();
          } else {
            taxRateId_ = null;
            taxRateIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
         *
         * <pre>
         * Die ID eines Steuersatzes
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getTaxRateIdBuilder() {
          
          onChanged();
          return getTaxRateIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
         *
         * <pre>
         * Die ID eines Steuersatzes
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getTaxRateIdOrBuilder() {
          if (taxRateIdBuilder_ != null) {
            return taxRateIdBuilder_.getMessageOrBuilder();
          } else {
            return taxRateId_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : taxRateId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue tax_rate_id = 10005;</code>
         *
         * <pre>
         * Die ID eines Steuersatzes
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getTaxRateIdFieldBuilder() {
          if (taxRateIdBuilder_ == null) {
            taxRateIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getTaxRateId(),
                    getParentForChildren(),
                    isClean());
            taxRateId_ = null;
          }
          return taxRateIdBuilder_;
        }

        private io.dstore.engine.Values.booleanValue useAsFallback_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> useAsFallbackBuilder_;
        /**
         * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
         *
         * <pre>
         * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
         * </pre>
         */
        public boolean hasUseAsFallback() {
          return useAsFallbackBuilder_ != null || useAsFallback_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
         *
         * <pre>
         * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
         * </pre>
         */
        public io.dstore.engine.Values.booleanValue getUseAsFallback() {
          if (useAsFallbackBuilder_ == null) {
            return useAsFallback_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : useAsFallback_;
          } else {
            return useAsFallbackBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
         *
         * <pre>
         * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
         * </pre>
         */
        public Builder setUseAsFallback(io.dstore.engine.Values.booleanValue value) {
          if (useAsFallbackBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            useAsFallback_ = value;
            onChanged();
          } else {
            useAsFallbackBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
         *
         * <pre>
         * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
         * </pre>
         */
        public Builder setUseAsFallback(
            io.dstore.engine.Values.booleanValue.Builder builderForValue) {
          if (useAsFallbackBuilder_ == null) {
            useAsFallback_ = builderForValue.build();
            onChanged();
          } else {
            useAsFallbackBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
         *
         * <pre>
         * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
         * </pre>
         */
        public Builder mergeUseAsFallback(io.dstore.engine.Values.booleanValue value) {
          if (useAsFallbackBuilder_ == null) {
            if (useAsFallback_ != null) {
              useAsFallback_ =
                io.dstore.engine.Values.booleanValue.newBuilder(useAsFallback_).mergeFrom(value).buildPartial();
            } else {
              useAsFallback_ = value;
            }
            onChanged();
          } else {
            useAsFallbackBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
         *
         * <pre>
         * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
         * </pre>
         */
        public Builder clearUseAsFallback() {
          if (useAsFallbackBuilder_ == null) {
            useAsFallback_ = null;
            onChanged();
          } else {
            useAsFallback_ = null;
            useAsFallbackBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
         *
         * <pre>
         * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
         * </pre>
         */
        public io.dstore.engine.Values.booleanValue.Builder getUseAsFallbackBuilder() {
          
          onChanged();
          return getUseAsFallbackFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
         *
         * <pre>
         * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
         * </pre>
         */
        public io.dstore.engine.Values.booleanValueOrBuilder getUseAsFallbackOrBuilder() {
          if (useAsFallbackBuilder_ != null) {
            return useAsFallbackBuilder_.getMessageOrBuilder();
          } else {
            return useAsFallback_ == null ?
                io.dstore.engine.Values.booleanValue.getDefaultInstance() : useAsFallback_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue use_as_fallback = 10006;</code>
         *
         * <pre>
         * Gibt an, ob dieser Steuersatz in speziellen Fällen, wo kein Steuersatz konfiguriert ist und auch nicht "künstlich bestimmt" werden kann, verwendet werden soll
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> 
            getUseAsFallbackFieldBuilder() {
          if (useAsFallbackBuilder_ == null) {
            useAsFallbackBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder>(
                    getUseAsFallback(),
                    getParentForChildren(),
                    isClean());
            useAsFallback_ = null;
          }
          return useAsFallbackBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:dstore.engine.mi_GetTaxRates.Response.Row)
      }

      // @@protoc_insertion_point(class_scope:dstore.engine.mi_GetTaxRates.Response.Row)
      private static final io.dstore.engine.procs.MiGetTaxRates.Response.Row DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.dstore.engine.procs.MiGetTaxRates.Response.Row();
      }

      public static io.dstore.engine.procs.MiGetTaxRates.Response.Row getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Row>
          PARSER = new com.google.protobuf.AbstractParser<Row>() {
        public Row parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new Row(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<Row> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Row> getParserForType() {
        return PARSER;
      }

      public io.dstore.engine.procs.MiGetTaxRates.Response.Row getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int ERROR_FIELD_NUMBER = 1;
    private io.dstore.engine.EngineError.Error error_;
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public boolean hasError() {
      return error_ != null;
    }
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public io.dstore.engine.EngineError.Error getError() {
      return error_ == null ? io.dstore.engine.EngineError.Error.getDefaultInstance() : error_;
    }
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public io.dstore.engine.EngineError.ErrorOrBuilder getErrorOrBuilder() {
      return getError();
    }

    public static final int META_INFORMATION_FIELD_NUMBER = 2;
    private java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> metaInformation_;
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> getMetaInformationList() {
      return metaInformation_;
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
        getMetaInformationOrBuilderList() {
      return metaInformation_;
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public int getMetaInformationCount() {
      return metaInformation_.size();
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index) {
      return metaInformation_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
        int index) {
      return metaInformation_.get(index);
    }

    public static final int MESSAGE_FIELD_NUMBER = 3;
    private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_;
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public int getMessageCount() {
      return message_.size();
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
      return message_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index) {
      return message_.get(index);
    }

    public static final int ROW_FIELD_NUMBER = 4;
    private java.util.List<io.dstore.engine.procs.MiGetTaxRates.Response.Row> row_;
    /**
     * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public java.util.List<io.dstore.engine.procs.MiGetTaxRates.Response.Row> getRowList() {
      return row_;
    }
    /**
     * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public java.util.List<? extends io.dstore.engine.procs.MiGetTaxRates.Response.RowOrBuilder> 
        getRowOrBuilderList() {
      return row_;
    }
    /**
     * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public int getRowCount() {
      return row_.size();
    }
    /**
     * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public io.dstore.engine.procs.MiGetTaxRates.Response.Row getRow(int index) {
      return row_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public io.dstore.engine.procs.MiGetTaxRates.Response.RowOrBuilder getRowOrBuilder(
        int index) {
      return row_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (error_ != null) {
        output.writeMessage(1, getError());
      }
      for (int i = 0; i < metaInformation_.size(); i++) {
        output.writeMessage(2, metaInformation_.get(i));
      }
      for (int i = 0; i < message_.size(); i++) {
        output.writeMessage(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        output.writeMessage(4, row_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (error_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getError());
      }
      for (int i = 0; i < metaInformation_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, metaInformation_.get(i));
      }
      for (int i = 0; i < message_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, row_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procs.MiGetTaxRates.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.MiGetTaxRates.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procs.MiGetTaxRates.Response prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.mi_GetTaxRates.Response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.mi_GetTaxRates.Response)
        io.dstore.engine.procs.MiGetTaxRates.ResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.MiGetTaxRates.Response.class, io.dstore.engine.procs.MiGetTaxRates.Response.Builder.class);
      }

      // Construct using io.dstore.engine.procs.MiGetTaxRates.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMetaInformationFieldBuilder();
          getMessageFieldBuilder();
          getRowFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (errorBuilder_ == null) {
          error_ = null;
        } else {
          error_ = null;
          errorBuilder_ = null;
        }
        if (metaInformationBuilder_ == null) {
          metaInformation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          metaInformationBuilder_.clear();
        }
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          messageBuilder_.clear();
        }
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          rowBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procs.MiGetTaxRates.internal_static_dstore_engine_mi_GetTaxRates_Response_descriptor;
      }

      public io.dstore.engine.procs.MiGetTaxRates.Response getDefaultInstanceForType() {
        return io.dstore.engine.procs.MiGetTaxRates.Response.getDefaultInstance();
      }

      public io.dstore.engine.procs.MiGetTaxRates.Response build() {
        io.dstore.engine.procs.MiGetTaxRates.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procs.MiGetTaxRates.Response buildPartial() {
        io.dstore.engine.procs.MiGetTaxRates.Response result = new io.dstore.engine.procs.MiGetTaxRates.Response(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (errorBuilder_ == null) {
          result.error_ = error_;
        } else {
          result.error_ = errorBuilder_.build();
        }
        if (metaInformationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            metaInformation_ = java.util.Collections.unmodifiableList(metaInformation_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.metaInformation_ = metaInformation_;
        } else {
          result.metaInformation_ = metaInformationBuilder_.build();
        }
        if (messageBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            message_ = java.util.Collections.unmodifiableList(message_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.message_ = message_;
        } else {
          result.message_ = messageBuilder_.build();
        }
        if (rowBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            row_ = java.util.Collections.unmodifiableList(row_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.row_ = row_;
        } else {
          result.row_ = rowBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procs.MiGetTaxRates.Response) {
          return mergeFrom((io.dstore.engine.procs.MiGetTaxRates.Response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procs.MiGetTaxRates.Response other) {
        if (other == io.dstore.engine.procs.MiGetTaxRates.Response.getDefaultInstance()) return this;
        if (other.hasError()) {
          mergeError(other.getError());
        }
        if (metaInformationBuilder_ == null) {
          if (!other.metaInformation_.isEmpty()) {
            if (metaInformation_.isEmpty()) {
              metaInformation_ = other.metaInformation_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMetaInformationIsMutable();
              metaInformation_.addAll(other.metaInformation_);
            }
            onChanged();
          }
        } else {
          if (!other.metaInformation_.isEmpty()) {
            if (metaInformationBuilder_.isEmpty()) {
              metaInformationBuilder_.dispose();
              metaInformationBuilder_ = null;
              metaInformation_ = other.metaInformation_;
              bitField0_ = (bitField0_ & ~0x00000002);
              metaInformationBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMetaInformationFieldBuilder() : null;
            } else {
              metaInformationBuilder_.addAllMessages(other.metaInformation_);
            }
          }
        }
        if (messageBuilder_ == null) {
          if (!other.message_.isEmpty()) {
            if (message_.isEmpty()) {
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureMessageIsMutable();
              message_.addAll(other.message_);
            }
            onChanged();
          }
        } else {
          if (!other.message_.isEmpty()) {
            if (messageBuilder_.isEmpty()) {
              messageBuilder_.dispose();
              messageBuilder_ = null;
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000004);
              messageBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMessageFieldBuilder() : null;
            } else {
              messageBuilder_.addAllMessages(other.message_);
            }
          }
        }
        if (rowBuilder_ == null) {
          if (!other.row_.isEmpty()) {
            if (row_.isEmpty()) {
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureRowIsMutable();
              row_.addAll(other.row_);
            }
            onChanged();
          }
        } else {
          if (!other.row_.isEmpty()) {
            if (rowBuilder_.isEmpty()) {
              rowBuilder_.dispose();
              rowBuilder_ = null;
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000008);
              rowBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRowFieldBuilder() : null;
            } else {
              rowBuilder_.addAllMessages(other.row_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procs.MiGetTaxRates.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procs.MiGetTaxRates.Response) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private io.dstore.engine.EngineError.Error error_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.EngineError.Error, io.dstore.engine.EngineError.Error.Builder, io.dstore.engine.EngineError.ErrorOrBuilder> errorBuilder_;
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public boolean hasError() {
        return errorBuilder_ != null || error_ != null;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.EngineError.Error getError() {
        if (errorBuilder_ == null) {
          return error_ == null ? io.dstore.engine.EngineError.Error.getDefaultInstance() : error_;
        } else {
          return errorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder setError(io.dstore.engine.EngineError.Error value) {
        if (errorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          error_ = value;
          onChanged();
        } else {
          errorBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder setError(
          io.dstore.engine.EngineError.Error.Builder builderForValue) {
        if (errorBuilder_ == null) {
          error_ = builderForValue.build();
          onChanged();
        } else {
          errorBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder mergeError(io.dstore.engine.EngineError.Error value) {
        if (errorBuilder_ == null) {
          if (error_ != null) {
            error_ =
              io.dstore.engine.EngineError.Error.newBuilder(error_).mergeFrom(value).buildPartial();
          } else {
            error_ = value;
          }
          onChanged();
        } else {
          errorBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder clearError() {
        if (errorBuilder_ == null) {
          error_ = null;
          onChanged();
        } else {
          error_ = null;
          errorBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.EngineError.Error.Builder getErrorBuilder() {
        
        onChanged();
        return getErrorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.EngineError.ErrorOrBuilder getErrorOrBuilder() {
        if (errorBuilder_ != null) {
          return errorBuilder_.getMessageOrBuilder();
        } else {
          return error_ == null ?
              io.dstore.engine.EngineError.Error.getDefaultInstance() : error_;
        }
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.EngineError.Error, io.dstore.engine.EngineError.Error.Builder, io.dstore.engine.EngineError.ErrorOrBuilder> 
          getErrorFieldBuilder() {
        if (errorBuilder_ == null) {
          errorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.EngineError.Error, io.dstore.engine.EngineError.Error.Builder, io.dstore.engine.EngineError.ErrorOrBuilder>(
                  getError(),
                  getParentForChildren(),
                  isClean());
          error_ = null;
        }
        return errorBuilder_;
      }

      private java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> metaInformation_ =
        java.util.Collections.emptyList();
      private void ensureMetaInformationIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          metaInformation_ = new java.util.ArrayList<io.dstore.engine.EngineMetaInformation.MetaInformation>(metaInformation_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> metaInformationBuilder_;

      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> getMetaInformationList() {
        if (metaInformationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(metaInformation_);
        } else {
          return metaInformationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public int getMetaInformationCount() {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.size();
        } else {
          return metaInformationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index) {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.get(index);
        } else {
          return metaInformationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder setMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.set(index, value);
          onChanged();
        } else {
          metaInformationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder setMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.set(index, builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.add(value);
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.add(index, value);
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.add(builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.add(index, builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addAllMetaInformation(
          java.lang.Iterable<? extends io.dstore.engine.EngineMetaInformation.MetaInformation> values) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, metaInformation_);
          onChanged();
        } else {
          metaInformationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder clearMetaInformation() {
        if (metaInformationBuilder_ == null) {
          metaInformation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          metaInformationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder removeMetaInformation(int index) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.remove(index);
          onChanged();
        } else {
          metaInformationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder getMetaInformationBuilder(
          int index) {
        return getMetaInformationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
          int index) {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.get(index);  } else {
          return metaInformationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
           getMetaInformationOrBuilderList() {
        if (metaInformationBuilder_ != null) {
          return metaInformationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(metaInformation_);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder addMetaInformationBuilder() {
        return getMetaInformationFieldBuilder().addBuilder(
            io.dstore.engine.EngineMetaInformation.MetaInformation.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder addMetaInformationBuilder(
          int index) {
        return getMetaInformationFieldBuilder().addBuilder(
            index, io.dstore.engine.EngineMetaInformation.MetaInformation.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation.Builder> 
           getMetaInformationBuilderList() {
        return getMetaInformationFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
          getMetaInformationFieldBuilder() {
        if (metaInformationBuilder_ == null) {
          metaInformationBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder>(
                  metaInformation_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          metaInformation_ = null;
        }
        return metaInformationBuilder_;
      }

      private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_ =
        java.util.Collections.emptyList();
      private void ensureMessageIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>(message_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> messageBuilder_;

      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
        if (messageBuilder_ == null) {
          return java.util.Collections.unmodifiableList(message_);
        } else {
          return messageBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public int getMessageCount() {
        if (messageBuilder_ == null) {
          return message_.size();
        } else {
          return messageBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);
        } else {
          return messageBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.set(index, value);
          onChanged();
        } else {
          messageBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.set(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(value);
          onChanged();
        } else {
          messageBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(index, value);
          onChanged();
        } else {
          messageBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addAllMessage(
          java.lang.Iterable<? extends io.dstore.engine.ProcedureMessage.Message> values) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, message_);
          onChanged();
        } else {
          messageBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder clearMessage() {
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          messageBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder removeMessage(int index) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.remove(index);
          onChanged();
        } else {
          messageBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder getMessageBuilder(
          int index) {
        return getMessageFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
          int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);  } else {
          return messageBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
           getMessageOrBuilderList() {
        if (messageBuilder_ != null) {
          return messageBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(message_);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder() {
        return getMessageFieldBuilder().addBuilder(
            io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder(
          int index) {
        return getMessageFieldBuilder().addBuilder(
            index, io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message.Builder> 
           getMessageBuilderList() {
        return getMessageFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
          getMessageFieldBuilder() {
        if (messageBuilder_ == null) {
          messageBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder>(
                  message_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        return messageBuilder_;
      }

      private java.util.List<io.dstore.engine.procs.MiGetTaxRates.Response.Row> row_ =
        java.util.Collections.emptyList();
      private void ensureRowIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          row_ = new java.util.ArrayList<io.dstore.engine.procs.MiGetTaxRates.Response.Row>(row_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procs.MiGetTaxRates.Response.Row, io.dstore.engine.procs.MiGetTaxRates.Response.Row.Builder, io.dstore.engine.procs.MiGetTaxRates.Response.RowOrBuilder> rowBuilder_;

      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<io.dstore.engine.procs.MiGetTaxRates.Response.Row> getRowList() {
        if (rowBuilder_ == null) {
          return java.util.Collections.unmodifiableList(row_);
        } else {
          return rowBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public int getRowCount() {
        if (rowBuilder_ == null) {
          return row_.size();
        } else {
          return rowBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.MiGetTaxRates.Response.Row getRow(int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);
        } else {
          return rowBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder setRow(
          int index, io.dstore.engine.procs.MiGetTaxRates.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.set(index, value);
          onChanged();
        } else {
          rowBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder setRow(
          int index, io.dstore.engine.procs.MiGetTaxRates.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.set(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(io.dstore.engine.procs.MiGetTaxRates.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(value);
          onChanged();
        } else {
          rowBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          int index, io.dstore.engine.procs.MiGetTaxRates.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(index, value);
          onChanged();
        } else {
          rowBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          io.dstore.engine.procs.MiGetTaxRates.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          int index, io.dstore.engine.procs.MiGetTaxRates.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addAllRow(
          java.lang.Iterable<? extends io.dstore.engine.procs.MiGetTaxRates.Response.Row> values) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, row_);
          onChanged();
        } else {
          rowBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder clearRow() {
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          rowBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder removeRow(int index) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.remove(index);
          onChanged();
        } else {
          rowBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.MiGetTaxRates.Response.Row.Builder getRowBuilder(
          int index) {
        return getRowFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.MiGetTaxRates.Response.RowOrBuilder getRowOrBuilder(
          int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);  } else {
          return rowBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<? extends io.dstore.engine.procs.MiGetTaxRates.Response.RowOrBuilder> 
           getRowOrBuilderList() {
        if (rowBuilder_ != null) {
          return rowBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(row_);
        }
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.MiGetTaxRates.Response.Row.Builder addRowBuilder() {
        return getRowFieldBuilder().addBuilder(
            io.dstore.engine.procs.MiGetTaxRates.Response.Row.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.MiGetTaxRates.Response.Row.Builder addRowBuilder(
          int index) {
        return getRowFieldBuilder().addBuilder(
            index, io.dstore.engine.procs.MiGetTaxRates.Response.Row.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.mi_GetTaxRates.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<io.dstore.engine.procs.MiGetTaxRates.Response.Row.Builder> 
           getRowBuilderList() {
        return getRowFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procs.MiGetTaxRates.Response.Row, io.dstore.engine.procs.MiGetTaxRates.Response.Row.Builder, io.dstore.engine.procs.MiGetTaxRates.Response.RowOrBuilder> 
          getRowFieldBuilder() {
        if (rowBuilder_ == null) {
          rowBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.procs.MiGetTaxRates.Response.Row, io.dstore.engine.procs.MiGetTaxRates.Response.Row.Builder, io.dstore.engine.procs.MiGetTaxRates.Response.RowOrBuilder>(
                  row_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          row_ = null;
        }
        return rowBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.mi_GetTaxRates.Response)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.mi_GetTaxRates.Response)
    private static final io.dstore.engine.procs.MiGetTaxRates.Response DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procs.MiGetTaxRates.Response();
    }

    public static io.dstore.engine.procs.MiGetTaxRates.Response getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Response>
        PARSER = new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Response(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Response> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procs.MiGetTaxRates.Response getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_mi_GetTaxRates_Parameters_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_mi_GetTaxRates_Parameters_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_mi_GetTaxRates_Response_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_mi_GetTaxRates_Response_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_mi_GetTaxRates_Response_Row_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_mi_GetTaxRates_Response_Row_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n-dstore/engine/procedures/mi_GetTaxRate" +
      "s.proto\022\034dstore.engine.mi_GetTaxRates\032\032d" +
      "store/engine/values.proto\032\031dstore/engine" +
      "/error.proto\032\033dstore/engine/message.prot" +
      "o\032#dstore/engine/metainformation.proto\"\264" +
      "\001\n\nParameters\0227\n\013tax_rate_id\030\001 \001(\0132\".dst" +
      "ore.engine.values.integerValue\022\031\n\020tax_ra" +
      "te_id_null\030\351\007 \001(\010\0227\n\013only_active\030\002 \001(\0132\"" +
      ".dstore.engine.values.booleanValue\022\031\n\020on" +
      "ly_active_null\030\352\007 \001(\010\"\347\004\n\010Response\022)\n\005er",
      "ror\030\001 \001(\0132\032.dstore.engine.error.Error\022H\n" +
      "\020meta_information\030\002 \003(\0132..dstore.engine." +
      "metainformation.MetaInformation\022/\n\007messa" +
      "ge\030\003 \003(\0132\036.dstore.engine.message.Message" +
      "\0227\n\003row\030\004 \003(\0132*.dstore.engine.mi_GetTaxR" +
      "ates.Response.Row\032\373\002\n\003Row\022\017\n\006row_id\030\220N \001" +
      "(\005\022@\n\024tax_rate_description\030\221N \001(\0132!.dsto" +
      "re.engine.values.stringValue\0223\n\006active\030\222" +
      "N \001(\0132\".dstore.engine.values.booleanValu" +
      "e\022=\n\020taxes_multiplier\030\223N \001(\0132\".dstore.en",
      "gine.values.decimalValue\0225\n\010tax_rate\030\224N " +
      "\001(\0132\".dstore.engine.values.decimalValue\022" +
      "8\n\013tax_rate_id\030\225N \001(\0132\".dstore.engine.va" +
      "lues.integerValue\022<\n\017use_as_fallback\030\226N " +
      "\001(\0132\".dstore.engine.values.booleanValueB" +
      "\030\n\026io.dstore.engine.procsb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.dstore.engine.Values.getDescriptor(),
          io.dstore.engine.EngineError.getDescriptor(),
          io.dstore.engine.ProcedureMessage.getDescriptor(),
          io.dstore.engine.EngineMetaInformation.getDescriptor(),
        }, assigner);
    internal_static_dstore_engine_mi_GetTaxRates_Parameters_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dstore_engine_mi_GetTaxRates_Parameters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_mi_GetTaxRates_Parameters_descriptor,
        new java.lang.String[] { "TaxRateId", "TaxRateIdNull", "OnlyActive", "OnlyActiveNull", });
    internal_static_dstore_engine_mi_GetTaxRates_Response_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dstore_engine_mi_GetTaxRates_Response_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_mi_GetTaxRates_Response_descriptor,
        new java.lang.String[] { "Error", "MetaInformation", "Message", "Row", });
    internal_static_dstore_engine_mi_GetTaxRates_Response_Row_descriptor =
      internal_static_dstore_engine_mi_GetTaxRates_Response_descriptor.getNestedTypes().get(0);
    internal_static_dstore_engine_mi_GetTaxRates_Response_Row_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_mi_GetTaxRates_Response_Row_descriptor,
        new java.lang.String[] { "RowId", "TaxRateDescription", "Active", "TaxesMultiplier", "TaxRate", "TaxRateId", "UseAsFallback", });
    io.dstore.engine.Values.getDescriptor();
    io.dstore.engine.EngineError.getDescriptor();
    io.dstore.engine.ProcedureMessage.getDescriptor();
    io.dstore.engine.EngineMetaInformation.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
