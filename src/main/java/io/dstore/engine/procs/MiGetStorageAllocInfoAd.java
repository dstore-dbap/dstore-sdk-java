// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dstore/engine/procedures/mi_GetStorageAllocInfo_Ad.proto

package io.dstore.engine.procs;

public final class MiGetStorageAllocInfoAd {
  private MiGetStorageAllocInfoAd() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ParametersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.mi_GetStorageAllocInfo_Ad.Parameters)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
     */
    boolean hasGetInfoForADatabase();
    /**
     * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
     */
    io.dstore.engine.Values.booleanValue getGetInfoForADatabase();
    /**
     * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
     */
    io.dstore.engine.Values.booleanValueOrBuilder getGetInfoForADatabaseOrBuilder();

    /**
     * <code>optional bool get_info_for_a_database_null = 1001;</code>
     */
    boolean getGetInfoForADatabaseNull();

    /**
     * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
     */
    boolean hasGetStorageAllocInfoFor();
    /**
     * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
     */
    io.dstore.engine.Values.stringValue getGetStorageAllocInfoFor();
    /**
     * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
     */
    io.dstore.engine.Values.stringValueOrBuilder getGetStorageAllocInfoForOrBuilder();

    /**
     * <code>optional bool get_storage_alloc_info_for_null = 1002;</code>
     */
    boolean getGetStorageAllocInfoForNull();
  }
  /**
   * Protobuf type {@code dstore.engine.mi_GetStorageAllocInfo_Ad.Parameters}
   */
  public  static final class Parameters extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.mi_GetStorageAllocInfo_Ad.Parameters)
      ParametersOrBuilder {
    // Use Parameters.newBuilder() to construct.
    private Parameters(com.google.protobuf.GeneratedMessage.Builder builder) {
      super(builder);
    }
    private Parameters() {
      getInfoForADatabaseNull_ = false;
      getStorageAllocInfoForNull_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Parameters(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.engine.Values.booleanValue.Builder subBuilder = null;
              if (getInfoForADatabase_ != null) {
                subBuilder = getInfoForADatabase_.toBuilder();
              }
              getInfoForADatabase_ = input.readMessage(io.dstore.engine.Values.booleanValue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getInfoForADatabase_);
                getInfoForADatabase_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.dstore.engine.Values.stringValue.Builder subBuilder = null;
              if (getStorageAllocInfoFor_ != null) {
                subBuilder = getStorageAllocInfoFor_.toBuilder();
              }
              getStorageAllocInfoFor_ = input.readMessage(io.dstore.engine.Values.stringValue.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getStorageAllocInfoFor_);
                getStorageAllocInfoFor_ = subBuilder.buildPartial();
              }

              break;
            }
            case 8008: {

              getInfoForADatabaseNull_ = input.readBool();
              break;
            }
            case 8016: {

              getStorageAllocInfoForNull_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters.class, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters.Builder.class);
    }

    public static final int GET_INFO_FOR_A_DATABASE_FIELD_NUMBER = 1;
    private io.dstore.engine.Values.booleanValue getInfoForADatabase_;
    /**
     * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
     */
    public boolean hasGetInfoForADatabase() {
      return getInfoForADatabase_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
     */
    public io.dstore.engine.Values.booleanValue getGetInfoForADatabase() {
      return getInfoForADatabase_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : getInfoForADatabase_;
    }
    /**
     * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
     */
    public io.dstore.engine.Values.booleanValueOrBuilder getGetInfoForADatabaseOrBuilder() {
      return getGetInfoForADatabase();
    }

    public static final int GET_INFO_FOR_A_DATABASE_NULL_FIELD_NUMBER = 1001;
    private boolean getInfoForADatabaseNull_;
    /**
     * <code>optional bool get_info_for_a_database_null = 1001;</code>
     */
    public boolean getGetInfoForADatabaseNull() {
      return getInfoForADatabaseNull_;
    }

    public static final int GET_STORAGE_ALLOC_INFO_FOR_FIELD_NUMBER = 2;
    private io.dstore.engine.Values.stringValue getStorageAllocInfoFor_;
    /**
     * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
     */
    public boolean hasGetStorageAllocInfoFor() {
      return getStorageAllocInfoFor_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
     */
    public io.dstore.engine.Values.stringValue getGetStorageAllocInfoFor() {
      return getStorageAllocInfoFor_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : getStorageAllocInfoFor_;
    }
    /**
     * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
     */
    public io.dstore.engine.Values.stringValueOrBuilder getGetStorageAllocInfoForOrBuilder() {
      return getGetStorageAllocInfoFor();
    }

    public static final int GET_STORAGE_ALLOC_INFO_FOR_NULL_FIELD_NUMBER = 1002;
    private boolean getStorageAllocInfoForNull_;
    /**
     * <code>optional bool get_storage_alloc_info_for_null = 1002;</code>
     */
    public boolean getGetStorageAllocInfoForNull() {
      return getStorageAllocInfoForNull_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (getInfoForADatabase_ != null) {
        output.writeMessage(1, getGetInfoForADatabase());
      }
      if (getStorageAllocInfoFor_ != null) {
        output.writeMessage(2, getGetStorageAllocInfoFor());
      }
      if (getInfoForADatabaseNull_ != false) {
        output.writeBool(1001, getInfoForADatabaseNull_);
      }
      if (getStorageAllocInfoForNull_ != false) {
        output.writeBool(1002, getStorageAllocInfoForNull_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (getInfoForADatabase_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getGetInfoForADatabase());
      }
      if (getStorageAllocInfoFor_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getGetStorageAllocInfoFor());
      }
      if (getInfoForADatabaseNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1001, getInfoForADatabaseNull_);
      }
      if (getStorageAllocInfoForNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1002, getStorageAllocInfoForNull_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.mi_GetStorageAllocInfo_Ad.Parameters}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.mi_GetStorageAllocInfo_Ad.Parameters)
        io.dstore.engine.procs.MiGetStorageAllocInfoAd.ParametersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters.class, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters.Builder.class);
      }

      // Construct using io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (getInfoForADatabaseBuilder_ == null) {
          getInfoForADatabase_ = null;
        } else {
          getInfoForADatabase_ = null;
          getInfoForADatabaseBuilder_ = null;
        }
        getInfoForADatabaseNull_ = false;

        if (getStorageAllocInfoForBuilder_ == null) {
          getStorageAllocInfoFor_ = null;
        } else {
          getStorageAllocInfoFor_ = null;
          getStorageAllocInfoForBuilder_ = null;
        }
        getStorageAllocInfoForNull_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_descriptor;
      }

      public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters getDefaultInstanceForType() {
        return io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters.getDefaultInstance();
      }

      public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters build() {
        io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters buildPartial() {
        io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters result = new io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters(this);
        if (getInfoForADatabaseBuilder_ == null) {
          result.getInfoForADatabase_ = getInfoForADatabase_;
        } else {
          result.getInfoForADatabase_ = getInfoForADatabaseBuilder_.build();
        }
        result.getInfoForADatabaseNull_ = getInfoForADatabaseNull_;
        if (getStorageAllocInfoForBuilder_ == null) {
          result.getStorageAllocInfoFor_ = getStorageAllocInfoFor_;
        } else {
          result.getStorageAllocInfoFor_ = getStorageAllocInfoForBuilder_.build();
        }
        result.getStorageAllocInfoForNull_ = getStorageAllocInfoForNull_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters) {
          return mergeFrom((io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters other) {
        if (other == io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters.getDefaultInstance()) return this;
        if (other.hasGetInfoForADatabase()) {
          mergeGetInfoForADatabase(other.getGetInfoForADatabase());
        }
        if (other.getGetInfoForADatabaseNull() != false) {
          setGetInfoForADatabaseNull(other.getGetInfoForADatabaseNull());
        }
        if (other.hasGetStorageAllocInfoFor()) {
          mergeGetStorageAllocInfoFor(other.getGetStorageAllocInfoFor());
        }
        if (other.getGetStorageAllocInfoForNull() != false) {
          setGetStorageAllocInfoForNull(other.getGetStorageAllocInfoForNull());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.dstore.engine.Values.booleanValue getInfoForADatabase_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> getInfoForADatabaseBuilder_;
      /**
       * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public boolean hasGetInfoForADatabase() {
        return getInfoForADatabaseBuilder_ != null || getInfoForADatabase_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public io.dstore.engine.Values.booleanValue getGetInfoForADatabase() {
        if (getInfoForADatabaseBuilder_ == null) {
          return getInfoForADatabase_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : getInfoForADatabase_;
        } else {
          return getInfoForADatabaseBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public Builder setGetInfoForADatabase(io.dstore.engine.Values.booleanValue value) {
        if (getInfoForADatabaseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getInfoForADatabase_ = value;
          onChanged();
        } else {
          getInfoForADatabaseBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public Builder setGetInfoForADatabase(
          io.dstore.engine.Values.booleanValue.Builder builderForValue) {
        if (getInfoForADatabaseBuilder_ == null) {
          getInfoForADatabase_ = builderForValue.build();
          onChanged();
        } else {
          getInfoForADatabaseBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public Builder mergeGetInfoForADatabase(io.dstore.engine.Values.booleanValue value) {
        if (getInfoForADatabaseBuilder_ == null) {
          if (getInfoForADatabase_ != null) {
            getInfoForADatabase_ =
              io.dstore.engine.Values.booleanValue.newBuilder(getInfoForADatabase_).mergeFrom(value).buildPartial();
          } else {
            getInfoForADatabase_ = value;
          }
          onChanged();
        } else {
          getInfoForADatabaseBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public Builder clearGetInfoForADatabase() {
        if (getInfoForADatabaseBuilder_ == null) {
          getInfoForADatabase_ = null;
          onChanged();
        } else {
          getInfoForADatabase_ = null;
          getInfoForADatabaseBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public io.dstore.engine.Values.booleanValue.Builder getGetInfoForADatabaseBuilder() {
        
        onChanged();
        return getGetInfoForADatabaseFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public io.dstore.engine.Values.booleanValueOrBuilder getGetInfoForADatabaseOrBuilder() {
        if (getInfoForADatabaseBuilder_ != null) {
          return getInfoForADatabaseBuilder_.getMessageOrBuilder();
        } else {
          return getInfoForADatabase_ == null ?
              io.dstore.engine.Values.booleanValue.getDefaultInstance() : getInfoForADatabase_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_info_for_a_database = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> 
          getGetInfoForADatabaseFieldBuilder() {
        if (getInfoForADatabaseBuilder_ == null) {
          getInfoForADatabaseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder>(
                  getGetInfoForADatabase(),
                  getParentForChildren(),
                  isClean());
          getInfoForADatabase_ = null;
        }
        return getInfoForADatabaseBuilder_;
      }

      private boolean getInfoForADatabaseNull_ ;
      /**
       * <code>optional bool get_info_for_a_database_null = 1001;</code>
       */
      public boolean getGetInfoForADatabaseNull() {
        return getInfoForADatabaseNull_;
      }
      /**
       * <code>optional bool get_info_for_a_database_null = 1001;</code>
       */
      public Builder setGetInfoForADatabaseNull(boolean value) {
        
        getInfoForADatabaseNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool get_info_for_a_database_null = 1001;</code>
       */
      public Builder clearGetInfoForADatabaseNull() {
        
        getInfoForADatabaseNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.engine.Values.stringValue getStorageAllocInfoFor_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> getStorageAllocInfoForBuilder_;
      /**
       * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public boolean hasGetStorageAllocInfoFor() {
        return getStorageAllocInfoForBuilder_ != null || getStorageAllocInfoFor_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public io.dstore.engine.Values.stringValue getGetStorageAllocInfoFor() {
        if (getStorageAllocInfoForBuilder_ == null) {
          return getStorageAllocInfoFor_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : getStorageAllocInfoFor_;
        } else {
          return getStorageAllocInfoForBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public Builder setGetStorageAllocInfoFor(io.dstore.engine.Values.stringValue value) {
        if (getStorageAllocInfoForBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getStorageAllocInfoFor_ = value;
          onChanged();
        } else {
          getStorageAllocInfoForBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public Builder setGetStorageAllocInfoFor(
          io.dstore.engine.Values.stringValue.Builder builderForValue) {
        if (getStorageAllocInfoForBuilder_ == null) {
          getStorageAllocInfoFor_ = builderForValue.build();
          onChanged();
        } else {
          getStorageAllocInfoForBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public Builder mergeGetStorageAllocInfoFor(io.dstore.engine.Values.stringValue value) {
        if (getStorageAllocInfoForBuilder_ == null) {
          if (getStorageAllocInfoFor_ != null) {
            getStorageAllocInfoFor_ =
              io.dstore.engine.Values.stringValue.newBuilder(getStorageAllocInfoFor_).mergeFrom(value).buildPartial();
          } else {
            getStorageAllocInfoFor_ = value;
          }
          onChanged();
        } else {
          getStorageAllocInfoForBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public Builder clearGetStorageAllocInfoFor() {
        if (getStorageAllocInfoForBuilder_ == null) {
          getStorageAllocInfoFor_ = null;
          onChanged();
        } else {
          getStorageAllocInfoFor_ = null;
          getStorageAllocInfoForBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public io.dstore.engine.Values.stringValue.Builder getGetStorageAllocInfoForBuilder() {
        
        onChanged();
        return getGetStorageAllocInfoForFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getGetStorageAllocInfoForOrBuilder() {
        if (getStorageAllocInfoForBuilder_ != null) {
          return getStorageAllocInfoForBuilder_.getMessageOrBuilder();
        } else {
          return getStorageAllocInfoFor_ == null ?
              io.dstore.engine.Values.stringValue.getDefaultInstance() : getStorageAllocInfoFor_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
          getGetStorageAllocInfoForFieldBuilder() {
        if (getStorageAllocInfoForBuilder_ == null) {
          getStorageAllocInfoForBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                  getGetStorageAllocInfoFor(),
                  getParentForChildren(),
                  isClean());
          getStorageAllocInfoFor_ = null;
        }
        return getStorageAllocInfoForBuilder_;
      }

      private boolean getStorageAllocInfoForNull_ ;
      /**
       * <code>optional bool get_storage_alloc_info_for_null = 1002;</code>
       */
      public boolean getGetStorageAllocInfoForNull() {
        return getStorageAllocInfoForNull_;
      }
      /**
       * <code>optional bool get_storage_alloc_info_for_null = 1002;</code>
       */
      public Builder setGetStorageAllocInfoForNull(boolean value) {
        
        getStorageAllocInfoForNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool get_storage_alloc_info_for_null = 1002;</code>
       */
      public Builder clearGetStorageAllocInfoForNull() {
        
        getStorageAllocInfoForNull_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.mi_GetStorageAllocInfo_Ad.Parameters)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.mi_GetStorageAllocInfo_Ad.Parameters)
    private static final io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters();
    }

    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    public static final com.google.protobuf.Parser<Parameters> PARSER =
        new com.google.protobuf.AbstractParser<Parameters>() {
      public Parameters parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Parameters(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Parameters> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Parameters> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Parameters getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.mi_GetStorageAllocInfo_Ad.Response)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    boolean hasError();
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    io.dstore.engine.ProcedureError.Error getError();
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    io.dstore.engine.ProcedureError.ErrorOrBuilder getErrorOrBuilder();

    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<io.dstore.engine.ProcedureMessage.Message> 
        getMessageList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.Message getMessage(int index);
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    int getMessageCount();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index);

    /**
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    java.util.List<io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row> 
        getRowList();
    /**
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row getRow(int index);
    /**
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    int getRowCount();
    /**
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    java.util.List<? extends io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.RowOrBuilder> 
        getRowOrBuilderList();
    /**
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.RowOrBuilder getRowOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dstore.engine.mi_GetStorageAllocInfo_Ad.Response}
   */
  public  static final class Response extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.mi_GetStorageAllocInfo_Ad.Response)
      ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessage.Builder builder) {
      super(builder);
    }
    private Response() {
      message_ = java.util.Collections.emptyList();
      row_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.engine.ProcedureError.Error.Builder subBuilder = null;
              if (error_ != null) {
                subBuilder = error_.toBuilder();
              }
              error_ = input.readMessage(io.dstore.engine.ProcedureError.Error.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(error_);
                error_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>();
                mutable_bitField0_ |= 0x00000002;
              }
              message_.add(input.readMessage(io.dstore.engine.ProcedureMessage.Message.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                row_ = new java.util.ArrayList<io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row>();
                mutable_bitField0_ |= 0x00000004;
              }
              row_.add(input.readMessage(io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = java.util.Collections.unmodifiableList(message_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = java.util.Collections.unmodifiableList(row_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.class, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Builder.class);
    }

    public interface RowOrBuilder extends
        // @@protoc_insertion_point(interface_extends:dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      int getRowId();

      /**
       * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
       *
       * <pre>
       * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
       * </pre>
       */
      boolean hasTableName();
      /**
       * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
       *
       * <pre>
       * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
       * </pre>
       */
      io.dstore.engine.Values.stringValue getTableName();
      /**
       * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
       *
       * <pre>
       * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getTableNameOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
       *
       * <pre>
       * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
       * </pre>
       */
      boolean hasIndexSizeMB();
      /**
       * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
       *
       * <pre>
       * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getIndexSizeMB();
      /**
       * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
       *
       * <pre>
       * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getIndexSizeMBOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
       *
       * <pre>
       * Anzahl Indizes der Tabelle "TableName"
       * </pre>
       */
      boolean hasNumberOfIndexes();
      /**
       * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
       *
       * <pre>
       * Anzahl Indizes der Tabelle "TableName"
       * </pre>
       */
      io.dstore.engine.Values.integerValue getNumberOfIndexes();
      /**
       * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
       *
       * <pre>
       * Anzahl Indizes der Tabelle "TableName"
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getNumberOfIndexesOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
       *
       * <pre>
       * Anzahl Datensätze in der Tabelle "TableName"
       * </pre>
       */
      boolean hasNumberOfRows();
      /**
       * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
       *
       * <pre>
       * Anzahl Datensätze in der Tabelle "TableName"
       * </pre>
       */
      io.dstore.engine.Values.integerValue getNumberOfRows();
      /**
       * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
       *
       * <pre>
       * Anzahl Datensätze in der Tabelle "TableName"
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getNumberOfRowsOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
       *
       * <pre>
       * Gesamte Größe der Tabelle "TableName" in MB
       * </pre>
       */
      boolean hasTableSizeMB();
      /**
       * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
       *
       * <pre>
       * Gesamte Größe der Tabelle "TableName" in MB
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getTableSizeMB();
      /**
       * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
       *
       * <pre>
       * Gesamte Größe der Tabelle "TableName" in MB
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getTableSizeMBOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
       *
       * <pre>
       * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
       * </pre>
       */
      boolean hasDataSizeMB();
      /**
       * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
       *
       * <pre>
       * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getDataSizeMB();
      /**
       * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
       *
       * <pre>
       * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getDataSizeMBOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
       *
       * <pre>
       * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
       * </pre>
       */
      boolean hasMBAllocated();
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
       *
       * <pre>
       * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getMBAllocated();
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
       *
       * <pre>
       * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getMBAllocatedOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
       *
       * <pre>
       * Name eines Segments in der Datenbank "DBName"
       * </pre>
       */
      boolean hasSegmentName();
      /**
       * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
       *
       * <pre>
       * Name eines Segments in der Datenbank "DBName"
       * </pre>
       */
      io.dstore.engine.Values.stringValue getSegmentName();
      /**
       * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
       *
       * <pre>
       * Name eines Segments in der Datenbank "DBName"
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getSegmentNameOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
       *
       * <pre>
       * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
       * </pre>
       */
      boolean hasMBUsed();
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
       *
       * <pre>
       * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getMBUsed();
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
       *
       * <pre>
       * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getMBUsedOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
       *
       * <pre>
       * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
       * </pre>
       */
      boolean hasFreeSpaceInPercent();
      /**
       * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
       *
       * <pre>
       * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getFreeSpaceInPercent();
      /**
       * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
       *
       * <pre>
       * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getFreeSpaceInPercentOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
       *
       * <pre>
       * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
       * </pre>
       */
      boolean hasDBName();
      /**
       * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
       *
       * <pre>
       * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
       * </pre>
       */
      io.dstore.engine.Values.stringValue getDBName();
      /**
       * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
       *
       * <pre>
       * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getDBNameOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
       *
       * <pre>
       * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
       * </pre>
       */
      boolean hasMBFree();
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
       *
       * <pre>
       * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getMBFree();
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
       *
       * <pre>
       * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getMBFreeOrBuilder();
    }
    /**
     * Protobuf type {@code dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row}
     */
    public  static final class Row extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row)
        RowOrBuilder {
      // Use Row.newBuilder() to construct.
      private Row(com.google.protobuf.GeneratedMessage.Builder builder) {
        super(builder);
      }
      private Row() {
        rowId_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private Row(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 80000: {

                rowId_ = input.readInt32();
                break;
              }
              case 80010: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (tableName_ != null) {
                  subBuilder = tableName_.toBuilder();
                }
                tableName_ = input.readMessage(io.dstore.engine.Values.stringValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(tableName_);
                  tableName_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80018: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (indexSizeMB_ != null) {
                  subBuilder = indexSizeMB_.toBuilder();
                }
                indexSizeMB_ = input.readMessage(io.dstore.engine.Values.decimalValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(indexSizeMB_);
                  indexSizeMB_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80026: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (numberOfIndexes_ != null) {
                  subBuilder = numberOfIndexes_.toBuilder();
                }
                numberOfIndexes_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(numberOfIndexes_);
                  numberOfIndexes_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80034: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (numberOfRows_ != null) {
                  subBuilder = numberOfRows_.toBuilder();
                }
                numberOfRows_ = input.readMessage(io.dstore.engine.Values.integerValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(numberOfRows_);
                  numberOfRows_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80042: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (tableSizeMB_ != null) {
                  subBuilder = tableSizeMB_.toBuilder();
                }
                tableSizeMB_ = input.readMessage(io.dstore.engine.Values.decimalValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(tableSizeMB_);
                  tableSizeMB_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80050: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (dataSizeMB_ != null) {
                  subBuilder = dataSizeMB_.toBuilder();
                }
                dataSizeMB_ = input.readMessage(io.dstore.engine.Values.decimalValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(dataSizeMB_);
                  dataSizeMB_ = subBuilder.buildPartial();
                }

                break;
              }
              case 160010: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (mBAllocated_ != null) {
                  subBuilder = mBAllocated_.toBuilder();
                }
                mBAllocated_ = input.readMessage(io.dstore.engine.Values.decimalValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(mBAllocated_);
                  mBAllocated_ = subBuilder.buildPartial();
                }

                break;
              }
              case 160018: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (segmentName_ != null) {
                  subBuilder = segmentName_.toBuilder();
                }
                segmentName_ = input.readMessage(io.dstore.engine.Values.stringValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(segmentName_);
                  segmentName_ = subBuilder.buildPartial();
                }

                break;
              }
              case 160026: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (mBUsed_ != null) {
                  subBuilder = mBUsed_.toBuilder();
                }
                mBUsed_ = input.readMessage(io.dstore.engine.Values.decimalValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(mBUsed_);
                  mBUsed_ = subBuilder.buildPartial();
                }

                break;
              }
              case 160034: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (freeSpaceInPercent_ != null) {
                  subBuilder = freeSpaceInPercent_.toBuilder();
                }
                freeSpaceInPercent_ = input.readMessage(io.dstore.engine.Values.decimalValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(freeSpaceInPercent_);
                  freeSpaceInPercent_ = subBuilder.buildPartial();
                }

                break;
              }
              case 160042: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (dBName_ != null) {
                  subBuilder = dBName_.toBuilder();
                }
                dBName_ = input.readMessage(io.dstore.engine.Values.stringValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(dBName_);
                  dBName_ = subBuilder.buildPartial();
                }

                break;
              }
              case 160050: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (mBFree_ != null) {
                  subBuilder = mBFree_.toBuilder();
                }
                mBFree_ = input.readMessage(io.dstore.engine.Values.decimalValue.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(mBFree_);
                  mBFree_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.class, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.Builder.class);
      }

      public static final int ROW_ID_FIELD_NUMBER = 10000;
      private int rowId_;
      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      public int getRowId() {
        return rowId_;
      }

      public static final int TABLE_NAME_FIELD_NUMBER = 10001;
      private io.dstore.engine.Values.stringValue tableName_;
      /**
       * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
       *
       * <pre>
       * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
       * </pre>
       */
      public boolean hasTableName() {
        return tableName_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
       *
       * <pre>
       * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getTableName() {
        return tableName_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : tableName_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
       *
       * <pre>
       * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getTableNameOrBuilder() {
        return getTableName();
      }

      public static final int INDEX_SIZE__M_B_FIELD_NUMBER = 10002;
      private io.dstore.engine.Values.decimalValue indexSizeMB_;
      /**
       * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
       *
       * <pre>
       * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
       * </pre>
       */
      public boolean hasIndexSizeMB() {
        return indexSizeMB_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
       *
       * <pre>
       * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getIndexSizeMB() {
        return indexSizeMB_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : indexSizeMB_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
       *
       * <pre>
       * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getIndexSizeMBOrBuilder() {
        return getIndexSizeMB();
      }

      public static final int NUMBER_OF_INDEXES_FIELD_NUMBER = 10003;
      private io.dstore.engine.Values.integerValue numberOfIndexes_;
      /**
       * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
       *
       * <pre>
       * Anzahl Indizes der Tabelle "TableName"
       * </pre>
       */
      public boolean hasNumberOfIndexes() {
        return numberOfIndexes_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
       *
       * <pre>
       * Anzahl Indizes der Tabelle "TableName"
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getNumberOfIndexes() {
        return numberOfIndexes_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : numberOfIndexes_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
       *
       * <pre>
       * Anzahl Indizes der Tabelle "TableName"
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getNumberOfIndexesOrBuilder() {
        return getNumberOfIndexes();
      }

      public static final int NUMBER_OF_ROWS_FIELD_NUMBER = 10004;
      private io.dstore.engine.Values.integerValue numberOfRows_;
      /**
       * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
       *
       * <pre>
       * Anzahl Datensätze in der Tabelle "TableName"
       * </pre>
       */
      public boolean hasNumberOfRows() {
        return numberOfRows_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
       *
       * <pre>
       * Anzahl Datensätze in der Tabelle "TableName"
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getNumberOfRows() {
        return numberOfRows_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : numberOfRows_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
       *
       * <pre>
       * Anzahl Datensätze in der Tabelle "TableName"
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getNumberOfRowsOrBuilder() {
        return getNumberOfRows();
      }

      public static final int TABLE_SIZE__M_B_FIELD_NUMBER = 10005;
      private io.dstore.engine.Values.decimalValue tableSizeMB_;
      /**
       * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
       *
       * <pre>
       * Gesamte Größe der Tabelle "TableName" in MB
       * </pre>
       */
      public boolean hasTableSizeMB() {
        return tableSizeMB_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
       *
       * <pre>
       * Gesamte Größe der Tabelle "TableName" in MB
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getTableSizeMB() {
        return tableSizeMB_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : tableSizeMB_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
       *
       * <pre>
       * Gesamte Größe der Tabelle "TableName" in MB
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getTableSizeMBOrBuilder() {
        return getTableSizeMB();
      }

      public static final int DATA_SIZE__M_B_FIELD_NUMBER = 10006;
      private io.dstore.engine.Values.decimalValue dataSizeMB_;
      /**
       * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
       *
       * <pre>
       * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
       * </pre>
       */
      public boolean hasDataSizeMB() {
        return dataSizeMB_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
       *
       * <pre>
       * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getDataSizeMB() {
        return dataSizeMB_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : dataSizeMB_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
       *
       * <pre>
       * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getDataSizeMBOrBuilder() {
        return getDataSizeMB();
      }

      public static final int M_B_ALLOCATED_FIELD_NUMBER = 20001;
      private io.dstore.engine.Values.decimalValue mBAllocated_;
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
       *
       * <pre>
       * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
       * </pre>
       */
      public boolean hasMBAllocated() {
        return mBAllocated_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
       *
       * <pre>
       * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getMBAllocated() {
        return mBAllocated_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : mBAllocated_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
       *
       * <pre>
       * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getMBAllocatedOrBuilder() {
        return getMBAllocated();
      }

      public static final int SEGMENT_NAME_FIELD_NUMBER = 20002;
      private io.dstore.engine.Values.stringValue segmentName_;
      /**
       * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
       *
       * <pre>
       * Name eines Segments in der Datenbank "DBName"
       * </pre>
       */
      public boolean hasSegmentName() {
        return segmentName_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
       *
       * <pre>
       * Name eines Segments in der Datenbank "DBName"
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getSegmentName() {
        return segmentName_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : segmentName_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
       *
       * <pre>
       * Name eines Segments in der Datenbank "DBName"
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getSegmentNameOrBuilder() {
        return getSegmentName();
      }

      public static final int M_B_USED_FIELD_NUMBER = 20003;
      private io.dstore.engine.Values.decimalValue mBUsed_;
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
       *
       * <pre>
       * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
       * </pre>
       */
      public boolean hasMBUsed() {
        return mBUsed_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
       *
       * <pre>
       * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getMBUsed() {
        return mBUsed_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : mBUsed_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
       *
       * <pre>
       * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getMBUsedOrBuilder() {
        return getMBUsed();
      }

      public static final int FREE_SPACE_IN_PERCENT_FIELD_NUMBER = 20004;
      private io.dstore.engine.Values.decimalValue freeSpaceInPercent_;
      /**
       * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
       *
       * <pre>
       * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
       * </pre>
       */
      public boolean hasFreeSpaceInPercent() {
        return freeSpaceInPercent_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
       *
       * <pre>
       * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getFreeSpaceInPercent() {
        return freeSpaceInPercent_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : freeSpaceInPercent_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
       *
       * <pre>
       * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getFreeSpaceInPercentOrBuilder() {
        return getFreeSpaceInPercent();
      }

      public static final int D_B_NAME_FIELD_NUMBER = 20005;
      private io.dstore.engine.Values.stringValue dBName_;
      /**
       * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
       *
       * <pre>
       * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
       * </pre>
       */
      public boolean hasDBName() {
        return dBName_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
       *
       * <pre>
       * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getDBName() {
        return dBName_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : dBName_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
       *
       * <pre>
       * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getDBNameOrBuilder() {
        return getDBName();
      }

      public static final int M_B_FREE_FIELD_NUMBER = 20006;
      private io.dstore.engine.Values.decimalValue mBFree_;
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
       *
       * <pre>
       * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
       * </pre>
       */
      public boolean hasMBFree() {
        return mBFree_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
       *
       * <pre>
       * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getMBFree() {
        return mBFree_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : mBFree_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
       *
       * <pre>
       * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getMBFreeOrBuilder() {
        return getMBFree();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (rowId_ != 0) {
          output.writeInt32(10000, rowId_);
        }
        if (tableName_ != null) {
          output.writeMessage(10001, getTableName());
        }
        if (indexSizeMB_ != null) {
          output.writeMessage(10002, getIndexSizeMB());
        }
        if (numberOfIndexes_ != null) {
          output.writeMessage(10003, getNumberOfIndexes());
        }
        if (numberOfRows_ != null) {
          output.writeMessage(10004, getNumberOfRows());
        }
        if (tableSizeMB_ != null) {
          output.writeMessage(10005, getTableSizeMB());
        }
        if (dataSizeMB_ != null) {
          output.writeMessage(10006, getDataSizeMB());
        }
        if (mBAllocated_ != null) {
          output.writeMessage(20001, getMBAllocated());
        }
        if (segmentName_ != null) {
          output.writeMessage(20002, getSegmentName());
        }
        if (mBUsed_ != null) {
          output.writeMessage(20003, getMBUsed());
        }
        if (freeSpaceInPercent_ != null) {
          output.writeMessage(20004, getFreeSpaceInPercent());
        }
        if (dBName_ != null) {
          output.writeMessage(20005, getDBName());
        }
        if (mBFree_ != null) {
          output.writeMessage(20006, getMBFree());
        }
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (rowId_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10000, rowId_);
        }
        if (tableName_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10001, getTableName());
        }
        if (indexSizeMB_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10002, getIndexSizeMB());
        }
        if (numberOfIndexes_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10003, getNumberOfIndexes());
        }
        if (numberOfRows_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10004, getNumberOfRows());
        }
        if (tableSizeMB_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10005, getTableSizeMB());
        }
        if (dataSizeMB_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10006, getDataSizeMB());
        }
        if (mBAllocated_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20001, getMBAllocated());
        }
        if (segmentName_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20002, getSegmentName());
        }
        if (mBUsed_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20003, getMBUsed());
        }
        if (freeSpaceInPercent_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20004, getFreeSpaceInPercent());
        }
        if (dBName_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20005, getDBName());
        }
        if (mBFree_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20006, getMBFree());
        }
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row)
          io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.RowOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.class, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.Builder.class);
        }

        // Construct using io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          rowId_ = 0;

          if (tableNameBuilder_ == null) {
            tableName_ = null;
          } else {
            tableName_ = null;
            tableNameBuilder_ = null;
          }
          if (indexSizeMBBuilder_ == null) {
            indexSizeMB_ = null;
          } else {
            indexSizeMB_ = null;
            indexSizeMBBuilder_ = null;
          }
          if (numberOfIndexesBuilder_ == null) {
            numberOfIndexes_ = null;
          } else {
            numberOfIndexes_ = null;
            numberOfIndexesBuilder_ = null;
          }
          if (numberOfRowsBuilder_ == null) {
            numberOfRows_ = null;
          } else {
            numberOfRows_ = null;
            numberOfRowsBuilder_ = null;
          }
          if (tableSizeMBBuilder_ == null) {
            tableSizeMB_ = null;
          } else {
            tableSizeMB_ = null;
            tableSizeMBBuilder_ = null;
          }
          if (dataSizeMBBuilder_ == null) {
            dataSizeMB_ = null;
          } else {
            dataSizeMB_ = null;
            dataSizeMBBuilder_ = null;
          }
          if (mBAllocatedBuilder_ == null) {
            mBAllocated_ = null;
          } else {
            mBAllocated_ = null;
            mBAllocatedBuilder_ = null;
          }
          if (segmentNameBuilder_ == null) {
            segmentName_ = null;
          } else {
            segmentName_ = null;
            segmentNameBuilder_ = null;
          }
          if (mBUsedBuilder_ == null) {
            mBUsed_ = null;
          } else {
            mBUsed_ = null;
            mBUsedBuilder_ = null;
          }
          if (freeSpaceInPercentBuilder_ == null) {
            freeSpaceInPercent_ = null;
          } else {
            freeSpaceInPercent_ = null;
            freeSpaceInPercentBuilder_ = null;
          }
          if (dBNameBuilder_ == null) {
            dBName_ = null;
          } else {
            dBName_ = null;
            dBNameBuilder_ = null;
          }
          if (mBFreeBuilder_ == null) {
            mBFree_ = null;
          } else {
            mBFree_ = null;
            mBFreeBuilder_ = null;
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_descriptor;
        }

        public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row getDefaultInstanceForType() {
          return io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.getDefaultInstance();
        }

        public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row build() {
          io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row buildPartial() {
          io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row result = new io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row(this);
          result.rowId_ = rowId_;
          if (tableNameBuilder_ == null) {
            result.tableName_ = tableName_;
          } else {
            result.tableName_ = tableNameBuilder_.build();
          }
          if (indexSizeMBBuilder_ == null) {
            result.indexSizeMB_ = indexSizeMB_;
          } else {
            result.indexSizeMB_ = indexSizeMBBuilder_.build();
          }
          if (numberOfIndexesBuilder_ == null) {
            result.numberOfIndexes_ = numberOfIndexes_;
          } else {
            result.numberOfIndexes_ = numberOfIndexesBuilder_.build();
          }
          if (numberOfRowsBuilder_ == null) {
            result.numberOfRows_ = numberOfRows_;
          } else {
            result.numberOfRows_ = numberOfRowsBuilder_.build();
          }
          if (tableSizeMBBuilder_ == null) {
            result.tableSizeMB_ = tableSizeMB_;
          } else {
            result.tableSizeMB_ = tableSizeMBBuilder_.build();
          }
          if (dataSizeMBBuilder_ == null) {
            result.dataSizeMB_ = dataSizeMB_;
          } else {
            result.dataSizeMB_ = dataSizeMBBuilder_.build();
          }
          if (mBAllocatedBuilder_ == null) {
            result.mBAllocated_ = mBAllocated_;
          } else {
            result.mBAllocated_ = mBAllocatedBuilder_.build();
          }
          if (segmentNameBuilder_ == null) {
            result.segmentName_ = segmentName_;
          } else {
            result.segmentName_ = segmentNameBuilder_.build();
          }
          if (mBUsedBuilder_ == null) {
            result.mBUsed_ = mBUsed_;
          } else {
            result.mBUsed_ = mBUsedBuilder_.build();
          }
          if (freeSpaceInPercentBuilder_ == null) {
            result.freeSpaceInPercent_ = freeSpaceInPercent_;
          } else {
            result.freeSpaceInPercent_ = freeSpaceInPercentBuilder_.build();
          }
          if (dBNameBuilder_ == null) {
            result.dBName_ = dBName_;
          } else {
            result.dBName_ = dBNameBuilder_.build();
          }
          if (mBFreeBuilder_ == null) {
            result.mBFree_ = mBFree_;
          } else {
            result.mBFree_ = mBFreeBuilder_.build();
          }
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row) {
            return mergeFrom((io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row other) {
          if (other == io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.getDefaultInstance()) return this;
          if (other.getRowId() != 0) {
            setRowId(other.getRowId());
          }
          if (other.hasTableName()) {
            mergeTableName(other.getTableName());
          }
          if (other.hasIndexSizeMB()) {
            mergeIndexSizeMB(other.getIndexSizeMB());
          }
          if (other.hasNumberOfIndexes()) {
            mergeNumberOfIndexes(other.getNumberOfIndexes());
          }
          if (other.hasNumberOfRows()) {
            mergeNumberOfRows(other.getNumberOfRows());
          }
          if (other.hasTableSizeMB()) {
            mergeTableSizeMB(other.getTableSizeMB());
          }
          if (other.hasDataSizeMB()) {
            mergeDataSizeMB(other.getDataSizeMB());
          }
          if (other.hasMBAllocated()) {
            mergeMBAllocated(other.getMBAllocated());
          }
          if (other.hasSegmentName()) {
            mergeSegmentName(other.getSegmentName());
          }
          if (other.hasMBUsed()) {
            mergeMBUsed(other.getMBUsed());
          }
          if (other.hasFreeSpaceInPercent()) {
            mergeFreeSpaceInPercent(other.getFreeSpaceInPercent());
          }
          if (other.hasDBName()) {
            mergeDBName(other.getDBName());
          }
          if (other.hasMBFree()) {
            mergeMBFree(other.getMBFree());
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int rowId_ ;
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public int getRowId() {
          return rowId_;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder setRowId(int value) {
          
          rowId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder clearRowId() {
          
          rowId_ = 0;
          onChanged();
          return this;
        }

        private io.dstore.engine.Values.stringValue tableName_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> tableNameBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
         *
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         */
        public boolean hasTableName() {
          return tableNameBuilder_ != null || tableName_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
         *
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getTableName() {
          if (tableNameBuilder_ == null) {
            return tableName_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : tableName_;
          } else {
            return tableNameBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
         *
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         */
        public Builder setTableName(io.dstore.engine.Values.stringValue value) {
          if (tableNameBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            tableName_ = value;
            onChanged();
          } else {
            tableNameBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
         *
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         */
        public Builder setTableName(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (tableNameBuilder_ == null) {
            tableName_ = builderForValue.build();
            onChanged();
          } else {
            tableNameBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
         *
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         */
        public Builder mergeTableName(io.dstore.engine.Values.stringValue value) {
          if (tableNameBuilder_ == null) {
            if (tableName_ != null) {
              tableName_ =
                io.dstore.engine.Values.stringValue.newBuilder(tableName_).mergeFrom(value).buildPartial();
            } else {
              tableName_ = value;
            }
            onChanged();
          } else {
            tableNameBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
         *
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         */
        public Builder clearTableName() {
          if (tableNameBuilder_ == null) {
            tableName_ = null;
            onChanged();
          } else {
            tableName_ = null;
            tableNameBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
         *
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getTableNameBuilder() {
          
          onChanged();
          return getTableNameFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
         *
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getTableNameOrBuilder() {
          if (tableNameBuilder_ != null) {
            return tableNameBuilder_.getMessageOrBuilder();
          } else {
            return tableName_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : tableName_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue table_name = 10001;</code>
         *
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getTableNameFieldBuilder() {
          if (tableNameBuilder_ == null) {
            tableNameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getTableName(),
                    getParentForChildren(),
                    isClean());
            tableName_ = null;
          }
          return tableNameBuilder_;
        }

        private io.dstore.engine.Values.decimalValue indexSizeMB_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> indexSizeMBBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
         *
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         */
        public boolean hasIndexSizeMB() {
          return indexSizeMBBuilder_ != null || indexSizeMB_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
         *
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getIndexSizeMB() {
          if (indexSizeMBBuilder_ == null) {
            return indexSizeMB_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : indexSizeMB_;
          } else {
            return indexSizeMBBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
         *
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         */
        public Builder setIndexSizeMB(io.dstore.engine.Values.decimalValue value) {
          if (indexSizeMBBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            indexSizeMB_ = value;
            onChanged();
          } else {
            indexSizeMBBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
         *
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         */
        public Builder setIndexSizeMB(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (indexSizeMBBuilder_ == null) {
            indexSizeMB_ = builderForValue.build();
            onChanged();
          } else {
            indexSizeMBBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
         *
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         */
        public Builder mergeIndexSizeMB(io.dstore.engine.Values.decimalValue value) {
          if (indexSizeMBBuilder_ == null) {
            if (indexSizeMB_ != null) {
              indexSizeMB_ =
                io.dstore.engine.Values.decimalValue.newBuilder(indexSizeMB_).mergeFrom(value).buildPartial();
            } else {
              indexSizeMB_ = value;
            }
            onChanged();
          } else {
            indexSizeMBBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
         *
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         */
        public Builder clearIndexSizeMB() {
          if (indexSizeMBBuilder_ == null) {
            indexSizeMB_ = null;
            onChanged();
          } else {
            indexSizeMB_ = null;
            indexSizeMBBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
         *
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getIndexSizeMBBuilder() {
          
          onChanged();
          return getIndexSizeMBFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
         *
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getIndexSizeMBOrBuilder() {
          if (indexSizeMBBuilder_ != null) {
            return indexSizeMBBuilder_.getMessageOrBuilder();
          } else {
            return indexSizeMB_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : indexSizeMB_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue index_size__m_b = 10002;</code>
         *
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getIndexSizeMBFieldBuilder() {
          if (indexSizeMBBuilder_ == null) {
            indexSizeMBBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getIndexSizeMB(),
                    getParentForChildren(),
                    isClean());
            indexSizeMB_ = null;
          }
          return indexSizeMBBuilder_;
        }

        private io.dstore.engine.Values.integerValue numberOfIndexes_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> numberOfIndexesBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
         *
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         */
        public boolean hasNumberOfIndexes() {
          return numberOfIndexesBuilder_ != null || numberOfIndexes_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
         *
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getNumberOfIndexes() {
          if (numberOfIndexesBuilder_ == null) {
            return numberOfIndexes_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : numberOfIndexes_;
          } else {
            return numberOfIndexesBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
         *
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         */
        public Builder setNumberOfIndexes(io.dstore.engine.Values.integerValue value) {
          if (numberOfIndexesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            numberOfIndexes_ = value;
            onChanged();
          } else {
            numberOfIndexesBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
         *
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         */
        public Builder setNumberOfIndexes(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (numberOfIndexesBuilder_ == null) {
            numberOfIndexes_ = builderForValue.build();
            onChanged();
          } else {
            numberOfIndexesBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
         *
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         */
        public Builder mergeNumberOfIndexes(io.dstore.engine.Values.integerValue value) {
          if (numberOfIndexesBuilder_ == null) {
            if (numberOfIndexes_ != null) {
              numberOfIndexes_ =
                io.dstore.engine.Values.integerValue.newBuilder(numberOfIndexes_).mergeFrom(value).buildPartial();
            } else {
              numberOfIndexes_ = value;
            }
            onChanged();
          } else {
            numberOfIndexesBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
         *
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         */
        public Builder clearNumberOfIndexes() {
          if (numberOfIndexesBuilder_ == null) {
            numberOfIndexes_ = null;
            onChanged();
          } else {
            numberOfIndexes_ = null;
            numberOfIndexesBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
         *
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getNumberOfIndexesBuilder() {
          
          onChanged();
          return getNumberOfIndexesFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
         *
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getNumberOfIndexesOrBuilder() {
          if (numberOfIndexesBuilder_ != null) {
            return numberOfIndexesBuilder_.getMessageOrBuilder();
          } else {
            return numberOfIndexes_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : numberOfIndexes_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_indexes = 10003;</code>
         *
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getNumberOfIndexesFieldBuilder() {
          if (numberOfIndexesBuilder_ == null) {
            numberOfIndexesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getNumberOfIndexes(),
                    getParentForChildren(),
                    isClean());
            numberOfIndexes_ = null;
          }
          return numberOfIndexesBuilder_;
        }

        private io.dstore.engine.Values.integerValue numberOfRows_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> numberOfRowsBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
         *
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         */
        public boolean hasNumberOfRows() {
          return numberOfRowsBuilder_ != null || numberOfRows_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
         *
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getNumberOfRows() {
          if (numberOfRowsBuilder_ == null) {
            return numberOfRows_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : numberOfRows_;
          } else {
            return numberOfRowsBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
         *
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         */
        public Builder setNumberOfRows(io.dstore.engine.Values.integerValue value) {
          if (numberOfRowsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            numberOfRows_ = value;
            onChanged();
          } else {
            numberOfRowsBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
         *
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         */
        public Builder setNumberOfRows(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (numberOfRowsBuilder_ == null) {
            numberOfRows_ = builderForValue.build();
            onChanged();
          } else {
            numberOfRowsBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
         *
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         */
        public Builder mergeNumberOfRows(io.dstore.engine.Values.integerValue value) {
          if (numberOfRowsBuilder_ == null) {
            if (numberOfRows_ != null) {
              numberOfRows_ =
                io.dstore.engine.Values.integerValue.newBuilder(numberOfRows_).mergeFrom(value).buildPartial();
            } else {
              numberOfRows_ = value;
            }
            onChanged();
          } else {
            numberOfRowsBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
         *
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         */
        public Builder clearNumberOfRows() {
          if (numberOfRowsBuilder_ == null) {
            numberOfRows_ = null;
            onChanged();
          } else {
            numberOfRows_ = null;
            numberOfRowsBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
         *
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getNumberOfRowsBuilder() {
          
          onChanged();
          return getNumberOfRowsFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
         *
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getNumberOfRowsOrBuilder() {
          if (numberOfRowsBuilder_ != null) {
            return numberOfRowsBuilder_.getMessageOrBuilder();
          } else {
            return numberOfRows_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : numberOfRows_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue number_of_rows = 10004;</code>
         *
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getNumberOfRowsFieldBuilder() {
          if (numberOfRowsBuilder_ == null) {
            numberOfRowsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getNumberOfRows(),
                    getParentForChildren(),
                    isClean());
            numberOfRows_ = null;
          }
          return numberOfRowsBuilder_;
        }

        private io.dstore.engine.Values.decimalValue tableSizeMB_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> tableSizeMBBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
         *
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         */
        public boolean hasTableSizeMB() {
          return tableSizeMBBuilder_ != null || tableSizeMB_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
         *
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getTableSizeMB() {
          if (tableSizeMBBuilder_ == null) {
            return tableSizeMB_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : tableSizeMB_;
          } else {
            return tableSizeMBBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
         *
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         */
        public Builder setTableSizeMB(io.dstore.engine.Values.decimalValue value) {
          if (tableSizeMBBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            tableSizeMB_ = value;
            onChanged();
          } else {
            tableSizeMBBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
         *
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         */
        public Builder setTableSizeMB(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (tableSizeMBBuilder_ == null) {
            tableSizeMB_ = builderForValue.build();
            onChanged();
          } else {
            tableSizeMBBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
         *
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         */
        public Builder mergeTableSizeMB(io.dstore.engine.Values.decimalValue value) {
          if (tableSizeMBBuilder_ == null) {
            if (tableSizeMB_ != null) {
              tableSizeMB_ =
                io.dstore.engine.Values.decimalValue.newBuilder(tableSizeMB_).mergeFrom(value).buildPartial();
            } else {
              tableSizeMB_ = value;
            }
            onChanged();
          } else {
            tableSizeMBBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
         *
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         */
        public Builder clearTableSizeMB() {
          if (tableSizeMBBuilder_ == null) {
            tableSizeMB_ = null;
            onChanged();
          } else {
            tableSizeMB_ = null;
            tableSizeMBBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
         *
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getTableSizeMBBuilder() {
          
          onChanged();
          return getTableSizeMBFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
         *
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getTableSizeMBOrBuilder() {
          if (tableSizeMBBuilder_ != null) {
            return tableSizeMBBuilder_.getMessageOrBuilder();
          } else {
            return tableSizeMB_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : tableSizeMB_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue table_size__m_b = 10005;</code>
         *
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getTableSizeMBFieldBuilder() {
          if (tableSizeMBBuilder_ == null) {
            tableSizeMBBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getTableSizeMB(),
                    getParentForChildren(),
                    isClean());
            tableSizeMB_ = null;
          }
          return tableSizeMBBuilder_;
        }

        private io.dstore.engine.Values.decimalValue dataSizeMB_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> dataSizeMBBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
         *
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         */
        public boolean hasDataSizeMB() {
          return dataSizeMBBuilder_ != null || dataSizeMB_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
         *
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getDataSizeMB() {
          if (dataSizeMBBuilder_ == null) {
            return dataSizeMB_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : dataSizeMB_;
          } else {
            return dataSizeMBBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
         *
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         */
        public Builder setDataSizeMB(io.dstore.engine.Values.decimalValue value) {
          if (dataSizeMBBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            dataSizeMB_ = value;
            onChanged();
          } else {
            dataSizeMBBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
         *
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         */
        public Builder setDataSizeMB(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (dataSizeMBBuilder_ == null) {
            dataSizeMB_ = builderForValue.build();
            onChanged();
          } else {
            dataSizeMBBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
         *
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         */
        public Builder mergeDataSizeMB(io.dstore.engine.Values.decimalValue value) {
          if (dataSizeMBBuilder_ == null) {
            if (dataSizeMB_ != null) {
              dataSizeMB_ =
                io.dstore.engine.Values.decimalValue.newBuilder(dataSizeMB_).mergeFrom(value).buildPartial();
            } else {
              dataSizeMB_ = value;
            }
            onChanged();
          } else {
            dataSizeMBBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
         *
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         */
        public Builder clearDataSizeMB() {
          if (dataSizeMBBuilder_ == null) {
            dataSizeMB_ = null;
            onChanged();
          } else {
            dataSizeMB_ = null;
            dataSizeMBBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
         *
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getDataSizeMBBuilder() {
          
          onChanged();
          return getDataSizeMBFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
         *
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getDataSizeMBOrBuilder() {
          if (dataSizeMBBuilder_ != null) {
            return dataSizeMBBuilder_.getMessageOrBuilder();
          } else {
            return dataSizeMB_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : dataSizeMB_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue data_size__m_b = 10006;</code>
         *
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getDataSizeMBFieldBuilder() {
          if (dataSizeMBBuilder_ == null) {
            dataSizeMBBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getDataSizeMB(),
                    getParentForChildren(),
                    isClean());
            dataSizeMB_ = null;
          }
          return dataSizeMBBuilder_;
        }

        private io.dstore.engine.Values.decimalValue mBAllocated_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> mBAllocatedBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
         *
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         */
        public boolean hasMBAllocated() {
          return mBAllocatedBuilder_ != null || mBAllocated_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
         *
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getMBAllocated() {
          if (mBAllocatedBuilder_ == null) {
            return mBAllocated_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : mBAllocated_;
          } else {
            return mBAllocatedBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
         *
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         */
        public Builder setMBAllocated(io.dstore.engine.Values.decimalValue value) {
          if (mBAllocatedBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            mBAllocated_ = value;
            onChanged();
          } else {
            mBAllocatedBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
         *
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         */
        public Builder setMBAllocated(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (mBAllocatedBuilder_ == null) {
            mBAllocated_ = builderForValue.build();
            onChanged();
          } else {
            mBAllocatedBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
         *
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         */
        public Builder mergeMBAllocated(io.dstore.engine.Values.decimalValue value) {
          if (mBAllocatedBuilder_ == null) {
            if (mBAllocated_ != null) {
              mBAllocated_ =
                io.dstore.engine.Values.decimalValue.newBuilder(mBAllocated_).mergeFrom(value).buildPartial();
            } else {
              mBAllocated_ = value;
            }
            onChanged();
          } else {
            mBAllocatedBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
         *
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         */
        public Builder clearMBAllocated() {
          if (mBAllocatedBuilder_ == null) {
            mBAllocated_ = null;
            onChanged();
          } else {
            mBAllocated_ = null;
            mBAllocatedBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
         *
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getMBAllocatedBuilder() {
          
          onChanged();
          return getMBAllocatedFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
         *
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getMBAllocatedOrBuilder() {
          if (mBAllocatedBuilder_ != null) {
            return mBAllocatedBuilder_.getMessageOrBuilder();
          } else {
            return mBAllocated_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : mBAllocated_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_allocated = 20001;</code>
         *
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getMBAllocatedFieldBuilder() {
          if (mBAllocatedBuilder_ == null) {
            mBAllocatedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getMBAllocated(),
                    getParentForChildren(),
                    isClean());
            mBAllocated_ = null;
          }
          return mBAllocatedBuilder_;
        }

        private io.dstore.engine.Values.stringValue segmentName_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> segmentNameBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
         *
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         */
        public boolean hasSegmentName() {
          return segmentNameBuilder_ != null || segmentName_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
         *
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getSegmentName() {
          if (segmentNameBuilder_ == null) {
            return segmentName_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : segmentName_;
          } else {
            return segmentNameBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
         *
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         */
        public Builder setSegmentName(io.dstore.engine.Values.stringValue value) {
          if (segmentNameBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            segmentName_ = value;
            onChanged();
          } else {
            segmentNameBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
         *
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         */
        public Builder setSegmentName(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (segmentNameBuilder_ == null) {
            segmentName_ = builderForValue.build();
            onChanged();
          } else {
            segmentNameBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
         *
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         */
        public Builder mergeSegmentName(io.dstore.engine.Values.stringValue value) {
          if (segmentNameBuilder_ == null) {
            if (segmentName_ != null) {
              segmentName_ =
                io.dstore.engine.Values.stringValue.newBuilder(segmentName_).mergeFrom(value).buildPartial();
            } else {
              segmentName_ = value;
            }
            onChanged();
          } else {
            segmentNameBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
         *
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         */
        public Builder clearSegmentName() {
          if (segmentNameBuilder_ == null) {
            segmentName_ = null;
            onChanged();
          } else {
            segmentName_ = null;
            segmentNameBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
         *
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getSegmentNameBuilder() {
          
          onChanged();
          return getSegmentNameFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
         *
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getSegmentNameOrBuilder() {
          if (segmentNameBuilder_ != null) {
            return segmentNameBuilder_.getMessageOrBuilder();
          } else {
            return segmentName_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : segmentName_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue segment_name = 20002;</code>
         *
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getSegmentNameFieldBuilder() {
          if (segmentNameBuilder_ == null) {
            segmentNameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getSegmentName(),
                    getParentForChildren(),
                    isClean());
            segmentName_ = null;
          }
          return segmentNameBuilder_;
        }

        private io.dstore.engine.Values.decimalValue mBUsed_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> mBUsedBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
         *
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         */
        public boolean hasMBUsed() {
          return mBUsedBuilder_ != null || mBUsed_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
         *
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getMBUsed() {
          if (mBUsedBuilder_ == null) {
            return mBUsed_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : mBUsed_;
          } else {
            return mBUsedBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
         *
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         */
        public Builder setMBUsed(io.dstore.engine.Values.decimalValue value) {
          if (mBUsedBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            mBUsed_ = value;
            onChanged();
          } else {
            mBUsedBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
         *
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         */
        public Builder setMBUsed(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (mBUsedBuilder_ == null) {
            mBUsed_ = builderForValue.build();
            onChanged();
          } else {
            mBUsedBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
         *
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         */
        public Builder mergeMBUsed(io.dstore.engine.Values.decimalValue value) {
          if (mBUsedBuilder_ == null) {
            if (mBUsed_ != null) {
              mBUsed_ =
                io.dstore.engine.Values.decimalValue.newBuilder(mBUsed_).mergeFrom(value).buildPartial();
            } else {
              mBUsed_ = value;
            }
            onChanged();
          } else {
            mBUsedBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
         *
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         */
        public Builder clearMBUsed() {
          if (mBUsedBuilder_ == null) {
            mBUsed_ = null;
            onChanged();
          } else {
            mBUsed_ = null;
            mBUsedBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
         *
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getMBUsedBuilder() {
          
          onChanged();
          return getMBUsedFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
         *
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getMBUsedOrBuilder() {
          if (mBUsedBuilder_ != null) {
            return mBUsedBuilder_.getMessageOrBuilder();
          } else {
            return mBUsed_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : mBUsed_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_used = 20003;</code>
         *
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getMBUsedFieldBuilder() {
          if (mBUsedBuilder_ == null) {
            mBUsedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getMBUsed(),
                    getParentForChildren(),
                    isClean());
            mBUsed_ = null;
          }
          return mBUsedBuilder_;
        }

        private io.dstore.engine.Values.decimalValue freeSpaceInPercent_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> freeSpaceInPercentBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
         *
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         */
        public boolean hasFreeSpaceInPercent() {
          return freeSpaceInPercentBuilder_ != null || freeSpaceInPercent_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
         *
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getFreeSpaceInPercent() {
          if (freeSpaceInPercentBuilder_ == null) {
            return freeSpaceInPercent_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : freeSpaceInPercent_;
          } else {
            return freeSpaceInPercentBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
         *
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         */
        public Builder setFreeSpaceInPercent(io.dstore.engine.Values.decimalValue value) {
          if (freeSpaceInPercentBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            freeSpaceInPercent_ = value;
            onChanged();
          } else {
            freeSpaceInPercentBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
         *
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         */
        public Builder setFreeSpaceInPercent(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (freeSpaceInPercentBuilder_ == null) {
            freeSpaceInPercent_ = builderForValue.build();
            onChanged();
          } else {
            freeSpaceInPercentBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
         *
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         */
        public Builder mergeFreeSpaceInPercent(io.dstore.engine.Values.decimalValue value) {
          if (freeSpaceInPercentBuilder_ == null) {
            if (freeSpaceInPercent_ != null) {
              freeSpaceInPercent_ =
                io.dstore.engine.Values.decimalValue.newBuilder(freeSpaceInPercent_).mergeFrom(value).buildPartial();
            } else {
              freeSpaceInPercent_ = value;
            }
            onChanged();
          } else {
            freeSpaceInPercentBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
         *
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         */
        public Builder clearFreeSpaceInPercent() {
          if (freeSpaceInPercentBuilder_ == null) {
            freeSpaceInPercent_ = null;
            onChanged();
          } else {
            freeSpaceInPercent_ = null;
            freeSpaceInPercentBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
         *
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getFreeSpaceInPercentBuilder() {
          
          onChanged();
          return getFreeSpaceInPercentFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
         *
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getFreeSpaceInPercentOrBuilder() {
          if (freeSpaceInPercentBuilder_ != null) {
            return freeSpaceInPercentBuilder_.getMessageOrBuilder();
          } else {
            return freeSpaceInPercent_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : freeSpaceInPercent_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue free_space_in_percent = 20004;</code>
         *
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getFreeSpaceInPercentFieldBuilder() {
          if (freeSpaceInPercentBuilder_ == null) {
            freeSpaceInPercentBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getFreeSpaceInPercent(),
                    getParentForChildren(),
                    isClean());
            freeSpaceInPercent_ = null;
          }
          return freeSpaceInPercentBuilder_;
        }

        private io.dstore.engine.Values.stringValue dBName_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> dBNameBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
         *
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         */
        public boolean hasDBName() {
          return dBNameBuilder_ != null || dBName_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
         *
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getDBName() {
          if (dBNameBuilder_ == null) {
            return dBName_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : dBName_;
          } else {
            return dBNameBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
         *
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         */
        public Builder setDBName(io.dstore.engine.Values.stringValue value) {
          if (dBNameBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            dBName_ = value;
            onChanged();
          } else {
            dBNameBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
         *
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         */
        public Builder setDBName(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (dBNameBuilder_ == null) {
            dBName_ = builderForValue.build();
            onChanged();
          } else {
            dBNameBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
         *
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         */
        public Builder mergeDBName(io.dstore.engine.Values.stringValue value) {
          if (dBNameBuilder_ == null) {
            if (dBName_ != null) {
              dBName_ =
                io.dstore.engine.Values.stringValue.newBuilder(dBName_).mergeFrom(value).buildPartial();
            } else {
              dBName_ = value;
            }
            onChanged();
          } else {
            dBNameBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
         *
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         */
        public Builder clearDBName() {
          if (dBNameBuilder_ == null) {
            dBName_ = null;
            onChanged();
          } else {
            dBName_ = null;
            dBNameBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
         *
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getDBNameBuilder() {
          
          onChanged();
          return getDBNameFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
         *
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getDBNameOrBuilder() {
          if (dBNameBuilder_ != null) {
            return dBNameBuilder_.getMessageOrBuilder();
          } else {
            return dBName_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : dBName_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue d_b_name = 20005;</code>
         *
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getDBNameFieldBuilder() {
          if (dBNameBuilder_ == null) {
            dBNameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getDBName(),
                    getParentForChildren(),
                    isClean());
            dBName_ = null;
          }
          return dBNameBuilder_;
        }

        private io.dstore.engine.Values.decimalValue mBFree_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> mBFreeBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
         *
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         */
        public boolean hasMBFree() {
          return mBFreeBuilder_ != null || mBFree_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
         *
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getMBFree() {
          if (mBFreeBuilder_ == null) {
            return mBFree_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : mBFree_;
          } else {
            return mBFreeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
         *
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         */
        public Builder setMBFree(io.dstore.engine.Values.decimalValue value) {
          if (mBFreeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            mBFree_ = value;
            onChanged();
          } else {
            mBFreeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
         *
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         */
        public Builder setMBFree(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (mBFreeBuilder_ == null) {
            mBFree_ = builderForValue.build();
            onChanged();
          } else {
            mBFreeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
         *
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         */
        public Builder mergeMBFree(io.dstore.engine.Values.decimalValue value) {
          if (mBFreeBuilder_ == null) {
            if (mBFree_ != null) {
              mBFree_ =
                io.dstore.engine.Values.decimalValue.newBuilder(mBFree_).mergeFrom(value).buildPartial();
            } else {
              mBFree_ = value;
            }
            onChanged();
          } else {
            mBFreeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
         *
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         */
        public Builder clearMBFree() {
          if (mBFreeBuilder_ == null) {
            mBFree_ = null;
            onChanged();
          } else {
            mBFree_ = null;
            mBFreeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
         *
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getMBFreeBuilder() {
          
          onChanged();
          return getMBFreeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
         *
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getMBFreeOrBuilder() {
          if (mBFreeBuilder_ != null) {
            return mBFreeBuilder_.getMessageOrBuilder();
          } else {
            return mBFree_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : mBFree_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue m_b_free = 20006;</code>
         *
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getMBFreeFieldBuilder() {
          if (mBFreeBuilder_ == null) {
            mBFreeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getMBFree(),
                    getParentForChildren(),
                    isClean());
            mBFree_ = null;
          }
          return mBFreeBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row)
      }

      // @@protoc_insertion_point(class_scope:dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row)
      private static final io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row();
      }

      public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      public static final com.google.protobuf.Parser<Row> PARSER =
          new com.google.protobuf.AbstractParser<Row>() {
        public Row parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new Row(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<Row> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Row> getParserForType() {
        return PARSER;
      }

      public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int ERROR_FIELD_NUMBER = 1;
    private io.dstore.engine.ProcedureError.Error error_;
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public boolean hasError() {
      return error_ != null;
    }
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public io.dstore.engine.ProcedureError.Error getError() {
      return error_ == null ? io.dstore.engine.ProcedureError.Error.getDefaultInstance() : error_;
    }
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public io.dstore.engine.ProcedureError.ErrorOrBuilder getErrorOrBuilder() {
      return getError();
    }

    public static final int MESSAGE_FIELD_NUMBER = 3;
    private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_;
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public int getMessageCount() {
      return message_.size();
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
      return message_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index) {
      return message_.get(index);
    }

    public static final int ROW_FIELD_NUMBER = 4;
    private java.util.List<io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row> row_;
    /**
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public java.util.List<io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row> getRowList() {
      return row_;
    }
    /**
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public java.util.List<? extends io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.RowOrBuilder> 
        getRowOrBuilderList() {
      return row_;
    }
    /**
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public int getRowCount() {
      return row_.size();
    }
    /**
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row getRow(int index) {
      return row_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.RowOrBuilder getRowOrBuilder(
        int index) {
      return row_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (error_ != null) {
        output.writeMessage(1, getError());
      }
      for (int i = 0; i < message_.size(); i++) {
        output.writeMessage(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        output.writeMessage(4, row_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (error_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getError());
      }
      for (int i = 0; i < message_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, row_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.mi_GetStorageAllocInfo_Ad.Response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.mi_GetStorageAllocInfo_Ad.Response)
        io.dstore.engine.procs.MiGetStorageAllocInfoAd.ResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.class, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Builder.class);
      }

      // Construct using io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMessageFieldBuilder();
          getRowFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (errorBuilder_ == null) {
          error_ = null;
        } else {
          error_ = null;
          errorBuilder_ = null;
        }
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          messageBuilder_.clear();
        }
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          rowBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procs.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_descriptor;
      }

      public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response getDefaultInstanceForType() {
        return io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.getDefaultInstance();
      }

      public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response build() {
        io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response buildPartial() {
        io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response result = new io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (errorBuilder_ == null) {
          result.error_ = error_;
        } else {
          result.error_ = errorBuilder_.build();
        }
        if (messageBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            message_ = java.util.Collections.unmodifiableList(message_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.message_ = message_;
        } else {
          result.message_ = messageBuilder_.build();
        }
        if (rowBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            row_ = java.util.Collections.unmodifiableList(row_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.row_ = row_;
        } else {
          result.row_ = rowBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response) {
          return mergeFrom((io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response other) {
        if (other == io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.getDefaultInstance()) return this;
        if (other.hasError()) {
          mergeError(other.getError());
        }
        if (messageBuilder_ == null) {
          if (!other.message_.isEmpty()) {
            if (message_.isEmpty()) {
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMessageIsMutable();
              message_.addAll(other.message_);
            }
            onChanged();
          }
        } else {
          if (!other.message_.isEmpty()) {
            if (messageBuilder_.isEmpty()) {
              messageBuilder_.dispose();
              messageBuilder_ = null;
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
              messageBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMessageFieldBuilder() : null;
            } else {
              messageBuilder_.addAllMessages(other.message_);
            }
          }
        }
        if (rowBuilder_ == null) {
          if (!other.row_.isEmpty()) {
            if (row_.isEmpty()) {
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureRowIsMutable();
              row_.addAll(other.row_);
            }
            onChanged();
          }
        } else {
          if (!other.row_.isEmpty()) {
            if (rowBuilder_.isEmpty()) {
              rowBuilder_.dispose();
              rowBuilder_ = null;
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
              rowBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRowFieldBuilder() : null;
            } else {
              rowBuilder_.addAllMessages(other.row_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private io.dstore.engine.ProcedureError.Error error_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.ProcedureError.Error, io.dstore.engine.ProcedureError.Error.Builder, io.dstore.engine.ProcedureError.ErrorOrBuilder> errorBuilder_;
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public boolean hasError() {
        return errorBuilder_ != null || error_ != null;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.ProcedureError.Error getError() {
        if (errorBuilder_ == null) {
          return error_ == null ? io.dstore.engine.ProcedureError.Error.getDefaultInstance() : error_;
        } else {
          return errorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder setError(io.dstore.engine.ProcedureError.Error value) {
        if (errorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          error_ = value;
          onChanged();
        } else {
          errorBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder setError(
          io.dstore.engine.ProcedureError.Error.Builder builderForValue) {
        if (errorBuilder_ == null) {
          error_ = builderForValue.build();
          onChanged();
        } else {
          errorBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder mergeError(io.dstore.engine.ProcedureError.Error value) {
        if (errorBuilder_ == null) {
          if (error_ != null) {
            error_ =
              io.dstore.engine.ProcedureError.Error.newBuilder(error_).mergeFrom(value).buildPartial();
          } else {
            error_ = value;
          }
          onChanged();
        } else {
          errorBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder clearError() {
        if (errorBuilder_ == null) {
          error_ = null;
          onChanged();
        } else {
          error_ = null;
          errorBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.ProcedureError.Error.Builder getErrorBuilder() {
        
        onChanged();
        return getErrorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.ProcedureError.ErrorOrBuilder getErrorOrBuilder() {
        if (errorBuilder_ != null) {
          return errorBuilder_.getMessageOrBuilder();
        } else {
          return error_ == null ?
              io.dstore.engine.ProcedureError.Error.getDefaultInstance() : error_;
        }
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.ProcedureError.Error, io.dstore.engine.ProcedureError.Error.Builder, io.dstore.engine.ProcedureError.ErrorOrBuilder> 
          getErrorFieldBuilder() {
        if (errorBuilder_ == null) {
          errorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.ProcedureError.Error, io.dstore.engine.ProcedureError.Error.Builder, io.dstore.engine.ProcedureError.ErrorOrBuilder>(
                  getError(),
                  getParentForChildren(),
                  isClean());
          error_ = null;
        }
        return errorBuilder_;
      }

      private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_ =
        java.util.Collections.emptyList();
      private void ensureMessageIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>(message_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> messageBuilder_;

      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
        if (messageBuilder_ == null) {
          return java.util.Collections.unmodifiableList(message_);
        } else {
          return messageBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public int getMessageCount() {
        if (messageBuilder_ == null) {
          return message_.size();
        } else {
          return messageBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);
        } else {
          return messageBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.set(index, value);
          onChanged();
        } else {
          messageBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.set(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(value);
          onChanged();
        } else {
          messageBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(index, value);
          onChanged();
        } else {
          messageBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addAllMessage(
          java.lang.Iterable<? extends io.dstore.engine.ProcedureMessage.Message> values) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, message_);
          onChanged();
        } else {
          messageBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder clearMessage() {
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          messageBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder removeMessage(int index) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.remove(index);
          onChanged();
        } else {
          messageBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder getMessageBuilder(
          int index) {
        return getMessageFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
          int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);  } else {
          return messageBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
           getMessageOrBuilderList() {
        if (messageBuilder_ != null) {
          return messageBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(message_);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder() {
        return getMessageFieldBuilder().addBuilder(
            io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder(
          int index) {
        return getMessageFieldBuilder().addBuilder(
            index, io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message.Builder> 
           getMessageBuilderList() {
        return getMessageFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
          getMessageFieldBuilder() {
        if (messageBuilder_ == null) {
          messageBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder>(
                  message_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        return messageBuilder_;
      }

      private java.util.List<io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row> row_ =
        java.util.Collections.emptyList();
      private void ensureRowIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = new java.util.ArrayList<io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row>(row_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.Builder, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.RowOrBuilder> rowBuilder_;

      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row> getRowList() {
        if (rowBuilder_ == null) {
          return java.util.Collections.unmodifiableList(row_);
        } else {
          return rowBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public int getRowCount() {
        if (rowBuilder_ == null) {
          return row_.size();
        } else {
          return rowBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row getRow(int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);
        } else {
          return rowBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder setRow(
          int index, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.set(index, value);
          onChanged();
        } else {
          rowBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder setRow(
          int index, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.set(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(value);
          onChanged();
        } else {
          rowBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          int index, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(index, value);
          onChanged();
        } else {
          rowBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          int index, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addAllRow(
          java.lang.Iterable<? extends io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row> values) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, row_);
          onChanged();
        } else {
          rowBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder clearRow() {
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          rowBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder removeRow(int index) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.remove(index);
          onChanged();
        } else {
          rowBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.Builder getRowBuilder(
          int index) {
        return getRowFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.RowOrBuilder getRowOrBuilder(
          int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);  } else {
          return rowBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<? extends io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.RowOrBuilder> 
           getRowOrBuilderList() {
        if (rowBuilder_ != null) {
          return rowBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(row_);
        }
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.Builder addRowBuilder() {
        return getRowFieldBuilder().addBuilder(
            io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.Builder addRowBuilder(
          int index) {
        return getRowFieldBuilder().addBuilder(
            index, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.Builder> 
           getRowBuilderList() {
        return getRowFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.Builder, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.RowOrBuilder> 
          getRowFieldBuilder() {
        if (rowBuilder_ == null) {
          rowBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.Row.Builder, io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response.RowOrBuilder>(
                  row_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          row_ = null;
        }
        return rowBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.mi_GetStorageAllocInfo_Ad.Response)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.mi_GetStorageAllocInfo_Ad.Response)
    private static final io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response();
    }

    public static io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    public static final com.google.protobuf.Parser<Response> PARSER =
        new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Response(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Response> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procs.MiGetStorageAllocInfoAd.Response getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n8dstore/engine/procedures/mi_GetStorage" +
      "AllocInfo_Ad.proto\022\'dstore.engine.mi_Get" +
      "StorageAllocInfo_Ad\032\032dstore/engine/value" +
      "s.proto\032\031dstore/engine/error.proto\032\033dsto" +
      "re/engine/message.proto\"\351\001\n\nParameters\022C" +
      "\n\027get_info_for_a_database\030\001 \001(\0132\".dstore" +
      ".engine.values.booleanValue\022%\n\034get_info_" +
      "for_a_database_null\030\351\007 \001(\010\022E\n\032get_storag" +
      "e_alloc_info_for\030\002 \001(\0132!.dstore.engine.v" +
      "alues.stringValue\022(\n\037get_storage_alloc_i",
      "nfo_for_null\030\352\007 \001(\010\"\225\007\n\010Response\022)\n\005erro" +
      "r\030\001 \001(\0132\032.dstore.engine.error.Error\022/\n\007m" +
      "essage\030\003 \003(\0132\036.dstore.engine.message.Mes" +
      "sage\022B\n\003row\030\004 \003(\01325.dstore.engine.mi_Get" +
      "StorageAllocInfo_Ad.Response.Row\032\350\005\n\003Row" +
      "\022\017\n\006row_id\030\220N \001(\005\0226\n\ntable_name\030\221N \001(\0132!" +
      ".dstore.engine.values.stringValue\022<\n\017ind" +
      "ex_size__m_b\030\222N \001(\0132\".dstore.engine.valu" +
      "es.decimalValue\022>\n\021number_of_indexes\030\223N " +
      "\001(\0132\".dstore.engine.values.integerValue\022",
      ";\n\016number_of_rows\030\224N \001(\0132\".dstore.engine" +
      ".values.integerValue\022<\n\017table_size__m_b\030" +
      "\225N \001(\0132\".dstore.engine.values.decimalVal" +
      "ue\022;\n\016data_size__m_b\030\226N \001(\0132\".dstore.eng" +
      "ine.values.decimalValue\022;\n\rm_b_allocated" +
      "\030\241\234\001 \001(\0132\".dstore.engine.values.decimalV" +
      "alue\0229\n\014segment_name\030\242\234\001 \001(\0132!.dstore.en" +
      "gine.values.stringValue\0226\n\010m_b_used\030\243\234\001 " +
      "\001(\0132\".dstore.engine.values.decimalValue\022" +
      "C\n\025free_space_in_percent\030\244\234\001 \001(\0132\".dstor",
      "e.engine.values.decimalValue\0225\n\010d_b_name" +
      "\030\245\234\001 \001(\0132!.dstore.engine.values.stringVa" +
      "lue\0226\n\010m_b_free\030\246\234\001 \001(\0132\".dstore.engine." +
      "values.decimalValueB\030\n\026io.dstore.engine." +
      "procsb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.dstore.engine.Values.getDescriptor(),
          io.dstore.engine.ProcedureError.getDescriptor(),
          io.dstore.engine.ProcedureMessage.getDescriptor(),
        }, assigner);
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_descriptor,
        new java.lang.String[] { "GetInfoForADatabase", "GetInfoForADatabaseNull", "GetStorageAllocInfoFor", "GetStorageAllocInfoForNull", });
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_descriptor,
        new java.lang.String[] { "Error", "Message", "Row", });
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_descriptor =
      internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_descriptor.getNestedTypes().get(0);
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_descriptor,
        new java.lang.String[] { "RowId", "TableName", "IndexSizeMB", "NumberOfIndexes", "NumberOfRows", "TableSizeMB", "DataSizeMB", "MBAllocated", "SegmentName", "MBUsed", "FreeSpaceInPercent", "DBName", "MBFree", });
    io.dstore.engine.Values.getDescriptor();
    io.dstore.engine.ProcedureError.getDescriptor();
    io.dstore.engine.ProcedureMessage.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
