// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dstore/engine/procedures/om_GetCampaignItemConds_Ad.proto

package io.dstore.engine.procs;

public final class OmGetCampaignItemCondsAd {
  private OmGetCampaignItemCondsAd() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ParametersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetCampaignItemConds_Ad.Parameters)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
     */
    boolean hasConditionId();
    /**
     * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
     */
    io.dstore.engine.Values.integerValue getConditionId();
    /**
     * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
     */
    io.dstore.engine.Values.integerValueOrBuilder getConditionIdOrBuilder();

    /**
     * <code>optional bool condition_id_null = 1001;</code>
     */
    boolean getConditionIdNull();

    /**
     * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
     */
    boolean hasItemConditionId();
    /**
     * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
     */
    io.dstore.engine.Values.integerValue getItemConditionId();
    /**
     * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
     */
    io.dstore.engine.Values.integerValueOrBuilder getItemConditionIdOrBuilder();

    /**
     * <code>optional bool item_condition_id_null = 1002;</code>
     */
    boolean getItemConditionIdNull();

    /**
     * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
     */
    boolean hasGetUnusedConditions();
    /**
     * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
     */
    io.dstore.engine.Values.booleanValue getGetUnusedConditions();
    /**
     * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
     */
    io.dstore.engine.Values.booleanValueOrBuilder getGetUnusedConditionsOrBuilder();

    /**
     * <code>optional bool get_unused_conditions_null = 1003;</code>
     */
    boolean getGetUnusedConditionsNull();
  }
  /**
   * Protobuf type {@code dstore.engine.om_GetCampaignItemConds_Ad.Parameters}
   */
  public  static final class Parameters extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.om_GetCampaignItemConds_Ad.Parameters)
      ParametersOrBuilder {
    // Use Parameters.newBuilder() to construct.
    private Parameters(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Parameters() {
      conditionIdNull_ = false;
      itemConditionIdNull_ = false;
      getUnusedConditionsNull_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Parameters(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.engine.Values.integerValue.Builder subBuilder = null;
              if (conditionId_ != null) {
                subBuilder = conditionId_.toBuilder();
              }
              conditionId_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(conditionId_);
                conditionId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.dstore.engine.Values.integerValue.Builder subBuilder = null;
              if (itemConditionId_ != null) {
                subBuilder = itemConditionId_.toBuilder();
              }
              itemConditionId_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(itemConditionId_);
                itemConditionId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.dstore.engine.Values.booleanValue.Builder subBuilder = null;
              if (getUnusedConditions_ != null) {
                subBuilder = getUnusedConditions_.toBuilder();
              }
              getUnusedConditions_ = input.readMessage(io.dstore.engine.Values.booleanValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getUnusedConditions_);
                getUnusedConditions_ = subBuilder.buildPartial();
              }

              break;
            }
            case 8008: {

              conditionIdNull_ = input.readBool();
              break;
            }
            case 8016: {

              itemConditionIdNull_ = input.readBool();
              break;
            }
            case 8024: {

              getUnusedConditionsNull_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Parameters_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Parameters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters.class, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters.Builder.class);
    }

    public static final int CONDITION_ID_FIELD_NUMBER = 1;
    private io.dstore.engine.Values.integerValue conditionId_;
    /**
     * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
     */
    public boolean hasConditionId() {
      return conditionId_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
     */
    public io.dstore.engine.Values.integerValue getConditionId() {
      return conditionId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : conditionId_;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
     */
    public io.dstore.engine.Values.integerValueOrBuilder getConditionIdOrBuilder() {
      return getConditionId();
    }

    public static final int CONDITION_ID_NULL_FIELD_NUMBER = 1001;
    private boolean conditionIdNull_;
    /**
     * <code>optional bool condition_id_null = 1001;</code>
     */
    public boolean getConditionIdNull() {
      return conditionIdNull_;
    }

    public static final int ITEM_CONDITION_ID_FIELD_NUMBER = 2;
    private io.dstore.engine.Values.integerValue itemConditionId_;
    /**
     * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
     */
    public boolean hasItemConditionId() {
      return itemConditionId_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
     */
    public io.dstore.engine.Values.integerValue getItemConditionId() {
      return itemConditionId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : itemConditionId_;
    }
    /**
     * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
     */
    public io.dstore.engine.Values.integerValueOrBuilder getItemConditionIdOrBuilder() {
      return getItemConditionId();
    }

    public static final int ITEM_CONDITION_ID_NULL_FIELD_NUMBER = 1002;
    private boolean itemConditionIdNull_;
    /**
     * <code>optional bool item_condition_id_null = 1002;</code>
     */
    public boolean getItemConditionIdNull() {
      return itemConditionIdNull_;
    }

    public static final int GET_UNUSED_CONDITIONS_FIELD_NUMBER = 3;
    private io.dstore.engine.Values.booleanValue getUnusedConditions_;
    /**
     * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
     */
    public boolean hasGetUnusedConditions() {
      return getUnusedConditions_ != null;
    }
    /**
     * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
     */
    public io.dstore.engine.Values.booleanValue getGetUnusedConditions() {
      return getUnusedConditions_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : getUnusedConditions_;
    }
    /**
     * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
     */
    public io.dstore.engine.Values.booleanValueOrBuilder getGetUnusedConditionsOrBuilder() {
      return getGetUnusedConditions();
    }

    public static final int GET_UNUSED_CONDITIONS_NULL_FIELD_NUMBER = 1003;
    private boolean getUnusedConditionsNull_;
    /**
     * <code>optional bool get_unused_conditions_null = 1003;</code>
     */
    public boolean getGetUnusedConditionsNull() {
      return getUnusedConditionsNull_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (conditionId_ != null) {
        output.writeMessage(1, getConditionId());
      }
      if (itemConditionId_ != null) {
        output.writeMessage(2, getItemConditionId());
      }
      if (getUnusedConditions_ != null) {
        output.writeMessage(3, getGetUnusedConditions());
      }
      if (conditionIdNull_ != false) {
        output.writeBool(1001, conditionIdNull_);
      }
      if (itemConditionIdNull_ != false) {
        output.writeBool(1002, itemConditionIdNull_);
      }
      if (getUnusedConditionsNull_ != false) {
        output.writeBool(1003, getUnusedConditionsNull_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (conditionId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getConditionId());
      }
      if (itemConditionId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getItemConditionId());
      }
      if (getUnusedConditions_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getGetUnusedConditions());
      }
      if (conditionIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1001, conditionIdNull_);
      }
      if (itemConditionIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1002, itemConditionIdNull_);
      }
      if (getUnusedConditionsNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1003, getUnusedConditionsNull_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetCampaignItemConds_Ad.Parameters}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetCampaignItemConds_Ad.Parameters)
        io.dstore.engine.procs.OmGetCampaignItemCondsAd.ParametersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Parameters_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Parameters_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters.class, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters.Builder.class);
      }

      // Construct using io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (conditionIdBuilder_ == null) {
          conditionId_ = null;
        } else {
          conditionId_ = null;
          conditionIdBuilder_ = null;
        }
        conditionIdNull_ = false;

        if (itemConditionIdBuilder_ == null) {
          itemConditionId_ = null;
        } else {
          itemConditionId_ = null;
          itemConditionIdBuilder_ = null;
        }
        itemConditionIdNull_ = false;

        if (getUnusedConditionsBuilder_ == null) {
          getUnusedConditions_ = null;
        } else {
          getUnusedConditions_ = null;
          getUnusedConditionsBuilder_ = null;
        }
        getUnusedConditionsNull_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Parameters_descriptor;
      }

      public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters getDefaultInstanceForType() {
        return io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters.getDefaultInstance();
      }

      public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters build() {
        io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters buildPartial() {
        io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters result = new io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters(this);
        if (conditionIdBuilder_ == null) {
          result.conditionId_ = conditionId_;
        } else {
          result.conditionId_ = conditionIdBuilder_.build();
        }
        result.conditionIdNull_ = conditionIdNull_;
        if (itemConditionIdBuilder_ == null) {
          result.itemConditionId_ = itemConditionId_;
        } else {
          result.itemConditionId_ = itemConditionIdBuilder_.build();
        }
        result.itemConditionIdNull_ = itemConditionIdNull_;
        if (getUnusedConditionsBuilder_ == null) {
          result.getUnusedConditions_ = getUnusedConditions_;
        } else {
          result.getUnusedConditions_ = getUnusedConditionsBuilder_.build();
        }
        result.getUnusedConditionsNull_ = getUnusedConditionsNull_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters) {
          return mergeFrom((io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters other) {
        if (other == io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters.getDefaultInstance()) return this;
        if (other.hasConditionId()) {
          mergeConditionId(other.getConditionId());
        }
        if (other.getConditionIdNull() != false) {
          setConditionIdNull(other.getConditionIdNull());
        }
        if (other.hasItemConditionId()) {
          mergeItemConditionId(other.getItemConditionId());
        }
        if (other.getItemConditionIdNull() != false) {
          setItemConditionIdNull(other.getItemConditionIdNull());
        }
        if (other.hasGetUnusedConditions()) {
          mergeGetUnusedConditions(other.getGetUnusedConditions());
        }
        if (other.getGetUnusedConditionsNull() != false) {
          setGetUnusedConditionsNull(other.getGetUnusedConditionsNull());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.dstore.engine.Values.integerValue conditionId_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> conditionIdBuilder_;
      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
       */
      public boolean hasConditionId() {
        return conditionIdBuilder_ != null || conditionId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
       */
      public io.dstore.engine.Values.integerValue getConditionId() {
        if (conditionIdBuilder_ == null) {
          return conditionId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : conditionId_;
        } else {
          return conditionIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
       */
      public Builder setConditionId(io.dstore.engine.Values.integerValue value) {
        if (conditionIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          conditionId_ = value;
          onChanged();
        } else {
          conditionIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
       */
      public Builder setConditionId(
          io.dstore.engine.Values.integerValue.Builder builderForValue) {
        if (conditionIdBuilder_ == null) {
          conditionId_ = builderForValue.build();
          onChanged();
        } else {
          conditionIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
       */
      public Builder mergeConditionId(io.dstore.engine.Values.integerValue value) {
        if (conditionIdBuilder_ == null) {
          if (conditionId_ != null) {
            conditionId_ =
              io.dstore.engine.Values.integerValue.newBuilder(conditionId_).mergeFrom(value).buildPartial();
          } else {
            conditionId_ = value;
          }
          onChanged();
        } else {
          conditionIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
       */
      public Builder clearConditionId() {
        if (conditionIdBuilder_ == null) {
          conditionId_ = null;
          onChanged();
        } else {
          conditionId_ = null;
          conditionIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
       */
      public io.dstore.engine.Values.integerValue.Builder getConditionIdBuilder() {
        
        onChanged();
        return getConditionIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getConditionIdOrBuilder() {
        if (conditionIdBuilder_ != null) {
          return conditionIdBuilder_.getMessageOrBuilder();
        } else {
          return conditionId_ == null ?
              io.dstore.engine.Values.integerValue.getDefaultInstance() : conditionId_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
          getConditionIdFieldBuilder() {
        if (conditionIdBuilder_ == null) {
          conditionIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                  getConditionId(),
                  getParentForChildren(),
                  isClean());
          conditionId_ = null;
        }
        return conditionIdBuilder_;
      }

      private boolean conditionIdNull_ ;
      /**
       * <code>optional bool condition_id_null = 1001;</code>
       */
      public boolean getConditionIdNull() {
        return conditionIdNull_;
      }
      /**
       * <code>optional bool condition_id_null = 1001;</code>
       */
      public Builder setConditionIdNull(boolean value) {
        
        conditionIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool condition_id_null = 1001;</code>
       */
      public Builder clearConditionIdNull() {
        
        conditionIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.engine.Values.integerValue itemConditionId_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> itemConditionIdBuilder_;
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
       */
      public boolean hasItemConditionId() {
        return itemConditionIdBuilder_ != null || itemConditionId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
       */
      public io.dstore.engine.Values.integerValue getItemConditionId() {
        if (itemConditionIdBuilder_ == null) {
          return itemConditionId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : itemConditionId_;
        } else {
          return itemConditionIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
       */
      public Builder setItemConditionId(io.dstore.engine.Values.integerValue value) {
        if (itemConditionIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          itemConditionId_ = value;
          onChanged();
        } else {
          itemConditionIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
       */
      public Builder setItemConditionId(
          io.dstore.engine.Values.integerValue.Builder builderForValue) {
        if (itemConditionIdBuilder_ == null) {
          itemConditionId_ = builderForValue.build();
          onChanged();
        } else {
          itemConditionIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
       */
      public Builder mergeItemConditionId(io.dstore.engine.Values.integerValue value) {
        if (itemConditionIdBuilder_ == null) {
          if (itemConditionId_ != null) {
            itemConditionId_ =
              io.dstore.engine.Values.integerValue.newBuilder(itemConditionId_).mergeFrom(value).buildPartial();
          } else {
            itemConditionId_ = value;
          }
          onChanged();
        } else {
          itemConditionIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
       */
      public Builder clearItemConditionId() {
        if (itemConditionIdBuilder_ == null) {
          itemConditionId_ = null;
          onChanged();
        } else {
          itemConditionId_ = null;
          itemConditionIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
       */
      public io.dstore.engine.Values.integerValue.Builder getItemConditionIdBuilder() {
        
        onChanged();
        return getItemConditionIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getItemConditionIdOrBuilder() {
        if (itemConditionIdBuilder_ != null) {
          return itemConditionIdBuilder_.getMessageOrBuilder();
        } else {
          return itemConditionId_ == null ?
              io.dstore.engine.Values.integerValue.getDefaultInstance() : itemConditionId_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
          getItemConditionIdFieldBuilder() {
        if (itemConditionIdBuilder_ == null) {
          itemConditionIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                  getItemConditionId(),
                  getParentForChildren(),
                  isClean());
          itemConditionId_ = null;
        }
        return itemConditionIdBuilder_;
      }

      private boolean itemConditionIdNull_ ;
      /**
       * <code>optional bool item_condition_id_null = 1002;</code>
       */
      public boolean getItemConditionIdNull() {
        return itemConditionIdNull_;
      }
      /**
       * <code>optional bool item_condition_id_null = 1002;</code>
       */
      public Builder setItemConditionIdNull(boolean value) {
        
        itemConditionIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool item_condition_id_null = 1002;</code>
       */
      public Builder clearItemConditionIdNull() {
        
        itemConditionIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.engine.Values.booleanValue getUnusedConditions_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> getUnusedConditionsBuilder_;
      /**
       * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
       */
      public boolean hasGetUnusedConditions() {
        return getUnusedConditionsBuilder_ != null || getUnusedConditions_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
       */
      public io.dstore.engine.Values.booleanValue getGetUnusedConditions() {
        if (getUnusedConditionsBuilder_ == null) {
          return getUnusedConditions_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : getUnusedConditions_;
        } else {
          return getUnusedConditionsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
       */
      public Builder setGetUnusedConditions(io.dstore.engine.Values.booleanValue value) {
        if (getUnusedConditionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getUnusedConditions_ = value;
          onChanged();
        } else {
          getUnusedConditionsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
       */
      public Builder setGetUnusedConditions(
          io.dstore.engine.Values.booleanValue.Builder builderForValue) {
        if (getUnusedConditionsBuilder_ == null) {
          getUnusedConditions_ = builderForValue.build();
          onChanged();
        } else {
          getUnusedConditionsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
       */
      public Builder mergeGetUnusedConditions(io.dstore.engine.Values.booleanValue value) {
        if (getUnusedConditionsBuilder_ == null) {
          if (getUnusedConditions_ != null) {
            getUnusedConditions_ =
              io.dstore.engine.Values.booleanValue.newBuilder(getUnusedConditions_).mergeFrom(value).buildPartial();
          } else {
            getUnusedConditions_ = value;
          }
          onChanged();
        } else {
          getUnusedConditionsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
       */
      public Builder clearGetUnusedConditions() {
        if (getUnusedConditionsBuilder_ == null) {
          getUnusedConditions_ = null;
          onChanged();
        } else {
          getUnusedConditions_ = null;
          getUnusedConditionsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
       */
      public io.dstore.engine.Values.booleanValue.Builder getGetUnusedConditionsBuilder() {
        
        onChanged();
        return getGetUnusedConditionsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
       */
      public io.dstore.engine.Values.booleanValueOrBuilder getGetUnusedConditionsOrBuilder() {
        if (getUnusedConditionsBuilder_ != null) {
          return getUnusedConditionsBuilder_.getMessageOrBuilder();
        } else {
          return getUnusedConditions_ == null ?
              io.dstore.engine.Values.booleanValue.getDefaultInstance() : getUnusedConditions_;
        }
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue get_unused_conditions = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> 
          getGetUnusedConditionsFieldBuilder() {
        if (getUnusedConditionsBuilder_ == null) {
          getUnusedConditionsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder>(
                  getGetUnusedConditions(),
                  getParentForChildren(),
                  isClean());
          getUnusedConditions_ = null;
        }
        return getUnusedConditionsBuilder_;
      }

      private boolean getUnusedConditionsNull_ ;
      /**
       * <code>optional bool get_unused_conditions_null = 1003;</code>
       */
      public boolean getGetUnusedConditionsNull() {
        return getUnusedConditionsNull_;
      }
      /**
       * <code>optional bool get_unused_conditions_null = 1003;</code>
       */
      public Builder setGetUnusedConditionsNull(boolean value) {
        
        getUnusedConditionsNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool get_unused_conditions_null = 1003;</code>
       */
      public Builder clearGetUnusedConditionsNull() {
        
        getUnusedConditionsNull_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetCampaignItemConds_Ad.Parameters)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.om_GetCampaignItemConds_Ad.Parameters)
    private static final io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters();
    }

    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Parameters>
        PARSER = new com.google.protobuf.AbstractParser<Parameters>() {
      public Parameters parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Parameters(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Parameters> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Parameters> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Parameters getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetCampaignItemConds_Ad.Response)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    boolean hasError();
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    io.dstore.engine.EngineError.Error getError();
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    io.dstore.engine.EngineError.ErrorOrBuilder getErrorOrBuilder();

    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<io.dstore.engine.ProcedureMessage.Message> 
        getMessageList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.Message getMessage(int index);
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    int getMessageCount();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index);

    /**
     * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    java.util.List<io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row> 
        getRowList();
    /**
     * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row getRow(int index);
    /**
     * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    int getRowCount();
    /**
     * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    java.util.List<? extends io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.RowOrBuilder> 
        getRowOrBuilderList();
    /**
     * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.RowOrBuilder getRowOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dstore.engine.om_GetCampaignItemConds_Ad.Response}
   */
  public  static final class Response extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.om_GetCampaignItemConds_Ad.Response)
      ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Response() {
      message_ = java.util.Collections.emptyList();
      row_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.engine.EngineError.Error.Builder subBuilder = null;
              if (error_ != null) {
                subBuilder = error_.toBuilder();
              }
              error_ = input.readMessage(io.dstore.engine.EngineError.Error.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(error_);
                error_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>();
                mutable_bitField0_ |= 0x00000002;
              }
              message_.add(input.readMessage(io.dstore.engine.ProcedureMessage.Message.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                row_ = new java.util.ArrayList<io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row>();
                mutable_bitField0_ |= 0x00000004;
              }
              row_.add(input.readMessage(io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = java.util.Collections.unmodifiableList(message_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = java.util.Collections.unmodifiableList(row_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.class, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Builder.class);
    }

    public interface RowOrBuilder extends
        // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetCampaignItemConds_Ad.Response.Row)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      int getRowId();

      /**
       * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
       *
       * <pre>
       * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
       * </pre>
       */
      boolean hasConditionDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
       *
       * <pre>
       * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
       * </pre>
       */
      io.dstore.engine.Values.stringValue getConditionDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
       *
       * <pre>
       * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getConditionDescriptionOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
       *
       * <pre>
       * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
       * </pre>
       */
      boolean hasCondition1();
      /**
       * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
       *
       * <pre>
       * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
       * </pre>
       */
      io.dstore.engine.Values.stringValue getCondition1();
      /**
       * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
       *
       * <pre>
       * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getCondition1OrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
       *
       * <pre>
       * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
       * </pre>
       */
      boolean hasCondition2();
      /**
       * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
       *
       * <pre>
       * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
       * </pre>
       */
      io.dstore.engine.Values.stringValue getCondition2();
      /**
       * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
       *
       * <pre>
       * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getCondition2OrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      boolean hasToBasicPriceSumGroup();
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getToBasicPriceSumGroup();
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getToBasicPriceSumGroupOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
       *
       * <pre>
       * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
       * </pre>
       */
      boolean hasRecursiveEvaluation();
      /**
       * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
       *
       * <pre>
       * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
       * </pre>
       */
      io.dstore.engine.Values.integerValue getRecursiveEvaluation();
      /**
       * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
       *
       * <pre>
       * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getRecursiveEvaluationOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      boolean hasToBasicPriceSumPart();
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getToBasicPriceSumPart();
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getToBasicPriceSumPartOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasMaxNumberOfItemsGroup();
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValue getMaxNumberOfItemsGroup();
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getMaxNumberOfItemsGroupOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
       *
       * <pre>
       * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
       * </pre>
       */
      boolean hasDomainTreeNodeIds();
      /**
       * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
       *
       * <pre>
       * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
       * </pre>
       */
      io.dstore.engine.Values.stringValue getDomainTreeNodeIds();
      /**
       * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
       *
       * <pre>
       * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getDomainTreeNodeIdsOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
       *
       * <pre>
       * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
       * </pre>
       */
      boolean hasNodeCharacteristicId();
      /**
       * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
       *
       * <pre>
       * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
       * </pre>
       */
      io.dstore.engine.Values.integerValue getNodeCharacteristicId();
      /**
       * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
       *
       * <pre>
       * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getNodeCharacteristicIdOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
       *
       * <pre>
       * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
       * </pre>
       */
      boolean hasItemConditionPartId();
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
       *
       * <pre>
       * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
       * </pre>
       */
      io.dstore.engine.Values.integerValue getItemConditionPartId();
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
       *
       * <pre>
       * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getItemConditionPartIdOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      boolean hasFromBasicPriceSumPart();
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getFromBasicPriceSumPart();
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getFromBasicPriceSumPartOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasToQuantity();
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValue getToQuantity();
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getToQuantityOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasFromQuantityGroup();
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValue getFromQuantityGroup();
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getFromQuantityGroupOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
       *
       * <pre>
       * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
       * </pre>
       */
      boolean hasItemConditionId();
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
       *
       * <pre>
       * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
       * </pre>
       */
      io.dstore.engine.Values.integerValue getItemConditionId();
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
       *
       * <pre>
       * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getItemConditionIdOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasMaxNumberOfItems();
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValue getMaxNumberOfItems();
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getMaxNumberOfItemsOrBuilder();

      /**
       * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
       *
       * <pre>
       * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
       * </pre>
       */
      boolean hasCombineGroupsWithANDOperator();
      /**
       * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
       *
       * <pre>
       * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
       * </pre>
       */
      io.dstore.engine.Values.booleanValue getCombineGroupsWithANDOperator();
      /**
       * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
       *
       * <pre>
       * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
       * </pre>
       */
      io.dstore.engine.Values.booleanValueOrBuilder getCombineGroupsWithANDOperatorOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      boolean hasFromBasicPriceSumGroup();
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getFromBasicPriceSumGroup();
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getFromBasicPriceSumGroupOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasToItemBasicPricePart();
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getToItemBasicPricePart();
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getToItemBasicPricePartOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
       *
       * <pre>
       * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
       * </pre>
       */
      boolean hasItemConditionPartDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
       *
       * <pre>
       * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
       * </pre>
       */
      io.dstore.engine.Values.stringValue getItemConditionPartDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
       *
       * <pre>
       * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getItemConditionPartDescriptionOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
       *
       * <pre>
       * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
       * </pre>
       */
      boolean hasLevelIds();
      /**
       * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
       *
       * <pre>
       * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
       * </pre>
       */
      io.dstore.engine.Values.stringValue getLevelIds();
      /**
       * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
       *
       * <pre>
       * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getLevelIdsOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
       *
       * <pre>
       * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
       * </pre>
       */
      boolean hasItemConditionGroupId();
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
       *
       * <pre>
       * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
       * </pre>
       */
      io.dstore.engine.Values.integerValue getItemConditionGroupId();
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
       *
       * <pre>
       * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getItemConditionGroupIdOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
       *
       * <pre>
       * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
       * </pre>
       */
      boolean hasExtendedItemCondGroupDescr();
      /**
       * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
       *
       * <pre>
       * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
       * </pre>
       */
      io.dstore.engine.Values.stringValue getExtendedItemCondGroupDescr();
      /**
       * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
       *
       * <pre>
       * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getExtendedItemCondGroupDescrOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasFromQuantity();
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValue getFromQuantity();
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getFromQuantityOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasFromItemBasicPrice();
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getFromItemBasicPrice();
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getFromItemBasicPriceOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
       *
       * <pre>
       * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
       * </pre>
       */
      boolean hasItemGroupSortNo();
      /**
       * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
       *
       * <pre>
       * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
       * </pre>
       */
      io.dstore.engine.Values.integerValue getItemGroupSortNo();
      /**
       * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
       *
       * <pre>
       * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getItemGroupSortNoOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
       *
       * <pre>
       * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
       * </pre>
       */
      boolean hasOperator1();
      /**
       * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
       *
       * <pre>
       * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
       * </pre>
       */
      io.dstore.engine.Values.stringValue getOperator1();
      /**
       * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
       *
       * <pre>
       * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getOperator1OrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
       *
       * <pre>
       * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
       * </pre>
       */
      boolean hasOperator2();
      /**
       * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
       *
       * <pre>
       * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
       * </pre>
       */
      io.dstore.engine.Values.stringValue getOperator2();
      /**
       * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
       *
       * <pre>
       * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getOperator2OrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
       *
       * <pre>
       * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
       * </pre>
       */
      boolean hasItemConditionGroupDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
       *
       * <pre>
       * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
       * </pre>
       */
      io.dstore.engine.Values.stringValue getItemConditionGroupDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
       *
       * <pre>
       * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getItemConditionGroupDescriptionOrBuilder();

      /**
       * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
       *
       * <pre>
       * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
       * </pre>
       */
      boolean hasCombinePartsWithANDOperator();
      /**
       * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
       *
       * <pre>
       * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
       * </pre>
       */
      io.dstore.engine.Values.booleanValue getCombinePartsWithANDOperator();
      /**
       * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
       *
       * <pre>
       * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
       * </pre>
       */
      io.dstore.engine.Values.booleanValueOrBuilder getCombinePartsWithANDOperatorOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasMinNumberOfItemsPart();
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValue getMinNumberOfItemsPart();
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getMinNumberOfItemsPartOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
       *
       * <pre>
       * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
       * </pre>
       */
      boolean hasItemPartSortNo();
      /**
       * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
       *
       * <pre>
       * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
       * </pre>
       */
      io.dstore.engine.Values.integerValue getItemPartSortNo();
      /**
       * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
       *
       * <pre>
       * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getItemPartSortNoOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasToItemBasicPriceGroup();
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getToItemBasicPriceGroup();
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getToItemBasicPriceGroupOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
       *
       * <pre>
       * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
       * </pre>
       */
      boolean hasExtendedItemCondPartDescr();
      /**
       * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
       *
       * <pre>
       * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
       * </pre>
       */
      io.dstore.engine.Values.stringValue getExtendedItemCondPartDescr();
      /**
       * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
       *
       * <pre>
       * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getExtendedItemCondPartDescrOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasMaxNumberOfItemsPart();
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValue getMaxNumberOfItemsPart();
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getMaxNumberOfItemsPartOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasFromItemBasicPricePart();
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getFromItemBasicPricePart();
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getFromItemBasicPricePartOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasMinNumberOfItems();
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValue getMinNumberOfItems();
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getMinNumberOfItemsOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      boolean hasFromBasicPriceSum();
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getFromBasicPriceSum();
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getFromBasicPriceSumOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      boolean hasToBasicPriceSum();
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getToBasicPriceSum();
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getToBasicPriceSumOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasToQuantityGroup();
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValue getToQuantityGroup();
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getToQuantityGroupOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasFromItemBasicPriceGroup();
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getFromItemBasicPriceGroup();
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getFromItemBasicPriceGroupOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
       *
       * <pre>
       * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
       * </pre>
       */
      boolean hasConditionId();
      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
       *
       * <pre>
       * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
       * </pre>
       */
      io.dstore.engine.Values.integerValue getConditionId();
      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
       *
       * <pre>
       * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getConditionIdOrBuilder();

      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
       *
       * <pre>
       * Bezeichnung der Artikel-Bedingung "ItemConditionID"
       * </pre>
       */
      boolean hasItemConditionDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
       *
       * <pre>
       * Bezeichnung der Artikel-Bedingung "ItemConditionID"
       * </pre>
       */
      io.dstore.engine.Values.stringValue getItemConditionDescription();
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
       *
       * <pre>
       * Bezeichnung der Artikel-Bedingung "ItemConditionID"
       * </pre>
       */
      io.dstore.engine.Values.stringValueOrBuilder getItemConditionDescriptionOrBuilder();

      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasToItemBasicPrice();
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.decimalValue getToItemBasicPrice();
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.decimalValueOrBuilder getToItemBasicPriceOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasToQuantityPart();
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValue getToQuantityPart();
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getToQuantityPartOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasFromQuantityPart();
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValue getFromQuantityPart();
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getFromQuantityPartOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      boolean hasMinNumberOfItemsGroup();
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValue getMinNumberOfItemsGroup();
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getMinNumberOfItemsGroupOrBuilder();

      /**
       * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
       *
       * <pre>
       * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
       * </pre>
       */
      boolean hasInheritDepth();
      /**
       * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
       *
       * <pre>
       * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
       * </pre>
       */
      io.dstore.engine.Values.integerValue getInheritDepth();
      /**
       * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
       *
       * <pre>
       * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
       * </pre>
       */
      io.dstore.engine.Values.integerValueOrBuilder getInheritDepthOrBuilder();
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetCampaignItemConds_Ad.Response.Row}
     */
    public  static final class Row extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:dstore.engine.om_GetCampaignItemConds_Ad.Response.Row)
        RowOrBuilder {
      // Use Row.newBuilder() to construct.
      private Row(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Row() {
        rowId_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private Row(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        int mutable_bitField1_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 80000: {

                rowId_ = input.readInt32();
                break;
              }
              case 80010: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (conditionDescription_ != null) {
                  subBuilder = conditionDescription_.toBuilder();
                }
                conditionDescription_ = input.readMessage(io.dstore.engine.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(conditionDescription_);
                  conditionDescription_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80018: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (condition1_ != null) {
                  subBuilder = condition1_.toBuilder();
                }
                condition1_ = input.readMessage(io.dstore.engine.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(condition1_);
                  condition1_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80026: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (condition2_ != null) {
                  subBuilder = condition2_.toBuilder();
                }
                condition2_ = input.readMessage(io.dstore.engine.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(condition2_);
                  condition2_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80034: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (toBasicPriceSumGroup_ != null) {
                  subBuilder = toBasicPriceSumGroup_.toBuilder();
                }
                toBasicPriceSumGroup_ = input.readMessage(io.dstore.engine.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(toBasicPriceSumGroup_);
                  toBasicPriceSumGroup_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80042: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (recursiveEvaluation_ != null) {
                  subBuilder = recursiveEvaluation_.toBuilder();
                }
                recursiveEvaluation_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(recursiveEvaluation_);
                  recursiveEvaluation_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80050: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (toBasicPriceSumPart_ != null) {
                  subBuilder = toBasicPriceSumPart_.toBuilder();
                }
                toBasicPriceSumPart_ = input.readMessage(io.dstore.engine.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(toBasicPriceSumPart_);
                  toBasicPriceSumPart_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80058: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (maxNumberOfItemsGroup_ != null) {
                  subBuilder = maxNumberOfItemsGroup_.toBuilder();
                }
                maxNumberOfItemsGroup_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(maxNumberOfItemsGroup_);
                  maxNumberOfItemsGroup_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80066: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (domainTreeNodeIds_ != null) {
                  subBuilder = domainTreeNodeIds_.toBuilder();
                }
                domainTreeNodeIds_ = input.readMessage(io.dstore.engine.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(domainTreeNodeIds_);
                  domainTreeNodeIds_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80074: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (nodeCharacteristicId_ != null) {
                  subBuilder = nodeCharacteristicId_.toBuilder();
                }
                nodeCharacteristicId_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(nodeCharacteristicId_);
                  nodeCharacteristicId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80082: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (itemConditionPartId_ != null) {
                  subBuilder = itemConditionPartId_.toBuilder();
                }
                itemConditionPartId_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(itemConditionPartId_);
                  itemConditionPartId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80090: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (fromBasicPriceSumPart_ != null) {
                  subBuilder = fromBasicPriceSumPart_.toBuilder();
                }
                fromBasicPriceSumPart_ = input.readMessage(io.dstore.engine.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(fromBasicPriceSumPart_);
                  fromBasicPriceSumPart_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80098: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (toQuantity_ != null) {
                  subBuilder = toQuantity_.toBuilder();
                }
                toQuantity_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(toQuantity_);
                  toQuantity_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80106: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (fromQuantityGroup_ != null) {
                  subBuilder = fromQuantityGroup_.toBuilder();
                }
                fromQuantityGroup_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(fromQuantityGroup_);
                  fromQuantityGroup_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80114: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (itemConditionId_ != null) {
                  subBuilder = itemConditionId_.toBuilder();
                }
                itemConditionId_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(itemConditionId_);
                  itemConditionId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80122: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (maxNumberOfItems_ != null) {
                  subBuilder = maxNumberOfItems_.toBuilder();
                }
                maxNumberOfItems_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(maxNumberOfItems_);
                  maxNumberOfItems_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80130: {
                io.dstore.engine.Values.booleanValue.Builder subBuilder = null;
                if (combineGroupsWithANDOperator_ != null) {
                  subBuilder = combineGroupsWithANDOperator_.toBuilder();
                }
                combineGroupsWithANDOperator_ = input.readMessage(io.dstore.engine.Values.booleanValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(combineGroupsWithANDOperator_);
                  combineGroupsWithANDOperator_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80138: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (fromBasicPriceSumGroup_ != null) {
                  subBuilder = fromBasicPriceSumGroup_.toBuilder();
                }
                fromBasicPriceSumGroup_ = input.readMessage(io.dstore.engine.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(fromBasicPriceSumGroup_);
                  fromBasicPriceSumGroup_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80146: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (toItemBasicPricePart_ != null) {
                  subBuilder = toItemBasicPricePart_.toBuilder();
                }
                toItemBasicPricePart_ = input.readMessage(io.dstore.engine.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(toItemBasicPricePart_);
                  toItemBasicPricePart_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80154: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (itemConditionPartDescription_ != null) {
                  subBuilder = itemConditionPartDescription_.toBuilder();
                }
                itemConditionPartDescription_ = input.readMessage(io.dstore.engine.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(itemConditionPartDescription_);
                  itemConditionPartDescription_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80162: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (levelIds_ != null) {
                  subBuilder = levelIds_.toBuilder();
                }
                levelIds_ = input.readMessage(io.dstore.engine.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(levelIds_);
                  levelIds_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80170: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (itemConditionGroupId_ != null) {
                  subBuilder = itemConditionGroupId_.toBuilder();
                }
                itemConditionGroupId_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(itemConditionGroupId_);
                  itemConditionGroupId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80178: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (extendedItemCondGroupDescr_ != null) {
                  subBuilder = extendedItemCondGroupDescr_.toBuilder();
                }
                extendedItemCondGroupDescr_ = input.readMessage(io.dstore.engine.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(extendedItemCondGroupDescr_);
                  extendedItemCondGroupDescr_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80186: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (fromQuantity_ != null) {
                  subBuilder = fromQuantity_.toBuilder();
                }
                fromQuantity_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(fromQuantity_);
                  fromQuantity_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80194: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (fromItemBasicPrice_ != null) {
                  subBuilder = fromItemBasicPrice_.toBuilder();
                }
                fromItemBasicPrice_ = input.readMessage(io.dstore.engine.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(fromItemBasicPrice_);
                  fromItemBasicPrice_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80202: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (itemGroupSortNo_ != null) {
                  subBuilder = itemGroupSortNo_.toBuilder();
                }
                itemGroupSortNo_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(itemGroupSortNo_);
                  itemGroupSortNo_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80210: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (operator1_ != null) {
                  subBuilder = operator1_.toBuilder();
                }
                operator1_ = input.readMessage(io.dstore.engine.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(operator1_);
                  operator1_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80218: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (operator2_ != null) {
                  subBuilder = operator2_.toBuilder();
                }
                operator2_ = input.readMessage(io.dstore.engine.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(operator2_);
                  operator2_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80226: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (itemConditionGroupDescription_ != null) {
                  subBuilder = itemConditionGroupDescription_.toBuilder();
                }
                itemConditionGroupDescription_ = input.readMessage(io.dstore.engine.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(itemConditionGroupDescription_);
                  itemConditionGroupDescription_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80234: {
                io.dstore.engine.Values.booleanValue.Builder subBuilder = null;
                if (combinePartsWithANDOperator_ != null) {
                  subBuilder = combinePartsWithANDOperator_.toBuilder();
                }
                combinePartsWithANDOperator_ = input.readMessage(io.dstore.engine.Values.booleanValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(combinePartsWithANDOperator_);
                  combinePartsWithANDOperator_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80242: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (minNumberOfItemsPart_ != null) {
                  subBuilder = minNumberOfItemsPart_.toBuilder();
                }
                minNumberOfItemsPart_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(minNumberOfItemsPart_);
                  minNumberOfItemsPart_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80250: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (itemPartSortNo_ != null) {
                  subBuilder = itemPartSortNo_.toBuilder();
                }
                itemPartSortNo_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(itemPartSortNo_);
                  itemPartSortNo_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80258: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (toItemBasicPriceGroup_ != null) {
                  subBuilder = toItemBasicPriceGroup_.toBuilder();
                }
                toItemBasicPriceGroup_ = input.readMessage(io.dstore.engine.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(toItemBasicPriceGroup_);
                  toItemBasicPriceGroup_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80266: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (extendedItemCondPartDescr_ != null) {
                  subBuilder = extendedItemCondPartDescr_.toBuilder();
                }
                extendedItemCondPartDescr_ = input.readMessage(io.dstore.engine.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(extendedItemCondPartDescr_);
                  extendedItemCondPartDescr_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80274: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (maxNumberOfItemsPart_ != null) {
                  subBuilder = maxNumberOfItemsPart_.toBuilder();
                }
                maxNumberOfItemsPart_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(maxNumberOfItemsPart_);
                  maxNumberOfItemsPart_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80282: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (fromItemBasicPricePart_ != null) {
                  subBuilder = fromItemBasicPricePart_.toBuilder();
                }
                fromItemBasicPricePart_ = input.readMessage(io.dstore.engine.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(fromItemBasicPricePart_);
                  fromItemBasicPricePart_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80290: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (minNumberOfItems_ != null) {
                  subBuilder = minNumberOfItems_.toBuilder();
                }
                minNumberOfItems_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(minNumberOfItems_);
                  minNumberOfItems_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80298: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (fromBasicPriceSum_ != null) {
                  subBuilder = fromBasicPriceSum_.toBuilder();
                }
                fromBasicPriceSum_ = input.readMessage(io.dstore.engine.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(fromBasicPriceSum_);
                  fromBasicPriceSum_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80306: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (toBasicPriceSum_ != null) {
                  subBuilder = toBasicPriceSum_.toBuilder();
                }
                toBasicPriceSum_ = input.readMessage(io.dstore.engine.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(toBasicPriceSum_);
                  toBasicPriceSum_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80314: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (toQuantityGroup_ != null) {
                  subBuilder = toQuantityGroup_.toBuilder();
                }
                toQuantityGroup_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(toQuantityGroup_);
                  toQuantityGroup_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80322: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (fromItemBasicPriceGroup_ != null) {
                  subBuilder = fromItemBasicPriceGroup_.toBuilder();
                }
                fromItemBasicPriceGroup_ = input.readMessage(io.dstore.engine.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(fromItemBasicPriceGroup_);
                  fromItemBasicPriceGroup_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80330: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (conditionId_ != null) {
                  subBuilder = conditionId_.toBuilder();
                }
                conditionId_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(conditionId_);
                  conditionId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80338: {
                io.dstore.engine.Values.stringValue.Builder subBuilder = null;
                if (itemConditionDescription_ != null) {
                  subBuilder = itemConditionDescription_.toBuilder();
                }
                itemConditionDescription_ = input.readMessage(io.dstore.engine.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(itemConditionDescription_);
                  itemConditionDescription_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80346: {
                io.dstore.engine.Values.decimalValue.Builder subBuilder = null;
                if (toItemBasicPrice_ != null) {
                  subBuilder = toItemBasicPrice_.toBuilder();
                }
                toItemBasicPrice_ = input.readMessage(io.dstore.engine.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(toItemBasicPrice_);
                  toItemBasicPrice_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80354: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (toQuantityPart_ != null) {
                  subBuilder = toQuantityPart_.toBuilder();
                }
                toQuantityPart_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(toQuantityPart_);
                  toQuantityPart_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80362: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (fromQuantityPart_ != null) {
                  subBuilder = fromQuantityPart_.toBuilder();
                }
                fromQuantityPart_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(fromQuantityPart_);
                  fromQuantityPart_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80370: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (minNumberOfItemsGroup_ != null) {
                  subBuilder = minNumberOfItemsGroup_.toBuilder();
                }
                minNumberOfItemsGroup_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(minNumberOfItemsGroup_);
                  minNumberOfItemsGroup_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80378: {
                io.dstore.engine.Values.integerValue.Builder subBuilder = null;
                if (inheritDepth_ != null) {
                  subBuilder = inheritDepth_.toBuilder();
                }
                inheritDepth_ = input.readMessage(io.dstore.engine.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(inheritDepth_);
                  inheritDepth_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_Row_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_Row_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.class, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.Builder.class);
      }

      public static final int ROW_ID_FIELD_NUMBER = 10000;
      private int rowId_;
      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      public int getRowId() {
        return rowId_;
      }

      public static final int CONDITION_DESCRIPTION_FIELD_NUMBER = 10001;
      private io.dstore.engine.Values.stringValue conditionDescription_;
      /**
       * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
       *
       * <pre>
       * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
       * </pre>
       */
      public boolean hasConditionDescription() {
        return conditionDescription_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
       *
       * <pre>
       * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getConditionDescription() {
        return conditionDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : conditionDescription_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
       *
       * <pre>
       * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getConditionDescriptionOrBuilder() {
        return getConditionDescription();
      }

      public static final int CONDITION1_FIELD_NUMBER = 10002;
      private io.dstore.engine.Values.stringValue condition1_;
      /**
       * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
       *
       * <pre>
       * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
       * </pre>
       */
      public boolean hasCondition1() {
        return condition1_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
       *
       * <pre>
       * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getCondition1() {
        return condition1_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : condition1_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
       *
       * <pre>
       * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getCondition1OrBuilder() {
        return getCondition1();
      }

      public static final int CONDITION2_FIELD_NUMBER = 10003;
      private io.dstore.engine.Values.stringValue condition2_;
      /**
       * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
       *
       * <pre>
       * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
       * </pre>
       */
      public boolean hasCondition2() {
        return condition2_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
       *
       * <pre>
       * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getCondition2() {
        return condition2_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : condition2_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
       *
       * <pre>
       * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getCondition2OrBuilder() {
        return getCondition2();
      }

      public static final int TO_BASIC_PRICE_SUM_GROUP_FIELD_NUMBER = 10004;
      private io.dstore.engine.Values.decimalValue toBasicPriceSumGroup_;
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      public boolean hasToBasicPriceSumGroup() {
        return toBasicPriceSumGroup_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getToBasicPriceSumGroup() {
        return toBasicPriceSumGroup_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : toBasicPriceSumGroup_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getToBasicPriceSumGroupOrBuilder() {
        return getToBasicPriceSumGroup();
      }

      public static final int RECURSIVE_EVALUATION_FIELD_NUMBER = 10005;
      private io.dstore.engine.Values.integerValue recursiveEvaluation_;
      /**
       * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
       *
       * <pre>
       * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
       * </pre>
       */
      public boolean hasRecursiveEvaluation() {
        return recursiveEvaluation_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
       *
       * <pre>
       * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getRecursiveEvaluation() {
        return recursiveEvaluation_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : recursiveEvaluation_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
       *
       * <pre>
       * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getRecursiveEvaluationOrBuilder() {
        return getRecursiveEvaluation();
      }

      public static final int TO_BASIC_PRICE_SUM_PART_FIELD_NUMBER = 10006;
      private io.dstore.engine.Values.decimalValue toBasicPriceSumPart_;
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      public boolean hasToBasicPriceSumPart() {
        return toBasicPriceSumPart_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getToBasicPriceSumPart() {
        return toBasicPriceSumPart_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : toBasicPriceSumPart_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getToBasicPriceSumPartOrBuilder() {
        return getToBasicPriceSumPart();
      }

      public static final int MAX_NUMBER_OF_ITEMS_GROUP_FIELD_NUMBER = 10007;
      private io.dstore.engine.Values.integerValue maxNumberOfItemsGroup_;
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasMaxNumberOfItemsGroup() {
        return maxNumberOfItemsGroup_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getMaxNumberOfItemsGroup() {
        return maxNumberOfItemsGroup_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : maxNumberOfItemsGroup_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getMaxNumberOfItemsGroupOrBuilder() {
        return getMaxNumberOfItemsGroup();
      }

      public static final int DOMAIN_TREE_NODE_IDS_FIELD_NUMBER = 10008;
      private io.dstore.engine.Values.stringValue domainTreeNodeIds_;
      /**
       * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
       *
       * <pre>
       * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
       * </pre>
       */
      public boolean hasDomainTreeNodeIds() {
        return domainTreeNodeIds_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
       *
       * <pre>
       * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getDomainTreeNodeIds() {
        return domainTreeNodeIds_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : domainTreeNodeIds_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
       *
       * <pre>
       * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getDomainTreeNodeIdsOrBuilder() {
        return getDomainTreeNodeIds();
      }

      public static final int NODE_CHARACTERISTIC_ID_FIELD_NUMBER = 10009;
      private io.dstore.engine.Values.integerValue nodeCharacteristicId_;
      /**
       * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
       *
       * <pre>
       * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
       * </pre>
       */
      public boolean hasNodeCharacteristicId() {
        return nodeCharacteristicId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
       *
       * <pre>
       * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getNodeCharacteristicId() {
        return nodeCharacteristicId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : nodeCharacteristicId_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
       *
       * <pre>
       * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getNodeCharacteristicIdOrBuilder() {
        return getNodeCharacteristicId();
      }

      public static final int ITEM_CONDITION_PART_ID_FIELD_NUMBER = 10010;
      private io.dstore.engine.Values.integerValue itemConditionPartId_;
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
       *
       * <pre>
       * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
       * </pre>
       */
      public boolean hasItemConditionPartId() {
        return itemConditionPartId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
       *
       * <pre>
       * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getItemConditionPartId() {
        return itemConditionPartId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : itemConditionPartId_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
       *
       * <pre>
       * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getItemConditionPartIdOrBuilder() {
        return getItemConditionPartId();
      }

      public static final int FROM_BASIC_PRICE_SUM_PART_FIELD_NUMBER = 10011;
      private io.dstore.engine.Values.decimalValue fromBasicPriceSumPart_;
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      public boolean hasFromBasicPriceSumPart() {
        return fromBasicPriceSumPart_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getFromBasicPriceSumPart() {
        return fromBasicPriceSumPart_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromBasicPriceSumPart_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getFromBasicPriceSumPartOrBuilder() {
        return getFromBasicPriceSumPart();
      }

      public static final int TO_QUANTITY_FIELD_NUMBER = 10012;
      private io.dstore.engine.Values.integerValue toQuantity_;
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasToQuantity() {
        return toQuantity_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getToQuantity() {
        return toQuantity_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : toQuantity_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getToQuantityOrBuilder() {
        return getToQuantity();
      }

      public static final int FROM_QUANTITY_GROUP_FIELD_NUMBER = 10013;
      private io.dstore.engine.Values.integerValue fromQuantityGroup_;
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasFromQuantityGroup() {
        return fromQuantityGroup_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getFromQuantityGroup() {
        return fromQuantityGroup_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : fromQuantityGroup_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getFromQuantityGroupOrBuilder() {
        return getFromQuantityGroup();
      }

      public static final int ITEM_CONDITION_ID_FIELD_NUMBER = 10014;
      private io.dstore.engine.Values.integerValue itemConditionId_;
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
       *
       * <pre>
       * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
       * </pre>
       */
      public boolean hasItemConditionId() {
        return itemConditionId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
       *
       * <pre>
       * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getItemConditionId() {
        return itemConditionId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : itemConditionId_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
       *
       * <pre>
       * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getItemConditionIdOrBuilder() {
        return getItemConditionId();
      }

      public static final int MAX_NUMBER_OF_ITEMS_FIELD_NUMBER = 10015;
      private io.dstore.engine.Values.integerValue maxNumberOfItems_;
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasMaxNumberOfItems() {
        return maxNumberOfItems_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getMaxNumberOfItems() {
        return maxNumberOfItems_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : maxNumberOfItems_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getMaxNumberOfItemsOrBuilder() {
        return getMaxNumberOfItems();
      }

      public static final int COMBINE_GROUPS_WITH_A_N_D_OPERATOR_FIELD_NUMBER = 10016;
      private io.dstore.engine.Values.booleanValue combineGroupsWithANDOperator_;
      /**
       * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
       *
       * <pre>
       * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
       * </pre>
       */
      public boolean hasCombineGroupsWithANDOperator() {
        return combineGroupsWithANDOperator_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
       *
       * <pre>
       * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
       * </pre>
       */
      public io.dstore.engine.Values.booleanValue getCombineGroupsWithANDOperator() {
        return combineGroupsWithANDOperator_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : combineGroupsWithANDOperator_;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
       *
       * <pre>
       * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
       * </pre>
       */
      public io.dstore.engine.Values.booleanValueOrBuilder getCombineGroupsWithANDOperatorOrBuilder() {
        return getCombineGroupsWithANDOperator();
      }

      public static final int FROM_BASIC_PRICE_SUM_GROUP_FIELD_NUMBER = 10017;
      private io.dstore.engine.Values.decimalValue fromBasicPriceSumGroup_;
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      public boolean hasFromBasicPriceSumGroup() {
        return fromBasicPriceSumGroup_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getFromBasicPriceSumGroup() {
        return fromBasicPriceSumGroup_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromBasicPriceSumGroup_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getFromBasicPriceSumGroupOrBuilder() {
        return getFromBasicPriceSumGroup();
      }

      public static final int TO_ITEM_BASIC_PRICE_PART_FIELD_NUMBER = 10018;
      private io.dstore.engine.Values.decimalValue toItemBasicPricePart_;
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasToItemBasicPricePart() {
        return toItemBasicPricePart_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getToItemBasicPricePart() {
        return toItemBasicPricePart_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : toItemBasicPricePart_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getToItemBasicPricePartOrBuilder() {
        return getToItemBasicPricePart();
      }

      public static final int ITEM_CONDITION_PART_DESCRIPTION_FIELD_NUMBER = 10019;
      private io.dstore.engine.Values.stringValue itemConditionPartDescription_;
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
       *
       * <pre>
       * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
       * </pre>
       */
      public boolean hasItemConditionPartDescription() {
        return itemConditionPartDescription_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
       *
       * <pre>
       * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getItemConditionPartDescription() {
        return itemConditionPartDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : itemConditionPartDescription_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
       *
       * <pre>
       * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getItemConditionPartDescriptionOrBuilder() {
        return getItemConditionPartDescription();
      }

      public static final int LEVEL_IDS_FIELD_NUMBER = 10020;
      private io.dstore.engine.Values.stringValue levelIds_;
      /**
       * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
       *
       * <pre>
       * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
       * </pre>
       */
      public boolean hasLevelIds() {
        return levelIds_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
       *
       * <pre>
       * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getLevelIds() {
        return levelIds_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : levelIds_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
       *
       * <pre>
       * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getLevelIdsOrBuilder() {
        return getLevelIds();
      }

      public static final int ITEM_CONDITION_GROUP_ID_FIELD_NUMBER = 10021;
      private io.dstore.engine.Values.integerValue itemConditionGroupId_;
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
       *
       * <pre>
       * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
       * </pre>
       */
      public boolean hasItemConditionGroupId() {
        return itemConditionGroupId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
       *
       * <pre>
       * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getItemConditionGroupId() {
        return itemConditionGroupId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : itemConditionGroupId_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
       *
       * <pre>
       * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getItemConditionGroupIdOrBuilder() {
        return getItemConditionGroupId();
      }

      public static final int EXTENDED_ITEM_COND_GROUP_DESCR_FIELD_NUMBER = 10022;
      private io.dstore.engine.Values.stringValue extendedItemCondGroupDescr_;
      /**
       * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
       *
       * <pre>
       * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
       * </pre>
       */
      public boolean hasExtendedItemCondGroupDescr() {
        return extendedItemCondGroupDescr_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
       *
       * <pre>
       * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getExtendedItemCondGroupDescr() {
        return extendedItemCondGroupDescr_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : extendedItemCondGroupDescr_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
       *
       * <pre>
       * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getExtendedItemCondGroupDescrOrBuilder() {
        return getExtendedItemCondGroupDescr();
      }

      public static final int FROM_QUANTITY_FIELD_NUMBER = 10023;
      private io.dstore.engine.Values.integerValue fromQuantity_;
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasFromQuantity() {
        return fromQuantity_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getFromQuantity() {
        return fromQuantity_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : fromQuantity_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getFromQuantityOrBuilder() {
        return getFromQuantity();
      }

      public static final int FROM_ITEM_BASIC_PRICE_FIELD_NUMBER = 10024;
      private io.dstore.engine.Values.decimalValue fromItemBasicPrice_;
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasFromItemBasicPrice() {
        return fromItemBasicPrice_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getFromItemBasicPrice() {
        return fromItemBasicPrice_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromItemBasicPrice_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getFromItemBasicPriceOrBuilder() {
        return getFromItemBasicPrice();
      }

      public static final int ITEM_GROUP_SORT_NO_FIELD_NUMBER = 10025;
      private io.dstore.engine.Values.integerValue itemGroupSortNo_;
      /**
       * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
       *
       * <pre>
       * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
       * </pre>
       */
      public boolean hasItemGroupSortNo() {
        return itemGroupSortNo_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
       *
       * <pre>
       * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getItemGroupSortNo() {
        return itemGroupSortNo_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : itemGroupSortNo_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
       *
       * <pre>
       * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getItemGroupSortNoOrBuilder() {
        return getItemGroupSortNo();
      }

      public static final int OPERATOR1_FIELD_NUMBER = 10026;
      private io.dstore.engine.Values.stringValue operator1_;
      /**
       * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
       *
       * <pre>
       * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
       * </pre>
       */
      public boolean hasOperator1() {
        return operator1_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
       *
       * <pre>
       * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getOperator1() {
        return operator1_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : operator1_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
       *
       * <pre>
       * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getOperator1OrBuilder() {
        return getOperator1();
      }

      public static final int OPERATOR2_FIELD_NUMBER = 10027;
      private io.dstore.engine.Values.stringValue operator2_;
      /**
       * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
       *
       * <pre>
       * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
       * </pre>
       */
      public boolean hasOperator2() {
        return operator2_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
       *
       * <pre>
       * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getOperator2() {
        return operator2_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : operator2_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
       *
       * <pre>
       * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getOperator2OrBuilder() {
        return getOperator2();
      }

      public static final int ITEM_CONDITION_GROUP_DESCRIPTION_FIELD_NUMBER = 10028;
      private io.dstore.engine.Values.stringValue itemConditionGroupDescription_;
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
       *
       * <pre>
       * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
       * </pre>
       */
      public boolean hasItemConditionGroupDescription() {
        return itemConditionGroupDescription_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
       *
       * <pre>
       * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getItemConditionGroupDescription() {
        return itemConditionGroupDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : itemConditionGroupDescription_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
       *
       * <pre>
       * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getItemConditionGroupDescriptionOrBuilder() {
        return getItemConditionGroupDescription();
      }

      public static final int COMBINE_PARTS_WITH_A_N_D_OPERATOR_FIELD_NUMBER = 10029;
      private io.dstore.engine.Values.booleanValue combinePartsWithANDOperator_;
      /**
       * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
       *
       * <pre>
       * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
       * </pre>
       */
      public boolean hasCombinePartsWithANDOperator() {
        return combinePartsWithANDOperator_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
       *
       * <pre>
       * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
       * </pre>
       */
      public io.dstore.engine.Values.booleanValue getCombinePartsWithANDOperator() {
        return combinePartsWithANDOperator_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : combinePartsWithANDOperator_;
      }
      /**
       * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
       *
       * <pre>
       * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
       * </pre>
       */
      public io.dstore.engine.Values.booleanValueOrBuilder getCombinePartsWithANDOperatorOrBuilder() {
        return getCombinePartsWithANDOperator();
      }

      public static final int MIN_NUMBER_OF_ITEMS_PART_FIELD_NUMBER = 10030;
      private io.dstore.engine.Values.integerValue minNumberOfItemsPart_;
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasMinNumberOfItemsPart() {
        return minNumberOfItemsPart_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getMinNumberOfItemsPart() {
        return minNumberOfItemsPart_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : minNumberOfItemsPart_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getMinNumberOfItemsPartOrBuilder() {
        return getMinNumberOfItemsPart();
      }

      public static final int ITEM_PART_SORT_NO_FIELD_NUMBER = 10031;
      private io.dstore.engine.Values.integerValue itemPartSortNo_;
      /**
       * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
       *
       * <pre>
       * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
       * </pre>
       */
      public boolean hasItemPartSortNo() {
        return itemPartSortNo_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
       *
       * <pre>
       * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getItemPartSortNo() {
        return itemPartSortNo_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : itemPartSortNo_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
       *
       * <pre>
       * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getItemPartSortNoOrBuilder() {
        return getItemPartSortNo();
      }

      public static final int TO_ITEM_BASIC_PRICE_GROUP_FIELD_NUMBER = 10032;
      private io.dstore.engine.Values.decimalValue toItemBasicPriceGroup_;
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasToItemBasicPriceGroup() {
        return toItemBasicPriceGroup_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getToItemBasicPriceGroup() {
        return toItemBasicPriceGroup_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : toItemBasicPriceGroup_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getToItemBasicPriceGroupOrBuilder() {
        return getToItemBasicPriceGroup();
      }

      public static final int EXTENDED_ITEM_COND_PART_DESCR_FIELD_NUMBER = 10033;
      private io.dstore.engine.Values.stringValue extendedItemCondPartDescr_;
      /**
       * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
       *
       * <pre>
       * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
       * </pre>
       */
      public boolean hasExtendedItemCondPartDescr() {
        return extendedItemCondPartDescr_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
       *
       * <pre>
       * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getExtendedItemCondPartDescr() {
        return extendedItemCondPartDescr_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : extendedItemCondPartDescr_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
       *
       * <pre>
       * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getExtendedItemCondPartDescrOrBuilder() {
        return getExtendedItemCondPartDescr();
      }

      public static final int MAX_NUMBER_OF_ITEMS_PART_FIELD_NUMBER = 10034;
      private io.dstore.engine.Values.integerValue maxNumberOfItemsPart_;
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasMaxNumberOfItemsPart() {
        return maxNumberOfItemsPart_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getMaxNumberOfItemsPart() {
        return maxNumberOfItemsPart_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : maxNumberOfItemsPart_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getMaxNumberOfItemsPartOrBuilder() {
        return getMaxNumberOfItemsPart();
      }

      public static final int FROM_ITEM_BASIC_PRICE_PART_FIELD_NUMBER = 10035;
      private io.dstore.engine.Values.decimalValue fromItemBasicPricePart_;
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasFromItemBasicPricePart() {
        return fromItemBasicPricePart_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getFromItemBasicPricePart() {
        return fromItemBasicPricePart_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromItemBasicPricePart_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getFromItemBasicPricePartOrBuilder() {
        return getFromItemBasicPricePart();
      }

      public static final int MIN_NUMBER_OF_ITEMS_FIELD_NUMBER = 10036;
      private io.dstore.engine.Values.integerValue minNumberOfItems_;
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasMinNumberOfItems() {
        return minNumberOfItems_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getMinNumberOfItems() {
        return minNumberOfItems_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : minNumberOfItems_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getMinNumberOfItemsOrBuilder() {
        return getMinNumberOfItems();
      }

      public static final int FROM_BASIC_PRICE_SUM_FIELD_NUMBER = 10037;
      private io.dstore.engine.Values.decimalValue fromBasicPriceSum_;
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      public boolean hasFromBasicPriceSum() {
        return fromBasicPriceSum_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getFromBasicPriceSum() {
        return fromBasicPriceSum_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromBasicPriceSum_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getFromBasicPriceSumOrBuilder() {
        return getFromBasicPriceSum();
      }

      public static final int TO_BASIC_PRICE_SUM_FIELD_NUMBER = 10038;
      private io.dstore.engine.Values.decimalValue toBasicPriceSum_;
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      public boolean hasToBasicPriceSum() {
        return toBasicPriceSum_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getToBasicPriceSum() {
        return toBasicPriceSum_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : toBasicPriceSum_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
       *
       * <pre>
       * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getToBasicPriceSumOrBuilder() {
        return getToBasicPriceSum();
      }

      public static final int TO_QUANTITY_GROUP_FIELD_NUMBER = 10039;
      private io.dstore.engine.Values.integerValue toQuantityGroup_;
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasToQuantityGroup() {
        return toQuantityGroup_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getToQuantityGroup() {
        return toQuantityGroup_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : toQuantityGroup_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getToQuantityGroupOrBuilder() {
        return getToQuantityGroup();
      }

      public static final int FROM_ITEM_BASIC_PRICE_GROUP_FIELD_NUMBER = 10040;
      private io.dstore.engine.Values.decimalValue fromItemBasicPriceGroup_;
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasFromItemBasicPriceGroup() {
        return fromItemBasicPriceGroup_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getFromItemBasicPriceGroup() {
        return fromItemBasicPriceGroup_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromItemBasicPriceGroup_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getFromItemBasicPriceGroupOrBuilder() {
        return getFromItemBasicPriceGroup();
      }

      public static final int CONDITION_ID_FIELD_NUMBER = 10041;
      private io.dstore.engine.Values.integerValue conditionId_;
      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
       *
       * <pre>
       * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
       * </pre>
       */
      public boolean hasConditionId() {
        return conditionId_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
       *
       * <pre>
       * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getConditionId() {
        return conditionId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : conditionId_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
       *
       * <pre>
       * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getConditionIdOrBuilder() {
        return getConditionId();
      }

      public static final int ITEM_CONDITION_DESCRIPTION_FIELD_NUMBER = 10042;
      private io.dstore.engine.Values.stringValue itemConditionDescription_;
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
       *
       * <pre>
       * Bezeichnung der Artikel-Bedingung "ItemConditionID"
       * </pre>
       */
      public boolean hasItemConditionDescription() {
        return itemConditionDescription_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
       *
       * <pre>
       * Bezeichnung der Artikel-Bedingung "ItemConditionID"
       * </pre>
       */
      public io.dstore.engine.Values.stringValue getItemConditionDescription() {
        return itemConditionDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : itemConditionDescription_;
      }
      /**
       * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
       *
       * <pre>
       * Bezeichnung der Artikel-Bedingung "ItemConditionID"
       * </pre>
       */
      public io.dstore.engine.Values.stringValueOrBuilder getItemConditionDescriptionOrBuilder() {
        return getItemConditionDescription();
      }

      public static final int TO_ITEM_BASIC_PRICE_FIELD_NUMBER = 10043;
      private io.dstore.engine.Values.decimalValue toItemBasicPrice_;
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasToItemBasicPrice() {
        return toItemBasicPrice_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.decimalValue getToItemBasicPrice() {
        return toItemBasicPrice_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : toItemBasicPrice_;
      }
      /**
       * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
       *
       * <pre>
       * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.decimalValueOrBuilder getToItemBasicPriceOrBuilder() {
        return getToItemBasicPrice();
      }

      public static final int TO_QUANTITY_PART_FIELD_NUMBER = 10044;
      private io.dstore.engine.Values.integerValue toQuantityPart_;
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasToQuantityPart() {
        return toQuantityPart_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getToQuantityPart() {
        return toQuantityPart_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : toQuantityPart_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getToQuantityPartOrBuilder() {
        return getToQuantityPart();
      }

      public static final int FROM_QUANTITY_PART_FIELD_NUMBER = 10045;
      private io.dstore.engine.Values.integerValue fromQuantityPart_;
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasFromQuantityPart() {
        return fromQuantityPart_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getFromQuantityPart() {
        return fromQuantityPart_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : fromQuantityPart_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
       *
       * <pre>
       * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getFromQuantityPartOrBuilder() {
        return getFromQuantityPart();
      }

      public static final int MIN_NUMBER_OF_ITEMS_GROUP_FIELD_NUMBER = 10046;
      private io.dstore.engine.Values.integerValue minNumberOfItemsGroup_;
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public boolean hasMinNumberOfItemsGroup() {
        return minNumberOfItemsGroup_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getMinNumberOfItemsGroup() {
        return minNumberOfItemsGroup_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : minNumberOfItemsGroup_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
       *
       * <pre>
       * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getMinNumberOfItemsGroupOrBuilder() {
        return getMinNumberOfItemsGroup();
      }

      public static final int INHERIT_DEPTH_FIELD_NUMBER = 10047;
      private io.dstore.engine.Values.integerValue inheritDepth_;
      /**
       * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
       *
       * <pre>
       * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
       * </pre>
       */
      public boolean hasInheritDepth() {
        return inheritDepth_ != null;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
       *
       * <pre>
       * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
       * </pre>
       */
      public io.dstore.engine.Values.integerValue getInheritDepth() {
        return inheritDepth_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : inheritDepth_;
      }
      /**
       * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
       *
       * <pre>
       * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
       * </pre>
       */
      public io.dstore.engine.Values.integerValueOrBuilder getInheritDepthOrBuilder() {
        return getInheritDepth();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (rowId_ != 0) {
          output.writeInt32(10000, rowId_);
        }
        if (conditionDescription_ != null) {
          output.writeMessage(10001, getConditionDescription());
        }
        if (condition1_ != null) {
          output.writeMessage(10002, getCondition1());
        }
        if (condition2_ != null) {
          output.writeMessage(10003, getCondition2());
        }
        if (toBasicPriceSumGroup_ != null) {
          output.writeMessage(10004, getToBasicPriceSumGroup());
        }
        if (recursiveEvaluation_ != null) {
          output.writeMessage(10005, getRecursiveEvaluation());
        }
        if (toBasicPriceSumPart_ != null) {
          output.writeMessage(10006, getToBasicPriceSumPart());
        }
        if (maxNumberOfItemsGroup_ != null) {
          output.writeMessage(10007, getMaxNumberOfItemsGroup());
        }
        if (domainTreeNodeIds_ != null) {
          output.writeMessage(10008, getDomainTreeNodeIds());
        }
        if (nodeCharacteristicId_ != null) {
          output.writeMessage(10009, getNodeCharacteristicId());
        }
        if (itemConditionPartId_ != null) {
          output.writeMessage(10010, getItemConditionPartId());
        }
        if (fromBasicPriceSumPart_ != null) {
          output.writeMessage(10011, getFromBasicPriceSumPart());
        }
        if (toQuantity_ != null) {
          output.writeMessage(10012, getToQuantity());
        }
        if (fromQuantityGroup_ != null) {
          output.writeMessage(10013, getFromQuantityGroup());
        }
        if (itemConditionId_ != null) {
          output.writeMessage(10014, getItemConditionId());
        }
        if (maxNumberOfItems_ != null) {
          output.writeMessage(10015, getMaxNumberOfItems());
        }
        if (combineGroupsWithANDOperator_ != null) {
          output.writeMessage(10016, getCombineGroupsWithANDOperator());
        }
        if (fromBasicPriceSumGroup_ != null) {
          output.writeMessage(10017, getFromBasicPriceSumGroup());
        }
        if (toItemBasicPricePart_ != null) {
          output.writeMessage(10018, getToItemBasicPricePart());
        }
        if (itemConditionPartDescription_ != null) {
          output.writeMessage(10019, getItemConditionPartDescription());
        }
        if (levelIds_ != null) {
          output.writeMessage(10020, getLevelIds());
        }
        if (itemConditionGroupId_ != null) {
          output.writeMessage(10021, getItemConditionGroupId());
        }
        if (extendedItemCondGroupDescr_ != null) {
          output.writeMessage(10022, getExtendedItemCondGroupDescr());
        }
        if (fromQuantity_ != null) {
          output.writeMessage(10023, getFromQuantity());
        }
        if (fromItemBasicPrice_ != null) {
          output.writeMessage(10024, getFromItemBasicPrice());
        }
        if (itemGroupSortNo_ != null) {
          output.writeMessage(10025, getItemGroupSortNo());
        }
        if (operator1_ != null) {
          output.writeMessage(10026, getOperator1());
        }
        if (operator2_ != null) {
          output.writeMessage(10027, getOperator2());
        }
        if (itemConditionGroupDescription_ != null) {
          output.writeMessage(10028, getItemConditionGroupDescription());
        }
        if (combinePartsWithANDOperator_ != null) {
          output.writeMessage(10029, getCombinePartsWithANDOperator());
        }
        if (minNumberOfItemsPart_ != null) {
          output.writeMessage(10030, getMinNumberOfItemsPart());
        }
        if (itemPartSortNo_ != null) {
          output.writeMessage(10031, getItemPartSortNo());
        }
        if (toItemBasicPriceGroup_ != null) {
          output.writeMessage(10032, getToItemBasicPriceGroup());
        }
        if (extendedItemCondPartDescr_ != null) {
          output.writeMessage(10033, getExtendedItemCondPartDescr());
        }
        if (maxNumberOfItemsPart_ != null) {
          output.writeMessage(10034, getMaxNumberOfItemsPart());
        }
        if (fromItemBasicPricePart_ != null) {
          output.writeMessage(10035, getFromItemBasicPricePart());
        }
        if (minNumberOfItems_ != null) {
          output.writeMessage(10036, getMinNumberOfItems());
        }
        if (fromBasicPriceSum_ != null) {
          output.writeMessage(10037, getFromBasicPriceSum());
        }
        if (toBasicPriceSum_ != null) {
          output.writeMessage(10038, getToBasicPriceSum());
        }
        if (toQuantityGroup_ != null) {
          output.writeMessage(10039, getToQuantityGroup());
        }
        if (fromItemBasicPriceGroup_ != null) {
          output.writeMessage(10040, getFromItemBasicPriceGroup());
        }
        if (conditionId_ != null) {
          output.writeMessage(10041, getConditionId());
        }
        if (itemConditionDescription_ != null) {
          output.writeMessage(10042, getItemConditionDescription());
        }
        if (toItemBasicPrice_ != null) {
          output.writeMessage(10043, getToItemBasicPrice());
        }
        if (toQuantityPart_ != null) {
          output.writeMessage(10044, getToQuantityPart());
        }
        if (fromQuantityPart_ != null) {
          output.writeMessage(10045, getFromQuantityPart());
        }
        if (minNumberOfItemsGroup_ != null) {
          output.writeMessage(10046, getMinNumberOfItemsGroup());
        }
        if (inheritDepth_ != null) {
          output.writeMessage(10047, getInheritDepth());
        }
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (rowId_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10000, rowId_);
        }
        if (conditionDescription_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10001, getConditionDescription());
        }
        if (condition1_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10002, getCondition1());
        }
        if (condition2_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10003, getCondition2());
        }
        if (toBasicPriceSumGroup_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10004, getToBasicPriceSumGroup());
        }
        if (recursiveEvaluation_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10005, getRecursiveEvaluation());
        }
        if (toBasicPriceSumPart_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10006, getToBasicPriceSumPart());
        }
        if (maxNumberOfItemsGroup_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10007, getMaxNumberOfItemsGroup());
        }
        if (domainTreeNodeIds_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10008, getDomainTreeNodeIds());
        }
        if (nodeCharacteristicId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10009, getNodeCharacteristicId());
        }
        if (itemConditionPartId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10010, getItemConditionPartId());
        }
        if (fromBasicPriceSumPart_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10011, getFromBasicPriceSumPart());
        }
        if (toQuantity_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10012, getToQuantity());
        }
        if (fromQuantityGroup_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10013, getFromQuantityGroup());
        }
        if (itemConditionId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10014, getItemConditionId());
        }
        if (maxNumberOfItems_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10015, getMaxNumberOfItems());
        }
        if (combineGroupsWithANDOperator_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10016, getCombineGroupsWithANDOperator());
        }
        if (fromBasicPriceSumGroup_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10017, getFromBasicPriceSumGroup());
        }
        if (toItemBasicPricePart_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10018, getToItemBasicPricePart());
        }
        if (itemConditionPartDescription_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10019, getItemConditionPartDescription());
        }
        if (levelIds_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10020, getLevelIds());
        }
        if (itemConditionGroupId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10021, getItemConditionGroupId());
        }
        if (extendedItemCondGroupDescr_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10022, getExtendedItemCondGroupDescr());
        }
        if (fromQuantity_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10023, getFromQuantity());
        }
        if (fromItemBasicPrice_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10024, getFromItemBasicPrice());
        }
        if (itemGroupSortNo_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10025, getItemGroupSortNo());
        }
        if (operator1_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10026, getOperator1());
        }
        if (operator2_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10027, getOperator2());
        }
        if (itemConditionGroupDescription_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10028, getItemConditionGroupDescription());
        }
        if (combinePartsWithANDOperator_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10029, getCombinePartsWithANDOperator());
        }
        if (minNumberOfItemsPart_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10030, getMinNumberOfItemsPart());
        }
        if (itemPartSortNo_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10031, getItemPartSortNo());
        }
        if (toItemBasicPriceGroup_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10032, getToItemBasicPriceGroup());
        }
        if (extendedItemCondPartDescr_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10033, getExtendedItemCondPartDescr());
        }
        if (maxNumberOfItemsPart_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10034, getMaxNumberOfItemsPart());
        }
        if (fromItemBasicPricePart_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10035, getFromItemBasicPricePart());
        }
        if (minNumberOfItems_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10036, getMinNumberOfItems());
        }
        if (fromBasicPriceSum_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10037, getFromBasicPriceSum());
        }
        if (toBasicPriceSum_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10038, getToBasicPriceSum());
        }
        if (toQuantityGroup_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10039, getToQuantityGroup());
        }
        if (fromItemBasicPriceGroup_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10040, getFromItemBasicPriceGroup());
        }
        if (conditionId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10041, getConditionId());
        }
        if (itemConditionDescription_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10042, getItemConditionDescription());
        }
        if (toItemBasicPrice_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10043, getToItemBasicPrice());
        }
        if (toQuantityPart_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10044, getToQuantityPart());
        }
        if (fromQuantityPart_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10045, getFromQuantityPart());
        }
        if (minNumberOfItemsGroup_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10046, getMinNumberOfItemsGroup());
        }
        if (inheritDepth_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10047, getInheritDepth());
        }
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code dstore.engine.om_GetCampaignItemConds_Ad.Response.Row}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetCampaignItemConds_Ad.Response.Row)
          io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.RowOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_Row_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_Row_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.class, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.Builder.class);
        }

        // Construct using io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          rowId_ = 0;

          if (conditionDescriptionBuilder_ == null) {
            conditionDescription_ = null;
          } else {
            conditionDescription_ = null;
            conditionDescriptionBuilder_ = null;
          }
          if (condition1Builder_ == null) {
            condition1_ = null;
          } else {
            condition1_ = null;
            condition1Builder_ = null;
          }
          if (condition2Builder_ == null) {
            condition2_ = null;
          } else {
            condition2_ = null;
            condition2Builder_ = null;
          }
          if (toBasicPriceSumGroupBuilder_ == null) {
            toBasicPriceSumGroup_ = null;
          } else {
            toBasicPriceSumGroup_ = null;
            toBasicPriceSumGroupBuilder_ = null;
          }
          if (recursiveEvaluationBuilder_ == null) {
            recursiveEvaluation_ = null;
          } else {
            recursiveEvaluation_ = null;
            recursiveEvaluationBuilder_ = null;
          }
          if (toBasicPriceSumPartBuilder_ == null) {
            toBasicPriceSumPart_ = null;
          } else {
            toBasicPriceSumPart_ = null;
            toBasicPriceSumPartBuilder_ = null;
          }
          if (maxNumberOfItemsGroupBuilder_ == null) {
            maxNumberOfItemsGroup_ = null;
          } else {
            maxNumberOfItemsGroup_ = null;
            maxNumberOfItemsGroupBuilder_ = null;
          }
          if (domainTreeNodeIdsBuilder_ == null) {
            domainTreeNodeIds_ = null;
          } else {
            domainTreeNodeIds_ = null;
            domainTreeNodeIdsBuilder_ = null;
          }
          if (nodeCharacteristicIdBuilder_ == null) {
            nodeCharacteristicId_ = null;
          } else {
            nodeCharacteristicId_ = null;
            nodeCharacteristicIdBuilder_ = null;
          }
          if (itemConditionPartIdBuilder_ == null) {
            itemConditionPartId_ = null;
          } else {
            itemConditionPartId_ = null;
            itemConditionPartIdBuilder_ = null;
          }
          if (fromBasicPriceSumPartBuilder_ == null) {
            fromBasicPriceSumPart_ = null;
          } else {
            fromBasicPriceSumPart_ = null;
            fromBasicPriceSumPartBuilder_ = null;
          }
          if (toQuantityBuilder_ == null) {
            toQuantity_ = null;
          } else {
            toQuantity_ = null;
            toQuantityBuilder_ = null;
          }
          if (fromQuantityGroupBuilder_ == null) {
            fromQuantityGroup_ = null;
          } else {
            fromQuantityGroup_ = null;
            fromQuantityGroupBuilder_ = null;
          }
          if (itemConditionIdBuilder_ == null) {
            itemConditionId_ = null;
          } else {
            itemConditionId_ = null;
            itemConditionIdBuilder_ = null;
          }
          if (maxNumberOfItemsBuilder_ == null) {
            maxNumberOfItems_ = null;
          } else {
            maxNumberOfItems_ = null;
            maxNumberOfItemsBuilder_ = null;
          }
          if (combineGroupsWithANDOperatorBuilder_ == null) {
            combineGroupsWithANDOperator_ = null;
          } else {
            combineGroupsWithANDOperator_ = null;
            combineGroupsWithANDOperatorBuilder_ = null;
          }
          if (fromBasicPriceSumGroupBuilder_ == null) {
            fromBasicPriceSumGroup_ = null;
          } else {
            fromBasicPriceSumGroup_ = null;
            fromBasicPriceSumGroupBuilder_ = null;
          }
          if (toItemBasicPricePartBuilder_ == null) {
            toItemBasicPricePart_ = null;
          } else {
            toItemBasicPricePart_ = null;
            toItemBasicPricePartBuilder_ = null;
          }
          if (itemConditionPartDescriptionBuilder_ == null) {
            itemConditionPartDescription_ = null;
          } else {
            itemConditionPartDescription_ = null;
            itemConditionPartDescriptionBuilder_ = null;
          }
          if (levelIdsBuilder_ == null) {
            levelIds_ = null;
          } else {
            levelIds_ = null;
            levelIdsBuilder_ = null;
          }
          if (itemConditionGroupIdBuilder_ == null) {
            itemConditionGroupId_ = null;
          } else {
            itemConditionGroupId_ = null;
            itemConditionGroupIdBuilder_ = null;
          }
          if (extendedItemCondGroupDescrBuilder_ == null) {
            extendedItemCondGroupDescr_ = null;
          } else {
            extendedItemCondGroupDescr_ = null;
            extendedItemCondGroupDescrBuilder_ = null;
          }
          if (fromQuantityBuilder_ == null) {
            fromQuantity_ = null;
          } else {
            fromQuantity_ = null;
            fromQuantityBuilder_ = null;
          }
          if (fromItemBasicPriceBuilder_ == null) {
            fromItemBasicPrice_ = null;
          } else {
            fromItemBasicPrice_ = null;
            fromItemBasicPriceBuilder_ = null;
          }
          if (itemGroupSortNoBuilder_ == null) {
            itemGroupSortNo_ = null;
          } else {
            itemGroupSortNo_ = null;
            itemGroupSortNoBuilder_ = null;
          }
          if (operator1Builder_ == null) {
            operator1_ = null;
          } else {
            operator1_ = null;
            operator1Builder_ = null;
          }
          if (operator2Builder_ == null) {
            operator2_ = null;
          } else {
            operator2_ = null;
            operator2Builder_ = null;
          }
          if (itemConditionGroupDescriptionBuilder_ == null) {
            itemConditionGroupDescription_ = null;
          } else {
            itemConditionGroupDescription_ = null;
            itemConditionGroupDescriptionBuilder_ = null;
          }
          if (combinePartsWithANDOperatorBuilder_ == null) {
            combinePartsWithANDOperator_ = null;
          } else {
            combinePartsWithANDOperator_ = null;
            combinePartsWithANDOperatorBuilder_ = null;
          }
          if (minNumberOfItemsPartBuilder_ == null) {
            minNumberOfItemsPart_ = null;
          } else {
            minNumberOfItemsPart_ = null;
            minNumberOfItemsPartBuilder_ = null;
          }
          if (itemPartSortNoBuilder_ == null) {
            itemPartSortNo_ = null;
          } else {
            itemPartSortNo_ = null;
            itemPartSortNoBuilder_ = null;
          }
          if (toItemBasicPriceGroupBuilder_ == null) {
            toItemBasicPriceGroup_ = null;
          } else {
            toItemBasicPriceGroup_ = null;
            toItemBasicPriceGroupBuilder_ = null;
          }
          if (extendedItemCondPartDescrBuilder_ == null) {
            extendedItemCondPartDescr_ = null;
          } else {
            extendedItemCondPartDescr_ = null;
            extendedItemCondPartDescrBuilder_ = null;
          }
          if (maxNumberOfItemsPartBuilder_ == null) {
            maxNumberOfItemsPart_ = null;
          } else {
            maxNumberOfItemsPart_ = null;
            maxNumberOfItemsPartBuilder_ = null;
          }
          if (fromItemBasicPricePartBuilder_ == null) {
            fromItemBasicPricePart_ = null;
          } else {
            fromItemBasicPricePart_ = null;
            fromItemBasicPricePartBuilder_ = null;
          }
          if (minNumberOfItemsBuilder_ == null) {
            minNumberOfItems_ = null;
          } else {
            minNumberOfItems_ = null;
            minNumberOfItemsBuilder_ = null;
          }
          if (fromBasicPriceSumBuilder_ == null) {
            fromBasicPriceSum_ = null;
          } else {
            fromBasicPriceSum_ = null;
            fromBasicPriceSumBuilder_ = null;
          }
          if (toBasicPriceSumBuilder_ == null) {
            toBasicPriceSum_ = null;
          } else {
            toBasicPriceSum_ = null;
            toBasicPriceSumBuilder_ = null;
          }
          if (toQuantityGroupBuilder_ == null) {
            toQuantityGroup_ = null;
          } else {
            toQuantityGroup_ = null;
            toQuantityGroupBuilder_ = null;
          }
          if (fromItemBasicPriceGroupBuilder_ == null) {
            fromItemBasicPriceGroup_ = null;
          } else {
            fromItemBasicPriceGroup_ = null;
            fromItemBasicPriceGroupBuilder_ = null;
          }
          if (conditionIdBuilder_ == null) {
            conditionId_ = null;
          } else {
            conditionId_ = null;
            conditionIdBuilder_ = null;
          }
          if (itemConditionDescriptionBuilder_ == null) {
            itemConditionDescription_ = null;
          } else {
            itemConditionDescription_ = null;
            itemConditionDescriptionBuilder_ = null;
          }
          if (toItemBasicPriceBuilder_ == null) {
            toItemBasicPrice_ = null;
          } else {
            toItemBasicPrice_ = null;
            toItemBasicPriceBuilder_ = null;
          }
          if (toQuantityPartBuilder_ == null) {
            toQuantityPart_ = null;
          } else {
            toQuantityPart_ = null;
            toQuantityPartBuilder_ = null;
          }
          if (fromQuantityPartBuilder_ == null) {
            fromQuantityPart_ = null;
          } else {
            fromQuantityPart_ = null;
            fromQuantityPartBuilder_ = null;
          }
          if (minNumberOfItemsGroupBuilder_ == null) {
            minNumberOfItemsGroup_ = null;
          } else {
            minNumberOfItemsGroup_ = null;
            minNumberOfItemsGroupBuilder_ = null;
          }
          if (inheritDepthBuilder_ == null) {
            inheritDepth_ = null;
          } else {
            inheritDepth_ = null;
            inheritDepthBuilder_ = null;
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_Row_descriptor;
        }

        public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row getDefaultInstanceForType() {
          return io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.getDefaultInstance();
        }

        public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row build() {
          io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row buildPartial() {
          io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row result = new io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row(this);
          result.rowId_ = rowId_;
          if (conditionDescriptionBuilder_ == null) {
            result.conditionDescription_ = conditionDescription_;
          } else {
            result.conditionDescription_ = conditionDescriptionBuilder_.build();
          }
          if (condition1Builder_ == null) {
            result.condition1_ = condition1_;
          } else {
            result.condition1_ = condition1Builder_.build();
          }
          if (condition2Builder_ == null) {
            result.condition2_ = condition2_;
          } else {
            result.condition2_ = condition2Builder_.build();
          }
          if (toBasicPriceSumGroupBuilder_ == null) {
            result.toBasicPriceSumGroup_ = toBasicPriceSumGroup_;
          } else {
            result.toBasicPriceSumGroup_ = toBasicPriceSumGroupBuilder_.build();
          }
          if (recursiveEvaluationBuilder_ == null) {
            result.recursiveEvaluation_ = recursiveEvaluation_;
          } else {
            result.recursiveEvaluation_ = recursiveEvaluationBuilder_.build();
          }
          if (toBasicPriceSumPartBuilder_ == null) {
            result.toBasicPriceSumPart_ = toBasicPriceSumPart_;
          } else {
            result.toBasicPriceSumPart_ = toBasicPriceSumPartBuilder_.build();
          }
          if (maxNumberOfItemsGroupBuilder_ == null) {
            result.maxNumberOfItemsGroup_ = maxNumberOfItemsGroup_;
          } else {
            result.maxNumberOfItemsGroup_ = maxNumberOfItemsGroupBuilder_.build();
          }
          if (domainTreeNodeIdsBuilder_ == null) {
            result.domainTreeNodeIds_ = domainTreeNodeIds_;
          } else {
            result.domainTreeNodeIds_ = domainTreeNodeIdsBuilder_.build();
          }
          if (nodeCharacteristicIdBuilder_ == null) {
            result.nodeCharacteristicId_ = nodeCharacteristicId_;
          } else {
            result.nodeCharacteristicId_ = nodeCharacteristicIdBuilder_.build();
          }
          if (itemConditionPartIdBuilder_ == null) {
            result.itemConditionPartId_ = itemConditionPartId_;
          } else {
            result.itemConditionPartId_ = itemConditionPartIdBuilder_.build();
          }
          if (fromBasicPriceSumPartBuilder_ == null) {
            result.fromBasicPriceSumPart_ = fromBasicPriceSumPart_;
          } else {
            result.fromBasicPriceSumPart_ = fromBasicPriceSumPartBuilder_.build();
          }
          if (toQuantityBuilder_ == null) {
            result.toQuantity_ = toQuantity_;
          } else {
            result.toQuantity_ = toQuantityBuilder_.build();
          }
          if (fromQuantityGroupBuilder_ == null) {
            result.fromQuantityGroup_ = fromQuantityGroup_;
          } else {
            result.fromQuantityGroup_ = fromQuantityGroupBuilder_.build();
          }
          if (itemConditionIdBuilder_ == null) {
            result.itemConditionId_ = itemConditionId_;
          } else {
            result.itemConditionId_ = itemConditionIdBuilder_.build();
          }
          if (maxNumberOfItemsBuilder_ == null) {
            result.maxNumberOfItems_ = maxNumberOfItems_;
          } else {
            result.maxNumberOfItems_ = maxNumberOfItemsBuilder_.build();
          }
          if (combineGroupsWithANDOperatorBuilder_ == null) {
            result.combineGroupsWithANDOperator_ = combineGroupsWithANDOperator_;
          } else {
            result.combineGroupsWithANDOperator_ = combineGroupsWithANDOperatorBuilder_.build();
          }
          if (fromBasicPriceSumGroupBuilder_ == null) {
            result.fromBasicPriceSumGroup_ = fromBasicPriceSumGroup_;
          } else {
            result.fromBasicPriceSumGroup_ = fromBasicPriceSumGroupBuilder_.build();
          }
          if (toItemBasicPricePartBuilder_ == null) {
            result.toItemBasicPricePart_ = toItemBasicPricePart_;
          } else {
            result.toItemBasicPricePart_ = toItemBasicPricePartBuilder_.build();
          }
          if (itemConditionPartDescriptionBuilder_ == null) {
            result.itemConditionPartDescription_ = itemConditionPartDescription_;
          } else {
            result.itemConditionPartDescription_ = itemConditionPartDescriptionBuilder_.build();
          }
          if (levelIdsBuilder_ == null) {
            result.levelIds_ = levelIds_;
          } else {
            result.levelIds_ = levelIdsBuilder_.build();
          }
          if (itemConditionGroupIdBuilder_ == null) {
            result.itemConditionGroupId_ = itemConditionGroupId_;
          } else {
            result.itemConditionGroupId_ = itemConditionGroupIdBuilder_.build();
          }
          if (extendedItemCondGroupDescrBuilder_ == null) {
            result.extendedItemCondGroupDescr_ = extendedItemCondGroupDescr_;
          } else {
            result.extendedItemCondGroupDescr_ = extendedItemCondGroupDescrBuilder_.build();
          }
          if (fromQuantityBuilder_ == null) {
            result.fromQuantity_ = fromQuantity_;
          } else {
            result.fromQuantity_ = fromQuantityBuilder_.build();
          }
          if (fromItemBasicPriceBuilder_ == null) {
            result.fromItemBasicPrice_ = fromItemBasicPrice_;
          } else {
            result.fromItemBasicPrice_ = fromItemBasicPriceBuilder_.build();
          }
          if (itemGroupSortNoBuilder_ == null) {
            result.itemGroupSortNo_ = itemGroupSortNo_;
          } else {
            result.itemGroupSortNo_ = itemGroupSortNoBuilder_.build();
          }
          if (operator1Builder_ == null) {
            result.operator1_ = operator1_;
          } else {
            result.operator1_ = operator1Builder_.build();
          }
          if (operator2Builder_ == null) {
            result.operator2_ = operator2_;
          } else {
            result.operator2_ = operator2Builder_.build();
          }
          if (itemConditionGroupDescriptionBuilder_ == null) {
            result.itemConditionGroupDescription_ = itemConditionGroupDescription_;
          } else {
            result.itemConditionGroupDescription_ = itemConditionGroupDescriptionBuilder_.build();
          }
          if (combinePartsWithANDOperatorBuilder_ == null) {
            result.combinePartsWithANDOperator_ = combinePartsWithANDOperator_;
          } else {
            result.combinePartsWithANDOperator_ = combinePartsWithANDOperatorBuilder_.build();
          }
          if (minNumberOfItemsPartBuilder_ == null) {
            result.minNumberOfItemsPart_ = minNumberOfItemsPart_;
          } else {
            result.minNumberOfItemsPart_ = minNumberOfItemsPartBuilder_.build();
          }
          if (itemPartSortNoBuilder_ == null) {
            result.itemPartSortNo_ = itemPartSortNo_;
          } else {
            result.itemPartSortNo_ = itemPartSortNoBuilder_.build();
          }
          if (toItemBasicPriceGroupBuilder_ == null) {
            result.toItemBasicPriceGroup_ = toItemBasicPriceGroup_;
          } else {
            result.toItemBasicPriceGroup_ = toItemBasicPriceGroupBuilder_.build();
          }
          if (extendedItemCondPartDescrBuilder_ == null) {
            result.extendedItemCondPartDescr_ = extendedItemCondPartDescr_;
          } else {
            result.extendedItemCondPartDescr_ = extendedItemCondPartDescrBuilder_.build();
          }
          if (maxNumberOfItemsPartBuilder_ == null) {
            result.maxNumberOfItemsPart_ = maxNumberOfItemsPart_;
          } else {
            result.maxNumberOfItemsPart_ = maxNumberOfItemsPartBuilder_.build();
          }
          if (fromItemBasicPricePartBuilder_ == null) {
            result.fromItemBasicPricePart_ = fromItemBasicPricePart_;
          } else {
            result.fromItemBasicPricePart_ = fromItemBasicPricePartBuilder_.build();
          }
          if (minNumberOfItemsBuilder_ == null) {
            result.minNumberOfItems_ = minNumberOfItems_;
          } else {
            result.minNumberOfItems_ = minNumberOfItemsBuilder_.build();
          }
          if (fromBasicPriceSumBuilder_ == null) {
            result.fromBasicPriceSum_ = fromBasicPriceSum_;
          } else {
            result.fromBasicPriceSum_ = fromBasicPriceSumBuilder_.build();
          }
          if (toBasicPriceSumBuilder_ == null) {
            result.toBasicPriceSum_ = toBasicPriceSum_;
          } else {
            result.toBasicPriceSum_ = toBasicPriceSumBuilder_.build();
          }
          if (toQuantityGroupBuilder_ == null) {
            result.toQuantityGroup_ = toQuantityGroup_;
          } else {
            result.toQuantityGroup_ = toQuantityGroupBuilder_.build();
          }
          if (fromItemBasicPriceGroupBuilder_ == null) {
            result.fromItemBasicPriceGroup_ = fromItemBasicPriceGroup_;
          } else {
            result.fromItemBasicPriceGroup_ = fromItemBasicPriceGroupBuilder_.build();
          }
          if (conditionIdBuilder_ == null) {
            result.conditionId_ = conditionId_;
          } else {
            result.conditionId_ = conditionIdBuilder_.build();
          }
          if (itemConditionDescriptionBuilder_ == null) {
            result.itemConditionDescription_ = itemConditionDescription_;
          } else {
            result.itemConditionDescription_ = itemConditionDescriptionBuilder_.build();
          }
          if (toItemBasicPriceBuilder_ == null) {
            result.toItemBasicPrice_ = toItemBasicPrice_;
          } else {
            result.toItemBasicPrice_ = toItemBasicPriceBuilder_.build();
          }
          if (toQuantityPartBuilder_ == null) {
            result.toQuantityPart_ = toQuantityPart_;
          } else {
            result.toQuantityPart_ = toQuantityPartBuilder_.build();
          }
          if (fromQuantityPartBuilder_ == null) {
            result.fromQuantityPart_ = fromQuantityPart_;
          } else {
            result.fromQuantityPart_ = fromQuantityPartBuilder_.build();
          }
          if (minNumberOfItemsGroupBuilder_ == null) {
            result.minNumberOfItemsGroup_ = minNumberOfItemsGroup_;
          } else {
            result.minNumberOfItemsGroup_ = minNumberOfItemsGroupBuilder_.build();
          }
          if (inheritDepthBuilder_ == null) {
            result.inheritDepth_ = inheritDepth_;
          } else {
            result.inheritDepth_ = inheritDepthBuilder_.build();
          }
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row) {
            return mergeFrom((io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row other) {
          if (other == io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.getDefaultInstance()) return this;
          if (other.getRowId() != 0) {
            setRowId(other.getRowId());
          }
          if (other.hasConditionDescription()) {
            mergeConditionDescription(other.getConditionDescription());
          }
          if (other.hasCondition1()) {
            mergeCondition1(other.getCondition1());
          }
          if (other.hasCondition2()) {
            mergeCondition2(other.getCondition2());
          }
          if (other.hasToBasicPriceSumGroup()) {
            mergeToBasicPriceSumGroup(other.getToBasicPriceSumGroup());
          }
          if (other.hasRecursiveEvaluation()) {
            mergeRecursiveEvaluation(other.getRecursiveEvaluation());
          }
          if (other.hasToBasicPriceSumPart()) {
            mergeToBasicPriceSumPart(other.getToBasicPriceSumPart());
          }
          if (other.hasMaxNumberOfItemsGroup()) {
            mergeMaxNumberOfItemsGroup(other.getMaxNumberOfItemsGroup());
          }
          if (other.hasDomainTreeNodeIds()) {
            mergeDomainTreeNodeIds(other.getDomainTreeNodeIds());
          }
          if (other.hasNodeCharacteristicId()) {
            mergeNodeCharacteristicId(other.getNodeCharacteristicId());
          }
          if (other.hasItemConditionPartId()) {
            mergeItemConditionPartId(other.getItemConditionPartId());
          }
          if (other.hasFromBasicPriceSumPart()) {
            mergeFromBasicPriceSumPart(other.getFromBasicPriceSumPart());
          }
          if (other.hasToQuantity()) {
            mergeToQuantity(other.getToQuantity());
          }
          if (other.hasFromQuantityGroup()) {
            mergeFromQuantityGroup(other.getFromQuantityGroup());
          }
          if (other.hasItemConditionId()) {
            mergeItemConditionId(other.getItemConditionId());
          }
          if (other.hasMaxNumberOfItems()) {
            mergeMaxNumberOfItems(other.getMaxNumberOfItems());
          }
          if (other.hasCombineGroupsWithANDOperator()) {
            mergeCombineGroupsWithANDOperator(other.getCombineGroupsWithANDOperator());
          }
          if (other.hasFromBasicPriceSumGroup()) {
            mergeFromBasicPriceSumGroup(other.getFromBasicPriceSumGroup());
          }
          if (other.hasToItemBasicPricePart()) {
            mergeToItemBasicPricePart(other.getToItemBasicPricePart());
          }
          if (other.hasItemConditionPartDescription()) {
            mergeItemConditionPartDescription(other.getItemConditionPartDescription());
          }
          if (other.hasLevelIds()) {
            mergeLevelIds(other.getLevelIds());
          }
          if (other.hasItemConditionGroupId()) {
            mergeItemConditionGroupId(other.getItemConditionGroupId());
          }
          if (other.hasExtendedItemCondGroupDescr()) {
            mergeExtendedItemCondGroupDescr(other.getExtendedItemCondGroupDescr());
          }
          if (other.hasFromQuantity()) {
            mergeFromQuantity(other.getFromQuantity());
          }
          if (other.hasFromItemBasicPrice()) {
            mergeFromItemBasicPrice(other.getFromItemBasicPrice());
          }
          if (other.hasItemGroupSortNo()) {
            mergeItemGroupSortNo(other.getItemGroupSortNo());
          }
          if (other.hasOperator1()) {
            mergeOperator1(other.getOperator1());
          }
          if (other.hasOperator2()) {
            mergeOperator2(other.getOperator2());
          }
          if (other.hasItemConditionGroupDescription()) {
            mergeItemConditionGroupDescription(other.getItemConditionGroupDescription());
          }
          if (other.hasCombinePartsWithANDOperator()) {
            mergeCombinePartsWithANDOperator(other.getCombinePartsWithANDOperator());
          }
          if (other.hasMinNumberOfItemsPart()) {
            mergeMinNumberOfItemsPart(other.getMinNumberOfItemsPart());
          }
          if (other.hasItemPartSortNo()) {
            mergeItemPartSortNo(other.getItemPartSortNo());
          }
          if (other.hasToItemBasicPriceGroup()) {
            mergeToItemBasicPriceGroup(other.getToItemBasicPriceGroup());
          }
          if (other.hasExtendedItemCondPartDescr()) {
            mergeExtendedItemCondPartDescr(other.getExtendedItemCondPartDescr());
          }
          if (other.hasMaxNumberOfItemsPart()) {
            mergeMaxNumberOfItemsPart(other.getMaxNumberOfItemsPart());
          }
          if (other.hasFromItemBasicPricePart()) {
            mergeFromItemBasicPricePart(other.getFromItemBasicPricePart());
          }
          if (other.hasMinNumberOfItems()) {
            mergeMinNumberOfItems(other.getMinNumberOfItems());
          }
          if (other.hasFromBasicPriceSum()) {
            mergeFromBasicPriceSum(other.getFromBasicPriceSum());
          }
          if (other.hasToBasicPriceSum()) {
            mergeToBasicPriceSum(other.getToBasicPriceSum());
          }
          if (other.hasToQuantityGroup()) {
            mergeToQuantityGroup(other.getToQuantityGroup());
          }
          if (other.hasFromItemBasicPriceGroup()) {
            mergeFromItemBasicPriceGroup(other.getFromItemBasicPriceGroup());
          }
          if (other.hasConditionId()) {
            mergeConditionId(other.getConditionId());
          }
          if (other.hasItemConditionDescription()) {
            mergeItemConditionDescription(other.getItemConditionDescription());
          }
          if (other.hasToItemBasicPrice()) {
            mergeToItemBasicPrice(other.getToItemBasicPrice());
          }
          if (other.hasToQuantityPart()) {
            mergeToQuantityPart(other.getToQuantityPart());
          }
          if (other.hasFromQuantityPart()) {
            mergeFromQuantityPart(other.getFromQuantityPart());
          }
          if (other.hasMinNumberOfItemsGroup()) {
            mergeMinNumberOfItemsGroup(other.getMinNumberOfItemsGroup());
          }
          if (other.hasInheritDepth()) {
            mergeInheritDepth(other.getInheritDepth());
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int rowId_ ;
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public int getRowId() {
          return rowId_;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder setRowId(int value) {
          
          rowId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder clearRowId() {
          
          rowId_ = 0;
          onChanged();
          return this;
        }

        private io.dstore.engine.Values.stringValue conditionDescription_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> conditionDescriptionBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
         *
         * <pre>
         * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
         * </pre>
         */
        public boolean hasConditionDescription() {
          return conditionDescriptionBuilder_ != null || conditionDescription_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
         *
         * <pre>
         * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getConditionDescription() {
          if (conditionDescriptionBuilder_ == null) {
            return conditionDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : conditionDescription_;
          } else {
            return conditionDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
         *
         * <pre>
         * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
         * </pre>
         */
        public Builder setConditionDescription(io.dstore.engine.Values.stringValue value) {
          if (conditionDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            conditionDescription_ = value;
            onChanged();
          } else {
            conditionDescriptionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
         *
         * <pre>
         * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
         * </pre>
         */
        public Builder setConditionDescription(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (conditionDescriptionBuilder_ == null) {
            conditionDescription_ = builderForValue.build();
            onChanged();
          } else {
            conditionDescriptionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
         *
         * <pre>
         * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
         * </pre>
         */
        public Builder mergeConditionDescription(io.dstore.engine.Values.stringValue value) {
          if (conditionDescriptionBuilder_ == null) {
            if (conditionDescription_ != null) {
              conditionDescription_ =
                io.dstore.engine.Values.stringValue.newBuilder(conditionDescription_).mergeFrom(value).buildPartial();
            } else {
              conditionDescription_ = value;
            }
            onChanged();
          } else {
            conditionDescriptionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
         *
         * <pre>
         * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
         * </pre>
         */
        public Builder clearConditionDescription() {
          if (conditionDescriptionBuilder_ == null) {
            conditionDescription_ = null;
            onChanged();
          } else {
            conditionDescription_ = null;
            conditionDescriptionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
         *
         * <pre>
         * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getConditionDescriptionBuilder() {
          
          onChanged();
          return getConditionDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
         *
         * <pre>
         * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getConditionDescriptionOrBuilder() {
          if (conditionDescriptionBuilder_ != null) {
            return conditionDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return conditionDescription_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : conditionDescription_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition_description = 10001;</code>
         *
         * <pre>
         * Bezeichnung der Verkaufs-Aktions-Bedingung (also quasi die Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Artikel-Bedingung "ItemConditionID")
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getConditionDescriptionFieldBuilder() {
          if (conditionDescriptionBuilder_ == null) {
            conditionDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getConditionDescription(),
                    getParentForChildren(),
                    isClean());
            conditionDescription_ = null;
          }
          return conditionDescriptionBuilder_;
        }

        private io.dstore.engine.Values.stringValue condition1_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> condition1Builder_;
        /**
         * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
         * </pre>
         */
        public boolean hasCondition1() {
          return condition1Builder_ != null || condition1_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getCondition1() {
          if (condition1Builder_ == null) {
            return condition1_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : condition1_;
          } else {
            return condition1Builder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
         * </pre>
         */
        public Builder setCondition1(io.dstore.engine.Values.stringValue value) {
          if (condition1Builder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            condition1_ = value;
            onChanged();
          } else {
            condition1Builder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
         * </pre>
         */
        public Builder setCondition1(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (condition1Builder_ == null) {
            condition1_ = builderForValue.build();
            onChanged();
          } else {
            condition1Builder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
         * </pre>
         */
        public Builder mergeCondition1(io.dstore.engine.Values.stringValue value) {
          if (condition1Builder_ == null) {
            if (condition1_ != null) {
              condition1_ =
                io.dstore.engine.Values.stringValue.newBuilder(condition1_).mergeFrom(value).buildPartial();
            } else {
              condition1_ = value;
            }
            onChanged();
          } else {
            condition1Builder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
         * </pre>
         */
        public Builder clearCondition1() {
          if (condition1Builder_ == null) {
            condition1_ = null;
            onChanged();
          } else {
            condition1_ = null;
            condition1Builder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getCondition1Builder() {
          
          onChanged();
          return getCondition1FieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getCondition1OrBuilder() {
          if (condition1Builder_ != null) {
            return condition1Builder_.getMessageOrBuilder();
          } else {
            return condition1_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : condition1_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition1 = 10002;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getCondition1FieldBuilder() {
          if (condition1Builder_ == null) {
            condition1Builder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getCondition1(),
                    getParentForChildren(),
                    isClean());
            condition1_ = null;
          }
          return condition1Builder_;
        }

        private io.dstore.engine.Values.stringValue condition2_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> condition2Builder_;
        /**
         * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
         * </pre>
         */
        public boolean hasCondition2() {
          return condition2Builder_ != null || condition2_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getCondition2() {
          if (condition2Builder_ == null) {
            return condition2_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : condition2_;
          } else {
            return condition2Builder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
         * </pre>
         */
        public Builder setCondition2(io.dstore.engine.Values.stringValue value) {
          if (condition2Builder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            condition2_ = value;
            onChanged();
          } else {
            condition2Builder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
         * </pre>
         */
        public Builder setCondition2(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (condition2Builder_ == null) {
            condition2_ = builderForValue.build();
            onChanged();
          } else {
            condition2Builder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
         * </pre>
         */
        public Builder mergeCondition2(io.dstore.engine.Values.stringValue value) {
          if (condition2Builder_ == null) {
            if (condition2_ != null) {
              condition2_ =
                io.dstore.engine.Values.stringValue.newBuilder(condition2_).mergeFrom(value).buildPartial();
            } else {
              condition2_ = value;
            }
            onChanged();
          } else {
            condition2Builder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
         * </pre>
         */
        public Builder clearCondition2() {
          if (condition2Builder_ == null) {
            condition2_ = null;
            onChanged();
          } else {
            condition2_ = null;
            condition2Builder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getCondition2Builder() {
          
          onChanged();
          return getCondition2FieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getCondition2OrBuilder() {
          if (condition2Builder_ != null) {
            return condition2Builder_.getMessageOrBuilder();
          } else {
            return condition2_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : condition2_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue condition2 = 10003;</code>
         *
         * <pre>
         * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getCondition2FieldBuilder() {
          if (condition2Builder_ == null) {
            condition2Builder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getCondition2(),
                    getParentForChildren(),
                    isClean());
            condition2_ = null;
          }
          return condition2Builder_;
        }

        private io.dstore.engine.Values.decimalValue toBasicPriceSumGroup_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> toBasicPriceSumGroupBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public boolean hasToBasicPriceSumGroup() {
          return toBasicPriceSumGroupBuilder_ != null || toBasicPriceSumGroup_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getToBasicPriceSumGroup() {
          if (toBasicPriceSumGroupBuilder_ == null) {
            return toBasicPriceSumGroup_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : toBasicPriceSumGroup_;
          } else {
            return toBasicPriceSumGroupBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public Builder setToBasicPriceSumGroup(io.dstore.engine.Values.decimalValue value) {
          if (toBasicPriceSumGroupBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            toBasicPriceSumGroup_ = value;
            onChanged();
          } else {
            toBasicPriceSumGroupBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public Builder setToBasicPriceSumGroup(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (toBasicPriceSumGroupBuilder_ == null) {
            toBasicPriceSumGroup_ = builderForValue.build();
            onChanged();
          } else {
            toBasicPriceSumGroupBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public Builder mergeToBasicPriceSumGroup(io.dstore.engine.Values.decimalValue value) {
          if (toBasicPriceSumGroupBuilder_ == null) {
            if (toBasicPriceSumGroup_ != null) {
              toBasicPriceSumGroup_ =
                io.dstore.engine.Values.decimalValue.newBuilder(toBasicPriceSumGroup_).mergeFrom(value).buildPartial();
            } else {
              toBasicPriceSumGroup_ = value;
            }
            onChanged();
          } else {
            toBasicPriceSumGroupBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public Builder clearToBasicPriceSumGroup() {
          if (toBasicPriceSumGroupBuilder_ == null) {
            toBasicPriceSumGroup_ = null;
            onChanged();
          } else {
            toBasicPriceSumGroup_ = null;
            toBasicPriceSumGroupBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getToBasicPriceSumGroupBuilder() {
          
          onChanged();
          return getToBasicPriceSumGroupFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getToBasicPriceSumGroupOrBuilder() {
          if (toBasicPriceSumGroupBuilder_ != null) {
            return toBasicPriceSumGroupBuilder_.getMessageOrBuilder();
          } else {
            return toBasicPriceSumGroup_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : toBasicPriceSumGroup_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_group = 10004;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getToBasicPriceSumGroupFieldBuilder() {
          if (toBasicPriceSumGroupBuilder_ == null) {
            toBasicPriceSumGroupBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getToBasicPriceSumGroup(),
                    getParentForChildren(),
                    isClean());
            toBasicPriceSumGroup_ = null;
          }
          return toBasicPriceSumGroupBuilder_;
        }

        private io.dstore.engine.Values.integerValue recursiveEvaluation_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> recursiveEvaluationBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
         *
         * <pre>
         * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
         * </pre>
         */
        public boolean hasRecursiveEvaluation() {
          return recursiveEvaluationBuilder_ != null || recursiveEvaluation_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
         *
         * <pre>
         * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getRecursiveEvaluation() {
          if (recursiveEvaluationBuilder_ == null) {
            return recursiveEvaluation_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : recursiveEvaluation_;
          } else {
            return recursiveEvaluationBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
         *
         * <pre>
         * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
         * </pre>
         */
        public Builder setRecursiveEvaluation(io.dstore.engine.Values.integerValue value) {
          if (recursiveEvaluationBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            recursiveEvaluation_ = value;
            onChanged();
          } else {
            recursiveEvaluationBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
         *
         * <pre>
         * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
         * </pre>
         */
        public Builder setRecursiveEvaluation(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (recursiveEvaluationBuilder_ == null) {
            recursiveEvaluation_ = builderForValue.build();
            onChanged();
          } else {
            recursiveEvaluationBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
         *
         * <pre>
         * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
         * </pre>
         */
        public Builder mergeRecursiveEvaluation(io.dstore.engine.Values.integerValue value) {
          if (recursiveEvaluationBuilder_ == null) {
            if (recursiveEvaluation_ != null) {
              recursiveEvaluation_ =
                io.dstore.engine.Values.integerValue.newBuilder(recursiveEvaluation_).mergeFrom(value).buildPartial();
            } else {
              recursiveEvaluation_ = value;
            }
            onChanged();
          } else {
            recursiveEvaluationBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
         *
         * <pre>
         * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
         * </pre>
         */
        public Builder clearRecursiveEvaluation() {
          if (recursiveEvaluationBuilder_ == null) {
            recursiveEvaluation_ = null;
            onChanged();
          } else {
            recursiveEvaluation_ = null;
            recursiveEvaluationBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
         *
         * <pre>
         * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getRecursiveEvaluationBuilder() {
          
          onChanged();
          return getRecursiveEvaluationFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
         *
         * <pre>
         * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getRecursiveEvaluationOrBuilder() {
          if (recursiveEvaluationBuilder_ != null) {
            return recursiveEvaluationBuilder_.getMessageOrBuilder();
          } else {
            return recursiveEvaluation_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : recursiveEvaluation_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue recursive_evaluation = 10005;</code>
         *
         * <pre>
         * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getRecursiveEvaluationFieldBuilder() {
          if (recursiveEvaluationBuilder_ == null) {
            recursiveEvaluationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getRecursiveEvaluation(),
                    getParentForChildren(),
                    isClean());
            recursiveEvaluation_ = null;
          }
          return recursiveEvaluationBuilder_;
        }

        private io.dstore.engine.Values.decimalValue toBasicPriceSumPart_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> toBasicPriceSumPartBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public boolean hasToBasicPriceSumPart() {
          return toBasicPriceSumPartBuilder_ != null || toBasicPriceSumPart_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getToBasicPriceSumPart() {
          if (toBasicPriceSumPartBuilder_ == null) {
            return toBasicPriceSumPart_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : toBasicPriceSumPart_;
          } else {
            return toBasicPriceSumPartBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public Builder setToBasicPriceSumPart(io.dstore.engine.Values.decimalValue value) {
          if (toBasicPriceSumPartBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            toBasicPriceSumPart_ = value;
            onChanged();
          } else {
            toBasicPriceSumPartBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public Builder setToBasicPriceSumPart(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (toBasicPriceSumPartBuilder_ == null) {
            toBasicPriceSumPart_ = builderForValue.build();
            onChanged();
          } else {
            toBasicPriceSumPartBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public Builder mergeToBasicPriceSumPart(io.dstore.engine.Values.decimalValue value) {
          if (toBasicPriceSumPartBuilder_ == null) {
            if (toBasicPriceSumPart_ != null) {
              toBasicPriceSumPart_ =
                io.dstore.engine.Values.decimalValue.newBuilder(toBasicPriceSumPart_).mergeFrom(value).buildPartial();
            } else {
              toBasicPriceSumPart_ = value;
            }
            onChanged();
          } else {
            toBasicPriceSumPartBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public Builder clearToBasicPriceSumPart() {
          if (toBasicPriceSumPartBuilder_ == null) {
            toBasicPriceSumPart_ = null;
            onChanged();
          } else {
            toBasicPriceSumPart_ = null;
            toBasicPriceSumPartBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getToBasicPriceSumPartBuilder() {
          
          onChanged();
          return getToBasicPriceSumPartFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getToBasicPriceSumPartOrBuilder() {
          if (toBasicPriceSumPartBuilder_ != null) {
            return toBasicPriceSumPartBuilder_.getMessageOrBuilder();
          } else {
            return toBasicPriceSumPart_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : toBasicPriceSumPart_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum_part = 10006;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getToBasicPriceSumPartFieldBuilder() {
          if (toBasicPriceSumPartBuilder_ == null) {
            toBasicPriceSumPartBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getToBasicPriceSumPart(),
                    getParentForChildren(),
                    isClean());
            toBasicPriceSumPart_ = null;
          }
          return toBasicPriceSumPartBuilder_;
        }

        private io.dstore.engine.Values.integerValue maxNumberOfItemsGroup_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> maxNumberOfItemsGroupBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasMaxNumberOfItemsGroup() {
          return maxNumberOfItemsGroupBuilder_ != null || maxNumberOfItemsGroup_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getMaxNumberOfItemsGroup() {
          if (maxNumberOfItemsGroupBuilder_ == null) {
            return maxNumberOfItemsGroup_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : maxNumberOfItemsGroup_;
          } else {
            return maxNumberOfItemsGroupBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setMaxNumberOfItemsGroup(io.dstore.engine.Values.integerValue value) {
          if (maxNumberOfItemsGroupBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            maxNumberOfItemsGroup_ = value;
            onChanged();
          } else {
            maxNumberOfItemsGroupBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setMaxNumberOfItemsGroup(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (maxNumberOfItemsGroupBuilder_ == null) {
            maxNumberOfItemsGroup_ = builderForValue.build();
            onChanged();
          } else {
            maxNumberOfItemsGroupBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeMaxNumberOfItemsGroup(io.dstore.engine.Values.integerValue value) {
          if (maxNumberOfItemsGroupBuilder_ == null) {
            if (maxNumberOfItemsGroup_ != null) {
              maxNumberOfItemsGroup_ =
                io.dstore.engine.Values.integerValue.newBuilder(maxNumberOfItemsGroup_).mergeFrom(value).buildPartial();
            } else {
              maxNumberOfItemsGroup_ = value;
            }
            onChanged();
          } else {
            maxNumberOfItemsGroupBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearMaxNumberOfItemsGroup() {
          if (maxNumberOfItemsGroupBuilder_ == null) {
            maxNumberOfItemsGroup_ = null;
            onChanged();
          } else {
            maxNumberOfItemsGroup_ = null;
            maxNumberOfItemsGroupBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getMaxNumberOfItemsGroupBuilder() {
          
          onChanged();
          return getMaxNumberOfItemsGroupFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getMaxNumberOfItemsGroupOrBuilder() {
          if (maxNumberOfItemsGroupBuilder_ != null) {
            return maxNumberOfItemsGroupBuilder_.getMessageOrBuilder();
          } else {
            return maxNumberOfItemsGroup_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : maxNumberOfItemsGroup_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_group = 10007;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getMaxNumberOfItemsGroupFieldBuilder() {
          if (maxNumberOfItemsGroupBuilder_ == null) {
            maxNumberOfItemsGroupBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getMaxNumberOfItemsGroup(),
                    getParentForChildren(),
                    isClean());
            maxNumberOfItemsGroup_ = null;
          }
          return maxNumberOfItemsGroupBuilder_;
        }

        private io.dstore.engine.Values.stringValue domainTreeNodeIds_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> domainTreeNodeIdsBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
         * </pre>
         */
        public boolean hasDomainTreeNodeIds() {
          return domainTreeNodeIdsBuilder_ != null || domainTreeNodeIds_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getDomainTreeNodeIds() {
          if (domainTreeNodeIdsBuilder_ == null) {
            return domainTreeNodeIds_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : domainTreeNodeIds_;
          } else {
            return domainTreeNodeIdsBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
         * </pre>
         */
        public Builder setDomainTreeNodeIds(io.dstore.engine.Values.stringValue value) {
          if (domainTreeNodeIdsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            domainTreeNodeIds_ = value;
            onChanged();
          } else {
            domainTreeNodeIdsBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
         * </pre>
         */
        public Builder setDomainTreeNodeIds(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (domainTreeNodeIdsBuilder_ == null) {
            domainTreeNodeIds_ = builderForValue.build();
            onChanged();
          } else {
            domainTreeNodeIdsBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
         * </pre>
         */
        public Builder mergeDomainTreeNodeIds(io.dstore.engine.Values.stringValue value) {
          if (domainTreeNodeIdsBuilder_ == null) {
            if (domainTreeNodeIds_ != null) {
              domainTreeNodeIds_ =
                io.dstore.engine.Values.stringValue.newBuilder(domainTreeNodeIds_).mergeFrom(value).buildPartial();
            } else {
              domainTreeNodeIds_ = value;
            }
            onChanged();
          } else {
            domainTreeNodeIdsBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
         * </pre>
         */
        public Builder clearDomainTreeNodeIds() {
          if (domainTreeNodeIdsBuilder_ == null) {
            domainTreeNodeIds_ = null;
            onChanged();
          } else {
            domainTreeNodeIds_ = null;
            domainTreeNodeIdsBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getDomainTreeNodeIdsBuilder() {
          
          onChanged();
          return getDomainTreeNodeIdsFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getDomainTreeNodeIdsOrBuilder() {
          if (domainTreeNodeIdsBuilder_ != null) {
            return domainTreeNodeIdsBuilder_.getMessageOrBuilder();
          } else {
            return domainTreeNodeIds_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : domainTreeNodeIds_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue domain_tree_node_ids = 10008;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getDomainTreeNodeIdsFieldBuilder() {
          if (domainTreeNodeIdsBuilder_ == null) {
            domainTreeNodeIdsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getDomainTreeNodeIds(),
                    getParentForChildren(),
                    isClean());
            domainTreeNodeIds_ = null;
          }
          return domainTreeNodeIdsBuilder_;
        }

        private io.dstore.engine.Values.integerValue nodeCharacteristicId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> nodeCharacteristicIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
         *
         * <pre>
         * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
         * </pre>
         */
        public boolean hasNodeCharacteristicId() {
          return nodeCharacteristicIdBuilder_ != null || nodeCharacteristicId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
         *
         * <pre>
         * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getNodeCharacteristicId() {
          if (nodeCharacteristicIdBuilder_ == null) {
            return nodeCharacteristicId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : nodeCharacteristicId_;
          } else {
            return nodeCharacteristicIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
         *
         * <pre>
         * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
         * </pre>
         */
        public Builder setNodeCharacteristicId(io.dstore.engine.Values.integerValue value) {
          if (nodeCharacteristicIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            nodeCharacteristicId_ = value;
            onChanged();
          } else {
            nodeCharacteristicIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
         *
         * <pre>
         * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
         * </pre>
         */
        public Builder setNodeCharacteristicId(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (nodeCharacteristicIdBuilder_ == null) {
            nodeCharacteristicId_ = builderForValue.build();
            onChanged();
          } else {
            nodeCharacteristicIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
         *
         * <pre>
         * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
         * </pre>
         */
        public Builder mergeNodeCharacteristicId(io.dstore.engine.Values.integerValue value) {
          if (nodeCharacteristicIdBuilder_ == null) {
            if (nodeCharacteristicId_ != null) {
              nodeCharacteristicId_ =
                io.dstore.engine.Values.integerValue.newBuilder(nodeCharacteristicId_).mergeFrom(value).buildPartial();
            } else {
              nodeCharacteristicId_ = value;
            }
            onChanged();
          } else {
            nodeCharacteristicIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
         *
         * <pre>
         * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
         * </pre>
         */
        public Builder clearNodeCharacteristicId() {
          if (nodeCharacteristicIdBuilder_ == null) {
            nodeCharacteristicId_ = null;
            onChanged();
          } else {
            nodeCharacteristicId_ = null;
            nodeCharacteristicIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
         *
         * <pre>
         * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getNodeCharacteristicIdBuilder() {
          
          onChanged();
          return getNodeCharacteristicIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
         *
         * <pre>
         * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getNodeCharacteristicIdOrBuilder() {
          if (nodeCharacteristicIdBuilder_ != null) {
            return nodeCharacteristicIdBuilder_.getMessageOrBuilder();
          } else {
            return nodeCharacteristicId_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : nodeCharacteristicId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue node_characteristic_id = 10009;</code>
         *
         * <pre>
         * ID eines Merkmals. Um "ItemConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getNodeCharacteristicIdFieldBuilder() {
          if (nodeCharacteristicIdBuilder_ == null) {
            nodeCharacteristicIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getNodeCharacteristicId(),
                    getParentForChildren(),
                    isClean());
            nodeCharacteristicId_ = null;
          }
          return nodeCharacteristicIdBuilder_;
        }

        private io.dstore.engine.Values.integerValue itemConditionPartId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> itemConditionPartIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
         *
         * <pre>
         * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
         * </pre>
         */
        public boolean hasItemConditionPartId() {
          return itemConditionPartIdBuilder_ != null || itemConditionPartId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
         *
         * <pre>
         * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getItemConditionPartId() {
          if (itemConditionPartIdBuilder_ == null) {
            return itemConditionPartId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : itemConditionPartId_;
          } else {
            return itemConditionPartIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
         *
         * <pre>
         * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
         * </pre>
         */
        public Builder setItemConditionPartId(io.dstore.engine.Values.integerValue value) {
          if (itemConditionPartIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            itemConditionPartId_ = value;
            onChanged();
          } else {
            itemConditionPartIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
         *
         * <pre>
         * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
         * </pre>
         */
        public Builder setItemConditionPartId(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (itemConditionPartIdBuilder_ == null) {
            itemConditionPartId_ = builderForValue.build();
            onChanged();
          } else {
            itemConditionPartIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
         *
         * <pre>
         * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
         * </pre>
         */
        public Builder mergeItemConditionPartId(io.dstore.engine.Values.integerValue value) {
          if (itemConditionPartIdBuilder_ == null) {
            if (itemConditionPartId_ != null) {
              itemConditionPartId_ =
                io.dstore.engine.Values.integerValue.newBuilder(itemConditionPartId_).mergeFrom(value).buildPartial();
            } else {
              itemConditionPartId_ = value;
            }
            onChanged();
          } else {
            itemConditionPartIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
         *
         * <pre>
         * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
         * </pre>
         */
        public Builder clearItemConditionPartId() {
          if (itemConditionPartIdBuilder_ == null) {
            itemConditionPartId_ = null;
            onChanged();
          } else {
            itemConditionPartId_ = null;
            itemConditionPartIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
         *
         * <pre>
         * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getItemConditionPartIdBuilder() {
          
          onChanged();
          return getItemConditionPartIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
         *
         * <pre>
         * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getItemConditionPartIdOrBuilder() {
          if (itemConditionPartIdBuilder_ != null) {
            return itemConditionPartIdBuilder_.getMessageOrBuilder();
          } else {
            return itemConditionPartId_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : itemConditionPartId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_part_id = 10010;</code>
         *
         * <pre>
         * ID eines Bedingungs-Teils, das Bestandteil von "ItemConditionGroupID" ist
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getItemConditionPartIdFieldBuilder() {
          if (itemConditionPartIdBuilder_ == null) {
            itemConditionPartIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getItemConditionPartId(),
                    getParentForChildren(),
                    isClean());
            itemConditionPartId_ = null;
          }
          return itemConditionPartIdBuilder_;
        }

        private io.dstore.engine.Values.decimalValue fromBasicPriceSumPart_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> fromBasicPriceSumPartBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public boolean hasFromBasicPriceSumPart() {
          return fromBasicPriceSumPartBuilder_ != null || fromBasicPriceSumPart_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getFromBasicPriceSumPart() {
          if (fromBasicPriceSumPartBuilder_ == null) {
            return fromBasicPriceSumPart_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromBasicPriceSumPart_;
          } else {
            return fromBasicPriceSumPartBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public Builder setFromBasicPriceSumPart(io.dstore.engine.Values.decimalValue value) {
          if (fromBasicPriceSumPartBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            fromBasicPriceSumPart_ = value;
            onChanged();
          } else {
            fromBasicPriceSumPartBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public Builder setFromBasicPriceSumPart(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (fromBasicPriceSumPartBuilder_ == null) {
            fromBasicPriceSumPart_ = builderForValue.build();
            onChanged();
          } else {
            fromBasicPriceSumPartBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public Builder mergeFromBasicPriceSumPart(io.dstore.engine.Values.decimalValue value) {
          if (fromBasicPriceSumPartBuilder_ == null) {
            if (fromBasicPriceSumPart_ != null) {
              fromBasicPriceSumPart_ =
                io.dstore.engine.Values.decimalValue.newBuilder(fromBasicPriceSumPart_).mergeFrom(value).buildPartial();
            } else {
              fromBasicPriceSumPart_ = value;
            }
            onChanged();
          } else {
            fromBasicPriceSumPartBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public Builder clearFromBasicPriceSumPart() {
          if (fromBasicPriceSumPartBuilder_ == null) {
            fromBasicPriceSumPart_ = null;
            onChanged();
          } else {
            fromBasicPriceSumPart_ = null;
            fromBasicPriceSumPartBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getFromBasicPriceSumPartBuilder() {
          
          onChanged();
          return getFromBasicPriceSumPartFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getFromBasicPriceSumPartOrBuilder() {
          if (fromBasicPriceSumPartBuilder_ != null) {
            return fromBasicPriceSumPartBuilder_.getMessageOrBuilder();
          } else {
            return fromBasicPriceSumPart_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromBasicPriceSumPart_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_part = 10011;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getFromBasicPriceSumPartFieldBuilder() {
          if (fromBasicPriceSumPartBuilder_ == null) {
            fromBasicPriceSumPartBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getFromBasicPriceSumPart(),
                    getParentForChildren(),
                    isClean());
            fromBasicPriceSumPart_ = null;
          }
          return fromBasicPriceSumPartBuilder_;
        }

        private io.dstore.engine.Values.integerValue toQuantity_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> toQuantityBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasToQuantity() {
          return toQuantityBuilder_ != null || toQuantity_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getToQuantity() {
          if (toQuantityBuilder_ == null) {
            return toQuantity_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : toQuantity_;
          } else {
            return toQuantityBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setToQuantity(io.dstore.engine.Values.integerValue value) {
          if (toQuantityBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            toQuantity_ = value;
            onChanged();
          } else {
            toQuantityBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setToQuantity(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (toQuantityBuilder_ == null) {
            toQuantity_ = builderForValue.build();
            onChanged();
          } else {
            toQuantityBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeToQuantity(io.dstore.engine.Values.integerValue value) {
          if (toQuantityBuilder_ == null) {
            if (toQuantity_ != null) {
              toQuantity_ =
                io.dstore.engine.Values.integerValue.newBuilder(toQuantity_).mergeFrom(value).buildPartial();
            } else {
              toQuantity_ = value;
            }
            onChanged();
          } else {
            toQuantityBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearToQuantity() {
          if (toQuantityBuilder_ == null) {
            toQuantity_ = null;
            onChanged();
          } else {
            toQuantity_ = null;
            toQuantityBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getToQuantityBuilder() {
          
          onChanged();
          return getToQuantityFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getToQuantityOrBuilder() {
          if (toQuantityBuilder_ != null) {
            return toQuantityBuilder_.getMessageOrBuilder();
          } else {
            return toQuantity_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : toQuantity_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity = 10012;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getToQuantityFieldBuilder() {
          if (toQuantityBuilder_ == null) {
            toQuantityBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getToQuantity(),
                    getParentForChildren(),
                    isClean());
            toQuantity_ = null;
          }
          return toQuantityBuilder_;
        }

        private io.dstore.engine.Values.integerValue fromQuantityGroup_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> fromQuantityGroupBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasFromQuantityGroup() {
          return fromQuantityGroupBuilder_ != null || fromQuantityGroup_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getFromQuantityGroup() {
          if (fromQuantityGroupBuilder_ == null) {
            return fromQuantityGroup_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : fromQuantityGroup_;
          } else {
            return fromQuantityGroupBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setFromQuantityGroup(io.dstore.engine.Values.integerValue value) {
          if (fromQuantityGroupBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            fromQuantityGroup_ = value;
            onChanged();
          } else {
            fromQuantityGroupBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setFromQuantityGroup(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (fromQuantityGroupBuilder_ == null) {
            fromQuantityGroup_ = builderForValue.build();
            onChanged();
          } else {
            fromQuantityGroupBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeFromQuantityGroup(io.dstore.engine.Values.integerValue value) {
          if (fromQuantityGroupBuilder_ == null) {
            if (fromQuantityGroup_ != null) {
              fromQuantityGroup_ =
                io.dstore.engine.Values.integerValue.newBuilder(fromQuantityGroup_).mergeFrom(value).buildPartial();
            } else {
              fromQuantityGroup_ = value;
            }
            onChanged();
          } else {
            fromQuantityGroupBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearFromQuantityGroup() {
          if (fromQuantityGroupBuilder_ == null) {
            fromQuantityGroup_ = null;
            onChanged();
          } else {
            fromQuantityGroup_ = null;
            fromQuantityGroupBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getFromQuantityGroupBuilder() {
          
          onChanged();
          return getFromQuantityGroupFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getFromQuantityGroupOrBuilder() {
          if (fromQuantityGroupBuilder_ != null) {
            return fromQuantityGroupBuilder_.getMessageOrBuilder();
          } else {
            return fromQuantityGroup_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : fromQuantityGroup_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_group = 10013;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getFromQuantityGroupFieldBuilder() {
          if (fromQuantityGroupBuilder_ == null) {
            fromQuantityGroupBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getFromQuantityGroup(),
                    getParentForChildren(),
                    isClean());
            fromQuantityGroup_ = null;
          }
          return fromQuantityGroupBuilder_;
        }

        private io.dstore.engine.Values.integerValue itemConditionId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> itemConditionIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
         *
         * <pre>
         * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
         * </pre>
         */
        public boolean hasItemConditionId() {
          return itemConditionIdBuilder_ != null || itemConditionId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
         *
         * <pre>
         * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getItemConditionId() {
          if (itemConditionIdBuilder_ == null) {
            return itemConditionId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : itemConditionId_;
          } else {
            return itemConditionIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
         *
         * <pre>
         * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
         * </pre>
         */
        public Builder setItemConditionId(io.dstore.engine.Values.integerValue value) {
          if (itemConditionIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            itemConditionId_ = value;
            onChanged();
          } else {
            itemConditionIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
         *
         * <pre>
         * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
         * </pre>
         */
        public Builder setItemConditionId(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (itemConditionIdBuilder_ == null) {
            itemConditionId_ = builderForValue.build();
            onChanged();
          } else {
            itemConditionIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
         *
         * <pre>
         * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
         * </pre>
         */
        public Builder mergeItemConditionId(io.dstore.engine.Values.integerValue value) {
          if (itemConditionIdBuilder_ == null) {
            if (itemConditionId_ != null) {
              itemConditionId_ =
                io.dstore.engine.Values.integerValue.newBuilder(itemConditionId_).mergeFrom(value).buildPartial();
            } else {
              itemConditionId_ = value;
            }
            onChanged();
          } else {
            itemConditionIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
         *
         * <pre>
         * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
         * </pre>
         */
        public Builder clearItemConditionId() {
          if (itemConditionIdBuilder_ == null) {
            itemConditionId_ = null;
            onChanged();
          } else {
            itemConditionId_ = null;
            itemConditionIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
         *
         * <pre>
         * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getItemConditionIdBuilder() {
          
          onChanged();
          return getItemConditionIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
         *
         * <pre>
         * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getItemConditionIdOrBuilder() {
          if (itemConditionIdBuilder_ != null) {
            return itemConditionIdBuilder_.getMessageOrBuilder();
          } else {
            return itemConditionId_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : itemConditionId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_id = 10014;</code>
         *
         * <pre>
         * ID der Artikel-Bedingung, auf der "ConditionID" basiert - natürlich identisch mit "&#64;ItemConditionID" wenn angegeben
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getItemConditionIdFieldBuilder() {
          if (itemConditionIdBuilder_ == null) {
            itemConditionIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getItemConditionId(),
                    getParentForChildren(),
                    isClean());
            itemConditionId_ = null;
          }
          return itemConditionIdBuilder_;
        }

        private io.dstore.engine.Values.integerValue maxNumberOfItems_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> maxNumberOfItemsBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasMaxNumberOfItems() {
          return maxNumberOfItemsBuilder_ != null || maxNumberOfItems_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getMaxNumberOfItems() {
          if (maxNumberOfItemsBuilder_ == null) {
            return maxNumberOfItems_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : maxNumberOfItems_;
          } else {
            return maxNumberOfItemsBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setMaxNumberOfItems(io.dstore.engine.Values.integerValue value) {
          if (maxNumberOfItemsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            maxNumberOfItems_ = value;
            onChanged();
          } else {
            maxNumberOfItemsBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setMaxNumberOfItems(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (maxNumberOfItemsBuilder_ == null) {
            maxNumberOfItems_ = builderForValue.build();
            onChanged();
          } else {
            maxNumberOfItemsBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeMaxNumberOfItems(io.dstore.engine.Values.integerValue value) {
          if (maxNumberOfItemsBuilder_ == null) {
            if (maxNumberOfItems_ != null) {
              maxNumberOfItems_ =
                io.dstore.engine.Values.integerValue.newBuilder(maxNumberOfItems_).mergeFrom(value).buildPartial();
            } else {
              maxNumberOfItems_ = value;
            }
            onChanged();
          } else {
            maxNumberOfItemsBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearMaxNumberOfItems() {
          if (maxNumberOfItemsBuilder_ == null) {
            maxNumberOfItems_ = null;
            onChanged();
          } else {
            maxNumberOfItems_ = null;
            maxNumberOfItemsBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getMaxNumberOfItemsBuilder() {
          
          onChanged();
          return getMaxNumberOfItemsFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getMaxNumberOfItemsOrBuilder() {
          if (maxNumberOfItemsBuilder_ != null) {
            return maxNumberOfItemsBuilder_.getMessageOrBuilder();
          } else {
            return maxNumberOfItems_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : maxNumberOfItems_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items = 10015;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getMaxNumberOfItemsFieldBuilder() {
          if (maxNumberOfItemsBuilder_ == null) {
            maxNumberOfItemsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getMaxNumberOfItems(),
                    getParentForChildren(),
                    isClean());
            maxNumberOfItems_ = null;
          }
          return maxNumberOfItemsBuilder_;
        }

        private io.dstore.engine.Values.booleanValue combineGroupsWithANDOperator_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> combineGroupsWithANDOperatorBuilder_;
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public boolean hasCombineGroupsWithANDOperator() {
          return combineGroupsWithANDOperatorBuilder_ != null || combineGroupsWithANDOperator_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public io.dstore.engine.Values.booleanValue getCombineGroupsWithANDOperator() {
          if (combineGroupsWithANDOperatorBuilder_ == null) {
            return combineGroupsWithANDOperator_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : combineGroupsWithANDOperator_;
          } else {
            return combineGroupsWithANDOperatorBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public Builder setCombineGroupsWithANDOperator(io.dstore.engine.Values.booleanValue value) {
          if (combineGroupsWithANDOperatorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            combineGroupsWithANDOperator_ = value;
            onChanged();
          } else {
            combineGroupsWithANDOperatorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public Builder setCombineGroupsWithANDOperator(
            io.dstore.engine.Values.booleanValue.Builder builderForValue) {
          if (combineGroupsWithANDOperatorBuilder_ == null) {
            combineGroupsWithANDOperator_ = builderForValue.build();
            onChanged();
          } else {
            combineGroupsWithANDOperatorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public Builder mergeCombineGroupsWithANDOperator(io.dstore.engine.Values.booleanValue value) {
          if (combineGroupsWithANDOperatorBuilder_ == null) {
            if (combineGroupsWithANDOperator_ != null) {
              combineGroupsWithANDOperator_ =
                io.dstore.engine.Values.booleanValue.newBuilder(combineGroupsWithANDOperator_).mergeFrom(value).buildPartial();
            } else {
              combineGroupsWithANDOperator_ = value;
            }
            onChanged();
          } else {
            combineGroupsWithANDOperatorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public Builder clearCombineGroupsWithANDOperator() {
          if (combineGroupsWithANDOperatorBuilder_ == null) {
            combineGroupsWithANDOperator_ = null;
            onChanged();
          } else {
            combineGroupsWithANDOperator_ = null;
            combineGroupsWithANDOperatorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public io.dstore.engine.Values.booleanValue.Builder getCombineGroupsWithANDOperatorBuilder() {
          
          onChanged();
          return getCombineGroupsWithANDOperatorFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public io.dstore.engine.Values.booleanValueOrBuilder getCombineGroupsWithANDOperatorOrBuilder() {
          if (combineGroupsWithANDOperatorBuilder_ != null) {
            return combineGroupsWithANDOperatorBuilder_.getMessageOrBuilder();
          } else {
            return combineGroupsWithANDOperator_ == null ?
                io.dstore.engine.Values.booleanValue.getDefaultInstance() : combineGroupsWithANDOperator_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_groups_with_a_n_d_operator = 10016;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionID" zugeordneten (Artikel-)Bedingungs-Gruppen logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> 
            getCombineGroupsWithANDOperatorFieldBuilder() {
          if (combineGroupsWithANDOperatorBuilder_ == null) {
            combineGroupsWithANDOperatorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder>(
                    getCombineGroupsWithANDOperator(),
                    getParentForChildren(),
                    isClean());
            combineGroupsWithANDOperator_ = null;
          }
          return combineGroupsWithANDOperatorBuilder_;
        }

        private io.dstore.engine.Values.decimalValue fromBasicPriceSumGroup_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> fromBasicPriceSumGroupBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public boolean hasFromBasicPriceSumGroup() {
          return fromBasicPriceSumGroupBuilder_ != null || fromBasicPriceSumGroup_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getFromBasicPriceSumGroup() {
          if (fromBasicPriceSumGroupBuilder_ == null) {
            return fromBasicPriceSumGroup_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromBasicPriceSumGroup_;
          } else {
            return fromBasicPriceSumGroupBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public Builder setFromBasicPriceSumGroup(io.dstore.engine.Values.decimalValue value) {
          if (fromBasicPriceSumGroupBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            fromBasicPriceSumGroup_ = value;
            onChanged();
          } else {
            fromBasicPriceSumGroupBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public Builder setFromBasicPriceSumGroup(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (fromBasicPriceSumGroupBuilder_ == null) {
            fromBasicPriceSumGroup_ = builderForValue.build();
            onChanged();
          } else {
            fromBasicPriceSumGroupBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public Builder mergeFromBasicPriceSumGroup(io.dstore.engine.Values.decimalValue value) {
          if (fromBasicPriceSumGroupBuilder_ == null) {
            if (fromBasicPriceSumGroup_ != null) {
              fromBasicPriceSumGroup_ =
                io.dstore.engine.Values.decimalValue.newBuilder(fromBasicPriceSumGroup_).mergeFrom(value).buildPartial();
            } else {
              fromBasicPriceSumGroup_ = value;
            }
            onChanged();
          } else {
            fromBasicPriceSumGroupBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public Builder clearFromBasicPriceSumGroup() {
          if (fromBasicPriceSumGroupBuilder_ == null) {
            fromBasicPriceSumGroup_ = null;
            onChanged();
          } else {
            fromBasicPriceSumGroup_ = null;
            fromBasicPriceSumGroupBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getFromBasicPriceSumGroupBuilder() {
          
          onChanged();
          return getFromBasicPriceSumGroupFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getFromBasicPriceSumGroupOrBuilder() {
          if (fromBasicPriceSumGroupBuilder_ != null) {
            return fromBasicPriceSumGroupBuilder_.getMessageOrBuilder();
          } else {
            return fromBasicPriceSumGroup_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromBasicPriceSumGroup_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum_group = 10017;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jew. "Quantity" multipliziert), die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zw. diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getFromBasicPriceSumGroupFieldBuilder() {
          if (fromBasicPriceSumGroupBuilder_ == null) {
            fromBasicPriceSumGroupBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getFromBasicPriceSumGroup(),
                    getParentForChildren(),
                    isClean());
            fromBasicPriceSumGroup_ = null;
          }
          return fromBasicPriceSumGroupBuilder_;
        }

        private io.dstore.engine.Values.decimalValue toItemBasicPricePart_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> toItemBasicPricePartBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasToItemBasicPricePart() {
          return toItemBasicPricePartBuilder_ != null || toItemBasicPricePart_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getToItemBasicPricePart() {
          if (toItemBasicPricePartBuilder_ == null) {
            return toItemBasicPricePart_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : toItemBasicPricePart_;
          } else {
            return toItemBasicPricePartBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setToItemBasicPricePart(io.dstore.engine.Values.decimalValue value) {
          if (toItemBasicPricePartBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            toItemBasicPricePart_ = value;
            onChanged();
          } else {
            toItemBasicPricePartBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setToItemBasicPricePart(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (toItemBasicPricePartBuilder_ == null) {
            toItemBasicPricePart_ = builderForValue.build();
            onChanged();
          } else {
            toItemBasicPricePartBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeToItemBasicPricePart(io.dstore.engine.Values.decimalValue value) {
          if (toItemBasicPricePartBuilder_ == null) {
            if (toItemBasicPricePart_ != null) {
              toItemBasicPricePart_ =
                io.dstore.engine.Values.decimalValue.newBuilder(toItemBasicPricePart_).mergeFrom(value).buildPartial();
            } else {
              toItemBasicPricePart_ = value;
            }
            onChanged();
          } else {
            toItemBasicPricePartBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearToItemBasicPricePart() {
          if (toItemBasicPricePartBuilder_ == null) {
            toItemBasicPricePart_ = null;
            onChanged();
          } else {
            toItemBasicPricePart_ = null;
            toItemBasicPricePartBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getToItemBasicPricePartBuilder() {
          
          onChanged();
          return getToItemBasicPricePartFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getToItemBasicPricePartOrBuilder() {
          if (toItemBasicPricePartBuilder_ != null) {
            return toItemBasicPricePartBuilder_.getMessageOrBuilder();
          } else {
            return toItemBasicPricePart_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : toItemBasicPricePart_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_part = 10018;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getToItemBasicPricePartFieldBuilder() {
          if (toItemBasicPricePartBuilder_ == null) {
            toItemBasicPricePartBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getToItemBasicPricePart(),
                    getParentForChildren(),
                    isClean());
            toItemBasicPricePart_ = null;
          }
          return toItemBasicPricePartBuilder_;
        }

        private io.dstore.engine.Values.stringValue itemConditionPartDescription_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> itemConditionPartDescriptionBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
         *
         * <pre>
         * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
         * </pre>
         */
        public boolean hasItemConditionPartDescription() {
          return itemConditionPartDescriptionBuilder_ != null || itemConditionPartDescription_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
         *
         * <pre>
         * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getItemConditionPartDescription() {
          if (itemConditionPartDescriptionBuilder_ == null) {
            return itemConditionPartDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : itemConditionPartDescription_;
          } else {
            return itemConditionPartDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
         *
         * <pre>
         * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
         * </pre>
         */
        public Builder setItemConditionPartDescription(io.dstore.engine.Values.stringValue value) {
          if (itemConditionPartDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            itemConditionPartDescription_ = value;
            onChanged();
          } else {
            itemConditionPartDescriptionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
         *
         * <pre>
         * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
         * </pre>
         */
        public Builder setItemConditionPartDescription(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (itemConditionPartDescriptionBuilder_ == null) {
            itemConditionPartDescription_ = builderForValue.build();
            onChanged();
          } else {
            itemConditionPartDescriptionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
         *
         * <pre>
         * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
         * </pre>
         */
        public Builder mergeItemConditionPartDescription(io.dstore.engine.Values.stringValue value) {
          if (itemConditionPartDescriptionBuilder_ == null) {
            if (itemConditionPartDescription_ != null) {
              itemConditionPartDescription_ =
                io.dstore.engine.Values.stringValue.newBuilder(itemConditionPartDescription_).mergeFrom(value).buildPartial();
            } else {
              itemConditionPartDescription_ = value;
            }
            onChanged();
          } else {
            itemConditionPartDescriptionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
         *
         * <pre>
         * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
         * </pre>
         */
        public Builder clearItemConditionPartDescription() {
          if (itemConditionPartDescriptionBuilder_ == null) {
            itemConditionPartDescription_ = null;
            onChanged();
          } else {
            itemConditionPartDescription_ = null;
            itemConditionPartDescriptionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
         *
         * <pre>
         * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getItemConditionPartDescriptionBuilder() {
          
          onChanged();
          return getItemConditionPartDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
         *
         * <pre>
         * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getItemConditionPartDescriptionOrBuilder() {
          if (itemConditionPartDescriptionBuilder_ != null) {
            return itemConditionPartDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return itemConditionPartDescription_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : itemConditionPartDescription_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_part_description = 10019;</code>
         *
         * <pre>
         * Bezeichnung des Bedingungs-Teils "ItemConditionPartID"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getItemConditionPartDescriptionFieldBuilder() {
          if (itemConditionPartDescriptionBuilder_ == null) {
            itemConditionPartDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getItemConditionPartDescription(),
                    getParentForChildren(),
                    isClean());
            itemConditionPartDescription_ = null;
          }
          return itemConditionPartDescriptionBuilder_;
        }

        private io.dstore.engine.Values.stringValue levelIds_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> levelIdsBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
         * </pre>
         */
        public boolean hasLevelIds() {
          return levelIdsBuilder_ != null || levelIds_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getLevelIds() {
          if (levelIdsBuilder_ == null) {
            return levelIds_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : levelIds_;
          } else {
            return levelIdsBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
         * </pre>
         */
        public Builder setLevelIds(io.dstore.engine.Values.stringValue value) {
          if (levelIdsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            levelIds_ = value;
            onChanged();
          } else {
            levelIdsBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
         * </pre>
         */
        public Builder setLevelIds(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (levelIdsBuilder_ == null) {
            levelIds_ = builderForValue.build();
            onChanged();
          } else {
            levelIdsBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
         * </pre>
         */
        public Builder mergeLevelIds(io.dstore.engine.Values.stringValue value) {
          if (levelIdsBuilder_ == null) {
            if (levelIds_ != null) {
              levelIds_ =
                io.dstore.engine.Values.stringValue.newBuilder(levelIds_).mergeFrom(value).buildPartial();
            } else {
              levelIds_ = value;
            }
            onChanged();
          } else {
            levelIdsBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
         * </pre>
         */
        public Builder clearLevelIds() {
          if (levelIdsBuilder_ == null) {
            levelIds_ = null;
            onChanged();
          } else {
            levelIds_ = null;
            levelIdsBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getLevelIdsBuilder() {
          
          onChanged();
          return getLevelIdsFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getLevelIdsOrBuilder() {
          if (levelIdsBuilder_ != null) {
            return levelIdsBuilder_.getMessageOrBuilder();
          } else {
            return levelIds_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : levelIds_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue level_ids = 10020;</code>
         *
         * <pre>
         * Um den (Artikel-)Bedingungs-Teil "ItemConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getLevelIdsFieldBuilder() {
          if (levelIdsBuilder_ == null) {
            levelIdsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getLevelIds(),
                    getParentForChildren(),
                    isClean());
            levelIds_ = null;
          }
          return levelIdsBuilder_;
        }

        private io.dstore.engine.Values.integerValue itemConditionGroupId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> itemConditionGroupIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
         *
         * <pre>
         * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
         * </pre>
         */
        public boolean hasItemConditionGroupId() {
          return itemConditionGroupIdBuilder_ != null || itemConditionGroupId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
         *
         * <pre>
         * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getItemConditionGroupId() {
          if (itemConditionGroupIdBuilder_ == null) {
            return itemConditionGroupId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : itemConditionGroupId_;
          } else {
            return itemConditionGroupIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
         *
         * <pre>
         * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
         * </pre>
         */
        public Builder setItemConditionGroupId(io.dstore.engine.Values.integerValue value) {
          if (itemConditionGroupIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            itemConditionGroupId_ = value;
            onChanged();
          } else {
            itemConditionGroupIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
         *
         * <pre>
         * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
         * </pre>
         */
        public Builder setItemConditionGroupId(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (itemConditionGroupIdBuilder_ == null) {
            itemConditionGroupId_ = builderForValue.build();
            onChanged();
          } else {
            itemConditionGroupIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
         *
         * <pre>
         * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
         * </pre>
         */
        public Builder mergeItemConditionGroupId(io.dstore.engine.Values.integerValue value) {
          if (itemConditionGroupIdBuilder_ == null) {
            if (itemConditionGroupId_ != null) {
              itemConditionGroupId_ =
                io.dstore.engine.Values.integerValue.newBuilder(itemConditionGroupId_).mergeFrom(value).buildPartial();
            } else {
              itemConditionGroupId_ = value;
            }
            onChanged();
          } else {
            itemConditionGroupIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
         *
         * <pre>
         * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
         * </pre>
         */
        public Builder clearItemConditionGroupId() {
          if (itemConditionGroupIdBuilder_ == null) {
            itemConditionGroupId_ = null;
            onChanged();
          } else {
            itemConditionGroupId_ = null;
            itemConditionGroupIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
         *
         * <pre>
         * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getItemConditionGroupIdBuilder() {
          
          onChanged();
          return getItemConditionGroupIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
         *
         * <pre>
         * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getItemConditionGroupIdOrBuilder() {
          if (itemConditionGroupIdBuilder_ != null) {
            return itemConditionGroupIdBuilder_.getMessageOrBuilder();
          } else {
            return itemConditionGroupId_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : itemConditionGroupId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_condition_group_id = 10021;</code>
         *
         * <pre>
         * ID einer Bedingungs-Gruppe, die Bestandteil von "ItemConditionID" ist
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getItemConditionGroupIdFieldBuilder() {
          if (itemConditionGroupIdBuilder_ == null) {
            itemConditionGroupIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getItemConditionGroupId(),
                    getParentForChildren(),
                    isClean());
            itemConditionGroupId_ = null;
          }
          return itemConditionGroupIdBuilder_;
        }

        private io.dstore.engine.Values.stringValue extendedItemCondGroupDescr_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> extendedItemCondGroupDescrBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
         *
         * <pre>
         * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
         * </pre>
         */
        public boolean hasExtendedItemCondGroupDescr() {
          return extendedItemCondGroupDescrBuilder_ != null || extendedItemCondGroupDescr_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
         *
         * <pre>
         * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getExtendedItemCondGroupDescr() {
          if (extendedItemCondGroupDescrBuilder_ == null) {
            return extendedItemCondGroupDescr_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : extendedItemCondGroupDescr_;
          } else {
            return extendedItemCondGroupDescrBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
         *
         * <pre>
         * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
         * </pre>
         */
        public Builder setExtendedItemCondGroupDescr(io.dstore.engine.Values.stringValue value) {
          if (extendedItemCondGroupDescrBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            extendedItemCondGroupDescr_ = value;
            onChanged();
          } else {
            extendedItemCondGroupDescrBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
         *
         * <pre>
         * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
         * </pre>
         */
        public Builder setExtendedItemCondGroupDescr(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (extendedItemCondGroupDescrBuilder_ == null) {
            extendedItemCondGroupDescr_ = builderForValue.build();
            onChanged();
          } else {
            extendedItemCondGroupDescrBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
         *
         * <pre>
         * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
         * </pre>
         */
        public Builder mergeExtendedItemCondGroupDescr(io.dstore.engine.Values.stringValue value) {
          if (extendedItemCondGroupDescrBuilder_ == null) {
            if (extendedItemCondGroupDescr_ != null) {
              extendedItemCondGroupDescr_ =
                io.dstore.engine.Values.stringValue.newBuilder(extendedItemCondGroupDescr_).mergeFrom(value).buildPartial();
            } else {
              extendedItemCondGroupDescr_ = value;
            }
            onChanged();
          } else {
            extendedItemCondGroupDescrBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
         *
         * <pre>
         * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
         * </pre>
         */
        public Builder clearExtendedItemCondGroupDescr() {
          if (extendedItemCondGroupDescrBuilder_ == null) {
            extendedItemCondGroupDescr_ = null;
            onChanged();
          } else {
            extendedItemCondGroupDescr_ = null;
            extendedItemCondGroupDescrBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
         *
         * <pre>
         * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getExtendedItemCondGroupDescrBuilder() {
          
          onChanged();
          return getExtendedItemCondGroupDescrFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
         *
         * <pre>
         * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getExtendedItemCondGroupDescrOrBuilder() {
          if (extendedItemCondGroupDescrBuilder_ != null) {
            return extendedItemCondGroupDescrBuilder_.getMessageOrBuilder();
          } else {
            return extendedItemCondGroupDescr_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : extendedItemCondGroupDescr_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_group_descr = 10022;</code>
         *
         * <pre>
         * Bezeichnung der um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Gruppe "ItemConditionGroupID" ("NULL", wenn die Bedingungs-Gruppe nicht erweitert ist)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getExtendedItemCondGroupDescrFieldBuilder() {
          if (extendedItemCondGroupDescrBuilder_ == null) {
            extendedItemCondGroupDescrBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getExtendedItemCondGroupDescr(),
                    getParentForChildren(),
                    isClean());
            extendedItemCondGroupDescr_ = null;
          }
          return extendedItemCondGroupDescrBuilder_;
        }

        private io.dstore.engine.Values.integerValue fromQuantity_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> fromQuantityBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasFromQuantity() {
          return fromQuantityBuilder_ != null || fromQuantity_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getFromQuantity() {
          if (fromQuantityBuilder_ == null) {
            return fromQuantity_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : fromQuantity_;
          } else {
            return fromQuantityBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setFromQuantity(io.dstore.engine.Values.integerValue value) {
          if (fromQuantityBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            fromQuantity_ = value;
            onChanged();
          } else {
            fromQuantityBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setFromQuantity(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (fromQuantityBuilder_ == null) {
            fromQuantity_ = builderForValue.build();
            onChanged();
          } else {
            fromQuantityBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeFromQuantity(io.dstore.engine.Values.integerValue value) {
          if (fromQuantityBuilder_ == null) {
            if (fromQuantity_ != null) {
              fromQuantity_ =
                io.dstore.engine.Values.integerValue.newBuilder(fromQuantity_).mergeFrom(value).buildPartial();
            } else {
              fromQuantity_ = value;
            }
            onChanged();
          } else {
            fromQuantityBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearFromQuantity() {
          if (fromQuantityBuilder_ == null) {
            fromQuantity_ = null;
            onChanged();
          } else {
            fromQuantity_ = null;
            fromQuantityBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getFromQuantityBuilder() {
          
          onChanged();
          return getFromQuantityFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getFromQuantityOrBuilder() {
          if (fromQuantityBuilder_ != null) {
            return fromQuantityBuilder_.getMessageOrBuilder();
          } else {
            return fromQuantity_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : fromQuantity_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity = 10023;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getFromQuantityFieldBuilder() {
          if (fromQuantityBuilder_ == null) {
            fromQuantityBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getFromQuantity(),
                    getParentForChildren(),
                    isClean());
            fromQuantity_ = null;
          }
          return fromQuantityBuilder_;
        }

        private io.dstore.engine.Values.decimalValue fromItemBasicPrice_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> fromItemBasicPriceBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasFromItemBasicPrice() {
          return fromItemBasicPriceBuilder_ != null || fromItemBasicPrice_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getFromItemBasicPrice() {
          if (fromItemBasicPriceBuilder_ == null) {
            return fromItemBasicPrice_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromItemBasicPrice_;
          } else {
            return fromItemBasicPriceBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setFromItemBasicPrice(io.dstore.engine.Values.decimalValue value) {
          if (fromItemBasicPriceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            fromItemBasicPrice_ = value;
            onChanged();
          } else {
            fromItemBasicPriceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setFromItemBasicPrice(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (fromItemBasicPriceBuilder_ == null) {
            fromItemBasicPrice_ = builderForValue.build();
            onChanged();
          } else {
            fromItemBasicPriceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeFromItemBasicPrice(io.dstore.engine.Values.decimalValue value) {
          if (fromItemBasicPriceBuilder_ == null) {
            if (fromItemBasicPrice_ != null) {
              fromItemBasicPrice_ =
                io.dstore.engine.Values.decimalValue.newBuilder(fromItemBasicPrice_).mergeFrom(value).buildPartial();
            } else {
              fromItemBasicPrice_ = value;
            }
            onChanged();
          } else {
            fromItemBasicPriceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearFromItemBasicPrice() {
          if (fromItemBasicPriceBuilder_ == null) {
            fromItemBasicPrice_ = null;
            onChanged();
          } else {
            fromItemBasicPrice_ = null;
            fromItemBasicPriceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getFromItemBasicPriceBuilder() {
          
          onChanged();
          return getFromItemBasicPriceFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getFromItemBasicPriceOrBuilder() {
          if (fromItemBasicPriceBuilder_ != null) {
            return fromItemBasicPriceBuilder_.getMessageOrBuilder();
          } else {
            return fromItemBasicPrice_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromItemBasicPrice_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price = 10024;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getFromItemBasicPriceFieldBuilder() {
          if (fromItemBasicPriceBuilder_ == null) {
            fromItemBasicPriceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getFromItemBasicPrice(),
                    getParentForChildren(),
                    isClean());
            fromItemBasicPrice_ = null;
          }
          return fromItemBasicPriceBuilder_;
        }

        private io.dstore.engine.Values.integerValue itemGroupSortNo_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> itemGroupSortNoBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
         * </pre>
         */
        public boolean hasItemGroupSortNo() {
          return itemGroupSortNoBuilder_ != null || itemGroupSortNo_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getItemGroupSortNo() {
          if (itemGroupSortNoBuilder_ == null) {
            return itemGroupSortNo_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : itemGroupSortNo_;
          } else {
            return itemGroupSortNoBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
         * </pre>
         */
        public Builder setItemGroupSortNo(io.dstore.engine.Values.integerValue value) {
          if (itemGroupSortNoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            itemGroupSortNo_ = value;
            onChanged();
          } else {
            itemGroupSortNoBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
         * </pre>
         */
        public Builder setItemGroupSortNo(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (itemGroupSortNoBuilder_ == null) {
            itemGroupSortNo_ = builderForValue.build();
            onChanged();
          } else {
            itemGroupSortNoBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
         * </pre>
         */
        public Builder mergeItemGroupSortNo(io.dstore.engine.Values.integerValue value) {
          if (itemGroupSortNoBuilder_ == null) {
            if (itemGroupSortNo_ != null) {
              itemGroupSortNo_ =
                io.dstore.engine.Values.integerValue.newBuilder(itemGroupSortNo_).mergeFrom(value).buildPartial();
            } else {
              itemGroupSortNo_ = value;
            }
            onChanged();
          } else {
            itemGroupSortNoBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
         * </pre>
         */
        public Builder clearItemGroupSortNo() {
          if (itemGroupSortNoBuilder_ == null) {
            itemGroupSortNo_ = null;
            onChanged();
          } else {
            itemGroupSortNo_ = null;
            itemGroupSortNoBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getItemGroupSortNoBuilder() {
          
          onChanged();
          return getItemGroupSortNoFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getItemGroupSortNoOrBuilder() {
          if (itemGroupSortNoBuilder_ != null) {
            return itemGroupSortNoBuilder_.getMessageOrBuilder();
          } else {
            return itemGroupSortNo_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : itemGroupSortNo_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_group_sort_no = 10025;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionGroupID" innerhalb aller der Artikel-Bedingung "ItemConditionID" zugeordneten Bedingungs-Gruppen
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getItemGroupSortNoFieldBuilder() {
          if (itemGroupSortNoBuilder_ == null) {
            itemGroupSortNoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getItemGroupSortNo(),
                    getParentForChildren(),
                    isClean());
            itemGroupSortNo_ = null;
          }
          return itemGroupSortNoBuilder_;
        }

        private io.dstore.engine.Values.stringValue operator1_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> operator1Builder_;
        /**
         * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
         * </pre>
         */
        public boolean hasOperator1() {
          return operator1Builder_ != null || operator1_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getOperator1() {
          if (operator1Builder_ == null) {
            return operator1_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : operator1_;
          } else {
            return operator1Builder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
         * </pre>
         */
        public Builder setOperator1(io.dstore.engine.Values.stringValue value) {
          if (operator1Builder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            operator1_ = value;
            onChanged();
          } else {
            operator1Builder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
         * </pre>
         */
        public Builder setOperator1(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (operator1Builder_ == null) {
            operator1_ = builderForValue.build();
            onChanged();
          } else {
            operator1Builder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
         * </pre>
         */
        public Builder mergeOperator1(io.dstore.engine.Values.stringValue value) {
          if (operator1Builder_ == null) {
            if (operator1_ != null) {
              operator1_ =
                io.dstore.engine.Values.stringValue.newBuilder(operator1_).mergeFrom(value).buildPartial();
            } else {
              operator1_ = value;
            }
            onChanged();
          } else {
            operator1Builder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
         * </pre>
         */
        public Builder clearOperator1() {
          if (operator1Builder_ == null) {
            operator1_ = null;
            onChanged();
          } else {
            operator1_ = null;
            operator1Builder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getOperator1Builder() {
          
          onChanged();
          return getOperator1FieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getOperator1OrBuilder() {
          if (operator1Builder_ != null) {
            return operator1Builder_.getMessageOrBuilder();
          } else {
            return operator1_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : operator1_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator1 = 10026;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getOperator1FieldBuilder() {
          if (operator1Builder_ == null) {
            operator1Builder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getOperator1(),
                    getParentForChildren(),
                    isClean());
            operator1_ = null;
          }
          return operator1Builder_;
        }

        private io.dstore.engine.Values.stringValue operator2_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> operator2Builder_;
        /**
         * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
         * </pre>
         */
        public boolean hasOperator2() {
          return operator2Builder_ != null || operator2_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getOperator2() {
          if (operator2Builder_ == null) {
            return operator2_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : operator2_;
          } else {
            return operator2Builder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
         * </pre>
         */
        public Builder setOperator2(io.dstore.engine.Values.stringValue value) {
          if (operator2Builder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            operator2_ = value;
            onChanged();
          } else {
            operator2Builder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
         * </pre>
         */
        public Builder setOperator2(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (operator2Builder_ == null) {
            operator2_ = builderForValue.build();
            onChanged();
          } else {
            operator2Builder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
         * </pre>
         */
        public Builder mergeOperator2(io.dstore.engine.Values.stringValue value) {
          if (operator2Builder_ == null) {
            if (operator2_ != null) {
              operator2_ =
                io.dstore.engine.Values.stringValue.newBuilder(operator2_).mergeFrom(value).buildPartial();
            } else {
              operator2_ = value;
            }
            onChanged();
          } else {
            operator2Builder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
         * </pre>
         */
        public Builder clearOperator2() {
          if (operator2Builder_ == null) {
            operator2_ = null;
            onChanged();
          } else {
            operator2_ = null;
            operator2Builder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getOperator2Builder() {
          
          onChanged();
          return getOperator2FieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getOperator2OrBuilder() {
          if (operator2Builder_ != null) {
            return operator2Builder_.getMessageOrBuilder();
          } else {
            return operator2_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : operator2_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue operator2 = 10027;</code>
         *
         * <pre>
         * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getOperator2FieldBuilder() {
          if (operator2Builder_ == null) {
            operator2Builder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getOperator2(),
                    getParentForChildren(),
                    isClean());
            operator2_ = null;
          }
          return operator2Builder_;
        }

        private io.dstore.engine.Values.stringValue itemConditionGroupDescription_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> itemConditionGroupDescriptionBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
         *
         * <pre>
         * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
         * </pre>
         */
        public boolean hasItemConditionGroupDescription() {
          return itemConditionGroupDescriptionBuilder_ != null || itemConditionGroupDescription_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
         *
         * <pre>
         * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getItemConditionGroupDescription() {
          if (itemConditionGroupDescriptionBuilder_ == null) {
            return itemConditionGroupDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : itemConditionGroupDescription_;
          } else {
            return itemConditionGroupDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
         *
         * <pre>
         * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
         * </pre>
         */
        public Builder setItemConditionGroupDescription(io.dstore.engine.Values.stringValue value) {
          if (itemConditionGroupDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            itemConditionGroupDescription_ = value;
            onChanged();
          } else {
            itemConditionGroupDescriptionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
         *
         * <pre>
         * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
         * </pre>
         */
        public Builder setItemConditionGroupDescription(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (itemConditionGroupDescriptionBuilder_ == null) {
            itemConditionGroupDescription_ = builderForValue.build();
            onChanged();
          } else {
            itemConditionGroupDescriptionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
         *
         * <pre>
         * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
         * </pre>
         */
        public Builder mergeItemConditionGroupDescription(io.dstore.engine.Values.stringValue value) {
          if (itemConditionGroupDescriptionBuilder_ == null) {
            if (itemConditionGroupDescription_ != null) {
              itemConditionGroupDescription_ =
                io.dstore.engine.Values.stringValue.newBuilder(itemConditionGroupDescription_).mergeFrom(value).buildPartial();
            } else {
              itemConditionGroupDescription_ = value;
            }
            onChanged();
          } else {
            itemConditionGroupDescriptionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
         *
         * <pre>
         * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
         * </pre>
         */
        public Builder clearItemConditionGroupDescription() {
          if (itemConditionGroupDescriptionBuilder_ == null) {
            itemConditionGroupDescription_ = null;
            onChanged();
          } else {
            itemConditionGroupDescription_ = null;
            itemConditionGroupDescriptionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
         *
         * <pre>
         * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getItemConditionGroupDescriptionBuilder() {
          
          onChanged();
          return getItemConditionGroupDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
         *
         * <pre>
         * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getItemConditionGroupDescriptionOrBuilder() {
          if (itemConditionGroupDescriptionBuilder_ != null) {
            return itemConditionGroupDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return itemConditionGroupDescription_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : itemConditionGroupDescription_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_group_description = 10028;</code>
         *
         * <pre>
         * Bezeichnung der Bedingungs-Gruppe "ItemConditionGroupID"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getItemConditionGroupDescriptionFieldBuilder() {
          if (itemConditionGroupDescriptionBuilder_ == null) {
            itemConditionGroupDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getItemConditionGroupDescription(),
                    getParentForChildren(),
                    isClean());
            itemConditionGroupDescription_ = null;
          }
          return itemConditionGroupDescriptionBuilder_;
        }

        private io.dstore.engine.Values.booleanValue combinePartsWithANDOperator_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> combinePartsWithANDOperatorBuilder_;
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public boolean hasCombinePartsWithANDOperator() {
          return combinePartsWithANDOperatorBuilder_ != null || combinePartsWithANDOperator_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public io.dstore.engine.Values.booleanValue getCombinePartsWithANDOperator() {
          if (combinePartsWithANDOperatorBuilder_ == null) {
            return combinePartsWithANDOperator_ == null ? io.dstore.engine.Values.booleanValue.getDefaultInstance() : combinePartsWithANDOperator_;
          } else {
            return combinePartsWithANDOperatorBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public Builder setCombinePartsWithANDOperator(io.dstore.engine.Values.booleanValue value) {
          if (combinePartsWithANDOperatorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            combinePartsWithANDOperator_ = value;
            onChanged();
          } else {
            combinePartsWithANDOperatorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public Builder setCombinePartsWithANDOperator(
            io.dstore.engine.Values.booleanValue.Builder builderForValue) {
          if (combinePartsWithANDOperatorBuilder_ == null) {
            combinePartsWithANDOperator_ = builderForValue.build();
            onChanged();
          } else {
            combinePartsWithANDOperatorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public Builder mergeCombinePartsWithANDOperator(io.dstore.engine.Values.booleanValue value) {
          if (combinePartsWithANDOperatorBuilder_ == null) {
            if (combinePartsWithANDOperator_ != null) {
              combinePartsWithANDOperator_ =
                io.dstore.engine.Values.booleanValue.newBuilder(combinePartsWithANDOperator_).mergeFrom(value).buildPartial();
            } else {
              combinePartsWithANDOperator_ = value;
            }
            onChanged();
          } else {
            combinePartsWithANDOperatorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public Builder clearCombinePartsWithANDOperator() {
          if (combinePartsWithANDOperatorBuilder_ == null) {
            combinePartsWithANDOperator_ = null;
            onChanged();
          } else {
            combinePartsWithANDOperator_ = null;
            combinePartsWithANDOperatorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public io.dstore.engine.Values.booleanValue.Builder getCombinePartsWithANDOperatorBuilder() {
          
          onChanged();
          return getCombinePartsWithANDOperatorFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        public io.dstore.engine.Values.booleanValueOrBuilder getCombinePartsWithANDOperatorOrBuilder() {
          if (combinePartsWithANDOperatorBuilder_ != null) {
            return combinePartsWithANDOperatorBuilder_.getMessageOrBuilder();
          } else {
            return combinePartsWithANDOperator_ == null ?
                io.dstore.engine.Values.booleanValue.getDefaultInstance() : combinePartsWithANDOperator_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.booleanValue combine_parts_with_a_n_d_operator = 10029;</code>
         *
         * <pre>
         * Gibt an, ob die der "ItemConditionGroupID" zugeordneten Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder> 
            getCombinePartsWithANDOperatorFieldBuilder() {
          if (combinePartsWithANDOperatorBuilder_ == null) {
            combinePartsWithANDOperatorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.booleanValue, io.dstore.engine.Values.booleanValue.Builder, io.dstore.engine.Values.booleanValueOrBuilder>(
                    getCombinePartsWithANDOperator(),
                    getParentForChildren(),
                    isClean());
            combinePartsWithANDOperator_ = null;
          }
          return combinePartsWithANDOperatorBuilder_;
        }

        private io.dstore.engine.Values.integerValue minNumberOfItemsPart_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> minNumberOfItemsPartBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasMinNumberOfItemsPart() {
          return minNumberOfItemsPartBuilder_ != null || minNumberOfItemsPart_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getMinNumberOfItemsPart() {
          if (minNumberOfItemsPartBuilder_ == null) {
            return minNumberOfItemsPart_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : minNumberOfItemsPart_;
          } else {
            return minNumberOfItemsPartBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setMinNumberOfItemsPart(io.dstore.engine.Values.integerValue value) {
          if (minNumberOfItemsPartBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            minNumberOfItemsPart_ = value;
            onChanged();
          } else {
            minNumberOfItemsPartBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setMinNumberOfItemsPart(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (minNumberOfItemsPartBuilder_ == null) {
            minNumberOfItemsPart_ = builderForValue.build();
            onChanged();
          } else {
            minNumberOfItemsPartBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeMinNumberOfItemsPart(io.dstore.engine.Values.integerValue value) {
          if (minNumberOfItemsPartBuilder_ == null) {
            if (minNumberOfItemsPart_ != null) {
              minNumberOfItemsPart_ =
                io.dstore.engine.Values.integerValue.newBuilder(minNumberOfItemsPart_).mergeFrom(value).buildPartial();
            } else {
              minNumberOfItemsPart_ = value;
            }
            onChanged();
          } else {
            minNumberOfItemsPartBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearMinNumberOfItemsPart() {
          if (minNumberOfItemsPartBuilder_ == null) {
            minNumberOfItemsPart_ = null;
            onChanged();
          } else {
            minNumberOfItemsPart_ = null;
            minNumberOfItemsPartBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getMinNumberOfItemsPartBuilder() {
          
          onChanged();
          return getMinNumberOfItemsPartFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getMinNumberOfItemsPartOrBuilder() {
          if (minNumberOfItemsPartBuilder_ != null) {
            return minNumberOfItemsPartBuilder_.getMessageOrBuilder();
          } else {
            return minNumberOfItemsPart_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : minNumberOfItemsPart_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_part = 10030;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getMinNumberOfItemsPartFieldBuilder() {
          if (minNumberOfItemsPartBuilder_ == null) {
            minNumberOfItemsPartBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getMinNumberOfItemsPart(),
                    getParentForChildren(),
                    isClean());
            minNumberOfItemsPart_ = null;
          }
          return minNumberOfItemsPartBuilder_;
        }

        private io.dstore.engine.Values.integerValue itemPartSortNo_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> itemPartSortNoBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
         * </pre>
         */
        public boolean hasItemPartSortNo() {
          return itemPartSortNoBuilder_ != null || itemPartSortNo_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getItemPartSortNo() {
          if (itemPartSortNoBuilder_ == null) {
            return itemPartSortNo_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : itemPartSortNo_;
          } else {
            return itemPartSortNoBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
         * </pre>
         */
        public Builder setItemPartSortNo(io.dstore.engine.Values.integerValue value) {
          if (itemPartSortNoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            itemPartSortNo_ = value;
            onChanged();
          } else {
            itemPartSortNoBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
         * </pre>
         */
        public Builder setItemPartSortNo(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (itemPartSortNoBuilder_ == null) {
            itemPartSortNo_ = builderForValue.build();
            onChanged();
          } else {
            itemPartSortNoBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
         * </pre>
         */
        public Builder mergeItemPartSortNo(io.dstore.engine.Values.integerValue value) {
          if (itemPartSortNoBuilder_ == null) {
            if (itemPartSortNo_ != null) {
              itemPartSortNo_ =
                io.dstore.engine.Values.integerValue.newBuilder(itemPartSortNo_).mergeFrom(value).buildPartial();
            } else {
              itemPartSortNo_ = value;
            }
            onChanged();
          } else {
            itemPartSortNoBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
         * </pre>
         */
        public Builder clearItemPartSortNo() {
          if (itemPartSortNoBuilder_ == null) {
            itemPartSortNo_ = null;
            onChanged();
          } else {
            itemPartSortNo_ = null;
            itemPartSortNoBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getItemPartSortNoBuilder() {
          
          onChanged();
          return getItemPartSortNoFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getItemPartSortNoOrBuilder() {
          if (itemPartSortNoBuilder_ != null) {
            return itemPartSortNoBuilder_.getMessageOrBuilder();
          } else {
            return itemPartSortNo_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : itemPartSortNo_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue item_part_sort_no = 10031;</code>
         *
         * <pre>
         * Bestimmt die Reihenfolge von "ItemConditionPartID" innerhalb aller der Bedingungs-Gruppe "ItemConditionGroupID" zugeordneten Bedingungs-Teile
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getItemPartSortNoFieldBuilder() {
          if (itemPartSortNoBuilder_ == null) {
            itemPartSortNoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getItemPartSortNo(),
                    getParentForChildren(),
                    isClean());
            itemPartSortNo_ = null;
          }
          return itemPartSortNoBuilder_;
        }

        private io.dstore.engine.Values.decimalValue toItemBasicPriceGroup_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> toItemBasicPriceGroupBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasToItemBasicPriceGroup() {
          return toItemBasicPriceGroupBuilder_ != null || toItemBasicPriceGroup_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getToItemBasicPriceGroup() {
          if (toItemBasicPriceGroupBuilder_ == null) {
            return toItemBasicPriceGroup_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : toItemBasicPriceGroup_;
          } else {
            return toItemBasicPriceGroupBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setToItemBasicPriceGroup(io.dstore.engine.Values.decimalValue value) {
          if (toItemBasicPriceGroupBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            toItemBasicPriceGroup_ = value;
            onChanged();
          } else {
            toItemBasicPriceGroupBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setToItemBasicPriceGroup(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (toItemBasicPriceGroupBuilder_ == null) {
            toItemBasicPriceGroup_ = builderForValue.build();
            onChanged();
          } else {
            toItemBasicPriceGroupBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeToItemBasicPriceGroup(io.dstore.engine.Values.decimalValue value) {
          if (toItemBasicPriceGroupBuilder_ == null) {
            if (toItemBasicPriceGroup_ != null) {
              toItemBasicPriceGroup_ =
                io.dstore.engine.Values.decimalValue.newBuilder(toItemBasicPriceGroup_).mergeFrom(value).buildPartial();
            } else {
              toItemBasicPriceGroup_ = value;
            }
            onChanged();
          } else {
            toItemBasicPriceGroupBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearToItemBasicPriceGroup() {
          if (toItemBasicPriceGroupBuilder_ == null) {
            toItemBasicPriceGroup_ = null;
            onChanged();
          } else {
            toItemBasicPriceGroup_ = null;
            toItemBasicPriceGroupBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getToItemBasicPriceGroupBuilder() {
          
          onChanged();
          return getToItemBasicPriceGroupFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getToItemBasicPriceGroupOrBuilder() {
          if (toItemBasicPriceGroupBuilder_ != null) {
            return toItemBasicPriceGroupBuilder_.getMessageOrBuilder();
          } else {
            return toItemBasicPriceGroup_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : toItemBasicPriceGroup_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price_group = 10032;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getToItemBasicPriceGroupFieldBuilder() {
          if (toItemBasicPriceGroupBuilder_ == null) {
            toItemBasicPriceGroupBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getToItemBasicPriceGroup(),
                    getParentForChildren(),
                    isClean());
            toItemBasicPriceGroup_ = null;
          }
          return toItemBasicPriceGroupBuilder_;
        }

        private io.dstore.engine.Values.stringValue extendedItemCondPartDescr_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> extendedItemCondPartDescrBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
         *
         * <pre>
         * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
         * </pre>
         */
        public boolean hasExtendedItemCondPartDescr() {
          return extendedItemCondPartDescrBuilder_ != null || extendedItemCondPartDescr_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
         *
         * <pre>
         * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getExtendedItemCondPartDescr() {
          if (extendedItemCondPartDescrBuilder_ == null) {
            return extendedItemCondPartDescr_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : extendedItemCondPartDescr_;
          } else {
            return extendedItemCondPartDescrBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
         *
         * <pre>
         * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
         * </pre>
         */
        public Builder setExtendedItemCondPartDescr(io.dstore.engine.Values.stringValue value) {
          if (extendedItemCondPartDescrBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            extendedItemCondPartDescr_ = value;
            onChanged();
          } else {
            extendedItemCondPartDescrBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
         *
         * <pre>
         * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
         * </pre>
         */
        public Builder setExtendedItemCondPartDescr(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (extendedItemCondPartDescrBuilder_ == null) {
            extendedItemCondPartDescr_ = builderForValue.build();
            onChanged();
          } else {
            extendedItemCondPartDescrBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
         *
         * <pre>
         * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
         * </pre>
         */
        public Builder mergeExtendedItemCondPartDescr(io.dstore.engine.Values.stringValue value) {
          if (extendedItemCondPartDescrBuilder_ == null) {
            if (extendedItemCondPartDescr_ != null) {
              extendedItemCondPartDescr_ =
                io.dstore.engine.Values.stringValue.newBuilder(extendedItemCondPartDescr_).mergeFrom(value).buildPartial();
            } else {
              extendedItemCondPartDescr_ = value;
            }
            onChanged();
          } else {
            extendedItemCondPartDescrBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
         *
         * <pre>
         * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
         * </pre>
         */
        public Builder clearExtendedItemCondPartDescr() {
          if (extendedItemCondPartDescrBuilder_ == null) {
            extendedItemCondPartDescr_ = null;
            onChanged();
          } else {
            extendedItemCondPartDescr_ = null;
            extendedItemCondPartDescrBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
         *
         * <pre>
         * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getExtendedItemCondPartDescrBuilder() {
          
          onChanged();
          return getExtendedItemCondPartDescrFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
         *
         * <pre>
         * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getExtendedItemCondPartDescrOrBuilder() {
          if (extendedItemCondPartDescrBuilder_ != null) {
            return extendedItemCondPartDescrBuilder_.getMessageOrBuilder();
          } else {
            return extendedItemCondPartDescr_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : extendedItemCondPartDescr_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue extended_item_cond_part_descr = 10033;</code>
         *
         * <pre>
         * Bezeichnung des um Mengen- und/oder Warenwert-Kriterium erweiterten Bedingungs-Teils "ItemConditionPartID" ("NULL", wenn der Bedingungs-Teil nicht erweitert ist)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getExtendedItemCondPartDescrFieldBuilder() {
          if (extendedItemCondPartDescrBuilder_ == null) {
            extendedItemCondPartDescrBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getExtendedItemCondPartDescr(),
                    getParentForChildren(),
                    isClean());
            extendedItemCondPartDescr_ = null;
          }
          return extendedItemCondPartDescrBuilder_;
        }

        private io.dstore.engine.Values.integerValue maxNumberOfItemsPart_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> maxNumberOfItemsPartBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasMaxNumberOfItemsPart() {
          return maxNumberOfItemsPartBuilder_ != null || maxNumberOfItemsPart_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getMaxNumberOfItemsPart() {
          if (maxNumberOfItemsPartBuilder_ == null) {
            return maxNumberOfItemsPart_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : maxNumberOfItemsPart_;
          } else {
            return maxNumberOfItemsPartBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setMaxNumberOfItemsPart(io.dstore.engine.Values.integerValue value) {
          if (maxNumberOfItemsPartBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            maxNumberOfItemsPart_ = value;
            onChanged();
          } else {
            maxNumberOfItemsPartBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setMaxNumberOfItemsPart(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (maxNumberOfItemsPartBuilder_ == null) {
            maxNumberOfItemsPart_ = builderForValue.build();
            onChanged();
          } else {
            maxNumberOfItemsPartBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeMaxNumberOfItemsPart(io.dstore.engine.Values.integerValue value) {
          if (maxNumberOfItemsPartBuilder_ == null) {
            if (maxNumberOfItemsPart_ != null) {
              maxNumberOfItemsPart_ =
                io.dstore.engine.Values.integerValue.newBuilder(maxNumberOfItemsPart_).mergeFrom(value).buildPartial();
            } else {
              maxNumberOfItemsPart_ = value;
            }
            onChanged();
          } else {
            maxNumberOfItemsPartBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearMaxNumberOfItemsPart() {
          if (maxNumberOfItemsPartBuilder_ == null) {
            maxNumberOfItemsPart_ = null;
            onChanged();
          } else {
            maxNumberOfItemsPart_ = null;
            maxNumberOfItemsPartBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getMaxNumberOfItemsPartBuilder() {
          
          onChanged();
          return getMaxNumberOfItemsPartFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getMaxNumberOfItemsPartOrBuilder() {
          if (maxNumberOfItemsPartBuilder_ != null) {
            return maxNumberOfItemsPartBuilder_.getMessageOrBuilder();
          } else {
            return maxNumberOfItemsPart_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : maxNumberOfItemsPart_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue max_number_of_items_part = 10034;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "MinNumberOfItems" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getMaxNumberOfItemsPartFieldBuilder() {
          if (maxNumberOfItemsPartBuilder_ == null) {
            maxNumberOfItemsPartBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getMaxNumberOfItemsPart(),
                    getParentForChildren(),
                    isClean());
            maxNumberOfItemsPart_ = null;
          }
          return maxNumberOfItemsPartBuilder_;
        }

        private io.dstore.engine.Values.decimalValue fromItemBasicPricePart_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> fromItemBasicPricePartBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasFromItemBasicPricePart() {
          return fromItemBasicPricePartBuilder_ != null || fromItemBasicPricePart_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getFromItemBasicPricePart() {
          if (fromItemBasicPricePartBuilder_ == null) {
            return fromItemBasicPricePart_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromItemBasicPricePart_;
          } else {
            return fromItemBasicPricePartBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setFromItemBasicPricePart(io.dstore.engine.Values.decimalValue value) {
          if (fromItemBasicPricePartBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            fromItemBasicPricePart_ = value;
            onChanged();
          } else {
            fromItemBasicPricePartBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setFromItemBasicPricePart(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (fromItemBasicPricePartBuilder_ == null) {
            fromItemBasicPricePart_ = builderForValue.build();
            onChanged();
          } else {
            fromItemBasicPricePartBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeFromItemBasicPricePart(io.dstore.engine.Values.decimalValue value) {
          if (fromItemBasicPricePartBuilder_ == null) {
            if (fromItemBasicPricePart_ != null) {
              fromItemBasicPricePart_ =
                io.dstore.engine.Values.decimalValue.newBuilder(fromItemBasicPricePart_).mergeFrom(value).buildPartial();
            } else {
              fromItemBasicPricePart_ = value;
            }
            onChanged();
          } else {
            fromItemBasicPricePartBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearFromItemBasicPricePart() {
          if (fromItemBasicPricePartBuilder_ == null) {
            fromItemBasicPricePart_ = null;
            onChanged();
          } else {
            fromItemBasicPricePart_ = null;
            fromItemBasicPricePartBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getFromItemBasicPricePartBuilder() {
          
          onChanged();
          return getFromItemBasicPricePartFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getFromItemBasicPricePartOrBuilder() {
          if (fromItemBasicPricePartBuilder_ != null) {
            return fromItemBasicPricePartBuilder_.getMessageOrBuilder();
          } else {
            return fromItemBasicPricePart_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromItemBasicPricePart_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_part = 10035;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das den Bedingungs-Teil "ItemConditionPartID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getFromItemBasicPricePartFieldBuilder() {
          if (fromItemBasicPricePartBuilder_ == null) {
            fromItemBasicPricePartBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getFromItemBasicPricePart(),
                    getParentForChildren(),
                    isClean());
            fromItemBasicPricePart_ = null;
          }
          return fromItemBasicPricePartBuilder_;
        }

        private io.dstore.engine.Values.integerValue minNumberOfItems_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> minNumberOfItemsBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasMinNumberOfItems() {
          return minNumberOfItemsBuilder_ != null || minNumberOfItems_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getMinNumberOfItems() {
          if (minNumberOfItemsBuilder_ == null) {
            return minNumberOfItems_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : minNumberOfItems_;
          } else {
            return minNumberOfItemsBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setMinNumberOfItems(io.dstore.engine.Values.integerValue value) {
          if (minNumberOfItemsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            minNumberOfItems_ = value;
            onChanged();
          } else {
            minNumberOfItemsBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setMinNumberOfItems(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (minNumberOfItemsBuilder_ == null) {
            minNumberOfItems_ = builderForValue.build();
            onChanged();
          } else {
            minNumberOfItemsBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeMinNumberOfItems(io.dstore.engine.Values.integerValue value) {
          if (minNumberOfItemsBuilder_ == null) {
            if (minNumberOfItems_ != null) {
              minNumberOfItems_ =
                io.dstore.engine.Values.integerValue.newBuilder(minNumberOfItems_).mergeFrom(value).buildPartial();
            } else {
              minNumberOfItems_ = value;
            }
            onChanged();
          } else {
            minNumberOfItemsBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearMinNumberOfItems() {
          if (minNumberOfItemsBuilder_ == null) {
            minNumberOfItems_ = null;
            onChanged();
          } else {
            minNumberOfItems_ = null;
            minNumberOfItemsBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getMinNumberOfItemsBuilder() {
          
          onChanged();
          return getMinNumberOfItemsFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getMinNumberOfItemsOrBuilder() {
          if (minNumberOfItemsBuilder_ != null) {
            return minNumberOfItemsBuilder_.getMessageOrBuilder();
          } else {
            return minNumberOfItems_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : minNumberOfItems_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items = 10036;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getMinNumberOfItemsFieldBuilder() {
          if (minNumberOfItemsBuilder_ == null) {
            minNumberOfItemsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getMinNumberOfItems(),
                    getParentForChildren(),
                    isClean());
            minNumberOfItems_ = null;
          }
          return minNumberOfItemsBuilder_;
        }

        private io.dstore.engine.Values.decimalValue fromBasicPriceSum_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> fromBasicPriceSumBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public boolean hasFromBasicPriceSum() {
          return fromBasicPriceSumBuilder_ != null || fromBasicPriceSum_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getFromBasicPriceSum() {
          if (fromBasicPriceSumBuilder_ == null) {
            return fromBasicPriceSum_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromBasicPriceSum_;
          } else {
            return fromBasicPriceSumBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public Builder setFromBasicPriceSum(io.dstore.engine.Values.decimalValue value) {
          if (fromBasicPriceSumBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            fromBasicPriceSum_ = value;
            onChanged();
          } else {
            fromBasicPriceSumBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public Builder setFromBasicPriceSum(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (fromBasicPriceSumBuilder_ == null) {
            fromBasicPriceSum_ = builderForValue.build();
            onChanged();
          } else {
            fromBasicPriceSumBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public Builder mergeFromBasicPriceSum(io.dstore.engine.Values.decimalValue value) {
          if (fromBasicPriceSumBuilder_ == null) {
            if (fromBasicPriceSum_ != null) {
              fromBasicPriceSum_ =
                io.dstore.engine.Values.decimalValue.newBuilder(fromBasicPriceSum_).mergeFrom(value).buildPartial();
            } else {
              fromBasicPriceSum_ = value;
            }
            onChanged();
          } else {
            fromBasicPriceSumBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public Builder clearFromBasicPriceSum() {
          if (fromBasicPriceSumBuilder_ == null) {
            fromBasicPriceSum_ = null;
            onChanged();
          } else {
            fromBasicPriceSum_ = null;
            fromBasicPriceSumBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getFromBasicPriceSumBuilder() {
          
          onChanged();
          return getFromBasicPriceSumFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getFromBasicPriceSumOrBuilder() {
          if (fromBasicPriceSumBuilder_ != null) {
            return fromBasicPriceSumBuilder_.getMessageOrBuilder();
          } else {
            return fromBasicPriceSum_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromBasicPriceSum_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_basic_price_sum = 10037;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen diesem Wert und "ToBasicPriceSum" liegen
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getFromBasicPriceSumFieldBuilder() {
          if (fromBasicPriceSumBuilder_ == null) {
            fromBasicPriceSumBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getFromBasicPriceSum(),
                    getParentForChildren(),
                    isClean());
            fromBasicPriceSum_ = null;
          }
          return fromBasicPriceSumBuilder_;
        }

        private io.dstore.engine.Values.decimalValue toBasicPriceSum_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> toBasicPriceSumBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public boolean hasToBasicPriceSum() {
          return toBasicPriceSumBuilder_ != null || toBasicPriceSum_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getToBasicPriceSum() {
          if (toBasicPriceSumBuilder_ == null) {
            return toBasicPriceSum_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : toBasicPriceSum_;
          } else {
            return toBasicPriceSumBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public Builder setToBasicPriceSum(io.dstore.engine.Values.decimalValue value) {
          if (toBasicPriceSumBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            toBasicPriceSum_ = value;
            onChanged();
          } else {
            toBasicPriceSumBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public Builder setToBasicPriceSum(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (toBasicPriceSumBuilder_ == null) {
            toBasicPriceSum_ = builderForValue.build();
            onChanged();
          } else {
            toBasicPriceSumBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public Builder mergeToBasicPriceSum(io.dstore.engine.Values.decimalValue value) {
          if (toBasicPriceSumBuilder_ == null) {
            if (toBasicPriceSum_ != null) {
              toBasicPriceSum_ =
                io.dstore.engine.Values.decimalValue.newBuilder(toBasicPriceSum_).mergeFrom(value).buildPartial();
            } else {
              toBasicPriceSum_ = value;
            }
            onChanged();
          } else {
            toBasicPriceSumBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public Builder clearToBasicPriceSum() {
          if (toBasicPriceSumBuilder_ == null) {
            toBasicPriceSum_ = null;
            onChanged();
          } else {
            toBasicPriceSum_ = null;
            toBasicPriceSumBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getToBasicPriceSumBuilder() {
          
          onChanged();
          return getToBasicPriceSumFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getToBasicPriceSumOrBuilder() {
          if (toBasicPriceSumBuilder_ != null) {
            return toBasicPriceSumBuilder_.getMessageOrBuilder();
          } else {
            return toBasicPriceSum_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : toBasicPriceSum_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_basic_price_sum = 10038;</code>
         *
         * <pre>
         * Die Gesamt-Summe für alle Artikel-Elemente (Summe aller Einzelpreise, die "_om_GetBasicPrices" liefert, mit der jeweiligen "Quantity" multipliziert), die die Bedingung "ItemConditionID" erfüllen, muß zwischen "FromBasicPriceSum" und diesem Wert liegen
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getToBasicPriceSumFieldBuilder() {
          if (toBasicPriceSumBuilder_ == null) {
            toBasicPriceSumBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getToBasicPriceSum(),
                    getParentForChildren(),
                    isClean());
            toBasicPriceSum_ = null;
          }
          return toBasicPriceSumBuilder_;
        }

        private io.dstore.engine.Values.integerValue toQuantityGroup_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> toQuantityGroupBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasToQuantityGroup() {
          return toQuantityGroupBuilder_ != null || toQuantityGroup_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getToQuantityGroup() {
          if (toQuantityGroupBuilder_ == null) {
            return toQuantityGroup_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : toQuantityGroup_;
          } else {
            return toQuantityGroupBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setToQuantityGroup(io.dstore.engine.Values.integerValue value) {
          if (toQuantityGroupBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            toQuantityGroup_ = value;
            onChanged();
          } else {
            toQuantityGroupBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setToQuantityGroup(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (toQuantityGroupBuilder_ == null) {
            toQuantityGroup_ = builderForValue.build();
            onChanged();
          } else {
            toQuantityGroupBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeToQuantityGroup(io.dstore.engine.Values.integerValue value) {
          if (toQuantityGroupBuilder_ == null) {
            if (toQuantityGroup_ != null) {
              toQuantityGroup_ =
                io.dstore.engine.Values.integerValue.newBuilder(toQuantityGroup_).mergeFrom(value).buildPartial();
            } else {
              toQuantityGroup_ = value;
            }
            onChanged();
          } else {
            toQuantityGroupBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearToQuantityGroup() {
          if (toQuantityGroupBuilder_ == null) {
            toQuantityGroup_ = null;
            onChanged();
          } else {
            toQuantityGroup_ = null;
            toQuantityGroupBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getToQuantityGroupBuilder() {
          
          onChanged();
          return getToQuantityGroupFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getToQuantityGroupOrBuilder() {
          if (toQuantityGroupBuilder_ != null) {
            return toQuantityGroupBuilder_.getMessageOrBuilder();
          } else {
            return toQuantityGroup_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : toQuantityGroup_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_group = 10039;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getToQuantityGroupFieldBuilder() {
          if (toQuantityGroupBuilder_ == null) {
            toQuantityGroupBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getToQuantityGroup(),
                    getParentForChildren(),
                    isClean());
            toQuantityGroup_ = null;
          }
          return toQuantityGroupBuilder_;
        }

        private io.dstore.engine.Values.decimalValue fromItemBasicPriceGroup_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> fromItemBasicPriceGroupBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasFromItemBasicPriceGroup() {
          return fromItemBasicPriceGroupBuilder_ != null || fromItemBasicPriceGroup_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getFromItemBasicPriceGroup() {
          if (fromItemBasicPriceGroupBuilder_ == null) {
            return fromItemBasicPriceGroup_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromItemBasicPriceGroup_;
          } else {
            return fromItemBasicPriceGroupBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setFromItemBasicPriceGroup(io.dstore.engine.Values.decimalValue value) {
          if (fromItemBasicPriceGroupBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            fromItemBasicPriceGroup_ = value;
            onChanged();
          } else {
            fromItemBasicPriceGroupBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setFromItemBasicPriceGroup(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (fromItemBasicPriceGroupBuilder_ == null) {
            fromItemBasicPriceGroup_ = builderForValue.build();
            onChanged();
          } else {
            fromItemBasicPriceGroupBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeFromItemBasicPriceGroup(io.dstore.engine.Values.decimalValue value) {
          if (fromItemBasicPriceGroupBuilder_ == null) {
            if (fromItemBasicPriceGroup_ != null) {
              fromItemBasicPriceGroup_ =
                io.dstore.engine.Values.decimalValue.newBuilder(fromItemBasicPriceGroup_).mergeFrom(value).buildPartial();
            } else {
              fromItemBasicPriceGroup_ = value;
            }
            onChanged();
          } else {
            fromItemBasicPriceGroupBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearFromItemBasicPriceGroup() {
          if (fromItemBasicPriceGroupBuilder_ == null) {
            fromItemBasicPriceGroup_ = null;
            onChanged();
          } else {
            fromItemBasicPriceGroup_ = null;
            fromItemBasicPriceGroupBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getFromItemBasicPriceGroupBuilder() {
          
          onChanged();
          return getFromItemBasicPriceGroupFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getFromItemBasicPriceGroupOrBuilder() {
          if (fromItemBasicPriceGroupBuilder_ != null) {
            return fromItemBasicPriceGroupBuilder_.getMessageOrBuilder();
          } else {
            return fromItemBasicPriceGroup_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : fromItemBasicPriceGroup_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue from_item_basic_price_group = 10040;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingungs-Gruppe "ItemConditionGroupID" erfüllt, liefert, muß zwischen diesem Wert und "ToItemBasicPrice" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getFromItemBasicPriceGroupFieldBuilder() {
          if (fromItemBasicPriceGroupBuilder_ == null) {
            fromItemBasicPriceGroupBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getFromItemBasicPriceGroup(),
                    getParentForChildren(),
                    isClean());
            fromItemBasicPriceGroup_ = null;
          }
          return fromItemBasicPriceGroupBuilder_;
        }

        private io.dstore.engine.Values.integerValue conditionId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> conditionIdBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
         *
         * <pre>
         * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
         * </pre>
         */
        public boolean hasConditionId() {
          return conditionIdBuilder_ != null || conditionId_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
         *
         * <pre>
         * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getConditionId() {
          if (conditionIdBuilder_ == null) {
            return conditionId_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : conditionId_;
          } else {
            return conditionIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
         *
         * <pre>
         * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
         * </pre>
         */
        public Builder setConditionId(io.dstore.engine.Values.integerValue value) {
          if (conditionIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            conditionId_ = value;
            onChanged();
          } else {
            conditionIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
         *
         * <pre>
         * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
         * </pre>
         */
        public Builder setConditionId(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (conditionIdBuilder_ == null) {
            conditionId_ = builderForValue.build();
            onChanged();
          } else {
            conditionIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
         *
         * <pre>
         * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
         * </pre>
         */
        public Builder mergeConditionId(io.dstore.engine.Values.integerValue value) {
          if (conditionIdBuilder_ == null) {
            if (conditionId_ != null) {
              conditionId_ =
                io.dstore.engine.Values.integerValue.newBuilder(conditionId_).mergeFrom(value).buildPartial();
            } else {
              conditionId_ = value;
            }
            onChanged();
          } else {
            conditionIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
         *
         * <pre>
         * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
         * </pre>
         */
        public Builder clearConditionId() {
          if (conditionIdBuilder_ == null) {
            conditionId_ = null;
            onChanged();
          } else {
            conditionId_ = null;
            conditionIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
         *
         * <pre>
         * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getConditionIdBuilder() {
          
          onChanged();
          return getConditionIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
         *
         * <pre>
         * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getConditionIdOrBuilder() {
          if (conditionIdBuilder_ != null) {
            return conditionIdBuilder_.getMessageOrBuilder();
          } else {
            return conditionId_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : conditionId_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue condition_id = 10041;</code>
         *
         * <pre>
         * ID einer Verkaufs-Aktions-Bedingung (die auf einer Artikel-Bedingung basiert) - natürlich identisch mit "&#64;ConditionID" wenn angegeben
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getConditionIdFieldBuilder() {
          if (conditionIdBuilder_ == null) {
            conditionIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getConditionId(),
                    getParentForChildren(),
                    isClean());
            conditionId_ = null;
          }
          return conditionIdBuilder_;
        }

        private io.dstore.engine.Values.stringValue itemConditionDescription_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> itemConditionDescriptionBuilder_;
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
         *
         * <pre>
         * Bezeichnung der Artikel-Bedingung "ItemConditionID"
         * </pre>
         */
        public boolean hasItemConditionDescription() {
          return itemConditionDescriptionBuilder_ != null || itemConditionDescription_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
         *
         * <pre>
         * Bezeichnung der Artikel-Bedingung "ItemConditionID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue getItemConditionDescription() {
          if (itemConditionDescriptionBuilder_ == null) {
            return itemConditionDescription_ == null ? io.dstore.engine.Values.stringValue.getDefaultInstance() : itemConditionDescription_;
          } else {
            return itemConditionDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
         *
         * <pre>
         * Bezeichnung der Artikel-Bedingung "ItemConditionID"
         * </pre>
         */
        public Builder setItemConditionDescription(io.dstore.engine.Values.stringValue value) {
          if (itemConditionDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            itemConditionDescription_ = value;
            onChanged();
          } else {
            itemConditionDescriptionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
         *
         * <pre>
         * Bezeichnung der Artikel-Bedingung "ItemConditionID"
         * </pre>
         */
        public Builder setItemConditionDescription(
            io.dstore.engine.Values.stringValue.Builder builderForValue) {
          if (itemConditionDescriptionBuilder_ == null) {
            itemConditionDescription_ = builderForValue.build();
            onChanged();
          } else {
            itemConditionDescriptionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
         *
         * <pre>
         * Bezeichnung der Artikel-Bedingung "ItemConditionID"
         * </pre>
         */
        public Builder mergeItemConditionDescription(io.dstore.engine.Values.stringValue value) {
          if (itemConditionDescriptionBuilder_ == null) {
            if (itemConditionDescription_ != null) {
              itemConditionDescription_ =
                io.dstore.engine.Values.stringValue.newBuilder(itemConditionDescription_).mergeFrom(value).buildPartial();
            } else {
              itemConditionDescription_ = value;
            }
            onChanged();
          } else {
            itemConditionDescriptionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
         *
         * <pre>
         * Bezeichnung der Artikel-Bedingung "ItemConditionID"
         * </pre>
         */
        public Builder clearItemConditionDescription() {
          if (itemConditionDescriptionBuilder_ == null) {
            itemConditionDescription_ = null;
            onChanged();
          } else {
            itemConditionDescription_ = null;
            itemConditionDescriptionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
         *
         * <pre>
         * Bezeichnung der Artikel-Bedingung "ItemConditionID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValue.Builder getItemConditionDescriptionBuilder() {
          
          onChanged();
          return getItemConditionDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
         *
         * <pre>
         * Bezeichnung der Artikel-Bedingung "ItemConditionID"
         * </pre>
         */
        public io.dstore.engine.Values.stringValueOrBuilder getItemConditionDescriptionOrBuilder() {
          if (itemConditionDescriptionBuilder_ != null) {
            return itemConditionDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return itemConditionDescription_ == null ?
                io.dstore.engine.Values.stringValue.getDefaultInstance() : itemConditionDescription_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.stringValue item_condition_description = 10042;</code>
         *
         * <pre>
         * Bezeichnung der Artikel-Bedingung "ItemConditionID"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder> 
            getItemConditionDescriptionFieldBuilder() {
          if (itemConditionDescriptionBuilder_ == null) {
            itemConditionDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.stringValue, io.dstore.engine.Values.stringValue.Builder, io.dstore.engine.Values.stringValueOrBuilder>(
                    getItemConditionDescription(),
                    getParentForChildren(),
                    isClean());
            itemConditionDescription_ = null;
          }
          return itemConditionDescriptionBuilder_;
        }

        private io.dstore.engine.Values.decimalValue toItemBasicPrice_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> toItemBasicPriceBuilder_;
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasToItemBasicPrice() {
          return toItemBasicPriceBuilder_ != null || toItemBasicPrice_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue getToItemBasicPrice() {
          if (toItemBasicPriceBuilder_ == null) {
            return toItemBasicPrice_ == null ? io.dstore.engine.Values.decimalValue.getDefaultInstance() : toItemBasicPrice_;
          } else {
            return toItemBasicPriceBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setToItemBasicPrice(io.dstore.engine.Values.decimalValue value) {
          if (toItemBasicPriceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            toItemBasicPrice_ = value;
            onChanged();
          } else {
            toItemBasicPriceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setToItemBasicPrice(
            io.dstore.engine.Values.decimalValue.Builder builderForValue) {
          if (toItemBasicPriceBuilder_ == null) {
            toItemBasicPrice_ = builderForValue.build();
            onChanged();
          } else {
            toItemBasicPriceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeToItemBasicPrice(io.dstore.engine.Values.decimalValue value) {
          if (toItemBasicPriceBuilder_ == null) {
            if (toItemBasicPrice_ != null) {
              toItemBasicPrice_ =
                io.dstore.engine.Values.decimalValue.newBuilder(toItemBasicPrice_).mergeFrom(value).buildPartial();
            } else {
              toItemBasicPrice_ = value;
            }
            onChanged();
          } else {
            toItemBasicPriceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearToItemBasicPrice() {
          if (toItemBasicPriceBuilder_ == null) {
            toItemBasicPrice_ = null;
            onChanged();
          } else {
            toItemBasicPrice_ = null;
            toItemBasicPriceBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValue.Builder getToItemBasicPriceBuilder() {
          
          onChanged();
          return getToItemBasicPriceFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.decimalValueOrBuilder getToItemBasicPriceOrBuilder() {
          if (toItemBasicPriceBuilder_ != null) {
            return toItemBasicPriceBuilder_.getMessageOrBuilder();
          } else {
            return toItemBasicPrice_ == null ?
                io.dstore.engine.Values.decimalValue.getDefaultInstance() : toItemBasicPrice_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.decimalValue to_item_basic_price = 10043;</code>
         *
         * <pre>
         * Der EINZEL-Preis, den "_om_GetBasicPrices" für ein Artikel-Element, das die Bedingung "ItemConditionID" erfüllt, liefert, muß zwischen "FromItemBasicPrice" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder> 
            getToItemBasicPriceFieldBuilder() {
          if (toItemBasicPriceBuilder_ == null) {
            toItemBasicPriceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.decimalValue, io.dstore.engine.Values.decimalValue.Builder, io.dstore.engine.Values.decimalValueOrBuilder>(
                    getToItemBasicPrice(),
                    getParentForChildren(),
                    isClean());
            toItemBasicPrice_ = null;
          }
          return toItemBasicPriceBuilder_;
        }

        private io.dstore.engine.Values.integerValue toQuantityPart_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> toQuantityPartBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasToQuantityPart() {
          return toQuantityPartBuilder_ != null || toQuantityPart_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getToQuantityPart() {
          if (toQuantityPartBuilder_ == null) {
            return toQuantityPart_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : toQuantityPart_;
          } else {
            return toQuantityPartBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setToQuantityPart(io.dstore.engine.Values.integerValue value) {
          if (toQuantityPartBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            toQuantityPart_ = value;
            onChanged();
          } else {
            toQuantityPartBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setToQuantityPart(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (toQuantityPartBuilder_ == null) {
            toQuantityPart_ = builderForValue.build();
            onChanged();
          } else {
            toQuantityPartBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeToQuantityPart(io.dstore.engine.Values.integerValue value) {
          if (toQuantityPartBuilder_ == null) {
            if (toQuantityPart_ != null) {
              toQuantityPart_ =
                io.dstore.engine.Values.integerValue.newBuilder(toQuantityPart_).mergeFrom(value).buildPartial();
            } else {
              toQuantityPart_ = value;
            }
            onChanged();
          } else {
            toQuantityPartBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearToQuantityPart() {
          if (toQuantityPartBuilder_ == null) {
            toQuantityPart_ = null;
            onChanged();
          } else {
            toQuantityPart_ = null;
            toQuantityPartBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getToQuantityPartBuilder() {
          
          onChanged();
          return getToQuantityPartFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getToQuantityPartOrBuilder() {
          if (toQuantityPartBuilder_ != null) {
            return toQuantityPartBuilder_.getMessageOrBuilder();
          } else {
            return toQuantityPart_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : toQuantityPart_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue to_quantity_part = 10044;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen "FromQuantity" und diesem Wert (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getToQuantityPartFieldBuilder() {
          if (toQuantityPartBuilder_ == null) {
            toQuantityPartBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getToQuantityPart(),
                    getParentForChildren(),
                    isClean());
            toQuantityPart_ = null;
          }
          return toQuantityPartBuilder_;
        }

        private io.dstore.engine.Values.integerValue fromQuantityPart_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> fromQuantityPartBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasFromQuantityPart() {
          return fromQuantityPartBuilder_ != null || fromQuantityPart_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getFromQuantityPart() {
          if (fromQuantityPartBuilder_ == null) {
            return fromQuantityPart_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : fromQuantityPart_;
          } else {
            return fromQuantityPartBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setFromQuantityPart(io.dstore.engine.Values.integerValue value) {
          if (fromQuantityPartBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            fromQuantityPart_ = value;
            onChanged();
          } else {
            fromQuantityPartBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setFromQuantityPart(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (fromQuantityPartBuilder_ == null) {
            fromQuantityPart_ = builderForValue.build();
            onChanged();
          } else {
            fromQuantityPartBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeFromQuantityPart(io.dstore.engine.Values.integerValue value) {
          if (fromQuantityPartBuilder_ == null) {
            if (fromQuantityPart_ != null) {
              fromQuantityPart_ =
                io.dstore.engine.Values.integerValue.newBuilder(fromQuantityPart_).mergeFrom(value).buildPartial();
            } else {
              fromQuantityPart_ = value;
            }
            onChanged();
          } else {
            fromQuantityPartBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearFromQuantityPart() {
          if (fromQuantityPartBuilder_ == null) {
            fromQuantityPart_ = null;
            onChanged();
          } else {
            fromQuantityPart_ = null;
            fromQuantityPartBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getFromQuantityPartBuilder() {
          
          onChanged();
          return getFromQuantityPartFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getFromQuantityPartOrBuilder() {
          if (fromQuantityPartBuilder_ != null) {
            return fromQuantityPartBuilder_.getMessageOrBuilder();
          } else {
            return fromQuantityPart_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : fromQuantityPart_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue from_quantity_part = 10045;</code>
         *
         * <pre>
         * Die Gesamt-Menge (Summe "Quantity") ALLER Artikel-Elemente, die den Bedingungs-Teil "ItemConditionPartID" erfüllen, muß zwischen diesem Wert und "ToQuantity" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getFromQuantityPartFieldBuilder() {
          if (fromQuantityPartBuilder_ == null) {
            fromQuantityPartBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getFromQuantityPart(),
                    getParentForChildren(),
                    isClean());
            fromQuantityPart_ = null;
          }
          return fromQuantityPartBuilder_;
        }

        private io.dstore.engine.Values.integerValue minNumberOfItemsGroup_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> minNumberOfItemsGroupBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public boolean hasMinNumberOfItemsGroup() {
          return minNumberOfItemsGroupBuilder_ != null || minNumberOfItemsGroup_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getMinNumberOfItemsGroup() {
          if (minNumberOfItemsGroupBuilder_ == null) {
            return minNumberOfItemsGroup_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : minNumberOfItemsGroup_;
          } else {
            return minNumberOfItemsGroupBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setMinNumberOfItemsGroup(io.dstore.engine.Values.integerValue value) {
          if (minNumberOfItemsGroupBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            minNumberOfItemsGroup_ = value;
            onChanged();
          } else {
            minNumberOfItemsGroupBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder setMinNumberOfItemsGroup(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (minNumberOfItemsGroupBuilder_ == null) {
            minNumberOfItemsGroup_ = builderForValue.build();
            onChanged();
          } else {
            minNumberOfItemsGroupBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder mergeMinNumberOfItemsGroup(io.dstore.engine.Values.integerValue value) {
          if (minNumberOfItemsGroupBuilder_ == null) {
            if (minNumberOfItemsGroup_ != null) {
              minNumberOfItemsGroup_ =
                io.dstore.engine.Values.integerValue.newBuilder(minNumberOfItemsGroup_).mergeFrom(value).buildPartial();
            } else {
              minNumberOfItemsGroup_ = value;
            }
            onChanged();
          } else {
            minNumberOfItemsGroupBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public Builder clearMinNumberOfItemsGroup() {
          if (minNumberOfItemsGroupBuilder_ == null) {
            minNumberOfItemsGroup_ = null;
            onChanged();
          } else {
            minNumberOfItemsGroup_ = null;
            minNumberOfItemsGroupBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getMinNumberOfItemsGroupBuilder() {
          
          onChanged();
          return getMinNumberOfItemsGroupFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getMinNumberOfItemsGroupOrBuilder() {
          if (minNumberOfItemsGroupBuilder_ != null) {
            return minNumberOfItemsGroupBuilder_.getMessageOrBuilder();
          } else {
            return minNumberOfItemsGroup_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : minNumberOfItemsGroup_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue min_number_of_items_group = 10046;</code>
         *
         * <pre>
         * Die Anzahl VERSCHIEDENER Artikel-Elemente, die die Bedingungs-Gruppe "ItemConditionGroupID" erfüllen, muß zwischen diesem Wert und "MaxNumberOfItems" (sofern nicht "NULL") liegen (um "ConditionID" zu erfüllen)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getMinNumberOfItemsGroupFieldBuilder() {
          if (minNumberOfItemsGroupBuilder_ == null) {
            minNumberOfItemsGroupBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getMinNumberOfItemsGroup(),
                    getParentForChildren(),
                    isClean());
            minNumberOfItemsGroup_ = null;
          }
          return minNumberOfItemsGroupBuilder_;
        }

        private io.dstore.engine.Values.integerValue inheritDepth_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> inheritDepthBuilder_;
        /**
         * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
         *
         * <pre>
         * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
         * </pre>
         */
        public boolean hasInheritDepth() {
          return inheritDepthBuilder_ != null || inheritDepth_ != null;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
         *
         * <pre>
         * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
         * </pre>
         */
        public io.dstore.engine.Values.integerValue getInheritDepth() {
          if (inheritDepthBuilder_ == null) {
            return inheritDepth_ == null ? io.dstore.engine.Values.integerValue.getDefaultInstance() : inheritDepth_;
          } else {
            return inheritDepthBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
         *
         * <pre>
         * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
         * </pre>
         */
        public Builder setInheritDepth(io.dstore.engine.Values.integerValue value) {
          if (inheritDepthBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            inheritDepth_ = value;
            onChanged();
          } else {
            inheritDepthBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
         *
         * <pre>
         * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
         * </pre>
         */
        public Builder setInheritDepth(
            io.dstore.engine.Values.integerValue.Builder builderForValue) {
          if (inheritDepthBuilder_ == null) {
            inheritDepth_ = builderForValue.build();
            onChanged();
          } else {
            inheritDepthBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
         *
         * <pre>
         * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
         * </pre>
         */
        public Builder mergeInheritDepth(io.dstore.engine.Values.integerValue value) {
          if (inheritDepthBuilder_ == null) {
            if (inheritDepth_ != null) {
              inheritDepth_ =
                io.dstore.engine.Values.integerValue.newBuilder(inheritDepth_).mergeFrom(value).buildPartial();
            } else {
              inheritDepth_ = value;
            }
            onChanged();
          } else {
            inheritDepthBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
         *
         * <pre>
         * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
         * </pre>
         */
        public Builder clearInheritDepth() {
          if (inheritDepthBuilder_ == null) {
            inheritDepth_ = null;
            onChanged();
          } else {
            inheritDepth_ = null;
            inheritDepthBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
         *
         * <pre>
         * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
         * </pre>
         */
        public io.dstore.engine.Values.integerValue.Builder getInheritDepthBuilder() {
          
          onChanged();
          return getInheritDepthFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
         *
         * <pre>
         * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
         * </pre>
         */
        public io.dstore.engine.Values.integerValueOrBuilder getInheritDepthOrBuilder() {
          if (inheritDepthBuilder_ != null) {
            return inheritDepthBuilder_.getMessageOrBuilder();
          } else {
            return inheritDepth_ == null ?
                io.dstore.engine.Values.integerValue.getDefaultInstance() : inheritDepth_;
          }
        }
        /**
         * <code>optional .dstore.engine.values.integerValue inherit_depth = 10047;</code>
         *
         * <pre>
         * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder> 
            getInheritDepthFieldBuilder() {
          if (inheritDepthBuilder_ == null) {
            inheritDepthBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.engine.Values.integerValue, io.dstore.engine.Values.integerValue.Builder, io.dstore.engine.Values.integerValueOrBuilder>(
                    getInheritDepth(),
                    getParentForChildren(),
                    isClean());
            inheritDepth_ = null;
          }
          return inheritDepthBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetCampaignItemConds_Ad.Response.Row)
      }

      // @@protoc_insertion_point(class_scope:dstore.engine.om_GetCampaignItemConds_Ad.Response.Row)
      private static final io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row();
      }

      public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Row>
          PARSER = new com.google.protobuf.AbstractParser<Row>() {
        public Row parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new Row(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<Row> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Row> getParserForType() {
        return PARSER;
      }

      public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int ERROR_FIELD_NUMBER = 1;
    private io.dstore.engine.EngineError.Error error_;
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public boolean hasError() {
      return error_ != null;
    }
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public io.dstore.engine.EngineError.Error getError() {
      return error_ == null ? io.dstore.engine.EngineError.Error.getDefaultInstance() : error_;
    }
    /**
     * <code>optional .dstore.engine.error.Error error = 1;</code>
     */
    public io.dstore.engine.EngineError.ErrorOrBuilder getErrorOrBuilder() {
      return getError();
    }

    public static final int MESSAGE_FIELD_NUMBER = 3;
    private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_;
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public int getMessageCount() {
      return message_.size();
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
      return message_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index) {
      return message_.get(index);
    }

    public static final int ROW_FIELD_NUMBER = 4;
    private java.util.List<io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row> row_;
    /**
     * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public java.util.List<io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row> getRowList() {
      return row_;
    }
    /**
     * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public java.util.List<? extends io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.RowOrBuilder> 
        getRowOrBuilderList() {
      return row_;
    }
    /**
     * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public int getRowCount() {
      return row_.size();
    }
    /**
     * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row getRow(int index) {
      return row_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.RowOrBuilder getRowOrBuilder(
        int index) {
      return row_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (error_ != null) {
        output.writeMessage(1, getError());
      }
      for (int i = 0; i < message_.size(); i++) {
        output.writeMessage(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        output.writeMessage(4, row_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (error_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getError());
      }
      for (int i = 0; i < message_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, row_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetCampaignItemConds_Ad.Response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetCampaignItemConds_Ad.Response)
        io.dstore.engine.procs.OmGetCampaignItemCondsAd.ResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.class, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Builder.class);
      }

      // Construct using io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMessageFieldBuilder();
          getRowFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (errorBuilder_ == null) {
          error_ = null;
        } else {
          error_ = null;
          errorBuilder_ = null;
        }
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          messageBuilder_.clear();
        }
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          rowBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procs.OmGetCampaignItemCondsAd.internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_descriptor;
      }

      public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response getDefaultInstanceForType() {
        return io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.getDefaultInstance();
      }

      public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response build() {
        io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response buildPartial() {
        io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response result = new io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (errorBuilder_ == null) {
          result.error_ = error_;
        } else {
          result.error_ = errorBuilder_.build();
        }
        if (messageBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            message_ = java.util.Collections.unmodifiableList(message_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.message_ = message_;
        } else {
          result.message_ = messageBuilder_.build();
        }
        if (rowBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            row_ = java.util.Collections.unmodifiableList(row_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.row_ = row_;
        } else {
          result.row_ = rowBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response) {
          return mergeFrom((io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response other) {
        if (other == io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.getDefaultInstance()) return this;
        if (other.hasError()) {
          mergeError(other.getError());
        }
        if (messageBuilder_ == null) {
          if (!other.message_.isEmpty()) {
            if (message_.isEmpty()) {
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMessageIsMutable();
              message_.addAll(other.message_);
            }
            onChanged();
          }
        } else {
          if (!other.message_.isEmpty()) {
            if (messageBuilder_.isEmpty()) {
              messageBuilder_.dispose();
              messageBuilder_ = null;
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
              messageBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMessageFieldBuilder() : null;
            } else {
              messageBuilder_.addAllMessages(other.message_);
            }
          }
        }
        if (rowBuilder_ == null) {
          if (!other.row_.isEmpty()) {
            if (row_.isEmpty()) {
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureRowIsMutable();
              row_.addAll(other.row_);
            }
            onChanged();
          }
        } else {
          if (!other.row_.isEmpty()) {
            if (rowBuilder_.isEmpty()) {
              rowBuilder_.dispose();
              rowBuilder_ = null;
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
              rowBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRowFieldBuilder() : null;
            } else {
              rowBuilder_.addAllMessages(other.row_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private io.dstore.engine.EngineError.Error error_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.EngineError.Error, io.dstore.engine.EngineError.Error.Builder, io.dstore.engine.EngineError.ErrorOrBuilder> errorBuilder_;
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public boolean hasError() {
        return errorBuilder_ != null || error_ != null;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.EngineError.Error getError() {
        if (errorBuilder_ == null) {
          return error_ == null ? io.dstore.engine.EngineError.Error.getDefaultInstance() : error_;
        } else {
          return errorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder setError(io.dstore.engine.EngineError.Error value) {
        if (errorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          error_ = value;
          onChanged();
        } else {
          errorBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder setError(
          io.dstore.engine.EngineError.Error.Builder builderForValue) {
        if (errorBuilder_ == null) {
          error_ = builderForValue.build();
          onChanged();
        } else {
          errorBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder mergeError(io.dstore.engine.EngineError.Error value) {
        if (errorBuilder_ == null) {
          if (error_ != null) {
            error_ =
              io.dstore.engine.EngineError.Error.newBuilder(error_).mergeFrom(value).buildPartial();
          } else {
            error_ = value;
          }
          onChanged();
        } else {
          errorBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public Builder clearError() {
        if (errorBuilder_ == null) {
          error_ = null;
          onChanged();
        } else {
          error_ = null;
          errorBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.EngineError.Error.Builder getErrorBuilder() {
        
        onChanged();
        return getErrorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      public io.dstore.engine.EngineError.ErrorOrBuilder getErrorOrBuilder() {
        if (errorBuilder_ != null) {
          return errorBuilder_.getMessageOrBuilder();
        } else {
          return error_ == null ?
              io.dstore.engine.EngineError.Error.getDefaultInstance() : error_;
        }
      }
      /**
       * <code>optional .dstore.engine.error.Error error = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.engine.EngineError.Error, io.dstore.engine.EngineError.Error.Builder, io.dstore.engine.EngineError.ErrorOrBuilder> 
          getErrorFieldBuilder() {
        if (errorBuilder_ == null) {
          errorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.engine.EngineError.Error, io.dstore.engine.EngineError.Error.Builder, io.dstore.engine.EngineError.ErrorOrBuilder>(
                  getError(),
                  getParentForChildren(),
                  isClean());
          error_ = null;
        }
        return errorBuilder_;
      }

      private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_ =
        java.util.Collections.emptyList();
      private void ensureMessageIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>(message_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> messageBuilder_;

      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
        if (messageBuilder_ == null) {
          return java.util.Collections.unmodifiableList(message_);
        } else {
          return messageBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public int getMessageCount() {
        if (messageBuilder_ == null) {
          return message_.size();
        } else {
          return messageBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);
        } else {
          return messageBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.set(index, value);
          onChanged();
        } else {
          messageBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.set(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(value);
          onChanged();
        } else {
          messageBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(index, value);
          onChanged();
        } else {
          messageBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addAllMessage(
          java.lang.Iterable<? extends io.dstore.engine.ProcedureMessage.Message> values) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, message_);
          onChanged();
        } else {
          messageBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder clearMessage() {
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          messageBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder removeMessage(int index) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.remove(index);
          onChanged();
        } else {
          messageBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder getMessageBuilder(
          int index) {
        return getMessageFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
          int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);  } else {
          return messageBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
           getMessageOrBuilderList() {
        if (messageBuilder_ != null) {
          return messageBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(message_);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder() {
        return getMessageFieldBuilder().addBuilder(
            io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder(
          int index) {
        return getMessageFieldBuilder().addBuilder(
            index, io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message.Builder> 
           getMessageBuilderList() {
        return getMessageFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
          getMessageFieldBuilder() {
        if (messageBuilder_ == null) {
          messageBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder>(
                  message_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        return messageBuilder_;
      }

      private java.util.List<io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row> row_ =
        java.util.Collections.emptyList();
      private void ensureRowIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = new java.util.ArrayList<io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row>(row_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.Builder, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.RowOrBuilder> rowBuilder_;

      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row> getRowList() {
        if (rowBuilder_ == null) {
          return java.util.Collections.unmodifiableList(row_);
        } else {
          return rowBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public int getRowCount() {
        if (rowBuilder_ == null) {
          return row_.size();
        } else {
          return rowBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row getRow(int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);
        } else {
          return rowBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder setRow(
          int index, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.set(index, value);
          onChanged();
        } else {
          rowBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder setRow(
          int index, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.set(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(value);
          onChanged();
        } else {
          rowBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          int index, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(index, value);
          onChanged();
        } else {
          rowBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          int index, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addAllRow(
          java.lang.Iterable<? extends io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row> values) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, row_);
          onChanged();
        } else {
          rowBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder clearRow() {
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          rowBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder removeRow(int index) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.remove(index);
          onChanged();
        } else {
          rowBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.Builder getRowBuilder(
          int index) {
        return getRowFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.RowOrBuilder getRowOrBuilder(
          int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);  } else {
          return rowBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<? extends io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.RowOrBuilder> 
           getRowOrBuilderList() {
        if (rowBuilder_ != null) {
          return rowBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(row_);
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.Builder addRowBuilder() {
        return getRowFieldBuilder().addBuilder(
            io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.Builder addRowBuilder(
          int index) {
        return getRowFieldBuilder().addBuilder(
            index, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.om_GetCampaignItemConds_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.Builder> 
           getRowBuilderList() {
        return getRowFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.Builder, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.RowOrBuilder> 
          getRowFieldBuilder() {
        if (rowBuilder_ == null) {
          rowBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.Row.Builder, io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response.RowOrBuilder>(
                  row_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          row_ = null;
        }
        return rowBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetCampaignItemConds_Ad.Response)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.om_GetCampaignItemConds_Ad.Response)
    private static final io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response();
    }

    public static io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Response>
        PARSER = new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Response(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Response> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procs.OmGetCampaignItemCondsAd.Response getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Parameters_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Parameters_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_Row_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_Row_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n9dstore/engine/procedures/om_GetCampaig" +
      "nItemConds_Ad.proto\022(dstore.engine.om_Ge" +
      "tCampaignItemConds_Ad\032\032dstore/engine/val" +
      "ues.proto\032\031dstore/engine/error.proto\032\033ds" +
      "tore/engine/message.proto\"\252\002\n\nParameters" +
      "\0228\n\014condition_id\030\001 \001(\0132\".dstore.engine.v" +
      "alues.integerValue\022\032\n\021condition_id_null\030" +
      "\351\007 \001(\010\022=\n\021item_condition_id\030\002 \001(\0132\".dsto" +
      "re.engine.values.integerValue\022\037\n\026item_co" +
      "ndition_id_null\030\352\007 \001(\010\022A\n\025get_unused_con",
      "ditions\030\003 \001(\0132\".dstore.engine.values.boo" +
      "leanValue\022#\n\032get_unused_conditions_null\030" +
      "\353\007 \001(\010\"\250\032\n\010Response\022)\n\005error\030\001 \001(\0132\032.dst" +
      "ore.engine.error.Error\022/\n\007message\030\003 \003(\0132" +
      "\036.dstore.engine.message.Message\022C\n\003row\030\004" +
      " \003(\01326.dstore.engine.om_GetCampaignItemC" +
      "onds_Ad.Response.Row\032\372\030\n\003Row\022\017\n\006row_id\030\220" +
      "N \001(\005\022A\n\025condition_description\030\221N \001(\0132!." +
      "dstore.engine.values.stringValue\0226\n\ncond" +
      "ition1\030\222N \001(\0132!.dstore.engine.values.str",
      "ingValue\0226\n\ncondition2\030\223N \001(\0132!.dstore.e" +
      "ngine.values.stringValue\022E\n\030to_basic_pri" +
      "ce_sum_group\030\224N \001(\0132\".dstore.engine.valu" +
      "es.decimalValue\022A\n\024recursive_evaluation\030" +
      "\225N \001(\0132\".dstore.engine.values.integerVal" +
      "ue\022D\n\027to_basic_price_sum_part\030\226N \001(\0132\".d" +
      "store.engine.values.decimalValue\022F\n\031max_" +
      "number_of_items_group\030\227N \001(\0132\".dstore.en" +
      "gine.values.integerValue\022@\n\024domain_tree_" +
      "node_ids\030\230N \001(\0132!.dstore.engine.values.s",
      "tringValue\022C\n\026node_characteristic_id\030\231N " +
      "\001(\0132\".dstore.engine.values.integerValue\022" +
      "C\n\026item_condition_part_id\030\232N \001(\0132\".dstor" +
      "e.engine.values.integerValue\022F\n\031from_bas" +
      "ic_price_sum_part\030\233N \001(\0132\".dstore.engine" +
      ".values.decimalValue\0228\n\013to_quantity\030\234N \001" +
      "(\0132\".dstore.engine.values.integerValue\022@" +
      "\n\023from_quantity_group\030\235N \001(\0132\".dstore.en" +
      "gine.values.integerValue\022>\n\021item_conditi" +
      "on_id\030\236N \001(\0132\".dstore.engine.values.inte",
      "gerValue\022@\n\023max_number_of_items\030\237N \001(\0132\"" +
      ".dstore.engine.values.integerValue\022O\n\"co" +
      "mbine_groups_with_a_n_d_operator\030\240N \001(\0132" +
      "\".dstore.engine.values.booleanValue\022G\n\032f" +
      "rom_basic_price_sum_group\030\241N \001(\0132\".dstor" +
      "e.engine.values.decimalValue\022E\n\030to_item_" +
      "basic_price_part\030\242N \001(\0132\".dstore.engine." +
      "values.decimalValue\022K\n\037item_condition_pa" +
      "rt_description\030\243N \001(\0132!.dstore.engine.va" +
      "lues.stringValue\0225\n\tlevel_ids\030\244N \001(\0132!.d",
      "store.engine.values.stringValue\022D\n\027item_" +
      "condition_group_id\030\245N \001(\0132\".dstore.engin" +
      "e.values.integerValue\022J\n\036extended_item_c" +
      "ond_group_descr\030\246N \001(\0132!.dstore.engine.v" +
      "alues.stringValue\022:\n\rfrom_quantity\030\247N \001(" +
      "\0132\".dstore.engine.values.integerValue\022B\n" +
      "\025from_item_basic_price\030\250N \001(\0132\".dstore.e" +
      "ngine.values.decimalValue\022?\n\022item_group_" +
      "sort_no\030\251N \001(\0132\".dstore.engine.values.in" +
      "tegerValue\0225\n\toperator1\030\252N \001(\0132!.dstore.",
      "engine.values.stringValue\0225\n\toperator2\030\253" +
      "N \001(\0132!.dstore.engine.values.stringValue" +
      "\022L\n item_condition_group_description\030\254N " +
      "\001(\0132!.dstore.engine.values.stringValue\022N" +
      "\n!combine_parts_with_a_n_d_operator\030\255N \001" +
      "(\0132\".dstore.engine.values.booleanValue\022E" +
      "\n\030min_number_of_items_part\030\256N \001(\0132\".dsto" +
      "re.engine.values.integerValue\022>\n\021item_pa" +
      "rt_sort_no\030\257N \001(\0132\".dstore.engine.values" +
      ".integerValue\022F\n\031to_item_basic_price_gro",
      "up\030\260N \001(\0132\".dstore.engine.values.decimal" +
      "Value\022I\n\035extended_item_cond_part_descr\030\261" +
      "N \001(\0132!.dstore.engine.values.stringValue" +
      "\022E\n\030max_number_of_items_part\030\262N \001(\0132\".ds" +
      "tore.engine.values.integerValue\022G\n\032from_" +
      "item_basic_price_part\030\263N \001(\0132\".dstore.en" +
      "gine.values.decimalValue\022@\n\023min_number_o" +
      "f_items\030\264N \001(\0132\".dstore.engine.values.in" +
      "tegerValue\022A\n\024from_basic_price_sum\030\265N \001(" +
      "\0132\".dstore.engine.values.decimalValue\022?\n",
      "\022to_basic_price_sum\030\266N \001(\0132\".dstore.engi" +
      "ne.values.decimalValue\022>\n\021to_quantity_gr" +
      "oup\030\267N \001(\0132\".dstore.engine.values.intege" +
      "rValue\022H\n\033from_item_basic_price_group\030\270N" +
      " \001(\0132\".dstore.engine.values.decimalValue" +
      "\0229\n\014condition_id\030\271N \001(\0132\".dstore.engine." +
      "values.integerValue\022F\n\032item_condition_de" +
      "scription\030\272N \001(\0132!.dstore.engine.values." +
      "stringValue\022@\n\023to_item_basic_price\030\273N \001(" +
      "\0132\".dstore.engine.values.decimalValue\022=\n",
      "\020to_quantity_part\030\274N \001(\0132\".dstore.engine" +
      ".values.integerValue\022?\n\022from_quantity_pa" +
      "rt\030\275N \001(\0132\".dstore.engine.values.integer" +
      "Value\022F\n\031min_number_of_items_group\030\276N \001(" +
      "\0132\".dstore.engine.values.integerValue\022:\n" +
      "\rinherit_depth\030\277N \001(\0132\".dstore.engine.va" +
      "lues.integerValueB\030\n\026io.dstore.engine.pr" +
      "ocsb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.dstore.engine.Values.getDescriptor(),
          io.dstore.engine.EngineError.getDescriptor(),
          io.dstore.engine.ProcedureMessage.getDescriptor(),
        }, assigner);
    internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Parameters_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Parameters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Parameters_descriptor,
        new java.lang.String[] { "ConditionId", "ConditionIdNull", "ItemConditionId", "ItemConditionIdNull", "GetUnusedConditions", "GetUnusedConditionsNull", });
    internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_descriptor,
        new java.lang.String[] { "Error", "Message", "Row", });
    internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_Row_descriptor =
      internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_descriptor.getNestedTypes().get(0);
    internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_Row_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_om_GetCampaignItemConds_Ad_Response_Row_descriptor,
        new java.lang.String[] { "RowId", "ConditionDescription", "Condition1", "Condition2", "ToBasicPriceSumGroup", "RecursiveEvaluation", "ToBasicPriceSumPart", "MaxNumberOfItemsGroup", "DomainTreeNodeIds", "NodeCharacteristicId", "ItemConditionPartId", "FromBasicPriceSumPart", "ToQuantity", "FromQuantityGroup", "ItemConditionId", "MaxNumberOfItems", "CombineGroupsWithANDOperator", "FromBasicPriceSumGroup", "ToItemBasicPricePart", "ItemConditionPartDescription", "LevelIds", "ItemConditionGroupId", "ExtendedItemCondGroupDescr", "FromQuantity", "FromItemBasicPrice", "ItemGroupSortNo", "Operator1", "Operator2", "ItemConditionGroupDescription", "CombinePartsWithANDOperator", "MinNumberOfItemsPart", "ItemPartSortNo", "ToItemBasicPriceGroup", "ExtendedItemCondPartDescr", "MaxNumberOfItemsPart", "FromItemBasicPricePart", "MinNumberOfItems", "FromBasicPriceSum", "ToBasicPriceSum", "ToQuantityGroup", "FromItemBasicPriceGroup", "ConditionId", "ItemConditionDescription", "ToItemBasicPrice", "ToQuantityPart", "FromQuantityPart", "MinNumberOfItemsGroup", "InheritDepth", });
    io.dstore.engine.Values.getDescriptor();
    io.dstore.engine.EngineError.getDescriptor();
    io.dstore.engine.ProcedureMessage.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
