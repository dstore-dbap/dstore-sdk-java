// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dstore/engine/procedures/pm_ConsistencyCheck_Ad.proto

package io.dstore.engine.procedures;

public final class PmConsistencyCheckAd {
  private PmConsistencyCheckAd() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ParametersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.pm_ConsistencyCheck_Ad.Parameters)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
     */
    boolean hasPersonCharacteristicId();
    /**
     * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
     */
    io.dstore.Values.integerValue getPersonCharacteristicId();
    /**
     * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
     */
    io.dstore.Values.integerValueOrBuilder getPersonCharacteristicIdOrBuilder();

    /**
     * <code>optional bool person_characteristic_id_null = 1001;</code>
     */
    boolean getPersonCharacteristicIdNull();

    /**
     * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
     */
    boolean hasWhatToCheck();
    /**
     * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
     */
    io.dstore.Values.integerValue getWhatToCheck();
    /**
     * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
     */
    io.dstore.Values.integerValueOrBuilder getWhatToCheckOrBuilder();

    /**
     * <code>optional bool what_to_check_null = 1002;</code>
     */
    boolean getWhatToCheckNull();
  }
  /**
   * Protobuf type {@code dstore.engine.pm_ConsistencyCheck_Ad.Parameters}
   */
  public  static final class Parameters extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.pm_ConsistencyCheck_Ad.Parameters)
      ParametersOrBuilder {
    // Use Parameters.newBuilder() to construct.
    private Parameters(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Parameters() {
      personCharacteristicIdNull_ = false;
      whatToCheckNull_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Parameters(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.Values.integerValue.Builder subBuilder = null;
              if (personCharacteristicId_ != null) {
                subBuilder = personCharacteristicId_.toBuilder();
              }
              personCharacteristicId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(personCharacteristicId_);
                personCharacteristicId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.dstore.Values.integerValue.Builder subBuilder = null;
              if (whatToCheck_ != null) {
                subBuilder = whatToCheck_.toBuilder();
              }
              whatToCheck_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(whatToCheck_);
                whatToCheck_ = subBuilder.buildPartial();
              }

              break;
            }
            case 8008: {

              personCharacteristicIdNull_ = input.readBool();
              break;
            }
            case 8016: {

              whatToCheckNull_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Parameters_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Parameters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters.class, io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters.Builder.class);
    }

    public static final int PERSON_CHARACTERISTIC_ID_FIELD_NUMBER = 1;
    private io.dstore.Values.integerValue personCharacteristicId_;
    /**
     * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
     */
    public boolean hasPersonCharacteristicId() {
      return personCharacteristicId_ != null;
    }
    /**
     * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
     */
    public io.dstore.Values.integerValue getPersonCharacteristicId() {
      return personCharacteristicId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : personCharacteristicId_;
    }
    /**
     * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
     */
    public io.dstore.Values.integerValueOrBuilder getPersonCharacteristicIdOrBuilder() {
      return getPersonCharacteristicId();
    }

    public static final int PERSON_CHARACTERISTIC_ID_NULL_FIELD_NUMBER = 1001;
    private boolean personCharacteristicIdNull_;
    /**
     * <code>optional bool person_characteristic_id_null = 1001;</code>
     */
    public boolean getPersonCharacteristicIdNull() {
      return personCharacteristicIdNull_;
    }

    public static final int WHAT_TO_CHECK_FIELD_NUMBER = 2;
    private io.dstore.Values.integerValue whatToCheck_;
    /**
     * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
     */
    public boolean hasWhatToCheck() {
      return whatToCheck_ != null;
    }
    /**
     * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
     */
    public io.dstore.Values.integerValue getWhatToCheck() {
      return whatToCheck_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : whatToCheck_;
    }
    /**
     * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
     */
    public io.dstore.Values.integerValueOrBuilder getWhatToCheckOrBuilder() {
      return getWhatToCheck();
    }

    public static final int WHAT_TO_CHECK_NULL_FIELD_NUMBER = 1002;
    private boolean whatToCheckNull_;
    /**
     * <code>optional bool what_to_check_null = 1002;</code>
     */
    public boolean getWhatToCheckNull() {
      return whatToCheckNull_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (personCharacteristicId_ != null) {
        output.writeMessage(1, getPersonCharacteristicId());
      }
      if (whatToCheck_ != null) {
        output.writeMessage(2, getWhatToCheck());
      }
      if (personCharacteristicIdNull_ != false) {
        output.writeBool(1001, personCharacteristicIdNull_);
      }
      if (whatToCheckNull_ != false) {
        output.writeBool(1002, whatToCheckNull_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (personCharacteristicId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getPersonCharacteristicId());
      }
      if (whatToCheck_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getWhatToCheck());
      }
      if (personCharacteristicIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1001, personCharacteristicIdNull_);
      }
      if (whatToCheckNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1002, whatToCheckNull_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.pm_ConsistencyCheck_Ad.Parameters}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.pm_ConsistencyCheck_Ad.Parameters)
        io.dstore.engine.procedures.PmConsistencyCheckAd.ParametersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Parameters_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Parameters_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters.class, io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters.Builder.class);
      }

      // Construct using io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (personCharacteristicIdBuilder_ == null) {
          personCharacteristicId_ = null;
        } else {
          personCharacteristicId_ = null;
          personCharacteristicIdBuilder_ = null;
        }
        personCharacteristicIdNull_ = false;

        if (whatToCheckBuilder_ == null) {
          whatToCheck_ = null;
        } else {
          whatToCheck_ = null;
          whatToCheckBuilder_ = null;
        }
        whatToCheckNull_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Parameters_descriptor;
      }

      public io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters getDefaultInstanceForType() {
        return io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters.getDefaultInstance();
      }

      public io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters build() {
        io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters buildPartial() {
        io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters result = new io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters(this);
        if (personCharacteristicIdBuilder_ == null) {
          result.personCharacteristicId_ = personCharacteristicId_;
        } else {
          result.personCharacteristicId_ = personCharacteristicIdBuilder_.build();
        }
        result.personCharacteristicIdNull_ = personCharacteristicIdNull_;
        if (whatToCheckBuilder_ == null) {
          result.whatToCheck_ = whatToCheck_;
        } else {
          result.whatToCheck_ = whatToCheckBuilder_.build();
        }
        result.whatToCheckNull_ = whatToCheckNull_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters) {
          return mergeFrom((io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters other) {
        if (other == io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters.getDefaultInstance()) return this;
        if (other.hasPersonCharacteristicId()) {
          mergePersonCharacteristicId(other.getPersonCharacteristicId());
        }
        if (other.getPersonCharacteristicIdNull() != false) {
          setPersonCharacteristicIdNull(other.getPersonCharacteristicIdNull());
        }
        if (other.hasWhatToCheck()) {
          mergeWhatToCheck(other.getWhatToCheck());
        }
        if (other.getWhatToCheckNull() != false) {
          setWhatToCheckNull(other.getWhatToCheckNull());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.dstore.Values.integerValue personCharacteristicId_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> personCharacteristicIdBuilder_;
      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
       */
      public boolean hasPersonCharacteristicId() {
        return personCharacteristicIdBuilder_ != null || personCharacteristicId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
       */
      public io.dstore.Values.integerValue getPersonCharacteristicId() {
        if (personCharacteristicIdBuilder_ == null) {
          return personCharacteristicId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : personCharacteristicId_;
        } else {
          return personCharacteristicIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
       */
      public Builder setPersonCharacteristicId(io.dstore.Values.integerValue value) {
        if (personCharacteristicIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          personCharacteristicId_ = value;
          onChanged();
        } else {
          personCharacteristicIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
       */
      public Builder setPersonCharacteristicId(
          io.dstore.Values.integerValue.Builder builderForValue) {
        if (personCharacteristicIdBuilder_ == null) {
          personCharacteristicId_ = builderForValue.build();
          onChanged();
        } else {
          personCharacteristicIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
       */
      public Builder mergePersonCharacteristicId(io.dstore.Values.integerValue value) {
        if (personCharacteristicIdBuilder_ == null) {
          if (personCharacteristicId_ != null) {
            personCharacteristicId_ =
              io.dstore.Values.integerValue.newBuilder(personCharacteristicId_).mergeFrom(value).buildPartial();
          } else {
            personCharacteristicId_ = value;
          }
          onChanged();
        } else {
          personCharacteristicIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
       */
      public Builder clearPersonCharacteristicId() {
        if (personCharacteristicIdBuilder_ == null) {
          personCharacteristicId_ = null;
          onChanged();
        } else {
          personCharacteristicId_ = null;
          personCharacteristicIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
       */
      public io.dstore.Values.integerValue.Builder getPersonCharacteristicIdBuilder() {
        
        onChanged();
        return getPersonCharacteristicIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getPersonCharacteristicIdOrBuilder() {
        if (personCharacteristicIdBuilder_ != null) {
          return personCharacteristicIdBuilder_.getMessageOrBuilder();
        } else {
          return personCharacteristicId_ == null ?
              io.dstore.Values.integerValue.getDefaultInstance() : personCharacteristicId_;
        }
      }
      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
          getPersonCharacteristicIdFieldBuilder() {
        if (personCharacteristicIdBuilder_ == null) {
          personCharacteristicIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                  getPersonCharacteristicId(),
                  getParentForChildren(),
                  isClean());
          personCharacteristicId_ = null;
        }
        return personCharacteristicIdBuilder_;
      }

      private boolean personCharacteristicIdNull_ ;
      /**
       * <code>optional bool person_characteristic_id_null = 1001;</code>
       */
      public boolean getPersonCharacteristicIdNull() {
        return personCharacteristicIdNull_;
      }
      /**
       * <code>optional bool person_characteristic_id_null = 1001;</code>
       */
      public Builder setPersonCharacteristicIdNull(boolean value) {
        
        personCharacteristicIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool person_characteristic_id_null = 1001;</code>
       */
      public Builder clearPersonCharacteristicIdNull() {
        
        personCharacteristicIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.integerValue whatToCheck_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> whatToCheckBuilder_;
      /**
       * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
       */
      public boolean hasWhatToCheck() {
        return whatToCheckBuilder_ != null || whatToCheck_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
       */
      public io.dstore.Values.integerValue getWhatToCheck() {
        if (whatToCheckBuilder_ == null) {
          return whatToCheck_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : whatToCheck_;
        } else {
          return whatToCheckBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
       */
      public Builder setWhatToCheck(io.dstore.Values.integerValue value) {
        if (whatToCheckBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          whatToCheck_ = value;
          onChanged();
        } else {
          whatToCheckBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
       */
      public Builder setWhatToCheck(
          io.dstore.Values.integerValue.Builder builderForValue) {
        if (whatToCheckBuilder_ == null) {
          whatToCheck_ = builderForValue.build();
          onChanged();
        } else {
          whatToCheckBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
       */
      public Builder mergeWhatToCheck(io.dstore.Values.integerValue value) {
        if (whatToCheckBuilder_ == null) {
          if (whatToCheck_ != null) {
            whatToCheck_ =
              io.dstore.Values.integerValue.newBuilder(whatToCheck_).mergeFrom(value).buildPartial();
          } else {
            whatToCheck_ = value;
          }
          onChanged();
        } else {
          whatToCheckBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
       */
      public Builder clearWhatToCheck() {
        if (whatToCheckBuilder_ == null) {
          whatToCheck_ = null;
          onChanged();
        } else {
          whatToCheck_ = null;
          whatToCheckBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
       */
      public io.dstore.Values.integerValue.Builder getWhatToCheckBuilder() {
        
        onChanged();
        return getWhatToCheckFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getWhatToCheckOrBuilder() {
        if (whatToCheckBuilder_ != null) {
          return whatToCheckBuilder_.getMessageOrBuilder();
        } else {
          return whatToCheck_ == null ?
              io.dstore.Values.integerValue.getDefaultInstance() : whatToCheck_;
        }
      }
      /**
       * <code>optional .dstore.values.integerValue what_to_check = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
          getWhatToCheckFieldBuilder() {
        if (whatToCheckBuilder_ == null) {
          whatToCheckBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                  getWhatToCheck(),
                  getParentForChildren(),
                  isClean());
          whatToCheck_ = null;
        }
        return whatToCheckBuilder_;
      }

      private boolean whatToCheckNull_ ;
      /**
       * <code>optional bool what_to_check_null = 1002;</code>
       */
      public boolean getWhatToCheckNull() {
        return whatToCheckNull_;
      }
      /**
       * <code>optional bool what_to_check_null = 1002;</code>
       */
      public Builder setWhatToCheckNull(boolean value) {
        
        whatToCheckNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool what_to_check_null = 1002;</code>
       */
      public Builder clearWhatToCheckNull() {
        
        whatToCheckNull_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.pm_ConsistencyCheck_Ad.Parameters)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.pm_ConsistencyCheck_Ad.Parameters)
    private static final io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters();
    }

    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Parameters>
        PARSER = new com.google.protobuf.AbstractParser<Parameters>() {
      public Parameters parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Parameters(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Parameters> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Parameters> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procedures.PmConsistencyCheckAd.Parameters getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.pm_ConsistencyCheck_Ad.Response)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> 
        getMetaInformationList();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index);
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    int getMetaInformationCount();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
        getMetaInformationOrBuilderList();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
        int index);

    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<io.dstore.engine.ProcedureMessage.Message> 
        getMessageList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.Message getMessage(int index);
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    int getMessageCount();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index);

    /**
     * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    java.util.List<io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row> 
        getRowList();
    /**
     * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row getRow(int index);
    /**
     * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    int getRowCount();
    /**
     * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    java.util.List<? extends io.dstore.engine.procedures.PmConsistencyCheckAd.Response.RowOrBuilder> 
        getRowOrBuilderList();
    /**
     * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    io.dstore.engine.procedures.PmConsistencyCheckAd.Response.RowOrBuilder getRowOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dstore.engine.pm_ConsistencyCheck_Ad.Response}
   */
  public  static final class Response extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.pm_ConsistencyCheck_Ad.Response)
      ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Response() {
      metaInformation_ = java.util.Collections.emptyList();
      message_ = java.util.Collections.emptyList();
      row_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                metaInformation_ = new java.util.ArrayList<io.dstore.engine.EngineMetaInformation.MetaInformation>();
                mutable_bitField0_ |= 0x00000001;
              }
              metaInformation_.add(input.readMessage(io.dstore.engine.EngineMetaInformation.MetaInformation.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>();
                mutable_bitField0_ |= 0x00000002;
              }
              message_.add(input.readMessage(io.dstore.engine.ProcedureMessage.Message.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                row_ = new java.util.ArrayList<io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row>();
                mutable_bitField0_ |= 0x00000004;
              }
              row_.add(input.readMessage(io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          metaInformation_ = java.util.Collections.unmodifiableList(metaInformation_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = java.util.Collections.unmodifiableList(message_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = java.util.Collections.unmodifiableList(row_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procedures.PmConsistencyCheckAd.Response.class, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Builder.class);
    }

    public interface RowOrBuilder extends
        // @@protoc_insertion_point(interface_extends:dstore.engine.pm_ConsistencyCheck_Ad.Response.Row)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      int getRowId();

      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
       *
       * <pre>
       * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
       * </pre>
       */
      boolean hasPersonCharacteristicId();
      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
       *
       * <pre>
       * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
       * </pre>
       */
      io.dstore.Values.integerValue getPersonCharacteristicId();
      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
       *
       * <pre>
       * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getPersonCharacteristicIdOrBuilder();

      /**
       * <code>optional .dstore.values.stringValue value = 10002;</code>
       *
       * <pre>
       * Die Eigenschaft, die nicht mehr referenziert wird
       * </pre>
       */
      boolean hasValue();
      /**
       * <code>optional .dstore.values.stringValue value = 10002;</code>
       *
       * <pre>
       * Die Eigenschaft, die nicht mehr referenziert wird
       * </pre>
       */
      io.dstore.Values.stringValue getValue();
      /**
       * <code>optional .dstore.values.stringValue value = 10002;</code>
       *
       * <pre>
       * Die Eigenschaft, die nicht mehr referenziert wird
       * </pre>
       */
      io.dstore.Values.stringValueOrBuilder getValueOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue value_id = 10003;</code>
       *
       * <pre>
       * ID der Eigenschaft, die nicht mehr referenziert wird
       * </pre>
       */
      boolean hasValueId();
      /**
       * <code>optional .dstore.values.integerValue value_id = 10003;</code>
       *
       * <pre>
       * ID der Eigenschaft, die nicht mehr referenziert wird
       * </pre>
       */
      io.dstore.Values.integerValue getValueId();
      /**
       * <code>optional .dstore.values.integerValue value_id = 10003;</code>
       *
       * <pre>
       * ID der Eigenschaft, die nicht mehr referenziert wird
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getValueIdOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
       *
       * <pre>
       * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
       * </pre>
       */
      boolean hasUsedByPersonTypeBitmap();
      /**
       * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
       *
       * <pre>
       * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
       * </pre>
       */
      io.dstore.Values.integerValue getUsedByPersonTypeBitmap();
      /**
       * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
       *
       * <pre>
       * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getUsedByPersonTypeBitmapOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
       *
       * <pre>
       * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
       * </pre>
       */
      boolean hasSortNo();
      /**
       * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
       *
       * <pre>
       * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
       * </pre>
       */
      io.dstore.Values.integerValue getSortNo();
      /**
       * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
       *
       * <pre>
       * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getSortNoOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
       *
       * <pre>
       * Richtiger Wert von "UsedByPersonType_Bitmap"
       * </pre>
       */
      boolean hasCorrectUsedByPersonTypeBtmp();
      /**
       * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
       *
       * <pre>
       * Richtiger Wert von "UsedByPersonType_Bitmap"
       * </pre>
       */
      io.dstore.Values.integerValue getCorrectUsedByPersonTypeBtmp();
      /**
       * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
       *
       * <pre>
       * Richtiger Wert von "UsedByPersonType_Bitmap"
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getCorrectUsedByPersonTypeBtmpOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
       *
       * <pre>
       * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
       * </pre>
       */
      boolean hasWrongUsedByPersonTypeBtmp();
      /**
       * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
       *
       * <pre>
       * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
       * </pre>
       */
      io.dstore.Values.integerValue getWrongUsedByPersonTypeBtmp();
      /**
       * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
       *
       * <pre>
       * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getWrongUsedByPersonTypeBtmpOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
       *
       * <pre>
       * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
       * </pre>
       */
      boolean hasWrongCountValues();
      /**
       * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
       *
       * <pre>
       * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
       * </pre>
       */
      io.dstore.Values.integerValue getWrongCountValues();
      /**
       * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
       *
       * <pre>
       * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getWrongCountValuesOrBuilder();

      /**
       * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
       *
       * <pre>
       * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
       * </pre>
       */
      boolean hasFirstFourCharactersLowerCase();
      /**
       * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
       *
       * <pre>
       * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
       * </pre>
       */
      io.dstore.Values.stringValue getFirstFourCharactersLowerCase();
      /**
       * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
       *
       * <pre>
       * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
       * </pre>
       */
      io.dstore.Values.stringValueOrBuilder getFirstFourCharactersLowerCaseOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
       *
       * <pre>
       * Richtiger Wert für "CountValues"
       * </pre>
       */
      boolean hasCorrectCountValues();
      /**
       * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
       *
       * <pre>
       * Richtiger Wert für "CountValues"
       * </pre>
       */
      io.dstore.Values.integerValue getCorrectCountValues();
      /**
       * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
       *
       * <pre>
       * Richtiger Wert für "CountValues"
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getCorrectCountValuesOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
       *
       * <pre>
       * Richtiger Wert für "CountPersons"
       * </pre>
       */
      boolean hasCorrectCountPersons();
      /**
       * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
       *
       * <pre>
       * Richtiger Wert für "CountPersons"
       * </pre>
       */
      io.dstore.Values.integerValue getCorrectCountPersons();
      /**
       * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
       *
       * <pre>
       * Richtiger Wert für "CountPersons"
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getCorrectCountPersonsOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
       *
       * <pre>
       * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
       * </pre>
       */
      boolean hasInconsistenceType();
      /**
       * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
       *
       * <pre>
       * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
       * </pre>
       */
      io.dstore.Values.integerValue getInconsistenceType();
      /**
       * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
       *
       * <pre>
       * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getInconsistenceTypeOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
       *
       * <pre>
       * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
       * </pre>
       */
      boolean hasWrongCountPersons();
      /**
       * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
       *
       * <pre>
       * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
       * </pre>
       */
      io.dstore.Values.integerValue getWrongCountPersons();
      /**
       * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
       *
       * <pre>
       * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getWrongCountPersonsOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
       *
       * <pre>
       * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
       * </pre>
       */
      boolean hasPersonTypeId();
      /**
       * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
       *
       * <pre>
       * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
       * </pre>
       */
      io.dstore.Values.integerValue getPersonTypeId();
      /**
       * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
       *
       * <pre>
       * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getPersonTypeIdOrBuilder();

      /**
       * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
       *
       * <pre>
       * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
       * </pre>
       */
      boolean hasValuelowercase();
      /**
       * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
       *
       * <pre>
       * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
       * </pre>
       */
      io.dstore.Values.stringValue getValuelowercase();
      /**
       * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
       *
       * <pre>
       * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
       * </pre>
       */
      io.dstore.Values.stringValueOrBuilder getValuelowercaseOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue person_id = 40002;</code>
       *
       * <pre>
       * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
       * </pre>
       */
      boolean hasPersonId();
      /**
       * <code>optional .dstore.values.integerValue person_id = 40002;</code>
       *
       * <pre>
       * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
       * </pre>
       */
      io.dstore.Values.integerValue getPersonId();
      /**
       * <code>optional .dstore.values.integerValue person_id = 40002;</code>
       *
       * <pre>
       * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getPersonIdOrBuilder();
    }
    /**
     * Protobuf type {@code dstore.engine.pm_ConsistencyCheck_Ad.Response.Row}
     */
    public  static final class Row extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:dstore.engine.pm_ConsistencyCheck_Ad.Response.Row)
        RowOrBuilder {
      // Use Row.newBuilder() to construct.
      private Row(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Row() {
        rowId_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private Row(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 80000: {

                rowId_ = input.readInt32();
                break;
              }
              case 80010: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (personCharacteristicId_ != null) {
                  subBuilder = personCharacteristicId_.toBuilder();
                }
                personCharacteristicId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(personCharacteristicId_);
                  personCharacteristicId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80018: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (value_ != null) {
                  subBuilder = value_.toBuilder();
                }
                value_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(value_);
                  value_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80026: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (valueId_ != null) {
                  subBuilder = valueId_.toBuilder();
                }
                valueId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(valueId_);
                  valueId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80034: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (usedByPersonTypeBitmap_ != null) {
                  subBuilder = usedByPersonTypeBitmap_.toBuilder();
                }
                usedByPersonTypeBitmap_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(usedByPersonTypeBitmap_);
                  usedByPersonTypeBitmap_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80042: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (sortNo_ != null) {
                  subBuilder = sortNo_.toBuilder();
                }
                sortNo_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(sortNo_);
                  sortNo_ = subBuilder.buildPartial();
                }

                break;
              }
              case 160010: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (correctUsedByPersonTypeBtmp_ != null) {
                  subBuilder = correctUsedByPersonTypeBtmp_.toBuilder();
                }
                correctUsedByPersonTypeBtmp_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(correctUsedByPersonTypeBtmp_);
                  correctUsedByPersonTypeBtmp_ = subBuilder.buildPartial();
                }

                break;
              }
              case 160042: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (wrongUsedByPersonTypeBtmp_ != null) {
                  subBuilder = wrongUsedByPersonTypeBtmp_.toBuilder();
                }
                wrongUsedByPersonTypeBtmp_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(wrongUsedByPersonTypeBtmp_);
                  wrongUsedByPersonTypeBtmp_ = subBuilder.buildPartial();
                }

                break;
              }
              case 240010: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (wrongCountValues_ != null) {
                  subBuilder = wrongCountValues_.toBuilder();
                }
                wrongCountValues_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(wrongCountValues_);
                  wrongCountValues_ = subBuilder.buildPartial();
                }

                break;
              }
              case 240018: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (firstFourCharactersLowerCase_ != null) {
                  subBuilder = firstFourCharactersLowerCase_.toBuilder();
                }
                firstFourCharactersLowerCase_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(firstFourCharactersLowerCase_);
                  firstFourCharactersLowerCase_ = subBuilder.buildPartial();
                }

                break;
              }
              case 240034: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (correctCountValues_ != null) {
                  subBuilder = correctCountValues_.toBuilder();
                }
                correctCountValues_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(correctCountValues_);
                  correctCountValues_ = subBuilder.buildPartial();
                }

                break;
              }
              case 240042: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (correctCountPersons_ != null) {
                  subBuilder = correctCountPersons_.toBuilder();
                }
                correctCountPersons_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(correctCountPersons_);
                  correctCountPersons_ = subBuilder.buildPartial();
                }

                break;
              }
              case 240050: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (inconsistenceType_ != null) {
                  subBuilder = inconsistenceType_.toBuilder();
                }
                inconsistenceType_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(inconsistenceType_);
                  inconsistenceType_ = subBuilder.buildPartial();
                }

                break;
              }
              case 240058: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (wrongCountPersons_ != null) {
                  subBuilder = wrongCountPersons_.toBuilder();
                }
                wrongCountPersons_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(wrongCountPersons_);
                  wrongCountPersons_ = subBuilder.buildPartial();
                }

                break;
              }
              case 240066: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (personTypeId_ != null) {
                  subBuilder = personTypeId_.toBuilder();
                }
                personTypeId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(personTypeId_);
                  personTypeId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 320010: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (valuelowercase_ != null) {
                  subBuilder = valuelowercase_.toBuilder();
                }
                valuelowercase_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(valuelowercase_);
                  valuelowercase_ = subBuilder.buildPartial();
                }

                break;
              }
              case 320018: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (personId_ != null) {
                  subBuilder = personId_.toBuilder();
                }
                personId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(personId_);
                  personId_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_Row_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_Row_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.class, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.Builder.class);
      }

      public static final int ROW_ID_FIELD_NUMBER = 10000;
      private int rowId_;
      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      public int getRowId() {
        return rowId_;
      }

      public static final int PERSON_CHARACTERISTIC_ID_FIELD_NUMBER = 10001;
      private io.dstore.Values.integerValue personCharacteristicId_;
      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
       *
       * <pre>
       * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
       * </pre>
       */
      public boolean hasPersonCharacteristicId() {
        return personCharacteristicId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
       *
       * <pre>
       * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
       * </pre>
       */
      public io.dstore.Values.integerValue getPersonCharacteristicId() {
        return personCharacteristicId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : personCharacteristicId_;
      }
      /**
       * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
       *
       * <pre>
       * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getPersonCharacteristicIdOrBuilder() {
        return getPersonCharacteristicId();
      }

      public static final int VALUE_FIELD_NUMBER = 10002;
      private io.dstore.Values.stringValue value_;
      /**
       * <code>optional .dstore.values.stringValue value = 10002;</code>
       *
       * <pre>
       * Die Eigenschaft, die nicht mehr referenziert wird
       * </pre>
       */
      public boolean hasValue() {
        return value_ != null;
      }
      /**
       * <code>optional .dstore.values.stringValue value = 10002;</code>
       *
       * <pre>
       * Die Eigenschaft, die nicht mehr referenziert wird
       * </pre>
       */
      public io.dstore.Values.stringValue getValue() {
        return value_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : value_;
      }
      /**
       * <code>optional .dstore.values.stringValue value = 10002;</code>
       *
       * <pre>
       * Die Eigenschaft, die nicht mehr referenziert wird
       * </pre>
       */
      public io.dstore.Values.stringValueOrBuilder getValueOrBuilder() {
        return getValue();
      }

      public static final int VALUE_ID_FIELD_NUMBER = 10003;
      private io.dstore.Values.integerValue valueId_;
      /**
       * <code>optional .dstore.values.integerValue value_id = 10003;</code>
       *
       * <pre>
       * ID der Eigenschaft, die nicht mehr referenziert wird
       * </pre>
       */
      public boolean hasValueId() {
        return valueId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue value_id = 10003;</code>
       *
       * <pre>
       * ID der Eigenschaft, die nicht mehr referenziert wird
       * </pre>
       */
      public io.dstore.Values.integerValue getValueId() {
        return valueId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : valueId_;
      }
      /**
       * <code>optional .dstore.values.integerValue value_id = 10003;</code>
       *
       * <pre>
       * ID der Eigenschaft, die nicht mehr referenziert wird
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getValueIdOrBuilder() {
        return getValueId();
      }

      public static final int USED_BY_PERSON_TYPE_BITMAP_FIELD_NUMBER = 10004;
      private io.dstore.Values.integerValue usedByPersonTypeBitmap_;
      /**
       * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
       *
       * <pre>
       * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
       * </pre>
       */
      public boolean hasUsedByPersonTypeBitmap() {
        return usedByPersonTypeBitmap_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
       *
       * <pre>
       * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
       * </pre>
       */
      public io.dstore.Values.integerValue getUsedByPersonTypeBitmap() {
        return usedByPersonTypeBitmap_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : usedByPersonTypeBitmap_;
      }
      /**
       * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
       *
       * <pre>
       * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getUsedByPersonTypeBitmapOrBuilder() {
        return getUsedByPersonTypeBitmap();
      }

      public static final int SORT_NO_FIELD_NUMBER = 10005;
      private io.dstore.Values.integerValue sortNo_;
      /**
       * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
       *
       * <pre>
       * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
       * </pre>
       */
      public boolean hasSortNo() {
        return sortNo_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
       *
       * <pre>
       * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
       * </pre>
       */
      public io.dstore.Values.integerValue getSortNo() {
        return sortNo_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : sortNo_;
      }
      /**
       * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
       *
       * <pre>
       * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getSortNoOrBuilder() {
        return getSortNo();
      }

      public static final int CORRECT_USED_BY_PERSON_TYPE_BTMP_FIELD_NUMBER = 20001;
      private io.dstore.Values.integerValue correctUsedByPersonTypeBtmp_;
      /**
       * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
       *
       * <pre>
       * Richtiger Wert von "UsedByPersonType_Bitmap"
       * </pre>
       */
      public boolean hasCorrectUsedByPersonTypeBtmp() {
        return correctUsedByPersonTypeBtmp_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
       *
       * <pre>
       * Richtiger Wert von "UsedByPersonType_Bitmap"
       * </pre>
       */
      public io.dstore.Values.integerValue getCorrectUsedByPersonTypeBtmp() {
        return correctUsedByPersonTypeBtmp_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : correctUsedByPersonTypeBtmp_;
      }
      /**
       * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
       *
       * <pre>
       * Richtiger Wert von "UsedByPersonType_Bitmap"
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getCorrectUsedByPersonTypeBtmpOrBuilder() {
        return getCorrectUsedByPersonTypeBtmp();
      }

      public static final int WRONG_USED_BY_PERSON_TYPE_BTMP_FIELD_NUMBER = 20005;
      private io.dstore.Values.integerValue wrongUsedByPersonTypeBtmp_;
      /**
       * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
       *
       * <pre>
       * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
       * </pre>
       */
      public boolean hasWrongUsedByPersonTypeBtmp() {
        return wrongUsedByPersonTypeBtmp_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
       *
       * <pre>
       * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
       * </pre>
       */
      public io.dstore.Values.integerValue getWrongUsedByPersonTypeBtmp() {
        return wrongUsedByPersonTypeBtmp_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : wrongUsedByPersonTypeBtmp_;
      }
      /**
       * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
       *
       * <pre>
       * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getWrongUsedByPersonTypeBtmpOrBuilder() {
        return getWrongUsedByPersonTypeBtmp();
      }

      public static final int WRONG_COUNT_VALUES_FIELD_NUMBER = 30001;
      private io.dstore.Values.integerValue wrongCountValues_;
      /**
       * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
       *
       * <pre>
       * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
       * </pre>
       */
      public boolean hasWrongCountValues() {
        return wrongCountValues_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
       *
       * <pre>
       * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
       * </pre>
       */
      public io.dstore.Values.integerValue getWrongCountValues() {
        return wrongCountValues_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : wrongCountValues_;
      }
      /**
       * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
       *
       * <pre>
       * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getWrongCountValuesOrBuilder() {
        return getWrongCountValues();
      }

      public static final int FIRST_FOUR_CHARACTERS_LOWER_CASE_FIELD_NUMBER = 30002;
      private io.dstore.Values.stringValue firstFourCharactersLowerCase_;
      /**
       * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
       *
       * <pre>
       * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
       * </pre>
       */
      public boolean hasFirstFourCharactersLowerCase() {
        return firstFourCharactersLowerCase_ != null;
      }
      /**
       * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
       *
       * <pre>
       * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
       * </pre>
       */
      public io.dstore.Values.stringValue getFirstFourCharactersLowerCase() {
        return firstFourCharactersLowerCase_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : firstFourCharactersLowerCase_;
      }
      /**
       * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
       *
       * <pre>
       * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
       * </pre>
       */
      public io.dstore.Values.stringValueOrBuilder getFirstFourCharactersLowerCaseOrBuilder() {
        return getFirstFourCharactersLowerCase();
      }

      public static final int CORRECT_COUNT_VALUES_FIELD_NUMBER = 30004;
      private io.dstore.Values.integerValue correctCountValues_;
      /**
       * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
       *
       * <pre>
       * Richtiger Wert für "CountValues"
       * </pre>
       */
      public boolean hasCorrectCountValues() {
        return correctCountValues_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
       *
       * <pre>
       * Richtiger Wert für "CountValues"
       * </pre>
       */
      public io.dstore.Values.integerValue getCorrectCountValues() {
        return correctCountValues_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : correctCountValues_;
      }
      /**
       * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
       *
       * <pre>
       * Richtiger Wert für "CountValues"
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getCorrectCountValuesOrBuilder() {
        return getCorrectCountValues();
      }

      public static final int CORRECT_COUNT_PERSONS_FIELD_NUMBER = 30005;
      private io.dstore.Values.integerValue correctCountPersons_;
      /**
       * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
       *
       * <pre>
       * Richtiger Wert für "CountPersons"
       * </pre>
       */
      public boolean hasCorrectCountPersons() {
        return correctCountPersons_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
       *
       * <pre>
       * Richtiger Wert für "CountPersons"
       * </pre>
       */
      public io.dstore.Values.integerValue getCorrectCountPersons() {
        return correctCountPersons_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : correctCountPersons_;
      }
      /**
       * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
       *
       * <pre>
       * Richtiger Wert für "CountPersons"
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getCorrectCountPersonsOrBuilder() {
        return getCorrectCountPersons();
      }

      public static final int INCONSISTENCE_TYPE_FIELD_NUMBER = 30006;
      private io.dstore.Values.integerValue inconsistenceType_;
      /**
       * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
       *
       * <pre>
       * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
       * </pre>
       */
      public boolean hasInconsistenceType() {
        return inconsistenceType_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
       *
       * <pre>
       * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
       * </pre>
       */
      public io.dstore.Values.integerValue getInconsistenceType() {
        return inconsistenceType_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : inconsistenceType_;
      }
      /**
       * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
       *
       * <pre>
       * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getInconsistenceTypeOrBuilder() {
        return getInconsistenceType();
      }

      public static final int WRONG_COUNT_PERSONS_FIELD_NUMBER = 30007;
      private io.dstore.Values.integerValue wrongCountPersons_;
      /**
       * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
       *
       * <pre>
       * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
       * </pre>
       */
      public boolean hasWrongCountPersons() {
        return wrongCountPersons_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
       *
       * <pre>
       * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
       * </pre>
       */
      public io.dstore.Values.integerValue getWrongCountPersons() {
        return wrongCountPersons_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : wrongCountPersons_;
      }
      /**
       * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
       *
       * <pre>
       * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getWrongCountPersonsOrBuilder() {
        return getWrongCountPersons();
      }

      public static final int PERSON_TYPE_ID_FIELD_NUMBER = 30008;
      private io.dstore.Values.integerValue personTypeId_;
      /**
       * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
       *
       * <pre>
       * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
       * </pre>
       */
      public boolean hasPersonTypeId() {
        return personTypeId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
       *
       * <pre>
       * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
       * </pre>
       */
      public io.dstore.Values.integerValue getPersonTypeId() {
        return personTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : personTypeId_;
      }
      /**
       * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
       *
       * <pre>
       * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getPersonTypeIdOrBuilder() {
        return getPersonTypeId();
      }

      public static final int VALUELOWERCASE_FIELD_NUMBER = 40001;
      private io.dstore.Values.stringValue valuelowercase_;
      /**
       * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
       *
       * <pre>
       * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
       * </pre>
       */
      public boolean hasValuelowercase() {
        return valuelowercase_ != null;
      }
      /**
       * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
       *
       * <pre>
       * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
       * </pre>
       */
      public io.dstore.Values.stringValue getValuelowercase() {
        return valuelowercase_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : valuelowercase_;
      }
      /**
       * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
       *
       * <pre>
       * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
       * </pre>
       */
      public io.dstore.Values.stringValueOrBuilder getValuelowercaseOrBuilder() {
        return getValuelowercase();
      }

      public static final int PERSON_ID_FIELD_NUMBER = 40002;
      private io.dstore.Values.integerValue personId_;
      /**
       * <code>optional .dstore.values.integerValue person_id = 40002;</code>
       *
       * <pre>
       * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
       * </pre>
       */
      public boolean hasPersonId() {
        return personId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue person_id = 40002;</code>
       *
       * <pre>
       * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
       * </pre>
       */
      public io.dstore.Values.integerValue getPersonId() {
        return personId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : personId_;
      }
      /**
       * <code>optional .dstore.values.integerValue person_id = 40002;</code>
       *
       * <pre>
       * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getPersonIdOrBuilder() {
        return getPersonId();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (rowId_ != 0) {
          output.writeInt32(10000, rowId_);
        }
        if (personCharacteristicId_ != null) {
          output.writeMessage(10001, getPersonCharacteristicId());
        }
        if (value_ != null) {
          output.writeMessage(10002, getValue());
        }
        if (valueId_ != null) {
          output.writeMessage(10003, getValueId());
        }
        if (usedByPersonTypeBitmap_ != null) {
          output.writeMessage(10004, getUsedByPersonTypeBitmap());
        }
        if (sortNo_ != null) {
          output.writeMessage(10005, getSortNo());
        }
        if (correctUsedByPersonTypeBtmp_ != null) {
          output.writeMessage(20001, getCorrectUsedByPersonTypeBtmp());
        }
        if (wrongUsedByPersonTypeBtmp_ != null) {
          output.writeMessage(20005, getWrongUsedByPersonTypeBtmp());
        }
        if (wrongCountValues_ != null) {
          output.writeMessage(30001, getWrongCountValues());
        }
        if (firstFourCharactersLowerCase_ != null) {
          output.writeMessage(30002, getFirstFourCharactersLowerCase());
        }
        if (correctCountValues_ != null) {
          output.writeMessage(30004, getCorrectCountValues());
        }
        if (correctCountPersons_ != null) {
          output.writeMessage(30005, getCorrectCountPersons());
        }
        if (inconsistenceType_ != null) {
          output.writeMessage(30006, getInconsistenceType());
        }
        if (wrongCountPersons_ != null) {
          output.writeMessage(30007, getWrongCountPersons());
        }
        if (personTypeId_ != null) {
          output.writeMessage(30008, getPersonTypeId());
        }
        if (valuelowercase_ != null) {
          output.writeMessage(40001, getValuelowercase());
        }
        if (personId_ != null) {
          output.writeMessage(40002, getPersonId());
        }
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (rowId_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10000, rowId_);
        }
        if (personCharacteristicId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10001, getPersonCharacteristicId());
        }
        if (value_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10002, getValue());
        }
        if (valueId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10003, getValueId());
        }
        if (usedByPersonTypeBitmap_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10004, getUsedByPersonTypeBitmap());
        }
        if (sortNo_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10005, getSortNo());
        }
        if (correctUsedByPersonTypeBtmp_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20001, getCorrectUsedByPersonTypeBtmp());
        }
        if (wrongUsedByPersonTypeBtmp_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20005, getWrongUsedByPersonTypeBtmp());
        }
        if (wrongCountValues_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(30001, getWrongCountValues());
        }
        if (firstFourCharactersLowerCase_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(30002, getFirstFourCharactersLowerCase());
        }
        if (correctCountValues_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(30004, getCorrectCountValues());
        }
        if (correctCountPersons_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(30005, getCorrectCountPersons());
        }
        if (inconsistenceType_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(30006, getInconsistenceType());
        }
        if (wrongCountPersons_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(30007, getWrongCountPersons());
        }
        if (personTypeId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(30008, getPersonTypeId());
        }
        if (valuelowercase_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(40001, getValuelowercase());
        }
        if (personId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(40002, getPersonId());
        }
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code dstore.engine.pm_ConsistencyCheck_Ad.Response.Row}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:dstore.engine.pm_ConsistencyCheck_Ad.Response.Row)
          io.dstore.engine.procedures.PmConsistencyCheckAd.Response.RowOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_Row_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_Row_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.class, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.Builder.class);
        }

        // Construct using io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          rowId_ = 0;

          if (personCharacteristicIdBuilder_ == null) {
            personCharacteristicId_ = null;
          } else {
            personCharacteristicId_ = null;
            personCharacteristicIdBuilder_ = null;
          }
          if (valueBuilder_ == null) {
            value_ = null;
          } else {
            value_ = null;
            valueBuilder_ = null;
          }
          if (valueIdBuilder_ == null) {
            valueId_ = null;
          } else {
            valueId_ = null;
            valueIdBuilder_ = null;
          }
          if (usedByPersonTypeBitmapBuilder_ == null) {
            usedByPersonTypeBitmap_ = null;
          } else {
            usedByPersonTypeBitmap_ = null;
            usedByPersonTypeBitmapBuilder_ = null;
          }
          if (sortNoBuilder_ == null) {
            sortNo_ = null;
          } else {
            sortNo_ = null;
            sortNoBuilder_ = null;
          }
          if (correctUsedByPersonTypeBtmpBuilder_ == null) {
            correctUsedByPersonTypeBtmp_ = null;
          } else {
            correctUsedByPersonTypeBtmp_ = null;
            correctUsedByPersonTypeBtmpBuilder_ = null;
          }
          if (wrongUsedByPersonTypeBtmpBuilder_ == null) {
            wrongUsedByPersonTypeBtmp_ = null;
          } else {
            wrongUsedByPersonTypeBtmp_ = null;
            wrongUsedByPersonTypeBtmpBuilder_ = null;
          }
          if (wrongCountValuesBuilder_ == null) {
            wrongCountValues_ = null;
          } else {
            wrongCountValues_ = null;
            wrongCountValuesBuilder_ = null;
          }
          if (firstFourCharactersLowerCaseBuilder_ == null) {
            firstFourCharactersLowerCase_ = null;
          } else {
            firstFourCharactersLowerCase_ = null;
            firstFourCharactersLowerCaseBuilder_ = null;
          }
          if (correctCountValuesBuilder_ == null) {
            correctCountValues_ = null;
          } else {
            correctCountValues_ = null;
            correctCountValuesBuilder_ = null;
          }
          if (correctCountPersonsBuilder_ == null) {
            correctCountPersons_ = null;
          } else {
            correctCountPersons_ = null;
            correctCountPersonsBuilder_ = null;
          }
          if (inconsistenceTypeBuilder_ == null) {
            inconsistenceType_ = null;
          } else {
            inconsistenceType_ = null;
            inconsistenceTypeBuilder_ = null;
          }
          if (wrongCountPersonsBuilder_ == null) {
            wrongCountPersons_ = null;
          } else {
            wrongCountPersons_ = null;
            wrongCountPersonsBuilder_ = null;
          }
          if (personTypeIdBuilder_ == null) {
            personTypeId_ = null;
          } else {
            personTypeId_ = null;
            personTypeIdBuilder_ = null;
          }
          if (valuelowercaseBuilder_ == null) {
            valuelowercase_ = null;
          } else {
            valuelowercase_ = null;
            valuelowercaseBuilder_ = null;
          }
          if (personIdBuilder_ == null) {
            personId_ = null;
          } else {
            personId_ = null;
            personIdBuilder_ = null;
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_Row_descriptor;
        }

        public io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row getDefaultInstanceForType() {
          return io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.getDefaultInstance();
        }

        public io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row build() {
          io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row buildPartial() {
          io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row result = new io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row(this);
          result.rowId_ = rowId_;
          if (personCharacteristicIdBuilder_ == null) {
            result.personCharacteristicId_ = personCharacteristicId_;
          } else {
            result.personCharacteristicId_ = personCharacteristicIdBuilder_.build();
          }
          if (valueBuilder_ == null) {
            result.value_ = value_;
          } else {
            result.value_ = valueBuilder_.build();
          }
          if (valueIdBuilder_ == null) {
            result.valueId_ = valueId_;
          } else {
            result.valueId_ = valueIdBuilder_.build();
          }
          if (usedByPersonTypeBitmapBuilder_ == null) {
            result.usedByPersonTypeBitmap_ = usedByPersonTypeBitmap_;
          } else {
            result.usedByPersonTypeBitmap_ = usedByPersonTypeBitmapBuilder_.build();
          }
          if (sortNoBuilder_ == null) {
            result.sortNo_ = sortNo_;
          } else {
            result.sortNo_ = sortNoBuilder_.build();
          }
          if (correctUsedByPersonTypeBtmpBuilder_ == null) {
            result.correctUsedByPersonTypeBtmp_ = correctUsedByPersonTypeBtmp_;
          } else {
            result.correctUsedByPersonTypeBtmp_ = correctUsedByPersonTypeBtmpBuilder_.build();
          }
          if (wrongUsedByPersonTypeBtmpBuilder_ == null) {
            result.wrongUsedByPersonTypeBtmp_ = wrongUsedByPersonTypeBtmp_;
          } else {
            result.wrongUsedByPersonTypeBtmp_ = wrongUsedByPersonTypeBtmpBuilder_.build();
          }
          if (wrongCountValuesBuilder_ == null) {
            result.wrongCountValues_ = wrongCountValues_;
          } else {
            result.wrongCountValues_ = wrongCountValuesBuilder_.build();
          }
          if (firstFourCharactersLowerCaseBuilder_ == null) {
            result.firstFourCharactersLowerCase_ = firstFourCharactersLowerCase_;
          } else {
            result.firstFourCharactersLowerCase_ = firstFourCharactersLowerCaseBuilder_.build();
          }
          if (correctCountValuesBuilder_ == null) {
            result.correctCountValues_ = correctCountValues_;
          } else {
            result.correctCountValues_ = correctCountValuesBuilder_.build();
          }
          if (correctCountPersonsBuilder_ == null) {
            result.correctCountPersons_ = correctCountPersons_;
          } else {
            result.correctCountPersons_ = correctCountPersonsBuilder_.build();
          }
          if (inconsistenceTypeBuilder_ == null) {
            result.inconsistenceType_ = inconsistenceType_;
          } else {
            result.inconsistenceType_ = inconsistenceTypeBuilder_.build();
          }
          if (wrongCountPersonsBuilder_ == null) {
            result.wrongCountPersons_ = wrongCountPersons_;
          } else {
            result.wrongCountPersons_ = wrongCountPersonsBuilder_.build();
          }
          if (personTypeIdBuilder_ == null) {
            result.personTypeId_ = personTypeId_;
          } else {
            result.personTypeId_ = personTypeIdBuilder_.build();
          }
          if (valuelowercaseBuilder_ == null) {
            result.valuelowercase_ = valuelowercase_;
          } else {
            result.valuelowercase_ = valuelowercaseBuilder_.build();
          }
          if (personIdBuilder_ == null) {
            result.personId_ = personId_;
          } else {
            result.personId_ = personIdBuilder_.build();
          }
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row) {
            return mergeFrom((io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row other) {
          if (other == io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.getDefaultInstance()) return this;
          if (other.getRowId() != 0) {
            setRowId(other.getRowId());
          }
          if (other.hasPersonCharacteristicId()) {
            mergePersonCharacteristicId(other.getPersonCharacteristicId());
          }
          if (other.hasValue()) {
            mergeValue(other.getValue());
          }
          if (other.hasValueId()) {
            mergeValueId(other.getValueId());
          }
          if (other.hasUsedByPersonTypeBitmap()) {
            mergeUsedByPersonTypeBitmap(other.getUsedByPersonTypeBitmap());
          }
          if (other.hasSortNo()) {
            mergeSortNo(other.getSortNo());
          }
          if (other.hasCorrectUsedByPersonTypeBtmp()) {
            mergeCorrectUsedByPersonTypeBtmp(other.getCorrectUsedByPersonTypeBtmp());
          }
          if (other.hasWrongUsedByPersonTypeBtmp()) {
            mergeWrongUsedByPersonTypeBtmp(other.getWrongUsedByPersonTypeBtmp());
          }
          if (other.hasWrongCountValues()) {
            mergeWrongCountValues(other.getWrongCountValues());
          }
          if (other.hasFirstFourCharactersLowerCase()) {
            mergeFirstFourCharactersLowerCase(other.getFirstFourCharactersLowerCase());
          }
          if (other.hasCorrectCountValues()) {
            mergeCorrectCountValues(other.getCorrectCountValues());
          }
          if (other.hasCorrectCountPersons()) {
            mergeCorrectCountPersons(other.getCorrectCountPersons());
          }
          if (other.hasInconsistenceType()) {
            mergeInconsistenceType(other.getInconsistenceType());
          }
          if (other.hasWrongCountPersons()) {
            mergeWrongCountPersons(other.getWrongCountPersons());
          }
          if (other.hasPersonTypeId()) {
            mergePersonTypeId(other.getPersonTypeId());
          }
          if (other.hasValuelowercase()) {
            mergeValuelowercase(other.getValuelowercase());
          }
          if (other.hasPersonId()) {
            mergePersonId(other.getPersonId());
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int rowId_ ;
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public int getRowId() {
          return rowId_;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder setRowId(int value) {
          
          rowId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder clearRowId() {
          
          rowId_ = 0;
          onChanged();
          return this;
        }

        private io.dstore.Values.integerValue personCharacteristicId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> personCharacteristicIdBuilder_;
        /**
         * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
         *
         * <pre>
         * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
         * </pre>
         */
        public boolean hasPersonCharacteristicId() {
          return personCharacteristicIdBuilder_ != null || personCharacteristicId_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
         *
         * <pre>
         * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
         * </pre>
         */
        public io.dstore.Values.integerValue getPersonCharacteristicId() {
          if (personCharacteristicIdBuilder_ == null) {
            return personCharacteristicId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : personCharacteristicId_;
          } else {
            return personCharacteristicIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
         *
         * <pre>
         * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
         * </pre>
         */
        public Builder setPersonCharacteristicId(io.dstore.Values.integerValue value) {
          if (personCharacteristicIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            personCharacteristicId_ = value;
            onChanged();
          } else {
            personCharacteristicIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
         *
         * <pre>
         * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
         * </pre>
         */
        public Builder setPersonCharacteristicId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (personCharacteristicIdBuilder_ == null) {
            personCharacteristicId_ = builderForValue.build();
            onChanged();
          } else {
            personCharacteristicIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
         *
         * <pre>
         * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
         * </pre>
         */
        public Builder mergePersonCharacteristicId(io.dstore.Values.integerValue value) {
          if (personCharacteristicIdBuilder_ == null) {
            if (personCharacteristicId_ != null) {
              personCharacteristicId_ =
                io.dstore.Values.integerValue.newBuilder(personCharacteristicId_).mergeFrom(value).buildPartial();
            } else {
              personCharacteristicId_ = value;
            }
            onChanged();
          } else {
            personCharacteristicIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
         *
         * <pre>
         * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
         * </pre>
         */
        public Builder clearPersonCharacteristicId() {
          if (personCharacteristicIdBuilder_ == null) {
            personCharacteristicId_ = null;
            onChanged();
          } else {
            personCharacteristicId_ = null;
            personCharacteristicIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
         *
         * <pre>
         * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getPersonCharacteristicIdBuilder() {
          
          onChanged();
          return getPersonCharacteristicIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
         *
         * <pre>
         * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getPersonCharacteristicIdOrBuilder() {
          if (personCharacteristicIdBuilder_ != null) {
            return personCharacteristicIdBuilder_.getMessageOrBuilder();
          } else {
            return personCharacteristicId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : personCharacteristicId_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue person_characteristic_id = 10001;</code>
         *
         * <pre>
         * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getPersonCharacteristicIdFieldBuilder() {
          if (personCharacteristicIdBuilder_ == null) {
            personCharacteristicIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getPersonCharacteristicId(),
                    getParentForChildren(),
                    isClean());
            personCharacteristicId_ = null;
          }
          return personCharacteristicIdBuilder_;
        }

        private io.dstore.Values.stringValue value_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> valueBuilder_;
        /**
         * <code>optional .dstore.values.stringValue value = 10002;</code>
         *
         * <pre>
         * Die Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public boolean hasValue() {
          return valueBuilder_ != null || value_ != null;
        }
        /**
         * <code>optional .dstore.values.stringValue value = 10002;</code>
         *
         * <pre>
         * Die Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public io.dstore.Values.stringValue getValue() {
          if (valueBuilder_ == null) {
            return value_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : value_;
          } else {
            return valueBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.stringValue value = 10002;</code>
         *
         * <pre>
         * Die Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public Builder setValue(io.dstore.Values.stringValue value) {
          if (valueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            value_ = value;
            onChanged();
          } else {
            valueBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue value = 10002;</code>
         *
         * <pre>
         * Die Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public Builder setValue(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (valueBuilder_ == null) {
            value_ = builderForValue.build();
            onChanged();
          } else {
            valueBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue value = 10002;</code>
         *
         * <pre>
         * Die Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public Builder mergeValue(io.dstore.Values.stringValue value) {
          if (valueBuilder_ == null) {
            if (value_ != null) {
              value_ =
                io.dstore.Values.stringValue.newBuilder(value_).mergeFrom(value).buildPartial();
            } else {
              value_ = value;
            }
            onChanged();
          } else {
            valueBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue value = 10002;</code>
         *
         * <pre>
         * Die Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public Builder clearValue() {
          if (valueBuilder_ == null) {
            value_ = null;
            onChanged();
          } else {
            value_ = null;
            valueBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue value = 10002;</code>
         *
         * <pre>
         * Die Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public io.dstore.Values.stringValue.Builder getValueBuilder() {
          
          onChanged();
          return getValueFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.stringValue value = 10002;</code>
         *
         * <pre>
         * Die Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public io.dstore.Values.stringValueOrBuilder getValueOrBuilder() {
          if (valueBuilder_ != null) {
            return valueBuilder_.getMessageOrBuilder();
          } else {
            return value_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : value_;
          }
        }
        /**
         * <code>optional .dstore.values.stringValue value = 10002;</code>
         *
         * <pre>
         * Die Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getValueFieldBuilder() {
          if (valueBuilder_ == null) {
            valueBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getValue(),
                    getParentForChildren(),
                    isClean());
            value_ = null;
          }
          return valueBuilder_;
        }

        private io.dstore.Values.integerValue valueId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> valueIdBuilder_;
        /**
         * <code>optional .dstore.values.integerValue value_id = 10003;</code>
         *
         * <pre>
         * ID der Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public boolean hasValueId() {
          return valueIdBuilder_ != null || valueId_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue value_id = 10003;</code>
         *
         * <pre>
         * ID der Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public io.dstore.Values.integerValue getValueId() {
          if (valueIdBuilder_ == null) {
            return valueId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : valueId_;
          } else {
            return valueIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue value_id = 10003;</code>
         *
         * <pre>
         * ID der Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public Builder setValueId(io.dstore.Values.integerValue value) {
          if (valueIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            valueId_ = value;
            onChanged();
          } else {
            valueIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue value_id = 10003;</code>
         *
         * <pre>
         * ID der Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public Builder setValueId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (valueIdBuilder_ == null) {
            valueId_ = builderForValue.build();
            onChanged();
          } else {
            valueIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue value_id = 10003;</code>
         *
         * <pre>
         * ID der Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public Builder mergeValueId(io.dstore.Values.integerValue value) {
          if (valueIdBuilder_ == null) {
            if (valueId_ != null) {
              valueId_ =
                io.dstore.Values.integerValue.newBuilder(valueId_).mergeFrom(value).buildPartial();
            } else {
              valueId_ = value;
            }
            onChanged();
          } else {
            valueIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue value_id = 10003;</code>
         *
         * <pre>
         * ID der Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public Builder clearValueId() {
          if (valueIdBuilder_ == null) {
            valueId_ = null;
            onChanged();
          } else {
            valueId_ = null;
            valueIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue value_id = 10003;</code>
         *
         * <pre>
         * ID der Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getValueIdBuilder() {
          
          onChanged();
          return getValueIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue value_id = 10003;</code>
         *
         * <pre>
         * ID der Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getValueIdOrBuilder() {
          if (valueIdBuilder_ != null) {
            return valueIdBuilder_.getMessageOrBuilder();
          } else {
            return valueId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : valueId_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue value_id = 10003;</code>
         *
         * <pre>
         * ID der Eigenschaft, die nicht mehr referenziert wird
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getValueIdFieldBuilder() {
          if (valueIdBuilder_ == null) {
            valueIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getValueId(),
                    getParentForChildren(),
                    isClean());
            valueId_ = null;
          }
          return valueIdBuilder_;
        }

        private io.dstore.Values.integerValue usedByPersonTypeBitmap_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> usedByPersonTypeBitmapBuilder_;
        /**
         * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
         *
         * <pre>
         * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
         * </pre>
         */
        public boolean hasUsedByPersonTypeBitmap() {
          return usedByPersonTypeBitmapBuilder_ != null || usedByPersonTypeBitmap_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
         *
         * <pre>
         * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
         * </pre>
         */
        public io.dstore.Values.integerValue getUsedByPersonTypeBitmap() {
          if (usedByPersonTypeBitmapBuilder_ == null) {
            return usedByPersonTypeBitmap_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : usedByPersonTypeBitmap_;
          } else {
            return usedByPersonTypeBitmapBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
         *
         * <pre>
         * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
         * </pre>
         */
        public Builder setUsedByPersonTypeBitmap(io.dstore.Values.integerValue value) {
          if (usedByPersonTypeBitmapBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            usedByPersonTypeBitmap_ = value;
            onChanged();
          } else {
            usedByPersonTypeBitmapBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
         *
         * <pre>
         * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
         * </pre>
         */
        public Builder setUsedByPersonTypeBitmap(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (usedByPersonTypeBitmapBuilder_ == null) {
            usedByPersonTypeBitmap_ = builderForValue.build();
            onChanged();
          } else {
            usedByPersonTypeBitmapBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
         *
         * <pre>
         * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
         * </pre>
         */
        public Builder mergeUsedByPersonTypeBitmap(io.dstore.Values.integerValue value) {
          if (usedByPersonTypeBitmapBuilder_ == null) {
            if (usedByPersonTypeBitmap_ != null) {
              usedByPersonTypeBitmap_ =
                io.dstore.Values.integerValue.newBuilder(usedByPersonTypeBitmap_).mergeFrom(value).buildPartial();
            } else {
              usedByPersonTypeBitmap_ = value;
            }
            onChanged();
          } else {
            usedByPersonTypeBitmapBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
         *
         * <pre>
         * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
         * </pre>
         */
        public Builder clearUsedByPersonTypeBitmap() {
          if (usedByPersonTypeBitmapBuilder_ == null) {
            usedByPersonTypeBitmap_ = null;
            onChanged();
          } else {
            usedByPersonTypeBitmap_ = null;
            usedByPersonTypeBitmapBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
         *
         * <pre>
         * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getUsedByPersonTypeBitmapBuilder() {
          
          onChanged();
          return getUsedByPersonTypeBitmapFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
         *
         * <pre>
         * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getUsedByPersonTypeBitmapOrBuilder() {
          if (usedByPersonTypeBitmapBuilder_ != null) {
            return usedByPersonTypeBitmapBuilder_.getMessageOrBuilder();
          } else {
            return usedByPersonTypeBitmap_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : usedByPersonTypeBitmap_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue used_by_person_type_bitmap = 10004;</code>
         *
         * <pre>
         * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getUsedByPersonTypeBitmapFieldBuilder() {
          if (usedByPersonTypeBitmapBuilder_ == null) {
            usedByPersonTypeBitmapBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getUsedByPersonTypeBitmap(),
                    getParentForChildren(),
                    isClean());
            usedByPersonTypeBitmap_ = null;
          }
          return usedByPersonTypeBitmapBuilder_;
        }

        private io.dstore.Values.integerValue sortNo_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> sortNoBuilder_;
        /**
         * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
         *
         * <pre>
         * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
         * </pre>
         */
        public boolean hasSortNo() {
          return sortNoBuilder_ != null || sortNo_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
         *
         * <pre>
         * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
         * </pre>
         */
        public io.dstore.Values.integerValue getSortNo() {
          if (sortNoBuilder_ == null) {
            return sortNo_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : sortNo_;
          } else {
            return sortNoBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
         *
         * <pre>
         * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
         * </pre>
         */
        public Builder setSortNo(io.dstore.Values.integerValue value) {
          if (sortNoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            sortNo_ = value;
            onChanged();
          } else {
            sortNoBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
         *
         * <pre>
         * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
         * </pre>
         */
        public Builder setSortNo(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (sortNoBuilder_ == null) {
            sortNo_ = builderForValue.build();
            onChanged();
          } else {
            sortNoBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
         *
         * <pre>
         * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
         * </pre>
         */
        public Builder mergeSortNo(io.dstore.Values.integerValue value) {
          if (sortNoBuilder_ == null) {
            if (sortNo_ != null) {
              sortNo_ =
                io.dstore.Values.integerValue.newBuilder(sortNo_).mergeFrom(value).buildPartial();
            } else {
              sortNo_ = value;
            }
            onChanged();
          } else {
            sortNoBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
         *
         * <pre>
         * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
         * </pre>
         */
        public Builder clearSortNo() {
          if (sortNoBuilder_ == null) {
            sortNo_ = null;
            onChanged();
          } else {
            sortNo_ = null;
            sortNoBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
         *
         * <pre>
         * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getSortNoBuilder() {
          
          onChanged();
          return getSortNoFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
         *
         * <pre>
         * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getSortNoOrBuilder() {
          if (sortNoBuilder_ != null) {
            return sortNoBuilder_.getMessageOrBuilder();
          } else {
            return sortNo_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : sortNo_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue sort_no = 10005;</code>
         *
         * <pre>
         * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getSortNoFieldBuilder() {
          if (sortNoBuilder_ == null) {
            sortNoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getSortNo(),
                    getParentForChildren(),
                    isClean());
            sortNo_ = null;
          }
          return sortNoBuilder_;
        }

        private io.dstore.Values.integerValue correctUsedByPersonTypeBtmp_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> correctUsedByPersonTypeBtmpBuilder_;
        /**
         * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
         *
         * <pre>
         * Richtiger Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public boolean hasCorrectUsedByPersonTypeBtmp() {
          return correctUsedByPersonTypeBtmpBuilder_ != null || correctUsedByPersonTypeBtmp_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
         *
         * <pre>
         * Richtiger Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public io.dstore.Values.integerValue getCorrectUsedByPersonTypeBtmp() {
          if (correctUsedByPersonTypeBtmpBuilder_ == null) {
            return correctUsedByPersonTypeBtmp_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : correctUsedByPersonTypeBtmp_;
          } else {
            return correctUsedByPersonTypeBtmpBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
         *
         * <pre>
         * Richtiger Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public Builder setCorrectUsedByPersonTypeBtmp(io.dstore.Values.integerValue value) {
          if (correctUsedByPersonTypeBtmpBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            correctUsedByPersonTypeBtmp_ = value;
            onChanged();
          } else {
            correctUsedByPersonTypeBtmpBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
         *
         * <pre>
         * Richtiger Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public Builder setCorrectUsedByPersonTypeBtmp(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (correctUsedByPersonTypeBtmpBuilder_ == null) {
            correctUsedByPersonTypeBtmp_ = builderForValue.build();
            onChanged();
          } else {
            correctUsedByPersonTypeBtmpBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
         *
         * <pre>
         * Richtiger Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public Builder mergeCorrectUsedByPersonTypeBtmp(io.dstore.Values.integerValue value) {
          if (correctUsedByPersonTypeBtmpBuilder_ == null) {
            if (correctUsedByPersonTypeBtmp_ != null) {
              correctUsedByPersonTypeBtmp_ =
                io.dstore.Values.integerValue.newBuilder(correctUsedByPersonTypeBtmp_).mergeFrom(value).buildPartial();
            } else {
              correctUsedByPersonTypeBtmp_ = value;
            }
            onChanged();
          } else {
            correctUsedByPersonTypeBtmpBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
         *
         * <pre>
         * Richtiger Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public Builder clearCorrectUsedByPersonTypeBtmp() {
          if (correctUsedByPersonTypeBtmpBuilder_ == null) {
            correctUsedByPersonTypeBtmp_ = null;
            onChanged();
          } else {
            correctUsedByPersonTypeBtmp_ = null;
            correctUsedByPersonTypeBtmpBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
         *
         * <pre>
         * Richtiger Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getCorrectUsedByPersonTypeBtmpBuilder() {
          
          onChanged();
          return getCorrectUsedByPersonTypeBtmpFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
         *
         * <pre>
         * Richtiger Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getCorrectUsedByPersonTypeBtmpOrBuilder() {
          if (correctUsedByPersonTypeBtmpBuilder_ != null) {
            return correctUsedByPersonTypeBtmpBuilder_.getMessageOrBuilder();
          } else {
            return correctUsedByPersonTypeBtmp_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : correctUsedByPersonTypeBtmp_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue correct_used_by_person_type_btmp = 20001;</code>
         *
         * <pre>
         * Richtiger Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getCorrectUsedByPersonTypeBtmpFieldBuilder() {
          if (correctUsedByPersonTypeBtmpBuilder_ == null) {
            correctUsedByPersonTypeBtmpBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getCorrectUsedByPersonTypeBtmp(),
                    getParentForChildren(),
                    isClean());
            correctUsedByPersonTypeBtmp_ = null;
          }
          return correctUsedByPersonTypeBtmpBuilder_;
        }

        private io.dstore.Values.integerValue wrongUsedByPersonTypeBtmp_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> wrongUsedByPersonTypeBtmpBuilder_;
        /**
         * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
         *
         * <pre>
         * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public boolean hasWrongUsedByPersonTypeBtmp() {
          return wrongUsedByPersonTypeBtmpBuilder_ != null || wrongUsedByPersonTypeBtmp_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
         *
         * <pre>
         * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public io.dstore.Values.integerValue getWrongUsedByPersonTypeBtmp() {
          if (wrongUsedByPersonTypeBtmpBuilder_ == null) {
            return wrongUsedByPersonTypeBtmp_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : wrongUsedByPersonTypeBtmp_;
          } else {
            return wrongUsedByPersonTypeBtmpBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
         *
         * <pre>
         * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public Builder setWrongUsedByPersonTypeBtmp(io.dstore.Values.integerValue value) {
          if (wrongUsedByPersonTypeBtmpBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            wrongUsedByPersonTypeBtmp_ = value;
            onChanged();
          } else {
            wrongUsedByPersonTypeBtmpBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
         *
         * <pre>
         * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public Builder setWrongUsedByPersonTypeBtmp(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (wrongUsedByPersonTypeBtmpBuilder_ == null) {
            wrongUsedByPersonTypeBtmp_ = builderForValue.build();
            onChanged();
          } else {
            wrongUsedByPersonTypeBtmpBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
         *
         * <pre>
         * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public Builder mergeWrongUsedByPersonTypeBtmp(io.dstore.Values.integerValue value) {
          if (wrongUsedByPersonTypeBtmpBuilder_ == null) {
            if (wrongUsedByPersonTypeBtmp_ != null) {
              wrongUsedByPersonTypeBtmp_ =
                io.dstore.Values.integerValue.newBuilder(wrongUsedByPersonTypeBtmp_).mergeFrom(value).buildPartial();
            } else {
              wrongUsedByPersonTypeBtmp_ = value;
            }
            onChanged();
          } else {
            wrongUsedByPersonTypeBtmpBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
         *
         * <pre>
         * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public Builder clearWrongUsedByPersonTypeBtmp() {
          if (wrongUsedByPersonTypeBtmpBuilder_ == null) {
            wrongUsedByPersonTypeBtmp_ = null;
            onChanged();
          } else {
            wrongUsedByPersonTypeBtmp_ = null;
            wrongUsedByPersonTypeBtmpBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
         *
         * <pre>
         * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getWrongUsedByPersonTypeBtmpBuilder() {
          
          onChanged();
          return getWrongUsedByPersonTypeBtmpFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
         *
         * <pre>
         * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getWrongUsedByPersonTypeBtmpOrBuilder() {
          if (wrongUsedByPersonTypeBtmpBuilder_ != null) {
            return wrongUsedByPersonTypeBtmpBuilder_.getMessageOrBuilder();
          } else {
            return wrongUsedByPersonTypeBtmp_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : wrongUsedByPersonTypeBtmp_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_used_by_person_type_btmp = 20005;</code>
         *
         * <pre>
         * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getWrongUsedByPersonTypeBtmpFieldBuilder() {
          if (wrongUsedByPersonTypeBtmpBuilder_ == null) {
            wrongUsedByPersonTypeBtmpBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getWrongUsedByPersonTypeBtmp(),
                    getParentForChildren(),
                    isClean());
            wrongUsedByPersonTypeBtmp_ = null;
          }
          return wrongUsedByPersonTypeBtmpBuilder_;
        }

        private io.dstore.Values.integerValue wrongCountValues_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> wrongCountValuesBuilder_;
        /**
         * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
         * </pre>
         */
        public boolean hasWrongCountValues() {
          return wrongCountValuesBuilder_ != null || wrongCountValues_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
         * </pre>
         */
        public io.dstore.Values.integerValue getWrongCountValues() {
          if (wrongCountValuesBuilder_ == null) {
            return wrongCountValues_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : wrongCountValues_;
          } else {
            return wrongCountValuesBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
         * </pre>
         */
        public Builder setWrongCountValues(io.dstore.Values.integerValue value) {
          if (wrongCountValuesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            wrongCountValues_ = value;
            onChanged();
          } else {
            wrongCountValuesBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
         * </pre>
         */
        public Builder setWrongCountValues(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (wrongCountValuesBuilder_ == null) {
            wrongCountValues_ = builderForValue.build();
            onChanged();
          } else {
            wrongCountValuesBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
         * </pre>
         */
        public Builder mergeWrongCountValues(io.dstore.Values.integerValue value) {
          if (wrongCountValuesBuilder_ == null) {
            if (wrongCountValues_ != null) {
              wrongCountValues_ =
                io.dstore.Values.integerValue.newBuilder(wrongCountValues_).mergeFrom(value).buildPartial();
            } else {
              wrongCountValues_ = value;
            }
            onChanged();
          } else {
            wrongCountValuesBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
         * </pre>
         */
        public Builder clearWrongCountValues() {
          if (wrongCountValuesBuilder_ == null) {
            wrongCountValues_ = null;
            onChanged();
          } else {
            wrongCountValues_ = null;
            wrongCountValuesBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getWrongCountValuesBuilder() {
          
          onChanged();
          return getWrongCountValuesFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getWrongCountValuesOrBuilder() {
          if (wrongCountValuesBuilder_ != null) {
            return wrongCountValuesBuilder_.getMessageOrBuilder();
          } else {
            return wrongCountValues_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : wrongCountValues_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_values = 30001;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getWrongCountValuesFieldBuilder() {
          if (wrongCountValuesBuilder_ == null) {
            wrongCountValuesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getWrongCountValues(),
                    getParentForChildren(),
                    isClean());
            wrongCountValues_ = null;
          }
          return wrongCountValuesBuilder_;
        }

        private io.dstore.Values.stringValue firstFourCharactersLowerCase_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> firstFourCharactersLowerCaseBuilder_;
        /**
         * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
         *
         * <pre>
         * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
         * </pre>
         */
        public boolean hasFirstFourCharactersLowerCase() {
          return firstFourCharactersLowerCaseBuilder_ != null || firstFourCharactersLowerCase_ != null;
        }
        /**
         * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
         *
         * <pre>
         * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
         * </pre>
         */
        public io.dstore.Values.stringValue getFirstFourCharactersLowerCase() {
          if (firstFourCharactersLowerCaseBuilder_ == null) {
            return firstFourCharactersLowerCase_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : firstFourCharactersLowerCase_;
          } else {
            return firstFourCharactersLowerCaseBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
         *
         * <pre>
         * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
         * </pre>
         */
        public Builder setFirstFourCharactersLowerCase(io.dstore.Values.stringValue value) {
          if (firstFourCharactersLowerCaseBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            firstFourCharactersLowerCase_ = value;
            onChanged();
          } else {
            firstFourCharactersLowerCaseBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
         *
         * <pre>
         * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
         * </pre>
         */
        public Builder setFirstFourCharactersLowerCase(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (firstFourCharactersLowerCaseBuilder_ == null) {
            firstFourCharactersLowerCase_ = builderForValue.build();
            onChanged();
          } else {
            firstFourCharactersLowerCaseBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
         *
         * <pre>
         * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
         * </pre>
         */
        public Builder mergeFirstFourCharactersLowerCase(io.dstore.Values.stringValue value) {
          if (firstFourCharactersLowerCaseBuilder_ == null) {
            if (firstFourCharactersLowerCase_ != null) {
              firstFourCharactersLowerCase_ =
                io.dstore.Values.stringValue.newBuilder(firstFourCharactersLowerCase_).mergeFrom(value).buildPartial();
            } else {
              firstFourCharactersLowerCase_ = value;
            }
            onChanged();
          } else {
            firstFourCharactersLowerCaseBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
         *
         * <pre>
         * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
         * </pre>
         */
        public Builder clearFirstFourCharactersLowerCase() {
          if (firstFourCharactersLowerCaseBuilder_ == null) {
            firstFourCharactersLowerCase_ = null;
            onChanged();
          } else {
            firstFourCharactersLowerCase_ = null;
            firstFourCharactersLowerCaseBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
         *
         * <pre>
         * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
         * </pre>
         */
        public io.dstore.Values.stringValue.Builder getFirstFourCharactersLowerCaseBuilder() {
          
          onChanged();
          return getFirstFourCharactersLowerCaseFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
         *
         * <pre>
         * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
         * </pre>
         */
        public io.dstore.Values.stringValueOrBuilder getFirstFourCharactersLowerCaseOrBuilder() {
          if (firstFourCharactersLowerCaseBuilder_ != null) {
            return firstFourCharactersLowerCaseBuilder_.getMessageOrBuilder();
          } else {
            return firstFourCharactersLowerCase_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : firstFourCharactersLowerCase_;
          }
        }
        /**
         * <code>optional .dstore.values.stringValue first_four_characters_lower_case = 30002;</code>
         *
         * <pre>
         * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getFirstFourCharactersLowerCaseFieldBuilder() {
          if (firstFourCharactersLowerCaseBuilder_ == null) {
            firstFourCharactersLowerCaseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getFirstFourCharactersLowerCase(),
                    getParentForChildren(),
                    isClean());
            firstFourCharactersLowerCase_ = null;
          }
          return firstFourCharactersLowerCaseBuilder_;
        }

        private io.dstore.Values.integerValue correctCountValues_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> correctCountValuesBuilder_;
        /**
         * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
         *
         * <pre>
         * Richtiger Wert für "CountValues"
         * </pre>
         */
        public boolean hasCorrectCountValues() {
          return correctCountValuesBuilder_ != null || correctCountValues_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
         *
         * <pre>
         * Richtiger Wert für "CountValues"
         * </pre>
         */
        public io.dstore.Values.integerValue getCorrectCountValues() {
          if (correctCountValuesBuilder_ == null) {
            return correctCountValues_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : correctCountValues_;
          } else {
            return correctCountValuesBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
         *
         * <pre>
         * Richtiger Wert für "CountValues"
         * </pre>
         */
        public Builder setCorrectCountValues(io.dstore.Values.integerValue value) {
          if (correctCountValuesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            correctCountValues_ = value;
            onChanged();
          } else {
            correctCountValuesBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
         *
         * <pre>
         * Richtiger Wert für "CountValues"
         * </pre>
         */
        public Builder setCorrectCountValues(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (correctCountValuesBuilder_ == null) {
            correctCountValues_ = builderForValue.build();
            onChanged();
          } else {
            correctCountValuesBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
         *
         * <pre>
         * Richtiger Wert für "CountValues"
         * </pre>
         */
        public Builder mergeCorrectCountValues(io.dstore.Values.integerValue value) {
          if (correctCountValuesBuilder_ == null) {
            if (correctCountValues_ != null) {
              correctCountValues_ =
                io.dstore.Values.integerValue.newBuilder(correctCountValues_).mergeFrom(value).buildPartial();
            } else {
              correctCountValues_ = value;
            }
            onChanged();
          } else {
            correctCountValuesBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
         *
         * <pre>
         * Richtiger Wert für "CountValues"
         * </pre>
         */
        public Builder clearCorrectCountValues() {
          if (correctCountValuesBuilder_ == null) {
            correctCountValues_ = null;
            onChanged();
          } else {
            correctCountValues_ = null;
            correctCountValuesBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
         *
         * <pre>
         * Richtiger Wert für "CountValues"
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getCorrectCountValuesBuilder() {
          
          onChanged();
          return getCorrectCountValuesFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
         *
         * <pre>
         * Richtiger Wert für "CountValues"
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getCorrectCountValuesOrBuilder() {
          if (correctCountValuesBuilder_ != null) {
            return correctCountValuesBuilder_.getMessageOrBuilder();
          } else {
            return correctCountValues_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : correctCountValues_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_values = 30004;</code>
         *
         * <pre>
         * Richtiger Wert für "CountValues"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getCorrectCountValuesFieldBuilder() {
          if (correctCountValuesBuilder_ == null) {
            correctCountValuesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getCorrectCountValues(),
                    getParentForChildren(),
                    isClean());
            correctCountValues_ = null;
          }
          return correctCountValuesBuilder_;
        }

        private io.dstore.Values.integerValue correctCountPersons_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> correctCountPersonsBuilder_;
        /**
         * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
         *
         * <pre>
         * Richtiger Wert für "CountPersons"
         * </pre>
         */
        public boolean hasCorrectCountPersons() {
          return correctCountPersonsBuilder_ != null || correctCountPersons_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
         *
         * <pre>
         * Richtiger Wert für "CountPersons"
         * </pre>
         */
        public io.dstore.Values.integerValue getCorrectCountPersons() {
          if (correctCountPersonsBuilder_ == null) {
            return correctCountPersons_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : correctCountPersons_;
          } else {
            return correctCountPersonsBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
         *
         * <pre>
         * Richtiger Wert für "CountPersons"
         * </pre>
         */
        public Builder setCorrectCountPersons(io.dstore.Values.integerValue value) {
          if (correctCountPersonsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            correctCountPersons_ = value;
            onChanged();
          } else {
            correctCountPersonsBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
         *
         * <pre>
         * Richtiger Wert für "CountPersons"
         * </pre>
         */
        public Builder setCorrectCountPersons(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (correctCountPersonsBuilder_ == null) {
            correctCountPersons_ = builderForValue.build();
            onChanged();
          } else {
            correctCountPersonsBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
         *
         * <pre>
         * Richtiger Wert für "CountPersons"
         * </pre>
         */
        public Builder mergeCorrectCountPersons(io.dstore.Values.integerValue value) {
          if (correctCountPersonsBuilder_ == null) {
            if (correctCountPersons_ != null) {
              correctCountPersons_ =
                io.dstore.Values.integerValue.newBuilder(correctCountPersons_).mergeFrom(value).buildPartial();
            } else {
              correctCountPersons_ = value;
            }
            onChanged();
          } else {
            correctCountPersonsBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
         *
         * <pre>
         * Richtiger Wert für "CountPersons"
         * </pre>
         */
        public Builder clearCorrectCountPersons() {
          if (correctCountPersonsBuilder_ == null) {
            correctCountPersons_ = null;
            onChanged();
          } else {
            correctCountPersons_ = null;
            correctCountPersonsBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
         *
         * <pre>
         * Richtiger Wert für "CountPersons"
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getCorrectCountPersonsBuilder() {
          
          onChanged();
          return getCorrectCountPersonsFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
         *
         * <pre>
         * Richtiger Wert für "CountPersons"
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getCorrectCountPersonsOrBuilder() {
          if (correctCountPersonsBuilder_ != null) {
            return correctCountPersonsBuilder_.getMessageOrBuilder();
          } else {
            return correctCountPersons_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : correctCountPersons_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue correct_count_persons = 30005;</code>
         *
         * <pre>
         * Richtiger Wert für "CountPersons"
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getCorrectCountPersonsFieldBuilder() {
          if (correctCountPersonsBuilder_ == null) {
            correctCountPersonsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getCorrectCountPersons(),
                    getParentForChildren(),
                    isClean());
            correctCountPersons_ = null;
          }
          return correctCountPersonsBuilder_;
        }

        private io.dstore.Values.integerValue inconsistenceType_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> inconsistenceTypeBuilder_;
        /**
         * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
         *
         * <pre>
         * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
         * </pre>
         */
        public boolean hasInconsistenceType() {
          return inconsistenceTypeBuilder_ != null || inconsistenceType_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
         *
         * <pre>
         * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
         * </pre>
         */
        public io.dstore.Values.integerValue getInconsistenceType() {
          if (inconsistenceTypeBuilder_ == null) {
            return inconsistenceType_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : inconsistenceType_;
          } else {
            return inconsistenceTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
         *
         * <pre>
         * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
         * </pre>
         */
        public Builder setInconsistenceType(io.dstore.Values.integerValue value) {
          if (inconsistenceTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            inconsistenceType_ = value;
            onChanged();
          } else {
            inconsistenceTypeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
         *
         * <pre>
         * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
         * </pre>
         */
        public Builder setInconsistenceType(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (inconsistenceTypeBuilder_ == null) {
            inconsistenceType_ = builderForValue.build();
            onChanged();
          } else {
            inconsistenceTypeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
         *
         * <pre>
         * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
         * </pre>
         */
        public Builder mergeInconsistenceType(io.dstore.Values.integerValue value) {
          if (inconsistenceTypeBuilder_ == null) {
            if (inconsistenceType_ != null) {
              inconsistenceType_ =
                io.dstore.Values.integerValue.newBuilder(inconsistenceType_).mergeFrom(value).buildPartial();
            } else {
              inconsistenceType_ = value;
            }
            onChanged();
          } else {
            inconsistenceTypeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
         *
         * <pre>
         * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
         * </pre>
         */
        public Builder clearInconsistenceType() {
          if (inconsistenceTypeBuilder_ == null) {
            inconsistenceType_ = null;
            onChanged();
          } else {
            inconsistenceType_ = null;
            inconsistenceTypeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
         *
         * <pre>
         * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getInconsistenceTypeBuilder() {
          
          onChanged();
          return getInconsistenceTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
         *
         * <pre>
         * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getInconsistenceTypeOrBuilder() {
          if (inconsistenceTypeBuilder_ != null) {
            return inconsistenceTypeBuilder_.getMessageOrBuilder();
          } else {
            return inconsistenceType_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : inconsistenceType_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue inconsistence_type = 30006;</code>
         *
         * <pre>
         * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getInconsistenceTypeFieldBuilder() {
          if (inconsistenceTypeBuilder_ == null) {
            inconsistenceTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getInconsistenceType(),
                    getParentForChildren(),
                    isClean());
            inconsistenceType_ = null;
          }
          return inconsistenceTypeBuilder_;
        }

        private io.dstore.Values.integerValue wrongCountPersons_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> wrongCountPersonsBuilder_;
        /**
         * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
         * </pre>
         */
        public boolean hasWrongCountPersons() {
          return wrongCountPersonsBuilder_ != null || wrongCountPersons_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
         * </pre>
         */
        public io.dstore.Values.integerValue getWrongCountPersons() {
          if (wrongCountPersonsBuilder_ == null) {
            return wrongCountPersons_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : wrongCountPersons_;
          } else {
            return wrongCountPersonsBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
         * </pre>
         */
        public Builder setWrongCountPersons(io.dstore.Values.integerValue value) {
          if (wrongCountPersonsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            wrongCountPersons_ = value;
            onChanged();
          } else {
            wrongCountPersonsBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
         * </pre>
         */
        public Builder setWrongCountPersons(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (wrongCountPersonsBuilder_ == null) {
            wrongCountPersons_ = builderForValue.build();
            onChanged();
          } else {
            wrongCountPersonsBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
         * </pre>
         */
        public Builder mergeWrongCountPersons(io.dstore.Values.integerValue value) {
          if (wrongCountPersonsBuilder_ == null) {
            if (wrongCountPersons_ != null) {
              wrongCountPersons_ =
                io.dstore.Values.integerValue.newBuilder(wrongCountPersons_).mergeFrom(value).buildPartial();
            } else {
              wrongCountPersons_ = value;
            }
            onChanged();
          } else {
            wrongCountPersonsBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
         * </pre>
         */
        public Builder clearWrongCountPersons() {
          if (wrongCountPersonsBuilder_ == null) {
            wrongCountPersons_ = null;
            onChanged();
          } else {
            wrongCountPersons_ = null;
            wrongCountPersonsBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getWrongCountPersonsBuilder() {
          
          onChanged();
          return getWrongCountPersonsFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getWrongCountPersonsOrBuilder() {
          if (wrongCountPersonsBuilder_ != null) {
            return wrongCountPersonsBuilder_.getMessageOrBuilder();
          } else {
            return wrongCountPersons_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : wrongCountPersons_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue wrong_count_persons = 30007;</code>
         *
         * <pre>
         * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getWrongCountPersonsFieldBuilder() {
          if (wrongCountPersonsBuilder_ == null) {
            wrongCountPersonsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getWrongCountPersons(),
                    getParentForChildren(),
                    isClean());
            wrongCountPersons_ = null;
          }
          return wrongCountPersonsBuilder_;
        }

        private io.dstore.Values.integerValue personTypeId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> personTypeIdBuilder_;
        /**
         * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
         *
         * <pre>
         * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
         * </pre>
         */
        public boolean hasPersonTypeId() {
          return personTypeIdBuilder_ != null || personTypeId_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
         *
         * <pre>
         * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
         * </pre>
         */
        public io.dstore.Values.integerValue getPersonTypeId() {
          if (personTypeIdBuilder_ == null) {
            return personTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : personTypeId_;
          } else {
            return personTypeIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
         *
         * <pre>
         * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
         * </pre>
         */
        public Builder setPersonTypeId(io.dstore.Values.integerValue value) {
          if (personTypeIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            personTypeId_ = value;
            onChanged();
          } else {
            personTypeIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
         *
         * <pre>
         * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
         * </pre>
         */
        public Builder setPersonTypeId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (personTypeIdBuilder_ == null) {
            personTypeId_ = builderForValue.build();
            onChanged();
          } else {
            personTypeIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
         *
         * <pre>
         * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
         * </pre>
         */
        public Builder mergePersonTypeId(io.dstore.Values.integerValue value) {
          if (personTypeIdBuilder_ == null) {
            if (personTypeId_ != null) {
              personTypeId_ =
                io.dstore.Values.integerValue.newBuilder(personTypeId_).mergeFrom(value).buildPartial();
            } else {
              personTypeId_ = value;
            }
            onChanged();
          } else {
            personTypeIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
         *
         * <pre>
         * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
         * </pre>
         */
        public Builder clearPersonTypeId() {
          if (personTypeIdBuilder_ == null) {
            personTypeId_ = null;
            onChanged();
          } else {
            personTypeId_ = null;
            personTypeIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
         *
         * <pre>
         * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getPersonTypeIdBuilder() {
          
          onChanged();
          return getPersonTypeIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
         *
         * <pre>
         * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getPersonTypeIdOrBuilder() {
          if (personTypeIdBuilder_ != null) {
            return personTypeIdBuilder_.getMessageOrBuilder();
          } else {
            return personTypeId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : personTypeId_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue person_type_id = 30008;</code>
         *
         * <pre>
         * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getPersonTypeIdFieldBuilder() {
          if (personTypeIdBuilder_ == null) {
            personTypeIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getPersonTypeId(),
                    getParentForChildren(),
                    isClean());
            personTypeId_ = null;
          }
          return personTypeIdBuilder_;
        }

        private io.dstore.Values.stringValue valuelowercase_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> valuelowercaseBuilder_;
        /**
         * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
         *
         * <pre>
         * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
         * </pre>
         */
        public boolean hasValuelowercase() {
          return valuelowercaseBuilder_ != null || valuelowercase_ != null;
        }
        /**
         * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
         *
         * <pre>
         * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
         * </pre>
         */
        public io.dstore.Values.stringValue getValuelowercase() {
          if (valuelowercaseBuilder_ == null) {
            return valuelowercase_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : valuelowercase_;
          } else {
            return valuelowercaseBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
         *
         * <pre>
         * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
         * </pre>
         */
        public Builder setValuelowercase(io.dstore.Values.stringValue value) {
          if (valuelowercaseBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            valuelowercase_ = value;
            onChanged();
          } else {
            valuelowercaseBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
         *
         * <pre>
         * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
         * </pre>
         */
        public Builder setValuelowercase(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (valuelowercaseBuilder_ == null) {
            valuelowercase_ = builderForValue.build();
            onChanged();
          } else {
            valuelowercaseBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
         *
         * <pre>
         * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
         * </pre>
         */
        public Builder mergeValuelowercase(io.dstore.Values.stringValue value) {
          if (valuelowercaseBuilder_ == null) {
            if (valuelowercase_ != null) {
              valuelowercase_ =
                io.dstore.Values.stringValue.newBuilder(valuelowercase_).mergeFrom(value).buildPartial();
            } else {
              valuelowercase_ = value;
            }
            onChanged();
          } else {
            valuelowercaseBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
         *
         * <pre>
         * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
         * </pre>
         */
        public Builder clearValuelowercase() {
          if (valuelowercaseBuilder_ == null) {
            valuelowercase_ = null;
            onChanged();
          } else {
            valuelowercase_ = null;
            valuelowercaseBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
         *
         * <pre>
         * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
         * </pre>
         */
        public io.dstore.Values.stringValue.Builder getValuelowercaseBuilder() {
          
          onChanged();
          return getValuelowercaseFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
         *
         * <pre>
         * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
         * </pre>
         */
        public io.dstore.Values.stringValueOrBuilder getValuelowercaseOrBuilder() {
          if (valuelowercaseBuilder_ != null) {
            return valuelowercaseBuilder_.getMessageOrBuilder();
          } else {
            return valuelowercase_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : valuelowercase_;
          }
        }
        /**
         * <code>optional .dstore.values.stringValue valuelowercase = 40001;</code>
         *
         * <pre>
         * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getValuelowercaseFieldBuilder() {
          if (valuelowercaseBuilder_ == null) {
            valuelowercaseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getValuelowercase(),
                    getParentForChildren(),
                    isClean());
            valuelowercase_ = null;
          }
          return valuelowercaseBuilder_;
        }

        private io.dstore.Values.integerValue personId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> personIdBuilder_;
        /**
         * <code>optional .dstore.values.integerValue person_id = 40002;</code>
         *
         * <pre>
         * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
         * </pre>
         */
        public boolean hasPersonId() {
          return personIdBuilder_ != null || personId_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue person_id = 40002;</code>
         *
         * <pre>
         * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
         * </pre>
         */
        public io.dstore.Values.integerValue getPersonId() {
          if (personIdBuilder_ == null) {
            return personId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : personId_;
          } else {
            return personIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue person_id = 40002;</code>
         *
         * <pre>
         * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
         * </pre>
         */
        public Builder setPersonId(io.dstore.Values.integerValue value) {
          if (personIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            personId_ = value;
            onChanged();
          } else {
            personIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue person_id = 40002;</code>
         *
         * <pre>
         * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
         * </pre>
         */
        public Builder setPersonId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (personIdBuilder_ == null) {
            personId_ = builderForValue.build();
            onChanged();
          } else {
            personIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue person_id = 40002;</code>
         *
         * <pre>
         * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
         * </pre>
         */
        public Builder mergePersonId(io.dstore.Values.integerValue value) {
          if (personIdBuilder_ == null) {
            if (personId_ != null) {
              personId_ =
                io.dstore.Values.integerValue.newBuilder(personId_).mergeFrom(value).buildPartial();
            } else {
              personId_ = value;
            }
            onChanged();
          } else {
            personIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue person_id = 40002;</code>
         *
         * <pre>
         * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
         * </pre>
         */
        public Builder clearPersonId() {
          if (personIdBuilder_ == null) {
            personId_ = null;
            onChanged();
          } else {
            personId_ = null;
            personIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue person_id = 40002;</code>
         *
         * <pre>
         * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getPersonIdBuilder() {
          
          onChanged();
          return getPersonIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue person_id = 40002;</code>
         *
         * <pre>
         * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getPersonIdOrBuilder() {
          if (personIdBuilder_ != null) {
            return personIdBuilder_.getMessageOrBuilder();
          } else {
            return personId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : personId_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue person_id = 40002;</code>
         *
         * <pre>
         * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getPersonIdFieldBuilder() {
          if (personIdBuilder_ == null) {
            personIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getPersonId(),
                    getParentForChildren(),
                    isClean());
            personId_ = null;
          }
          return personIdBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:dstore.engine.pm_ConsistencyCheck_Ad.Response.Row)
      }

      // @@protoc_insertion_point(class_scope:dstore.engine.pm_ConsistencyCheck_Ad.Response.Row)
      private static final io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row();
      }

      public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Row>
          PARSER = new com.google.protobuf.AbstractParser<Row>() {
        public Row parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new Row(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<Row> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Row> getParserForType() {
        return PARSER;
      }

      public io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int META_INFORMATION_FIELD_NUMBER = 2;
    private java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> metaInformation_;
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> getMetaInformationList() {
      return metaInformation_;
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
        getMetaInformationOrBuilderList() {
      return metaInformation_;
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public int getMetaInformationCount() {
      return metaInformation_.size();
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index) {
      return metaInformation_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
        int index) {
      return metaInformation_.get(index);
    }

    public static final int MESSAGE_FIELD_NUMBER = 3;
    private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_;
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public int getMessageCount() {
      return message_.size();
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
      return message_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index) {
      return message_.get(index);
    }

    public static final int ROW_FIELD_NUMBER = 4;
    private java.util.List<io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row> row_;
    /**
     * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public java.util.List<io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row> getRowList() {
      return row_;
    }
    /**
     * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public java.util.List<? extends io.dstore.engine.procedures.PmConsistencyCheckAd.Response.RowOrBuilder> 
        getRowOrBuilderList() {
      return row_;
    }
    /**
     * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public int getRowCount() {
      return row_.size();
    }
    /**
     * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row getRow(int index) {
      return row_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public io.dstore.engine.procedures.PmConsistencyCheckAd.Response.RowOrBuilder getRowOrBuilder(
        int index) {
      return row_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < metaInformation_.size(); i++) {
        output.writeMessage(2, metaInformation_.get(i));
      }
      for (int i = 0; i < message_.size(); i++) {
        output.writeMessage(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        output.writeMessage(4, row_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < metaInformation_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, metaInformation_.get(i));
      }
      for (int i = 0; i < message_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, row_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procedures.PmConsistencyCheckAd.Response prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.pm_ConsistencyCheck_Ad.Response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.pm_ConsistencyCheck_Ad.Response)
        io.dstore.engine.procedures.PmConsistencyCheckAd.ResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.PmConsistencyCheckAd.Response.class, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Builder.class);
      }

      // Construct using io.dstore.engine.procedures.PmConsistencyCheckAd.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMetaInformationFieldBuilder();
          getMessageFieldBuilder();
          getRowFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (metaInformationBuilder_ == null) {
          metaInformation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          metaInformationBuilder_.clear();
        }
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          messageBuilder_.clear();
        }
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          rowBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procedures.PmConsistencyCheckAd.internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_descriptor;
      }

      public io.dstore.engine.procedures.PmConsistencyCheckAd.Response getDefaultInstanceForType() {
        return io.dstore.engine.procedures.PmConsistencyCheckAd.Response.getDefaultInstance();
      }

      public io.dstore.engine.procedures.PmConsistencyCheckAd.Response build() {
        io.dstore.engine.procedures.PmConsistencyCheckAd.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procedures.PmConsistencyCheckAd.Response buildPartial() {
        io.dstore.engine.procedures.PmConsistencyCheckAd.Response result = new io.dstore.engine.procedures.PmConsistencyCheckAd.Response(this);
        int from_bitField0_ = bitField0_;
        if (metaInformationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            metaInformation_ = java.util.Collections.unmodifiableList(metaInformation_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.metaInformation_ = metaInformation_;
        } else {
          result.metaInformation_ = metaInformationBuilder_.build();
        }
        if (messageBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            message_ = java.util.Collections.unmodifiableList(message_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.message_ = message_;
        } else {
          result.message_ = messageBuilder_.build();
        }
        if (rowBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            row_ = java.util.Collections.unmodifiableList(row_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.row_ = row_;
        } else {
          result.row_ = rowBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procedures.PmConsistencyCheckAd.Response) {
          return mergeFrom((io.dstore.engine.procedures.PmConsistencyCheckAd.Response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procedures.PmConsistencyCheckAd.Response other) {
        if (other == io.dstore.engine.procedures.PmConsistencyCheckAd.Response.getDefaultInstance()) return this;
        if (metaInformationBuilder_ == null) {
          if (!other.metaInformation_.isEmpty()) {
            if (metaInformation_.isEmpty()) {
              metaInformation_ = other.metaInformation_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMetaInformationIsMutable();
              metaInformation_.addAll(other.metaInformation_);
            }
            onChanged();
          }
        } else {
          if (!other.metaInformation_.isEmpty()) {
            if (metaInformationBuilder_.isEmpty()) {
              metaInformationBuilder_.dispose();
              metaInformationBuilder_ = null;
              metaInformation_ = other.metaInformation_;
              bitField0_ = (bitField0_ & ~0x00000001);
              metaInformationBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMetaInformationFieldBuilder() : null;
            } else {
              metaInformationBuilder_.addAllMessages(other.metaInformation_);
            }
          }
        }
        if (messageBuilder_ == null) {
          if (!other.message_.isEmpty()) {
            if (message_.isEmpty()) {
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMessageIsMutable();
              message_.addAll(other.message_);
            }
            onChanged();
          }
        } else {
          if (!other.message_.isEmpty()) {
            if (messageBuilder_.isEmpty()) {
              messageBuilder_.dispose();
              messageBuilder_ = null;
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
              messageBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMessageFieldBuilder() : null;
            } else {
              messageBuilder_.addAllMessages(other.message_);
            }
          }
        }
        if (rowBuilder_ == null) {
          if (!other.row_.isEmpty()) {
            if (row_.isEmpty()) {
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureRowIsMutable();
              row_.addAll(other.row_);
            }
            onChanged();
          }
        } else {
          if (!other.row_.isEmpty()) {
            if (rowBuilder_.isEmpty()) {
              rowBuilder_.dispose();
              rowBuilder_ = null;
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
              rowBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRowFieldBuilder() : null;
            } else {
              rowBuilder_.addAllMessages(other.row_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procedures.PmConsistencyCheckAd.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procedures.PmConsistencyCheckAd.Response) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> metaInformation_ =
        java.util.Collections.emptyList();
      private void ensureMetaInformationIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          metaInformation_ = new java.util.ArrayList<io.dstore.engine.EngineMetaInformation.MetaInformation>(metaInformation_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> metaInformationBuilder_;

      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> getMetaInformationList() {
        if (metaInformationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(metaInformation_);
        } else {
          return metaInformationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public int getMetaInformationCount() {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.size();
        } else {
          return metaInformationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index) {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.get(index);
        } else {
          return metaInformationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder setMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.set(index, value);
          onChanged();
        } else {
          metaInformationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder setMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.set(index, builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.add(value);
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.add(index, value);
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.add(builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.add(index, builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addAllMetaInformation(
          java.lang.Iterable<? extends io.dstore.engine.EngineMetaInformation.MetaInformation> values) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, metaInformation_);
          onChanged();
        } else {
          metaInformationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder clearMetaInformation() {
        if (metaInformationBuilder_ == null) {
          metaInformation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          metaInformationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder removeMetaInformation(int index) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.remove(index);
          onChanged();
        } else {
          metaInformationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder getMetaInformationBuilder(
          int index) {
        return getMetaInformationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
          int index) {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.get(index);  } else {
          return metaInformationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
           getMetaInformationOrBuilderList() {
        if (metaInformationBuilder_ != null) {
          return metaInformationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(metaInformation_);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder addMetaInformationBuilder() {
        return getMetaInformationFieldBuilder().addBuilder(
            io.dstore.engine.EngineMetaInformation.MetaInformation.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder addMetaInformationBuilder(
          int index) {
        return getMetaInformationFieldBuilder().addBuilder(
            index, io.dstore.engine.EngineMetaInformation.MetaInformation.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation.Builder> 
           getMetaInformationBuilderList() {
        return getMetaInformationFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
          getMetaInformationFieldBuilder() {
        if (metaInformationBuilder_ == null) {
          metaInformationBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder>(
                  metaInformation_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          metaInformation_ = null;
        }
        return metaInformationBuilder_;
      }

      private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_ =
        java.util.Collections.emptyList();
      private void ensureMessageIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>(message_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> messageBuilder_;

      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
        if (messageBuilder_ == null) {
          return java.util.Collections.unmodifiableList(message_);
        } else {
          return messageBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public int getMessageCount() {
        if (messageBuilder_ == null) {
          return message_.size();
        } else {
          return messageBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);
        } else {
          return messageBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.set(index, value);
          onChanged();
        } else {
          messageBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.set(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(value);
          onChanged();
        } else {
          messageBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(index, value);
          onChanged();
        } else {
          messageBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addAllMessage(
          java.lang.Iterable<? extends io.dstore.engine.ProcedureMessage.Message> values) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, message_);
          onChanged();
        } else {
          messageBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder clearMessage() {
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          messageBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder removeMessage(int index) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.remove(index);
          onChanged();
        } else {
          messageBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder getMessageBuilder(
          int index) {
        return getMessageFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
          int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);  } else {
          return messageBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
           getMessageOrBuilderList() {
        if (messageBuilder_ != null) {
          return messageBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(message_);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder() {
        return getMessageFieldBuilder().addBuilder(
            io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder(
          int index) {
        return getMessageFieldBuilder().addBuilder(
            index, io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message.Builder> 
           getMessageBuilderList() {
        return getMessageFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
          getMessageFieldBuilder() {
        if (messageBuilder_ == null) {
          messageBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder>(
                  message_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        return messageBuilder_;
      }

      private java.util.List<io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row> row_ =
        java.util.Collections.emptyList();
      private void ensureRowIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = new java.util.ArrayList<io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row>(row_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.Builder, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.RowOrBuilder> rowBuilder_;

      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row> getRowList() {
        if (rowBuilder_ == null) {
          return java.util.Collections.unmodifiableList(row_);
        } else {
          return rowBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public int getRowCount() {
        if (rowBuilder_ == null) {
          return row_.size();
        } else {
          return rowBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row getRow(int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);
        } else {
          return rowBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder setRow(
          int index, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.set(index, value);
          onChanged();
        } else {
          rowBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder setRow(
          int index, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.set(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(value);
          onChanged();
        } else {
          rowBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          int index, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(index, value);
          onChanged();
        } else {
          rowBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          int index, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addAllRow(
          java.lang.Iterable<? extends io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row> values) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, row_);
          onChanged();
        } else {
          rowBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder clearRow() {
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          rowBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder removeRow(int index) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.remove(index);
          onChanged();
        } else {
          rowBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.Builder getRowBuilder(
          int index) {
        return getRowFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procedures.PmConsistencyCheckAd.Response.RowOrBuilder getRowOrBuilder(
          int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);  } else {
          return rowBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<? extends io.dstore.engine.procedures.PmConsistencyCheckAd.Response.RowOrBuilder> 
           getRowOrBuilderList() {
        if (rowBuilder_ != null) {
          return rowBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(row_);
        }
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.Builder addRowBuilder() {
        return getRowFieldBuilder().addBuilder(
            io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.Builder addRowBuilder(
          int index) {
        return getRowFieldBuilder().addBuilder(
            index, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.pm_ConsistencyCheck_Ad.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.Builder> 
           getRowBuilderList() {
        return getRowFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.Builder, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.RowOrBuilder> 
          getRowFieldBuilder() {
        if (rowBuilder_ == null) {
          rowBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.Row.Builder, io.dstore.engine.procedures.PmConsistencyCheckAd.Response.RowOrBuilder>(
                  row_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          row_ = null;
        }
        return rowBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.pm_ConsistencyCheck_Ad.Response)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.pm_ConsistencyCheck_Ad.Response)
    private static final io.dstore.engine.procedures.PmConsistencyCheckAd.Response DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procedures.PmConsistencyCheckAd.Response();
    }

    public static io.dstore.engine.procedures.PmConsistencyCheckAd.Response getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Response>
        PARSER = new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Response(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Response> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procedures.PmConsistencyCheckAd.Response getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Parameters_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Parameters_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_Row_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_Row_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n5dstore/engine/procedures/pm_Consistenc" +
      "yCheck_Ad.proto\022$dstore.engine.pm_Consis" +
      "tencyCheck_Ad\032\023dstore/values.proto\032\033dsto" +
      "re/engine/message.proto\032#dstore/engine/m" +
      "etainformation.proto\"\304\001\n\nParameters\022=\n\030p" +
      "erson_characteristic_id\030\001 \001(\0132\033.dstore.v" +
      "alues.integerValue\022&\n\035person_characteris" +
      "tic_id_null\030\351\007 \001(\010\0222\n\rwhat_to_check\030\002 \001(" +
      "\0132\033.dstore.values.integerValue\022\033\n\022what_t" +
      "o_check_null\030\352\007 \001(\010\"\220\t\n\010Response\022H\n\020meta",
      "_information\030\002 \003(\0132..dstore.engine.metai" +
      "nformation.MetaInformation\022/\n\007message\030\003 " +
      "\003(\0132\036.dstore.engine.message.Message\022?\n\003r" +
      "ow\030\004 \003(\01322.dstore.engine.pm_ConsistencyC" +
      "heck_Ad.Response.Row\032\307\007\n\003Row\022\017\n\006row_id\030\220" +
      "N \001(\005\022>\n\030person_characteristic_id\030\221N \001(\013" +
      "2\033.dstore.values.integerValue\022*\n\005value\030\222" +
      "N \001(\0132\032.dstore.values.stringValue\022.\n\010val" +
      "ue_id\030\223N \001(\0132\033.dstore.values.integerValu" +
      "e\022@\n\032used_by_person_type_bitmap\030\224N \001(\0132\033",
      ".dstore.values.integerValue\022-\n\007sort_no\030\225" +
      "N \001(\0132\033.dstore.values.integerValue\022G\n co" +
      "rrect_used_by_person_type_btmp\030\241\234\001 \001(\0132\033" +
      ".dstore.values.integerValue\022E\n\036wrong_use" +
      "d_by_person_type_btmp\030\245\234\001 \001(\0132\033.dstore.v" +
      "alues.integerValue\0229\n\022wrong_count_values" +
      "\030\261\352\001 \001(\0132\033.dstore.values.integerValue\022F\n" +
      " first_four_characters_lower_case\030\262\352\001 \001(" +
      "\0132\032.dstore.values.stringValue\022;\n\024correct" +
      "_count_values\030\264\352\001 \001(\0132\033.dstore.values.in",
      "tegerValue\022<\n\025correct_count_persons\030\265\352\001 " +
      "\001(\0132\033.dstore.values.integerValue\0229\n\022inco" +
      "nsistence_type\030\266\352\001 \001(\0132\033.dstore.values.i" +
      "ntegerValue\022:\n\023wrong_count_persons\030\267\352\001 \001" +
      "(\0132\033.dstore.values.integerValue\0225\n\016perso" +
      "n_type_id\030\270\352\001 \001(\0132\033.dstore.values.intege" +
      "rValue\0224\n\016valuelowercase\030\301\270\002 \001(\0132\032.dstor" +
      "e.values.stringValue\0220\n\tperson_id\030\302\270\002 \001(" +
      "\0132\033.dstore.values.integerValueBW\n\033io.dst" +
      "ore.engine.proceduresZ8gosdk.dstore.de/e",
      "ngine/procedures/pm_ConsistencyCheck_Adb" +
      "\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.dstore.Values.getDescriptor(),
          io.dstore.engine.ProcedureMessage.getDescriptor(),
          io.dstore.engine.EngineMetaInformation.getDescriptor(),
        }, assigner);
    internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Parameters_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Parameters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Parameters_descriptor,
        new java.lang.String[] { "PersonCharacteristicId", "PersonCharacteristicIdNull", "WhatToCheck", "WhatToCheckNull", });
    internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_descriptor,
        new java.lang.String[] { "MetaInformation", "Message", "Row", });
    internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_Row_descriptor =
      internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_descriptor.getNestedTypes().get(0);
    internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_Row_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_pm_ConsistencyCheck_Ad_Response_Row_descriptor,
        new java.lang.String[] { "RowId", "PersonCharacteristicId", "Value", "ValueId", "UsedByPersonTypeBitmap", "SortNo", "CorrectUsedByPersonTypeBtmp", "WrongUsedByPersonTypeBtmp", "WrongCountValues", "FirstFourCharactersLowerCase", "CorrectCountValues", "CorrectCountPersons", "InconsistenceType", "WrongCountPersons", "PersonTypeId", "Valuelowercase", "PersonId", });
    io.dstore.Values.getDescriptor();
    io.dstore.engine.ProcedureMessage.getDescriptor();
    io.dstore.engine.EngineMetaInformation.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
