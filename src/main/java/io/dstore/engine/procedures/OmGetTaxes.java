// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dstore/engine/procedures/om_GetTaxes.proto

package io.dstore.engine.procedures;

public final class OmGetTaxes {
  private OmGetTaxes() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ParametersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetTaxes.Parameters)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
     */
    boolean hasTaxTypeId();
    /**
     * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
     */
    io.dstore.Values.integerValue getTaxTypeId();
    /**
     * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
     */
    io.dstore.Values.integerValueOrBuilder getTaxTypeIdOrBuilder();

    /**
     * <code>optional bool tax_type_id_null = 1001;</code>
     */
    boolean getTaxTypeIdNull();

    /**
     * <code>optional .dstore.values.timestampValue date = 2;</code>
     */
    boolean hasDate();
    /**
     * <code>optional .dstore.values.timestampValue date = 2;</code>
     */
    io.dstore.Values.timestampValue getDate();
    /**
     * <code>optional .dstore.values.timestampValue date = 2;</code>
     */
    io.dstore.Values.timestampValueOrBuilder getDateOrBuilder();

    /**
     * <code>optional bool date_null = 1002;</code>
     */
    boolean getDateNull();
  }
  /**
   * Protobuf type {@code dstore.engine.om_GetTaxes.Parameters}
   */
  public  static final class Parameters extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.om_GetTaxes.Parameters)
      ParametersOrBuilder {
    // Use Parameters.newBuilder() to construct.
    private Parameters(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Parameters() {
      taxTypeIdNull_ = false;
      dateNull_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Parameters(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.Values.integerValue.Builder subBuilder = null;
              if (taxTypeId_ != null) {
                subBuilder = taxTypeId_.toBuilder();
              }
              taxTypeId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(taxTypeId_);
                taxTypeId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.dstore.Values.timestampValue.Builder subBuilder = null;
              if (date_ != null) {
                subBuilder = date_.toBuilder();
              }
              date_ = input.readMessage(io.dstore.Values.timestampValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(date_);
                date_ = subBuilder.buildPartial();
              }

              break;
            }
            case 8008: {

              taxTypeIdNull_ = input.readBool();
              break;
            }
            case 8016: {

              dateNull_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Parameters_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Parameters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procedures.OmGetTaxes.Parameters.class, io.dstore.engine.procedures.OmGetTaxes.Parameters.Builder.class);
    }

    public static final int TAX_TYPE_ID_FIELD_NUMBER = 1;
    private io.dstore.Values.integerValue taxTypeId_;
    /**
     * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
     */
    public boolean hasTaxTypeId() {
      return taxTypeId_ != null;
    }
    /**
     * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
     */
    public io.dstore.Values.integerValue getTaxTypeId() {
      return taxTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : taxTypeId_;
    }
    /**
     * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
     */
    public io.dstore.Values.integerValueOrBuilder getTaxTypeIdOrBuilder() {
      return getTaxTypeId();
    }

    public static final int TAX_TYPE_ID_NULL_FIELD_NUMBER = 1001;
    private boolean taxTypeIdNull_;
    /**
     * <code>optional bool tax_type_id_null = 1001;</code>
     */
    public boolean getTaxTypeIdNull() {
      return taxTypeIdNull_;
    }

    public static final int DATE_FIELD_NUMBER = 2;
    private io.dstore.Values.timestampValue date_;
    /**
     * <code>optional .dstore.values.timestampValue date = 2;</code>
     */
    public boolean hasDate() {
      return date_ != null;
    }
    /**
     * <code>optional .dstore.values.timestampValue date = 2;</code>
     */
    public io.dstore.Values.timestampValue getDate() {
      return date_ == null ? io.dstore.Values.timestampValue.getDefaultInstance() : date_;
    }
    /**
     * <code>optional .dstore.values.timestampValue date = 2;</code>
     */
    public io.dstore.Values.timestampValueOrBuilder getDateOrBuilder() {
      return getDate();
    }

    public static final int DATE_NULL_FIELD_NUMBER = 1002;
    private boolean dateNull_;
    /**
     * <code>optional bool date_null = 1002;</code>
     */
    public boolean getDateNull() {
      return dateNull_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (taxTypeId_ != null) {
        output.writeMessage(1, getTaxTypeId());
      }
      if (date_ != null) {
        output.writeMessage(2, getDate());
      }
      if (taxTypeIdNull_ != false) {
        output.writeBool(1001, taxTypeIdNull_);
      }
      if (dateNull_ != false) {
        output.writeBool(1002, dateNull_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (taxTypeId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTaxTypeId());
      }
      if (date_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getDate());
      }
      if (taxTypeIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1001, taxTypeIdNull_);
      }
      if (dateNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1002, dateNull_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procedures.OmGetTaxes.Parameters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Parameters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Parameters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Parameters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Parameters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Parameters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Parameters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Parameters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procedures.OmGetTaxes.Parameters prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetTaxes.Parameters}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetTaxes.Parameters)
        io.dstore.engine.procedures.OmGetTaxes.ParametersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Parameters_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Parameters_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.OmGetTaxes.Parameters.class, io.dstore.engine.procedures.OmGetTaxes.Parameters.Builder.class);
      }

      // Construct using io.dstore.engine.procedures.OmGetTaxes.Parameters.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (taxTypeIdBuilder_ == null) {
          taxTypeId_ = null;
        } else {
          taxTypeId_ = null;
          taxTypeIdBuilder_ = null;
        }
        taxTypeIdNull_ = false;

        if (dateBuilder_ == null) {
          date_ = null;
        } else {
          date_ = null;
          dateBuilder_ = null;
        }
        dateNull_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Parameters_descriptor;
      }

      public io.dstore.engine.procedures.OmGetTaxes.Parameters getDefaultInstanceForType() {
        return io.dstore.engine.procedures.OmGetTaxes.Parameters.getDefaultInstance();
      }

      public io.dstore.engine.procedures.OmGetTaxes.Parameters build() {
        io.dstore.engine.procedures.OmGetTaxes.Parameters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procedures.OmGetTaxes.Parameters buildPartial() {
        io.dstore.engine.procedures.OmGetTaxes.Parameters result = new io.dstore.engine.procedures.OmGetTaxes.Parameters(this);
        if (taxTypeIdBuilder_ == null) {
          result.taxTypeId_ = taxTypeId_;
        } else {
          result.taxTypeId_ = taxTypeIdBuilder_.build();
        }
        result.taxTypeIdNull_ = taxTypeIdNull_;
        if (dateBuilder_ == null) {
          result.date_ = date_;
        } else {
          result.date_ = dateBuilder_.build();
        }
        result.dateNull_ = dateNull_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procedures.OmGetTaxes.Parameters) {
          return mergeFrom((io.dstore.engine.procedures.OmGetTaxes.Parameters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procedures.OmGetTaxes.Parameters other) {
        if (other == io.dstore.engine.procedures.OmGetTaxes.Parameters.getDefaultInstance()) return this;
        if (other.hasTaxTypeId()) {
          mergeTaxTypeId(other.getTaxTypeId());
        }
        if (other.getTaxTypeIdNull() != false) {
          setTaxTypeIdNull(other.getTaxTypeIdNull());
        }
        if (other.hasDate()) {
          mergeDate(other.getDate());
        }
        if (other.getDateNull() != false) {
          setDateNull(other.getDateNull());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procedures.OmGetTaxes.Parameters parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procedures.OmGetTaxes.Parameters) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.dstore.Values.integerValue taxTypeId_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> taxTypeIdBuilder_;
      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
       */
      public boolean hasTaxTypeId() {
        return taxTypeIdBuilder_ != null || taxTypeId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
       */
      public io.dstore.Values.integerValue getTaxTypeId() {
        if (taxTypeIdBuilder_ == null) {
          return taxTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : taxTypeId_;
        } else {
          return taxTypeIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
       */
      public Builder setTaxTypeId(io.dstore.Values.integerValue value) {
        if (taxTypeIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          taxTypeId_ = value;
          onChanged();
        } else {
          taxTypeIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
       */
      public Builder setTaxTypeId(
          io.dstore.Values.integerValue.Builder builderForValue) {
        if (taxTypeIdBuilder_ == null) {
          taxTypeId_ = builderForValue.build();
          onChanged();
        } else {
          taxTypeIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
       */
      public Builder mergeTaxTypeId(io.dstore.Values.integerValue value) {
        if (taxTypeIdBuilder_ == null) {
          if (taxTypeId_ != null) {
            taxTypeId_ =
              io.dstore.Values.integerValue.newBuilder(taxTypeId_).mergeFrom(value).buildPartial();
          } else {
            taxTypeId_ = value;
          }
          onChanged();
        } else {
          taxTypeIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
       */
      public Builder clearTaxTypeId() {
        if (taxTypeIdBuilder_ == null) {
          taxTypeId_ = null;
          onChanged();
        } else {
          taxTypeId_ = null;
          taxTypeIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
       */
      public io.dstore.Values.integerValue.Builder getTaxTypeIdBuilder() {
        
        onChanged();
        return getTaxTypeIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getTaxTypeIdOrBuilder() {
        if (taxTypeIdBuilder_ != null) {
          return taxTypeIdBuilder_.getMessageOrBuilder();
        } else {
          return taxTypeId_ == null ?
              io.dstore.Values.integerValue.getDefaultInstance() : taxTypeId_;
        }
      }
      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
          getTaxTypeIdFieldBuilder() {
        if (taxTypeIdBuilder_ == null) {
          taxTypeIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                  getTaxTypeId(),
                  getParentForChildren(),
                  isClean());
          taxTypeId_ = null;
        }
        return taxTypeIdBuilder_;
      }

      private boolean taxTypeIdNull_ ;
      /**
       * <code>optional bool tax_type_id_null = 1001;</code>
       */
      public boolean getTaxTypeIdNull() {
        return taxTypeIdNull_;
      }
      /**
       * <code>optional bool tax_type_id_null = 1001;</code>
       */
      public Builder setTaxTypeIdNull(boolean value) {
        
        taxTypeIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool tax_type_id_null = 1001;</code>
       */
      public Builder clearTaxTypeIdNull() {
        
        taxTypeIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.timestampValue date_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.Values.timestampValue, io.dstore.Values.timestampValue.Builder, io.dstore.Values.timestampValueOrBuilder> dateBuilder_;
      /**
       * <code>optional .dstore.values.timestampValue date = 2;</code>
       */
      public boolean hasDate() {
        return dateBuilder_ != null || date_ != null;
      }
      /**
       * <code>optional .dstore.values.timestampValue date = 2;</code>
       */
      public io.dstore.Values.timestampValue getDate() {
        if (dateBuilder_ == null) {
          return date_ == null ? io.dstore.Values.timestampValue.getDefaultInstance() : date_;
        } else {
          return dateBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.timestampValue date = 2;</code>
       */
      public Builder setDate(io.dstore.Values.timestampValue value) {
        if (dateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          date_ = value;
          onChanged();
        } else {
          dateBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.timestampValue date = 2;</code>
       */
      public Builder setDate(
          io.dstore.Values.timestampValue.Builder builderForValue) {
        if (dateBuilder_ == null) {
          date_ = builderForValue.build();
          onChanged();
        } else {
          dateBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.timestampValue date = 2;</code>
       */
      public Builder mergeDate(io.dstore.Values.timestampValue value) {
        if (dateBuilder_ == null) {
          if (date_ != null) {
            date_ =
              io.dstore.Values.timestampValue.newBuilder(date_).mergeFrom(value).buildPartial();
          } else {
            date_ = value;
          }
          onChanged();
        } else {
          dateBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.timestampValue date = 2;</code>
       */
      public Builder clearDate() {
        if (dateBuilder_ == null) {
          date_ = null;
          onChanged();
        } else {
          date_ = null;
          dateBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.timestampValue date = 2;</code>
       */
      public io.dstore.Values.timestampValue.Builder getDateBuilder() {
        
        onChanged();
        return getDateFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.timestampValue date = 2;</code>
       */
      public io.dstore.Values.timestampValueOrBuilder getDateOrBuilder() {
        if (dateBuilder_ != null) {
          return dateBuilder_.getMessageOrBuilder();
        } else {
          return date_ == null ?
              io.dstore.Values.timestampValue.getDefaultInstance() : date_;
        }
      }
      /**
       * <code>optional .dstore.values.timestampValue date = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.Values.timestampValue, io.dstore.Values.timestampValue.Builder, io.dstore.Values.timestampValueOrBuilder> 
          getDateFieldBuilder() {
        if (dateBuilder_ == null) {
          dateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.Values.timestampValue, io.dstore.Values.timestampValue.Builder, io.dstore.Values.timestampValueOrBuilder>(
                  getDate(),
                  getParentForChildren(),
                  isClean());
          date_ = null;
        }
        return dateBuilder_;
      }

      private boolean dateNull_ ;
      /**
       * <code>optional bool date_null = 1002;</code>
       */
      public boolean getDateNull() {
        return dateNull_;
      }
      /**
       * <code>optional bool date_null = 1002;</code>
       */
      public Builder setDateNull(boolean value) {
        
        dateNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool date_null = 1002;</code>
       */
      public Builder clearDateNull() {
        
        dateNull_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetTaxes.Parameters)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.om_GetTaxes.Parameters)
    private static final io.dstore.engine.procedures.OmGetTaxes.Parameters DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procedures.OmGetTaxes.Parameters();
    }

    public static io.dstore.engine.procedures.OmGetTaxes.Parameters getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Parameters>
        PARSER = new com.google.protobuf.AbstractParser<Parameters>() {
      public Parameters parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Parameters(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Parameters> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Parameters> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procedures.OmGetTaxes.Parameters getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetTaxes.Response)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> 
        getMetaInformationList();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index);
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    int getMetaInformationCount();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
        getMetaInformationOrBuilderList();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
        int index);

    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<io.dstore.engine.ProcedureMessage.Message> 
        getMessageList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.Message getMessage(int index);
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    int getMessageCount();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index);

    /**
     * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    java.util.List<io.dstore.engine.procedures.OmGetTaxes.Response.Row> 
        getRowList();
    /**
     * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    io.dstore.engine.procedures.OmGetTaxes.Response.Row getRow(int index);
    /**
     * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    int getRowCount();
    /**
     * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    java.util.List<? extends io.dstore.engine.procedures.OmGetTaxes.Response.RowOrBuilder> 
        getRowOrBuilderList();
    /**
     * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    io.dstore.engine.procedures.OmGetTaxes.Response.RowOrBuilder getRowOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dstore.engine.om_GetTaxes.Response}
   */
  public  static final class Response extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.om_GetTaxes.Response)
      ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Response() {
      metaInformation_ = java.util.Collections.emptyList();
      message_ = java.util.Collections.emptyList();
      row_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                metaInformation_ = new java.util.ArrayList<io.dstore.engine.EngineMetaInformation.MetaInformation>();
                mutable_bitField0_ |= 0x00000001;
              }
              metaInformation_.add(input.readMessage(io.dstore.engine.EngineMetaInformation.MetaInformation.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>();
                mutable_bitField0_ |= 0x00000002;
              }
              message_.add(input.readMessage(io.dstore.engine.ProcedureMessage.Message.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                row_ = new java.util.ArrayList<io.dstore.engine.procedures.OmGetTaxes.Response.Row>();
                mutable_bitField0_ |= 0x00000004;
              }
              row_.add(input.readMessage(io.dstore.engine.procedures.OmGetTaxes.Response.Row.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          metaInformation_ = java.util.Collections.unmodifiableList(metaInformation_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = java.util.Collections.unmodifiableList(message_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = java.util.Collections.unmodifiableList(row_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procedures.OmGetTaxes.Response.class, io.dstore.engine.procedures.OmGetTaxes.Response.Builder.class);
    }

    public interface RowOrBuilder extends
        // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetTaxes.Response.Row)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      int getRowId();

      /**
       * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
       *
       * <pre>
       * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
       * </pre>
       */
      boolean hasTaxType();
      /**
       * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
       *
       * <pre>
       * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
       * </pre>
       */
      io.dstore.Values.stringValue getTaxType();
      /**
       * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
       *
       * <pre>
       * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
       * </pre>
       */
      io.dstore.Values.stringValueOrBuilder getTaxTypeOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
       *
       * <pre>
       * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
       * </pre>
       */
      boolean hasTaxTypeId();
      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
       *
       * <pre>
       * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
       * </pre>
       */
      io.dstore.Values.integerValue getTaxTypeId();
      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
       *
       * <pre>
       * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getTaxTypeIdOrBuilder();

      /**
       * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
       *
       * <pre>
       * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
       * </pre>
       */
      boolean hasValidTo();
      /**
       * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
       *
       * <pre>
       * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
       * </pre>
       */
      io.dstore.Values.timestampValue getValidTo();
      /**
       * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
       *
       * <pre>
       * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
       * </pre>
       */
      io.dstore.Values.timestampValueOrBuilder getValidToOrBuilder();

      /**
       * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
       *
       * <pre>
       * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
       * </pre>
       */
      boolean hasTaxRate();
      /**
       * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
       *
       * <pre>
       * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
       * </pre>
       */
      io.dstore.Values.decimalValue getTaxRate();
      /**
       * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
       *
       * <pre>
       * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
       * </pre>
       */
      io.dstore.Values.decimalValueOrBuilder getTaxRateOrBuilder();

      /**
       * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
       *
       * <pre>
       * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
       * </pre>
       */
      boolean hasValidFrom();
      /**
       * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
       *
       * <pre>
       * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
       * </pre>
       */
      io.dstore.Values.timestampValue getValidFrom();
      /**
       * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
       *
       * <pre>
       * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
       * </pre>
       */
      io.dstore.Values.timestampValueOrBuilder getValidFromOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
       *
       * <pre>
       * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
       * </pre>
       */
      boolean hasSurchargeTypeId();
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
       *
       * <pre>
       * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
       * </pre>
       */
      io.dstore.Values.integerValue getSurchargeTypeId();
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
       *
       * <pre>
       * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getSurchargeTypeIdOrBuilder();

      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
       *
       * <pre>
       * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
       * </pre>
       */
      boolean hasSurchargeTypeCategoryId();
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
       *
       * <pre>
       * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
       * </pre>
       */
      io.dstore.Values.integerValue getSurchargeTypeCategoryId();
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
       *
       * <pre>
       * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
       * </pre>
       */
      io.dstore.Values.integerValueOrBuilder getSurchargeTypeCategoryIdOrBuilder();
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetTaxes.Response.Row}
     */
    public  static final class Row extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:dstore.engine.om_GetTaxes.Response.Row)
        RowOrBuilder {
      // Use Row.newBuilder() to construct.
      private Row(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Row() {
        rowId_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private Row(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 80000: {

                rowId_ = input.readInt32();
                break;
              }
              case 80010: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (taxType_ != null) {
                  subBuilder = taxType_.toBuilder();
                }
                taxType_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(taxType_);
                  taxType_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80018: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (taxTypeId_ != null) {
                  subBuilder = taxTypeId_.toBuilder();
                }
                taxTypeId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(taxTypeId_);
                  taxTypeId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80026: {
                io.dstore.Values.timestampValue.Builder subBuilder = null;
                if (validTo_ != null) {
                  subBuilder = validTo_.toBuilder();
                }
                validTo_ = input.readMessage(io.dstore.Values.timestampValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(validTo_);
                  validTo_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80034: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (taxRate_ != null) {
                  subBuilder = taxRate_.toBuilder();
                }
                taxRate_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(taxRate_);
                  taxRate_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80042: {
                io.dstore.Values.timestampValue.Builder subBuilder = null;
                if (validFrom_ != null) {
                  subBuilder = validFrom_.toBuilder();
                }
                validFrom_ = input.readMessage(io.dstore.Values.timestampValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(validFrom_);
                  validFrom_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80050: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (surchargeTypeId_ != null) {
                  subBuilder = surchargeTypeId_.toBuilder();
                }
                surchargeTypeId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(surchargeTypeId_);
                  surchargeTypeId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80058: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (surchargeTypeCategoryId_ != null) {
                  subBuilder = surchargeTypeCategoryId_.toBuilder();
                }
                surchargeTypeCategoryId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(surchargeTypeCategoryId_);
                  surchargeTypeCategoryId_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Response_Row_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Response_Row_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.OmGetTaxes.Response.Row.class, io.dstore.engine.procedures.OmGetTaxes.Response.Row.Builder.class);
      }

      public static final int ROW_ID_FIELD_NUMBER = 10000;
      private int rowId_;
      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      public int getRowId() {
        return rowId_;
      }

      public static final int TAX_TYPE_FIELD_NUMBER = 10001;
      private io.dstore.Values.stringValue taxType_;
      /**
       * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
       *
       * <pre>
       * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
       * </pre>
       */
      public boolean hasTaxType() {
        return taxType_ != null;
      }
      /**
       * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
       *
       * <pre>
       * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
       * </pre>
       */
      public io.dstore.Values.stringValue getTaxType() {
        return taxType_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : taxType_;
      }
      /**
       * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
       *
       * <pre>
       * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
       * </pre>
       */
      public io.dstore.Values.stringValueOrBuilder getTaxTypeOrBuilder() {
        return getTaxType();
      }

      public static final int TAX_TYPE_ID_FIELD_NUMBER = 10002;
      private io.dstore.Values.integerValue taxTypeId_;
      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
       *
       * <pre>
       * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
       * </pre>
       */
      public boolean hasTaxTypeId() {
        return taxTypeId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
       *
       * <pre>
       * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
       * </pre>
       */
      public io.dstore.Values.integerValue getTaxTypeId() {
        return taxTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : taxTypeId_;
      }
      /**
       * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
       *
       * <pre>
       * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getTaxTypeIdOrBuilder() {
        return getTaxTypeId();
      }

      public static final int VALID_TO_FIELD_NUMBER = 10003;
      private io.dstore.Values.timestampValue validTo_;
      /**
       * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
       *
       * <pre>
       * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
       * </pre>
       */
      public boolean hasValidTo() {
        return validTo_ != null;
      }
      /**
       * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
       *
       * <pre>
       * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
       * </pre>
       */
      public io.dstore.Values.timestampValue getValidTo() {
        return validTo_ == null ? io.dstore.Values.timestampValue.getDefaultInstance() : validTo_;
      }
      /**
       * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
       *
       * <pre>
       * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
       * </pre>
       */
      public io.dstore.Values.timestampValueOrBuilder getValidToOrBuilder() {
        return getValidTo();
      }

      public static final int TAX_RATE_FIELD_NUMBER = 10004;
      private io.dstore.Values.decimalValue taxRate_;
      /**
       * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
       *
       * <pre>
       * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
       * </pre>
       */
      public boolean hasTaxRate() {
        return taxRate_ != null;
      }
      /**
       * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
       *
       * <pre>
       * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
       * </pre>
       */
      public io.dstore.Values.decimalValue getTaxRate() {
        return taxRate_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : taxRate_;
      }
      /**
       * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
       *
       * <pre>
       * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
       * </pre>
       */
      public io.dstore.Values.decimalValueOrBuilder getTaxRateOrBuilder() {
        return getTaxRate();
      }

      public static final int VALID_FROM_FIELD_NUMBER = 10005;
      private io.dstore.Values.timestampValue validFrom_;
      /**
       * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
       *
       * <pre>
       * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
       * </pre>
       */
      public boolean hasValidFrom() {
        return validFrom_ != null;
      }
      /**
       * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
       *
       * <pre>
       * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
       * </pre>
       */
      public io.dstore.Values.timestampValue getValidFrom() {
        return validFrom_ == null ? io.dstore.Values.timestampValue.getDefaultInstance() : validFrom_;
      }
      /**
       * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
       *
       * <pre>
       * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
       * </pre>
       */
      public io.dstore.Values.timestampValueOrBuilder getValidFromOrBuilder() {
        return getValidFrom();
      }

      public static final int SURCHARGE_TYPE_ID_FIELD_NUMBER = 10006;
      private io.dstore.Values.integerValue surchargeTypeId_;
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
       *
       * <pre>
       * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
       * </pre>
       */
      public boolean hasSurchargeTypeId() {
        return surchargeTypeId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
       *
       * <pre>
       * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
       * </pre>
       */
      public io.dstore.Values.integerValue getSurchargeTypeId() {
        return surchargeTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeId_;
      }
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
       *
       * <pre>
       * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getSurchargeTypeIdOrBuilder() {
        return getSurchargeTypeId();
      }

      public static final int SURCHARGE_TYPE_CATEGORY_ID_FIELD_NUMBER = 10007;
      private io.dstore.Values.integerValue surchargeTypeCategoryId_;
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
       *
       * <pre>
       * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
       * </pre>
       */
      public boolean hasSurchargeTypeCategoryId() {
        return surchargeTypeCategoryId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
       *
       * <pre>
       * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
       * </pre>
       */
      public io.dstore.Values.integerValue getSurchargeTypeCategoryId() {
        return surchargeTypeCategoryId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeCategoryId_;
      }
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
       *
       * <pre>
       * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
       * </pre>
       */
      public io.dstore.Values.integerValueOrBuilder getSurchargeTypeCategoryIdOrBuilder() {
        return getSurchargeTypeCategoryId();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (rowId_ != 0) {
          output.writeInt32(10000, rowId_);
        }
        if (taxType_ != null) {
          output.writeMessage(10001, getTaxType());
        }
        if (taxTypeId_ != null) {
          output.writeMessage(10002, getTaxTypeId());
        }
        if (validTo_ != null) {
          output.writeMessage(10003, getValidTo());
        }
        if (taxRate_ != null) {
          output.writeMessage(10004, getTaxRate());
        }
        if (validFrom_ != null) {
          output.writeMessage(10005, getValidFrom());
        }
        if (surchargeTypeId_ != null) {
          output.writeMessage(10006, getSurchargeTypeId());
        }
        if (surchargeTypeCategoryId_ != null) {
          output.writeMessage(10007, getSurchargeTypeCategoryId());
        }
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (rowId_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10000, rowId_);
        }
        if (taxType_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10001, getTaxType());
        }
        if (taxTypeId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10002, getTaxTypeId());
        }
        if (validTo_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10003, getValidTo());
        }
        if (taxRate_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10004, getTaxRate());
        }
        if (validFrom_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10005, getValidFrom());
        }
        if (surchargeTypeId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10006, getSurchargeTypeId());
        }
        if (surchargeTypeCategoryId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10007, getSurchargeTypeCategoryId());
        }
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static io.dstore.engine.procedures.OmGetTaxes.Response.Row parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procedures.OmGetTaxes.Response.Row parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procedures.OmGetTaxes.Response.Row parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procedures.OmGetTaxes.Response.Row parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procedures.OmGetTaxes.Response.Row parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.dstore.engine.procedures.OmGetTaxes.Response.Row parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static io.dstore.engine.procedures.OmGetTaxes.Response.Row parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static io.dstore.engine.procedures.OmGetTaxes.Response.Row parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static io.dstore.engine.procedures.OmGetTaxes.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.dstore.engine.procedures.OmGetTaxes.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.dstore.engine.procedures.OmGetTaxes.Response.Row prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code dstore.engine.om_GetTaxes.Response.Row}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetTaxes.Response.Row)
          io.dstore.engine.procedures.OmGetTaxes.Response.RowOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Response_Row_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Response_Row_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.dstore.engine.procedures.OmGetTaxes.Response.Row.class, io.dstore.engine.procedures.OmGetTaxes.Response.Row.Builder.class);
        }

        // Construct using io.dstore.engine.procedures.OmGetTaxes.Response.Row.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          rowId_ = 0;

          if (taxTypeBuilder_ == null) {
            taxType_ = null;
          } else {
            taxType_ = null;
            taxTypeBuilder_ = null;
          }
          if (taxTypeIdBuilder_ == null) {
            taxTypeId_ = null;
          } else {
            taxTypeId_ = null;
            taxTypeIdBuilder_ = null;
          }
          if (validToBuilder_ == null) {
            validTo_ = null;
          } else {
            validTo_ = null;
            validToBuilder_ = null;
          }
          if (taxRateBuilder_ == null) {
            taxRate_ = null;
          } else {
            taxRate_ = null;
            taxRateBuilder_ = null;
          }
          if (validFromBuilder_ == null) {
            validFrom_ = null;
          } else {
            validFrom_ = null;
            validFromBuilder_ = null;
          }
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeId_ = null;
          } else {
            surchargeTypeId_ = null;
            surchargeTypeIdBuilder_ = null;
          }
          if (surchargeTypeCategoryIdBuilder_ == null) {
            surchargeTypeCategoryId_ = null;
          } else {
            surchargeTypeCategoryId_ = null;
            surchargeTypeCategoryIdBuilder_ = null;
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Response_Row_descriptor;
        }

        public io.dstore.engine.procedures.OmGetTaxes.Response.Row getDefaultInstanceForType() {
          return io.dstore.engine.procedures.OmGetTaxes.Response.Row.getDefaultInstance();
        }

        public io.dstore.engine.procedures.OmGetTaxes.Response.Row build() {
          io.dstore.engine.procedures.OmGetTaxes.Response.Row result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.dstore.engine.procedures.OmGetTaxes.Response.Row buildPartial() {
          io.dstore.engine.procedures.OmGetTaxes.Response.Row result = new io.dstore.engine.procedures.OmGetTaxes.Response.Row(this);
          result.rowId_ = rowId_;
          if (taxTypeBuilder_ == null) {
            result.taxType_ = taxType_;
          } else {
            result.taxType_ = taxTypeBuilder_.build();
          }
          if (taxTypeIdBuilder_ == null) {
            result.taxTypeId_ = taxTypeId_;
          } else {
            result.taxTypeId_ = taxTypeIdBuilder_.build();
          }
          if (validToBuilder_ == null) {
            result.validTo_ = validTo_;
          } else {
            result.validTo_ = validToBuilder_.build();
          }
          if (taxRateBuilder_ == null) {
            result.taxRate_ = taxRate_;
          } else {
            result.taxRate_ = taxRateBuilder_.build();
          }
          if (validFromBuilder_ == null) {
            result.validFrom_ = validFrom_;
          } else {
            result.validFrom_ = validFromBuilder_.build();
          }
          if (surchargeTypeIdBuilder_ == null) {
            result.surchargeTypeId_ = surchargeTypeId_;
          } else {
            result.surchargeTypeId_ = surchargeTypeIdBuilder_.build();
          }
          if (surchargeTypeCategoryIdBuilder_ == null) {
            result.surchargeTypeCategoryId_ = surchargeTypeCategoryId_;
          } else {
            result.surchargeTypeCategoryId_ = surchargeTypeCategoryIdBuilder_.build();
          }
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.dstore.engine.procedures.OmGetTaxes.Response.Row) {
            return mergeFrom((io.dstore.engine.procedures.OmGetTaxes.Response.Row)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.dstore.engine.procedures.OmGetTaxes.Response.Row other) {
          if (other == io.dstore.engine.procedures.OmGetTaxes.Response.Row.getDefaultInstance()) return this;
          if (other.getRowId() != 0) {
            setRowId(other.getRowId());
          }
          if (other.hasTaxType()) {
            mergeTaxType(other.getTaxType());
          }
          if (other.hasTaxTypeId()) {
            mergeTaxTypeId(other.getTaxTypeId());
          }
          if (other.hasValidTo()) {
            mergeValidTo(other.getValidTo());
          }
          if (other.hasTaxRate()) {
            mergeTaxRate(other.getTaxRate());
          }
          if (other.hasValidFrom()) {
            mergeValidFrom(other.getValidFrom());
          }
          if (other.hasSurchargeTypeId()) {
            mergeSurchargeTypeId(other.getSurchargeTypeId());
          }
          if (other.hasSurchargeTypeCategoryId()) {
            mergeSurchargeTypeCategoryId(other.getSurchargeTypeCategoryId());
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.dstore.engine.procedures.OmGetTaxes.Response.Row parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.dstore.engine.procedures.OmGetTaxes.Response.Row) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int rowId_ ;
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public int getRowId() {
          return rowId_;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder setRowId(int value) {
          
          rowId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder clearRowId() {
          
          rowId_ = 0;
          onChanged();
          return this;
        }

        private io.dstore.Values.stringValue taxType_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> taxTypeBuilder_;
        /**
         * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
         *
         * <pre>
         * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
         * </pre>
         */
        public boolean hasTaxType() {
          return taxTypeBuilder_ != null || taxType_ != null;
        }
        /**
         * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
         *
         * <pre>
         * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
         * </pre>
         */
        public io.dstore.Values.stringValue getTaxType() {
          if (taxTypeBuilder_ == null) {
            return taxType_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : taxType_;
          } else {
            return taxTypeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
         *
         * <pre>
         * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
         * </pre>
         */
        public Builder setTaxType(io.dstore.Values.stringValue value) {
          if (taxTypeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            taxType_ = value;
            onChanged();
          } else {
            taxTypeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
         *
         * <pre>
         * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
         * </pre>
         */
        public Builder setTaxType(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (taxTypeBuilder_ == null) {
            taxType_ = builderForValue.build();
            onChanged();
          } else {
            taxTypeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
         *
         * <pre>
         * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
         * </pre>
         */
        public Builder mergeTaxType(io.dstore.Values.stringValue value) {
          if (taxTypeBuilder_ == null) {
            if (taxType_ != null) {
              taxType_ =
                io.dstore.Values.stringValue.newBuilder(taxType_).mergeFrom(value).buildPartial();
            } else {
              taxType_ = value;
            }
            onChanged();
          } else {
            taxTypeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
         *
         * <pre>
         * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
         * </pre>
         */
        public Builder clearTaxType() {
          if (taxTypeBuilder_ == null) {
            taxType_ = null;
            onChanged();
          } else {
            taxType_ = null;
            taxTypeBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
         *
         * <pre>
         * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
         * </pre>
         */
        public io.dstore.Values.stringValue.Builder getTaxTypeBuilder() {
          
          onChanged();
          return getTaxTypeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
         *
         * <pre>
         * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
         * </pre>
         */
        public io.dstore.Values.stringValueOrBuilder getTaxTypeOrBuilder() {
          if (taxTypeBuilder_ != null) {
            return taxTypeBuilder_.getMessageOrBuilder();
          } else {
            return taxType_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : taxType_;
          }
        }
        /**
         * <code>optional .dstore.values.stringValue tax_type = 10001;</code>
         *
         * <pre>
         * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getTaxTypeFieldBuilder() {
          if (taxTypeBuilder_ == null) {
            taxTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getTaxType(),
                    getParentForChildren(),
                    isClean());
            taxType_ = null;
          }
          return taxTypeBuilder_;
        }

        private io.dstore.Values.integerValue taxTypeId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> taxTypeIdBuilder_;
        /**
         * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
         *
         * <pre>
         * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
         * </pre>
         */
        public boolean hasTaxTypeId() {
          return taxTypeIdBuilder_ != null || taxTypeId_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
         *
         * <pre>
         * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
         * </pre>
         */
        public io.dstore.Values.integerValue getTaxTypeId() {
          if (taxTypeIdBuilder_ == null) {
            return taxTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : taxTypeId_;
          } else {
            return taxTypeIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
         *
         * <pre>
         * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
         * </pre>
         */
        public Builder setTaxTypeId(io.dstore.Values.integerValue value) {
          if (taxTypeIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            taxTypeId_ = value;
            onChanged();
          } else {
            taxTypeIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
         *
         * <pre>
         * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
         * </pre>
         */
        public Builder setTaxTypeId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (taxTypeIdBuilder_ == null) {
            taxTypeId_ = builderForValue.build();
            onChanged();
          } else {
            taxTypeIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
         *
         * <pre>
         * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
         * </pre>
         */
        public Builder mergeTaxTypeId(io.dstore.Values.integerValue value) {
          if (taxTypeIdBuilder_ == null) {
            if (taxTypeId_ != null) {
              taxTypeId_ =
                io.dstore.Values.integerValue.newBuilder(taxTypeId_).mergeFrom(value).buildPartial();
            } else {
              taxTypeId_ = value;
            }
            onChanged();
          } else {
            taxTypeIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
         *
         * <pre>
         * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
         * </pre>
         */
        public Builder clearTaxTypeId() {
          if (taxTypeIdBuilder_ == null) {
            taxTypeId_ = null;
            onChanged();
          } else {
            taxTypeId_ = null;
            taxTypeIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
         *
         * <pre>
         * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getTaxTypeIdBuilder() {
          
          onChanged();
          return getTaxTypeIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
         *
         * <pre>
         * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getTaxTypeIdOrBuilder() {
          if (taxTypeIdBuilder_ != null) {
            return taxTypeIdBuilder_.getMessageOrBuilder();
          } else {
            return taxTypeId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : taxTypeId_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue tax_type_id = 10002;</code>
         *
         * <pre>
         * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getTaxTypeIdFieldBuilder() {
          if (taxTypeIdBuilder_ == null) {
            taxTypeIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getTaxTypeId(),
                    getParentForChildren(),
                    isClean());
            taxTypeId_ = null;
          }
          return taxTypeIdBuilder_;
        }

        private io.dstore.Values.timestampValue validTo_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.timestampValue, io.dstore.Values.timestampValue.Builder, io.dstore.Values.timestampValueOrBuilder> validToBuilder_;
        /**
         * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
         * </pre>
         */
        public boolean hasValidTo() {
          return validToBuilder_ != null || validTo_ != null;
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
         * </pre>
         */
        public io.dstore.Values.timestampValue getValidTo() {
          if (validToBuilder_ == null) {
            return validTo_ == null ? io.dstore.Values.timestampValue.getDefaultInstance() : validTo_;
          } else {
            return validToBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
         * </pre>
         */
        public Builder setValidTo(io.dstore.Values.timestampValue value) {
          if (validToBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            validTo_ = value;
            onChanged();
          } else {
            validToBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
         * </pre>
         */
        public Builder setValidTo(
            io.dstore.Values.timestampValue.Builder builderForValue) {
          if (validToBuilder_ == null) {
            validTo_ = builderForValue.build();
            onChanged();
          } else {
            validToBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
         * </pre>
         */
        public Builder mergeValidTo(io.dstore.Values.timestampValue value) {
          if (validToBuilder_ == null) {
            if (validTo_ != null) {
              validTo_ =
                io.dstore.Values.timestampValue.newBuilder(validTo_).mergeFrom(value).buildPartial();
            } else {
              validTo_ = value;
            }
            onChanged();
          } else {
            validToBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
         * </pre>
         */
        public Builder clearValidTo() {
          if (validToBuilder_ == null) {
            validTo_ = null;
            onChanged();
          } else {
            validTo_ = null;
            validToBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
         * </pre>
         */
        public io.dstore.Values.timestampValue.Builder getValidToBuilder() {
          
          onChanged();
          return getValidToFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
         * </pre>
         */
        public io.dstore.Values.timestampValueOrBuilder getValidToOrBuilder() {
          if (validToBuilder_ != null) {
            return validToBuilder_.getMessageOrBuilder();
          } else {
            return validTo_ == null ?
                io.dstore.Values.timestampValue.getDefaultInstance() : validTo_;
          }
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_to = 10003;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.timestampValue, io.dstore.Values.timestampValue.Builder, io.dstore.Values.timestampValueOrBuilder> 
            getValidToFieldBuilder() {
          if (validToBuilder_ == null) {
            validToBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.timestampValue, io.dstore.Values.timestampValue.Builder, io.dstore.Values.timestampValueOrBuilder>(
                    getValidTo(),
                    getParentForChildren(),
                    isClean());
            validTo_ = null;
          }
          return validToBuilder_;
        }

        private io.dstore.Values.decimalValue taxRate_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> taxRateBuilder_;
        /**
         * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
         * </pre>
         */
        public boolean hasTaxRate() {
          return taxRateBuilder_ != null || taxRate_ != null;
        }
        /**
         * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
         * </pre>
         */
        public io.dstore.Values.decimalValue getTaxRate() {
          if (taxRateBuilder_ == null) {
            return taxRate_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : taxRate_;
          } else {
            return taxRateBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
         * </pre>
         */
        public Builder setTaxRate(io.dstore.Values.decimalValue value) {
          if (taxRateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            taxRate_ = value;
            onChanged();
          } else {
            taxRateBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
         * </pre>
         */
        public Builder setTaxRate(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (taxRateBuilder_ == null) {
            taxRate_ = builderForValue.build();
            onChanged();
          } else {
            taxRateBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
         * </pre>
         */
        public Builder mergeTaxRate(io.dstore.Values.decimalValue value) {
          if (taxRateBuilder_ == null) {
            if (taxRate_ != null) {
              taxRate_ =
                io.dstore.Values.decimalValue.newBuilder(taxRate_).mergeFrom(value).buildPartial();
            } else {
              taxRate_ = value;
            }
            onChanged();
          } else {
            taxRateBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
         * </pre>
         */
        public Builder clearTaxRate() {
          if (taxRateBuilder_ == null) {
            taxRate_ = null;
            onChanged();
          } else {
            taxRate_ = null;
            taxRateBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
         * </pre>
         */
        public io.dstore.Values.decimalValue.Builder getTaxRateBuilder() {
          
          onChanged();
          return getTaxRateFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
         * </pre>
         */
        public io.dstore.Values.decimalValueOrBuilder getTaxRateOrBuilder() {
          if (taxRateBuilder_ != null) {
            return taxRateBuilder_.getMessageOrBuilder();
          } else {
            return taxRate_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : taxRate_;
          }
        }
        /**
         * <code>optional .dstore.values.decimalValue tax_rate = 10004;</code>
         *
         * <pre>
         * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getTaxRateFieldBuilder() {
          if (taxRateBuilder_ == null) {
            taxRateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getTaxRate(),
                    getParentForChildren(),
                    isClean());
            taxRate_ = null;
          }
          return taxRateBuilder_;
        }

        private io.dstore.Values.timestampValue validFrom_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.timestampValue, io.dstore.Values.timestampValue.Builder, io.dstore.Values.timestampValueOrBuilder> validFromBuilder_;
        /**
         * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
         * </pre>
         */
        public boolean hasValidFrom() {
          return validFromBuilder_ != null || validFrom_ != null;
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
         * </pre>
         */
        public io.dstore.Values.timestampValue getValidFrom() {
          if (validFromBuilder_ == null) {
            return validFrom_ == null ? io.dstore.Values.timestampValue.getDefaultInstance() : validFrom_;
          } else {
            return validFromBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
         * </pre>
         */
        public Builder setValidFrom(io.dstore.Values.timestampValue value) {
          if (validFromBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            validFrom_ = value;
            onChanged();
          } else {
            validFromBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
         * </pre>
         */
        public Builder setValidFrom(
            io.dstore.Values.timestampValue.Builder builderForValue) {
          if (validFromBuilder_ == null) {
            validFrom_ = builderForValue.build();
            onChanged();
          } else {
            validFromBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
         * </pre>
         */
        public Builder mergeValidFrom(io.dstore.Values.timestampValue value) {
          if (validFromBuilder_ == null) {
            if (validFrom_ != null) {
              validFrom_ =
                io.dstore.Values.timestampValue.newBuilder(validFrom_).mergeFrom(value).buildPartial();
            } else {
              validFrom_ = value;
            }
            onChanged();
          } else {
            validFromBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
         * </pre>
         */
        public Builder clearValidFrom() {
          if (validFromBuilder_ == null) {
            validFrom_ = null;
            onChanged();
          } else {
            validFrom_ = null;
            validFromBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
         * </pre>
         */
        public io.dstore.Values.timestampValue.Builder getValidFromBuilder() {
          
          onChanged();
          return getValidFromFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
         * </pre>
         */
        public io.dstore.Values.timestampValueOrBuilder getValidFromOrBuilder() {
          if (validFromBuilder_ != null) {
            return validFromBuilder_.getMessageOrBuilder();
          } else {
            return validFrom_ == null ?
                io.dstore.Values.timestampValue.getDefaultInstance() : validFrom_;
          }
        }
        /**
         * <code>optional .dstore.values.timestampValue valid_from = 10005;</code>
         *
         * <pre>
         * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.timestampValue, io.dstore.Values.timestampValue.Builder, io.dstore.Values.timestampValueOrBuilder> 
            getValidFromFieldBuilder() {
          if (validFromBuilder_ == null) {
            validFromBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.timestampValue, io.dstore.Values.timestampValue.Builder, io.dstore.Values.timestampValueOrBuilder>(
                    getValidFrom(),
                    getParentForChildren(),
                    isClean());
            validFrom_ = null;
          }
          return validFromBuilder_;
        }

        private io.dstore.Values.integerValue surchargeTypeId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> surchargeTypeIdBuilder_;
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
         *
         * <pre>
         * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
         * </pre>
         */
        public boolean hasSurchargeTypeId() {
          return surchargeTypeIdBuilder_ != null || surchargeTypeId_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
         *
         * <pre>
         * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
         * </pre>
         */
        public io.dstore.Values.integerValue getSurchargeTypeId() {
          if (surchargeTypeIdBuilder_ == null) {
            return surchargeTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeId_;
          } else {
            return surchargeTypeIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
         *
         * <pre>
         * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
         * </pre>
         */
        public Builder setSurchargeTypeId(io.dstore.Values.integerValue value) {
          if (surchargeTypeIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            surchargeTypeId_ = value;
            onChanged();
          } else {
            surchargeTypeIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
         *
         * <pre>
         * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
         * </pre>
         */
        public Builder setSurchargeTypeId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeId_ = builderForValue.build();
            onChanged();
          } else {
            surchargeTypeIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
         *
         * <pre>
         * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
         * </pre>
         */
        public Builder mergeSurchargeTypeId(io.dstore.Values.integerValue value) {
          if (surchargeTypeIdBuilder_ == null) {
            if (surchargeTypeId_ != null) {
              surchargeTypeId_ =
                io.dstore.Values.integerValue.newBuilder(surchargeTypeId_).mergeFrom(value).buildPartial();
            } else {
              surchargeTypeId_ = value;
            }
            onChanged();
          } else {
            surchargeTypeIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
         *
         * <pre>
         * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
         * </pre>
         */
        public Builder clearSurchargeTypeId() {
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeId_ = null;
            onChanged();
          } else {
            surchargeTypeId_ = null;
            surchargeTypeIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
         *
         * <pre>
         * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getSurchargeTypeIdBuilder() {
          
          onChanged();
          return getSurchargeTypeIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
         *
         * <pre>
         * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getSurchargeTypeIdOrBuilder() {
          if (surchargeTypeIdBuilder_ != null) {
            return surchargeTypeIdBuilder_.getMessageOrBuilder();
          } else {
            return surchargeTypeId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeId_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10006;</code>
         *
         * <pre>
         * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getSurchargeTypeIdFieldBuilder() {
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getSurchargeTypeId(),
                    getParentForChildren(),
                    isClean());
            surchargeTypeId_ = null;
          }
          return surchargeTypeIdBuilder_;
        }

        private io.dstore.Values.integerValue surchargeTypeCategoryId_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> surchargeTypeCategoryIdBuilder_;
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
         *
         * <pre>
         * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
         * </pre>
         */
        public boolean hasSurchargeTypeCategoryId() {
          return surchargeTypeCategoryIdBuilder_ != null || surchargeTypeCategoryId_ != null;
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
         *
         * <pre>
         * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
         * </pre>
         */
        public io.dstore.Values.integerValue getSurchargeTypeCategoryId() {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            return surchargeTypeCategoryId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeCategoryId_;
          } else {
            return surchargeTypeCategoryIdBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
         *
         * <pre>
         * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
         * </pre>
         */
        public Builder setSurchargeTypeCategoryId(io.dstore.Values.integerValue value) {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            surchargeTypeCategoryId_ = value;
            onChanged();
          } else {
            surchargeTypeCategoryIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
         *
         * <pre>
         * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
         * </pre>
         */
        public Builder setSurchargeTypeCategoryId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            surchargeTypeCategoryId_ = builderForValue.build();
            onChanged();
          } else {
            surchargeTypeCategoryIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
         *
         * <pre>
         * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
         * </pre>
         */
        public Builder mergeSurchargeTypeCategoryId(io.dstore.Values.integerValue value) {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            if (surchargeTypeCategoryId_ != null) {
              surchargeTypeCategoryId_ =
                io.dstore.Values.integerValue.newBuilder(surchargeTypeCategoryId_).mergeFrom(value).buildPartial();
            } else {
              surchargeTypeCategoryId_ = value;
            }
            onChanged();
          } else {
            surchargeTypeCategoryIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
         *
         * <pre>
         * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
         * </pre>
         */
        public Builder clearSurchargeTypeCategoryId() {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            surchargeTypeCategoryId_ = null;
            onChanged();
          } else {
            surchargeTypeCategoryId_ = null;
            surchargeTypeCategoryIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
         *
         * <pre>
         * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
         * </pre>
         */
        public io.dstore.Values.integerValue.Builder getSurchargeTypeCategoryIdBuilder() {
          
          onChanged();
          return getSurchargeTypeCategoryIdFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
         *
         * <pre>
         * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
         * </pre>
         */
        public io.dstore.Values.integerValueOrBuilder getSurchargeTypeCategoryIdOrBuilder() {
          if (surchargeTypeCategoryIdBuilder_ != null) {
            return surchargeTypeCategoryIdBuilder_.getMessageOrBuilder();
          } else {
            return surchargeTypeCategoryId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeCategoryId_;
          }
        }
        /**
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10007;</code>
         *
         * <pre>
         * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getSurchargeTypeCategoryIdFieldBuilder() {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            surchargeTypeCategoryIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getSurchargeTypeCategoryId(),
                    getParentForChildren(),
                    isClean());
            surchargeTypeCategoryId_ = null;
          }
          return surchargeTypeCategoryIdBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetTaxes.Response.Row)
      }

      // @@protoc_insertion_point(class_scope:dstore.engine.om_GetTaxes.Response.Row)
      private static final io.dstore.engine.procedures.OmGetTaxes.Response.Row DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.dstore.engine.procedures.OmGetTaxes.Response.Row();
      }

      public static io.dstore.engine.procedures.OmGetTaxes.Response.Row getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Row>
          PARSER = new com.google.protobuf.AbstractParser<Row>() {
        public Row parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new Row(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<Row> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Row> getParserForType() {
        return PARSER;
      }

      public io.dstore.engine.procedures.OmGetTaxes.Response.Row getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int META_INFORMATION_FIELD_NUMBER = 2;
    private java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> metaInformation_;
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> getMetaInformationList() {
      return metaInformation_;
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
        getMetaInformationOrBuilderList() {
      return metaInformation_;
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public int getMetaInformationCount() {
      return metaInformation_.size();
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index) {
      return metaInformation_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
        int index) {
      return metaInformation_.get(index);
    }

    public static final int MESSAGE_FIELD_NUMBER = 3;
    private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_;
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public int getMessageCount() {
      return message_.size();
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
      return message_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index) {
      return message_.get(index);
    }

    public static final int ROW_FIELD_NUMBER = 4;
    private java.util.List<io.dstore.engine.procedures.OmGetTaxes.Response.Row> row_;
    /**
     * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public java.util.List<io.dstore.engine.procedures.OmGetTaxes.Response.Row> getRowList() {
      return row_;
    }
    /**
     * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public java.util.List<? extends io.dstore.engine.procedures.OmGetTaxes.Response.RowOrBuilder> 
        getRowOrBuilderList() {
      return row_;
    }
    /**
     * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public int getRowCount() {
      return row_.size();
    }
    /**
     * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public io.dstore.engine.procedures.OmGetTaxes.Response.Row getRow(int index) {
      return row_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
     *
     * <pre>
     * no output parameters
     * </pre>
     */
    public io.dstore.engine.procedures.OmGetTaxes.Response.RowOrBuilder getRowOrBuilder(
        int index) {
      return row_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < metaInformation_.size(); i++) {
        output.writeMessage(2, metaInformation_.get(i));
      }
      for (int i = 0; i < message_.size(); i++) {
        output.writeMessage(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        output.writeMessage(4, row_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < metaInformation_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, metaInformation_.get(i));
      }
      for (int i = 0; i < message_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, row_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procedures.OmGetTaxes.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.dstore.engine.procedures.OmGetTaxes.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procedures.OmGetTaxes.Response prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetTaxes.Response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetTaxes.Response)
        io.dstore.engine.procedures.OmGetTaxes.ResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.OmGetTaxes.Response.class, io.dstore.engine.procedures.OmGetTaxes.Response.Builder.class);
      }

      // Construct using io.dstore.engine.procedures.OmGetTaxes.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMetaInformationFieldBuilder();
          getMessageFieldBuilder();
          getRowFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (metaInformationBuilder_ == null) {
          metaInformation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          metaInformationBuilder_.clear();
        }
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          messageBuilder_.clear();
        }
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          rowBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procedures.OmGetTaxes.internal_static_dstore_engine_om_GetTaxes_Response_descriptor;
      }

      public io.dstore.engine.procedures.OmGetTaxes.Response getDefaultInstanceForType() {
        return io.dstore.engine.procedures.OmGetTaxes.Response.getDefaultInstance();
      }

      public io.dstore.engine.procedures.OmGetTaxes.Response build() {
        io.dstore.engine.procedures.OmGetTaxes.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procedures.OmGetTaxes.Response buildPartial() {
        io.dstore.engine.procedures.OmGetTaxes.Response result = new io.dstore.engine.procedures.OmGetTaxes.Response(this);
        int from_bitField0_ = bitField0_;
        if (metaInformationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            metaInformation_ = java.util.Collections.unmodifiableList(metaInformation_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.metaInformation_ = metaInformation_;
        } else {
          result.metaInformation_ = metaInformationBuilder_.build();
        }
        if (messageBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            message_ = java.util.Collections.unmodifiableList(message_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.message_ = message_;
        } else {
          result.message_ = messageBuilder_.build();
        }
        if (rowBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            row_ = java.util.Collections.unmodifiableList(row_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.row_ = row_;
        } else {
          result.row_ = rowBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procedures.OmGetTaxes.Response) {
          return mergeFrom((io.dstore.engine.procedures.OmGetTaxes.Response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procedures.OmGetTaxes.Response other) {
        if (other == io.dstore.engine.procedures.OmGetTaxes.Response.getDefaultInstance()) return this;
        if (metaInformationBuilder_ == null) {
          if (!other.metaInformation_.isEmpty()) {
            if (metaInformation_.isEmpty()) {
              metaInformation_ = other.metaInformation_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMetaInformationIsMutable();
              metaInformation_.addAll(other.metaInformation_);
            }
            onChanged();
          }
        } else {
          if (!other.metaInformation_.isEmpty()) {
            if (metaInformationBuilder_.isEmpty()) {
              metaInformationBuilder_.dispose();
              metaInformationBuilder_ = null;
              metaInformation_ = other.metaInformation_;
              bitField0_ = (bitField0_ & ~0x00000001);
              metaInformationBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMetaInformationFieldBuilder() : null;
            } else {
              metaInformationBuilder_.addAllMessages(other.metaInformation_);
            }
          }
        }
        if (messageBuilder_ == null) {
          if (!other.message_.isEmpty()) {
            if (message_.isEmpty()) {
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMessageIsMutable();
              message_.addAll(other.message_);
            }
            onChanged();
          }
        } else {
          if (!other.message_.isEmpty()) {
            if (messageBuilder_.isEmpty()) {
              messageBuilder_.dispose();
              messageBuilder_ = null;
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
              messageBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMessageFieldBuilder() : null;
            } else {
              messageBuilder_.addAllMessages(other.message_);
            }
          }
        }
        if (rowBuilder_ == null) {
          if (!other.row_.isEmpty()) {
            if (row_.isEmpty()) {
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureRowIsMutable();
              row_.addAll(other.row_);
            }
            onChanged();
          }
        } else {
          if (!other.row_.isEmpty()) {
            if (rowBuilder_.isEmpty()) {
              rowBuilder_.dispose();
              rowBuilder_ = null;
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
              rowBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRowFieldBuilder() : null;
            } else {
              rowBuilder_.addAllMessages(other.row_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procedures.OmGetTaxes.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procedures.OmGetTaxes.Response) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> metaInformation_ =
        java.util.Collections.emptyList();
      private void ensureMetaInformationIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          metaInformation_ = new java.util.ArrayList<io.dstore.engine.EngineMetaInformation.MetaInformation>(metaInformation_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> metaInformationBuilder_;

      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> getMetaInformationList() {
        if (metaInformationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(metaInformation_);
        } else {
          return metaInformationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public int getMetaInformationCount() {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.size();
        } else {
          return metaInformationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index) {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.get(index);
        } else {
          return metaInformationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder setMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.set(index, value);
          onChanged();
        } else {
          metaInformationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder setMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.set(index, builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.add(value);
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.add(index, value);
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.add(builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.add(index, builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addAllMetaInformation(
          java.lang.Iterable<? extends io.dstore.engine.EngineMetaInformation.MetaInformation> values) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, metaInformation_);
          onChanged();
        } else {
          metaInformationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder clearMetaInformation() {
        if (metaInformationBuilder_ == null) {
          metaInformation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          metaInformationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder removeMetaInformation(int index) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.remove(index);
          onChanged();
        } else {
          metaInformationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder getMetaInformationBuilder(
          int index) {
        return getMetaInformationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
          int index) {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.get(index);  } else {
          return metaInformationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
           getMetaInformationOrBuilderList() {
        if (metaInformationBuilder_ != null) {
          return metaInformationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(metaInformation_);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder addMetaInformationBuilder() {
        return getMetaInformationFieldBuilder().addBuilder(
            io.dstore.engine.EngineMetaInformation.MetaInformation.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder addMetaInformationBuilder(
          int index) {
        return getMetaInformationFieldBuilder().addBuilder(
            index, io.dstore.engine.EngineMetaInformation.MetaInformation.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation.Builder> 
           getMetaInformationBuilderList() {
        return getMetaInformationFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
          getMetaInformationFieldBuilder() {
        if (metaInformationBuilder_ == null) {
          metaInformationBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder>(
                  metaInformation_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          metaInformation_ = null;
        }
        return metaInformationBuilder_;
      }

      private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_ =
        java.util.Collections.emptyList();
      private void ensureMessageIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>(message_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> messageBuilder_;

      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
        if (messageBuilder_ == null) {
          return java.util.Collections.unmodifiableList(message_);
        } else {
          return messageBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public int getMessageCount() {
        if (messageBuilder_ == null) {
          return message_.size();
        } else {
          return messageBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);
        } else {
          return messageBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.set(index, value);
          onChanged();
        } else {
          messageBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.set(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(value);
          onChanged();
        } else {
          messageBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(index, value);
          onChanged();
        } else {
          messageBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addAllMessage(
          java.lang.Iterable<? extends io.dstore.engine.ProcedureMessage.Message> values) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, message_);
          onChanged();
        } else {
          messageBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder clearMessage() {
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          messageBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder removeMessage(int index) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.remove(index);
          onChanged();
        } else {
          messageBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder getMessageBuilder(
          int index) {
        return getMessageFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
          int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);  } else {
          return messageBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
           getMessageOrBuilderList() {
        if (messageBuilder_ != null) {
          return messageBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(message_);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder() {
        return getMessageFieldBuilder().addBuilder(
            io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder(
          int index) {
        return getMessageFieldBuilder().addBuilder(
            index, io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message.Builder> 
           getMessageBuilderList() {
        return getMessageFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
          getMessageFieldBuilder() {
        if (messageBuilder_ == null) {
          messageBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder>(
                  message_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        return messageBuilder_;
      }

      private java.util.List<io.dstore.engine.procedures.OmGetTaxes.Response.Row> row_ =
        java.util.Collections.emptyList();
      private void ensureRowIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = new java.util.ArrayList<io.dstore.engine.procedures.OmGetTaxes.Response.Row>(row_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procedures.OmGetTaxes.Response.Row, io.dstore.engine.procedures.OmGetTaxes.Response.Row.Builder, io.dstore.engine.procedures.OmGetTaxes.Response.RowOrBuilder> rowBuilder_;

      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<io.dstore.engine.procedures.OmGetTaxes.Response.Row> getRowList() {
        if (rowBuilder_ == null) {
          return java.util.Collections.unmodifiableList(row_);
        } else {
          return rowBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public int getRowCount() {
        if (rowBuilder_ == null) {
          return row_.size();
        } else {
          return rowBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procedures.OmGetTaxes.Response.Row getRow(int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);
        } else {
          return rowBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder setRow(
          int index, io.dstore.engine.procedures.OmGetTaxes.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.set(index, value);
          onChanged();
        } else {
          rowBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder setRow(
          int index, io.dstore.engine.procedures.OmGetTaxes.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.set(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(io.dstore.engine.procedures.OmGetTaxes.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(value);
          onChanged();
        } else {
          rowBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          int index, io.dstore.engine.procedures.OmGetTaxes.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(index, value);
          onChanged();
        } else {
          rowBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          io.dstore.engine.procedures.OmGetTaxes.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addRow(
          int index, io.dstore.engine.procedures.OmGetTaxes.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder addAllRow(
          java.lang.Iterable<? extends io.dstore.engine.procedures.OmGetTaxes.Response.Row> values) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, row_);
          onChanged();
        } else {
          rowBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder clearRow() {
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          rowBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public Builder removeRow(int index) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.remove(index);
          onChanged();
        } else {
          rowBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procedures.OmGetTaxes.Response.Row.Builder getRowBuilder(
          int index) {
        return getRowFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procedures.OmGetTaxes.Response.RowOrBuilder getRowOrBuilder(
          int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);  } else {
          return rowBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<? extends io.dstore.engine.procedures.OmGetTaxes.Response.RowOrBuilder> 
           getRowOrBuilderList() {
        if (rowBuilder_ != null) {
          return rowBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(row_);
        }
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procedures.OmGetTaxes.Response.Row.Builder addRowBuilder() {
        return getRowFieldBuilder().addBuilder(
            io.dstore.engine.procedures.OmGetTaxes.Response.Row.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public io.dstore.engine.procedures.OmGetTaxes.Response.Row.Builder addRowBuilder(
          int index) {
        return getRowFieldBuilder().addBuilder(
            index, io.dstore.engine.procedures.OmGetTaxes.Response.Row.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.om_GetTaxes.Response.Row row = 4;</code>
       *
       * <pre>
       * no output parameters
       * </pre>
       */
      public java.util.List<io.dstore.engine.procedures.OmGetTaxes.Response.Row.Builder> 
           getRowBuilderList() {
        return getRowFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procedures.OmGetTaxes.Response.Row, io.dstore.engine.procedures.OmGetTaxes.Response.Row.Builder, io.dstore.engine.procedures.OmGetTaxes.Response.RowOrBuilder> 
          getRowFieldBuilder() {
        if (rowBuilder_ == null) {
          rowBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.procedures.OmGetTaxes.Response.Row, io.dstore.engine.procedures.OmGetTaxes.Response.Row.Builder, io.dstore.engine.procedures.OmGetTaxes.Response.RowOrBuilder>(
                  row_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          row_ = null;
        }
        return rowBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetTaxes.Response)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.om_GetTaxes.Response)
    private static final io.dstore.engine.procedures.OmGetTaxes.Response DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procedures.OmGetTaxes.Response();
    }

    public static io.dstore.engine.procedures.OmGetTaxes.Response getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Response>
        PARSER = new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Response(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Response> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procedures.OmGetTaxes.Response getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetTaxes_Parameters_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_om_GetTaxes_Parameters_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetTaxes_Response_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_om_GetTaxes_Response_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetTaxes_Response_Row_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_om_GetTaxes_Response_Row_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n*dstore/engine/procedures/om_GetTaxes.p" +
      "roto\022\031dstore.engine.om_GetTaxes\032\023dstore/" +
      "values.proto\032\033dstore/engine/message.prot" +
      "o\032#dstore/engine/metainformation.proto\"\232" +
      "\001\n\nParameters\0220\n\013tax_type_id\030\001 \001(\0132\033.dst" +
      "ore.values.integerValue\022\031\n\020tax_type_id_n" +
      "ull\030\351\007 \001(\010\022+\n\004date\030\002 \001(\0132\035.dstore.values" +
      ".timestampValue\022\022\n\tdate_null\030\352\007 \001(\010\"\307\004\n\010" +
      "Response\022H\n\020meta_information\030\002 \003(\0132..dst" +
      "ore.engine.metainformation.MetaInformati",
      "on\022/\n\007message\030\003 \003(\0132\036.dstore.engine.mess" +
      "age.Message\0224\n\003row\030\004 \003(\0132\'.dstore.engine" +
      ".om_GetTaxes.Response.Row\032\211\003\n\003Row\022\017\n\006row" +
      "_id\030\220N \001(\005\022-\n\010tax_type\030\221N \001(\0132\032.dstore.v" +
      "alues.stringValue\0221\n\013tax_type_id\030\222N \001(\0132" +
      "\033.dstore.values.integerValue\0220\n\010valid_to" +
      "\030\223N \001(\0132\035.dstore.values.timestampValue\022." +
      "\n\010tax_rate\030\224N \001(\0132\033.dstore.values.decima" +
      "lValue\0222\n\nvalid_from\030\225N \001(\0132\035.dstore.val" +
      "ues.timestampValue\0227\n\021surcharge_type_id\030",
      "\226N \001(\0132\033.dstore.values.integerValue\022@\n\032s" +
      "urcharge_type_category_id\030\227N \001(\0132\033.dstor" +
      "e.values.integerValueBL\n\033io.dstore.engin" +
      "e.proceduresZ-gosdk.dstore.de/engine/pro" +
      "cedures/om_GetTaxesb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.dstore.Values.getDescriptor(),
          io.dstore.engine.ProcedureMessage.getDescriptor(),
          io.dstore.engine.EngineMetaInformation.getDescriptor(),
        }, assigner);
    internal_static_dstore_engine_om_GetTaxes_Parameters_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dstore_engine_om_GetTaxes_Parameters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_om_GetTaxes_Parameters_descriptor,
        new java.lang.String[] { "TaxTypeId", "TaxTypeIdNull", "Date", "DateNull", });
    internal_static_dstore_engine_om_GetTaxes_Response_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dstore_engine_om_GetTaxes_Response_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_om_GetTaxes_Response_descriptor,
        new java.lang.String[] { "MetaInformation", "Message", "Row", });
    internal_static_dstore_engine_om_GetTaxes_Response_Row_descriptor =
      internal_static_dstore_engine_om_GetTaxes_Response_descriptor.getNestedTypes().get(0);
    internal_static_dstore_engine_om_GetTaxes_Response_Row_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_om_GetTaxes_Response_Row_descriptor,
        new java.lang.String[] { "RowId", "TaxType", "TaxTypeId", "ValidTo", "TaxRate", "ValidFrom", "SurchargeTypeId", "SurchargeTypeCategoryId", });
    io.dstore.Values.getDescriptor();
    io.dstore.engine.ProcedureMessage.getDescriptor();
    io.dstore.engine.EngineMetaInformation.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
