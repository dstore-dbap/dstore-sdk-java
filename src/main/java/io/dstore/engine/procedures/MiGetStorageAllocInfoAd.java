// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dstore/engine/procedures/mi_GetStorageAllocInfo_Ad.proto

package io.dstore.engine.procedures;

public final class MiGetStorageAllocInfoAd {
  private MiGetStorageAllocInfoAd() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ParametersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.mi_GetStorageAllocInfo_Ad.Parameters)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
     */
    boolean hasGetInfoForADatabase();
    /**
     * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
     */
    io.dstore.Values.booleanValue getGetInfoForADatabase();
    /**
     * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
     */
    io.dstore.Values.booleanValueOrBuilder getGetInfoForADatabaseOrBuilder();

    /**
     * <code>optional bool get_info_for_a_database_null = 1001;</code>
     */
    boolean getGetInfoForADatabaseNull();

    /**
     * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
     */
    boolean hasGetStorageAllocInfoFor();
    /**
     * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
     */
    io.dstore.Values.stringValue getGetStorageAllocInfoFor();
    /**
     * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
     */
    io.dstore.Values.stringValueOrBuilder getGetStorageAllocInfoForOrBuilder();

    /**
     * <code>optional bool get_storage_alloc_info_for_null = 1002;</code>
     */
    boolean getGetStorageAllocInfoForNull();
  }
  /**
   * Protobuf type {@code dstore.engine.mi_GetStorageAllocInfo_Ad.Parameters}
   */
  public  static final class Parameters extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.mi_GetStorageAllocInfo_Ad.Parameters)
      ParametersOrBuilder {
    // Use Parameters.newBuilder() to construct.
    private Parameters(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Parameters() {
      getInfoForADatabaseNull_ = false;
      getStorageAllocInfoForNull_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Parameters(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.Values.booleanValue.Builder subBuilder = null;
              if (getInfoForADatabase_ != null) {
                subBuilder = getInfoForADatabase_.toBuilder();
              }
              getInfoForADatabase_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getInfoForADatabase_);
                getInfoForADatabase_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.dstore.Values.stringValue.Builder subBuilder = null;
              if (getStorageAllocInfoFor_ != null) {
                subBuilder = getStorageAllocInfoFor_.toBuilder();
              }
              getStorageAllocInfoFor_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getStorageAllocInfoFor_);
                getStorageAllocInfoFor_ = subBuilder.buildPartial();
              }

              break;
            }
            case 8008: {

              getInfoForADatabaseNull_ = input.readBool();
              break;
            }
            case 8016: {

              getStorageAllocInfoForNull_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters.class, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters.Builder.class);
    }

    public static final int GET_INFO_FOR_A_DATABASE_FIELD_NUMBER = 1;
    private io.dstore.Values.booleanValue getInfoForADatabase_;
    /**
     * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
     */
    public boolean hasGetInfoForADatabase() {
      return getInfoForADatabase_ != null;
    }
    /**
     * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
     */
    public io.dstore.Values.booleanValue getGetInfoForADatabase() {
      return getInfoForADatabase_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : getInfoForADatabase_;
    }
    /**
     * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
     */
    public io.dstore.Values.booleanValueOrBuilder getGetInfoForADatabaseOrBuilder() {
      return getGetInfoForADatabase();
    }

    public static final int GET_INFO_FOR_A_DATABASE_NULL_FIELD_NUMBER = 1001;
    private boolean getInfoForADatabaseNull_;
    /**
     * <code>optional bool get_info_for_a_database_null = 1001;</code>
     */
    public boolean getGetInfoForADatabaseNull() {
      return getInfoForADatabaseNull_;
    }

    public static final int GET_STORAGE_ALLOC_INFO_FOR_FIELD_NUMBER = 2;
    private io.dstore.Values.stringValue getStorageAllocInfoFor_;
    /**
     * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
     */
    public boolean hasGetStorageAllocInfoFor() {
      return getStorageAllocInfoFor_ != null;
    }
    /**
     * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
     */
    public io.dstore.Values.stringValue getGetStorageAllocInfoFor() {
      return getStorageAllocInfoFor_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : getStorageAllocInfoFor_;
    }
    /**
     * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
     */
    public io.dstore.Values.stringValueOrBuilder getGetStorageAllocInfoForOrBuilder() {
      return getGetStorageAllocInfoFor();
    }

    public static final int GET_STORAGE_ALLOC_INFO_FOR_NULL_FIELD_NUMBER = 1002;
    private boolean getStorageAllocInfoForNull_;
    /**
     * <code>optional bool get_storage_alloc_info_for_null = 1002;</code>
     */
    public boolean getGetStorageAllocInfoForNull() {
      return getStorageAllocInfoForNull_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (getInfoForADatabase_ != null) {
        output.writeMessage(1, getGetInfoForADatabase());
      }
      if (getStorageAllocInfoFor_ != null) {
        output.writeMessage(2, getGetStorageAllocInfoFor());
      }
      if (getInfoForADatabaseNull_ != false) {
        output.writeBool(1001, getInfoForADatabaseNull_);
      }
      if (getStorageAllocInfoForNull_ != false) {
        output.writeBool(1002, getStorageAllocInfoForNull_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (getInfoForADatabase_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getGetInfoForADatabase());
      }
      if (getStorageAllocInfoFor_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getGetStorageAllocInfoFor());
      }
      if (getInfoForADatabaseNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1001, getInfoForADatabaseNull_);
      }
      if (getStorageAllocInfoForNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1002, getStorageAllocInfoForNull_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.mi_GetStorageAllocInfo_Ad.Parameters}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.mi_GetStorageAllocInfo_Ad.Parameters)
        io.dstore.engine.procedures.MiGetStorageAllocInfoAd.ParametersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters.class, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters.Builder.class);
      }

      // Construct using io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (getInfoForADatabaseBuilder_ == null) {
          getInfoForADatabase_ = null;
        } else {
          getInfoForADatabase_ = null;
          getInfoForADatabaseBuilder_ = null;
        }
        getInfoForADatabaseNull_ = false;

        if (getStorageAllocInfoForBuilder_ == null) {
          getStorageAllocInfoFor_ = null;
        } else {
          getStorageAllocInfoFor_ = null;
          getStorageAllocInfoForBuilder_ = null;
        }
        getStorageAllocInfoForNull_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_descriptor;
      }

      public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters getDefaultInstanceForType() {
        return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters.getDefaultInstance();
      }

      public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters build() {
        io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters buildPartial() {
        io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters result = new io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters(this);
        if (getInfoForADatabaseBuilder_ == null) {
          result.getInfoForADatabase_ = getInfoForADatabase_;
        } else {
          result.getInfoForADatabase_ = getInfoForADatabaseBuilder_.build();
        }
        result.getInfoForADatabaseNull_ = getInfoForADatabaseNull_;
        if (getStorageAllocInfoForBuilder_ == null) {
          result.getStorageAllocInfoFor_ = getStorageAllocInfoFor_;
        } else {
          result.getStorageAllocInfoFor_ = getStorageAllocInfoForBuilder_.build();
        }
        result.getStorageAllocInfoForNull_ = getStorageAllocInfoForNull_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters) {
          return mergeFrom((io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters other) {
        if (other == io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters.getDefaultInstance()) return this;
        if (other.hasGetInfoForADatabase()) {
          mergeGetInfoForADatabase(other.getGetInfoForADatabase());
        }
        if (other.getGetInfoForADatabaseNull() != false) {
          setGetInfoForADatabaseNull(other.getGetInfoForADatabaseNull());
        }
        if (other.hasGetStorageAllocInfoFor()) {
          mergeGetStorageAllocInfoFor(other.getGetStorageAllocInfoFor());
        }
        if (other.getGetStorageAllocInfoForNull() != false) {
          setGetStorageAllocInfoForNull(other.getGetStorageAllocInfoForNull());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.dstore.Values.booleanValue getInfoForADatabase_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> getInfoForADatabaseBuilder_;
      /**
       * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public boolean hasGetInfoForADatabase() {
        return getInfoForADatabaseBuilder_ != null || getInfoForADatabase_ != null;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public io.dstore.Values.booleanValue getGetInfoForADatabase() {
        if (getInfoForADatabaseBuilder_ == null) {
          return getInfoForADatabase_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : getInfoForADatabase_;
        } else {
          return getInfoForADatabaseBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public Builder setGetInfoForADatabase(io.dstore.Values.booleanValue value) {
        if (getInfoForADatabaseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getInfoForADatabase_ = value;
          onChanged();
        } else {
          getInfoForADatabaseBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public Builder setGetInfoForADatabase(
          io.dstore.Values.booleanValue.Builder builderForValue) {
        if (getInfoForADatabaseBuilder_ == null) {
          getInfoForADatabase_ = builderForValue.build();
          onChanged();
        } else {
          getInfoForADatabaseBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public Builder mergeGetInfoForADatabase(io.dstore.Values.booleanValue value) {
        if (getInfoForADatabaseBuilder_ == null) {
          if (getInfoForADatabase_ != null) {
            getInfoForADatabase_ =
              io.dstore.Values.booleanValue.newBuilder(getInfoForADatabase_).mergeFrom(value).buildPartial();
          } else {
            getInfoForADatabase_ = value;
          }
          onChanged();
        } else {
          getInfoForADatabaseBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public Builder clearGetInfoForADatabase() {
        if (getInfoForADatabaseBuilder_ == null) {
          getInfoForADatabase_ = null;
          onChanged();
        } else {
          getInfoForADatabase_ = null;
          getInfoForADatabaseBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public io.dstore.Values.booleanValue.Builder getGetInfoForADatabaseBuilder() {
        
        onChanged();
        return getGetInfoForADatabaseFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getGetInfoForADatabaseOrBuilder() {
        if (getInfoForADatabaseBuilder_ != null) {
          return getInfoForADatabaseBuilder_.getMessageOrBuilder();
        } else {
          return getInfoForADatabase_ == null ?
              io.dstore.Values.booleanValue.getDefaultInstance() : getInfoForADatabase_;
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue get_info_for_a_database = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
          getGetInfoForADatabaseFieldBuilder() {
        if (getInfoForADatabaseBuilder_ == null) {
          getInfoForADatabaseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                  getGetInfoForADatabase(),
                  getParentForChildren(),
                  isClean());
          getInfoForADatabase_ = null;
        }
        return getInfoForADatabaseBuilder_;
      }

      private boolean getInfoForADatabaseNull_ ;
      /**
       * <code>optional bool get_info_for_a_database_null = 1001;</code>
       */
      public boolean getGetInfoForADatabaseNull() {
        return getInfoForADatabaseNull_;
      }
      /**
       * <code>optional bool get_info_for_a_database_null = 1001;</code>
       */
      public Builder setGetInfoForADatabaseNull(boolean value) {
        
        getInfoForADatabaseNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool get_info_for_a_database_null = 1001;</code>
       */
      public Builder clearGetInfoForADatabaseNull() {
        
        getInfoForADatabaseNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.stringValue getStorageAllocInfoFor_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> getStorageAllocInfoForBuilder_;
      /**
       * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public boolean hasGetStorageAllocInfoFor() {
        return getStorageAllocInfoForBuilder_ != null || getStorageAllocInfoFor_ != null;
      }
      /**
       * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public io.dstore.Values.stringValue getGetStorageAllocInfoFor() {
        if (getStorageAllocInfoForBuilder_ == null) {
          return getStorageAllocInfoFor_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : getStorageAllocInfoFor_;
        } else {
          return getStorageAllocInfoForBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public Builder setGetStorageAllocInfoFor(io.dstore.Values.stringValue value) {
        if (getStorageAllocInfoForBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getStorageAllocInfoFor_ = value;
          onChanged();
        } else {
          getStorageAllocInfoForBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public Builder setGetStorageAllocInfoFor(
          io.dstore.Values.stringValue.Builder builderForValue) {
        if (getStorageAllocInfoForBuilder_ == null) {
          getStorageAllocInfoFor_ = builderForValue.build();
          onChanged();
        } else {
          getStorageAllocInfoForBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public Builder mergeGetStorageAllocInfoFor(io.dstore.Values.stringValue value) {
        if (getStorageAllocInfoForBuilder_ == null) {
          if (getStorageAllocInfoFor_ != null) {
            getStorageAllocInfoFor_ =
              io.dstore.Values.stringValue.newBuilder(getStorageAllocInfoFor_).mergeFrom(value).buildPartial();
          } else {
            getStorageAllocInfoFor_ = value;
          }
          onChanged();
        } else {
          getStorageAllocInfoForBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public Builder clearGetStorageAllocInfoFor() {
        if (getStorageAllocInfoForBuilder_ == null) {
          getStorageAllocInfoFor_ = null;
          onChanged();
        } else {
          getStorageAllocInfoFor_ = null;
          getStorageAllocInfoForBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public io.dstore.Values.stringValue.Builder getGetStorageAllocInfoForBuilder() {
        
        onChanged();
        return getGetStorageAllocInfoForFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getGetStorageAllocInfoForOrBuilder() {
        if (getStorageAllocInfoForBuilder_ != null) {
          return getStorageAllocInfoForBuilder_.getMessageOrBuilder();
        } else {
          return getStorageAllocInfoFor_ == null ?
              io.dstore.Values.stringValue.getDefaultInstance() : getStorageAllocInfoFor_;
        }
      }
      /**
       * <code>optional .dstore.values.stringValue get_storage_alloc_info_for = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
          getGetStorageAllocInfoForFieldBuilder() {
        if (getStorageAllocInfoForBuilder_ == null) {
          getStorageAllocInfoForBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                  getGetStorageAllocInfoFor(),
                  getParentForChildren(),
                  isClean());
          getStorageAllocInfoFor_ = null;
        }
        return getStorageAllocInfoForBuilder_;
      }

      private boolean getStorageAllocInfoForNull_ ;
      /**
       * <code>optional bool get_storage_alloc_info_for_null = 1002;</code>
       */
      public boolean getGetStorageAllocInfoForNull() {
        return getStorageAllocInfoForNull_;
      }
      /**
       * <code>optional bool get_storage_alloc_info_for_null = 1002;</code>
       */
      public Builder setGetStorageAllocInfoForNull(boolean value) {
        
        getStorageAllocInfoForNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool get_storage_alloc_info_for_null = 1002;</code>
       */
      public Builder clearGetStorageAllocInfoForNull() {
        
        getStorageAllocInfoForNull_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.mi_GetStorageAllocInfo_Ad.Parameters)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.mi_GetStorageAllocInfo_Ad.Parameters)
    private static final io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters();
    }

    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Parameters>
        PARSER = new com.google.protobuf.AbstractParser<Parameters>() {
      public Parameters parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Parameters(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Parameters> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Parameters> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Parameters getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.mi_GetStorageAllocInfo_Ad.Response)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> 
        getMetaInformationList();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index);
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    int getMetaInformationCount();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
        getMetaInformationOrBuilderList();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
        int index);

    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<io.dstore.engine.ProcedureMessage.Message> 
        getMessageList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.Message getMessage(int index);
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    int getMessageCount();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index);

    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     */
    java.util.List<io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row> 
        getRowList();
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     */
    io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row getRow(int index);
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     */
    int getRowCount();
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     */
    java.util.List<? extends io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.RowOrBuilder> 
        getRowOrBuilderList();
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     */
    io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.RowOrBuilder getRowOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dstore.engine.mi_GetStorageAllocInfo_Ad.Response}
   */
  public  static final class Response extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dstore.engine.mi_GetStorageAllocInfo_Ad.Response)
      ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Response() {
      metaInformation_ = java.util.Collections.emptyList();
      message_ = java.util.Collections.emptyList();
      row_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                metaInformation_ = new java.util.ArrayList<io.dstore.engine.EngineMetaInformation.MetaInformation>();
                mutable_bitField0_ |= 0x00000001;
              }
              metaInformation_.add(input.readMessage(io.dstore.engine.EngineMetaInformation.MetaInformation.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>();
                mutable_bitField0_ |= 0x00000002;
              }
              message_.add(input.readMessage(io.dstore.engine.ProcedureMessage.Message.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                row_ = new java.util.ArrayList<io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row>();
                mutable_bitField0_ |= 0x00000004;
              }
              row_.add(input.readMessage(io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          metaInformation_ = java.util.Collections.unmodifiableList(metaInformation_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = java.util.Collections.unmodifiableList(message_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = java.util.Collections.unmodifiableList(row_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.class, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Builder.class);
    }

    public interface RowOrBuilder extends
        // @@protoc_insertion_point(interface_extends:dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      int getRowId();

      /**
       * <pre>
       * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue table_name = 10001;</code>
       */
      boolean hasTableName();
      /**
       * <pre>
       * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue table_name = 10001;</code>
       */
      io.dstore.Values.stringValue getTableName();
      /**
       * <pre>
       * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue table_name = 10001;</code>
       */
      io.dstore.Values.stringValueOrBuilder getTableNameOrBuilder();

      /**
       * <pre>
       * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
       */
      boolean hasIndexSizeMb();
      /**
       * <pre>
       * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
       */
      io.dstore.Values.decimalValue getIndexSizeMb();
      /**
       * <pre>
       * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getIndexSizeMbOrBuilder();

      /**
       * <pre>
       * Anzahl Indizes der Tabelle "TableName"
       * </pre>
       *
       * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
       */
      boolean hasNumberOfIndexes();
      /**
       * <pre>
       * Anzahl Indizes der Tabelle "TableName"
       * </pre>
       *
       * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
       */
      io.dstore.Values.integerValue getNumberOfIndexes();
      /**
       * <pre>
       * Anzahl Indizes der Tabelle "TableName"
       * </pre>
       *
       * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
       */
      io.dstore.Values.integerValueOrBuilder getNumberOfIndexesOrBuilder();

      /**
       * <pre>
       * Anzahl Datensätze in der Tabelle "TableName"
       * </pre>
       *
       * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
       */
      boolean hasNumberOfRows();
      /**
       * <pre>
       * Anzahl Datensätze in der Tabelle "TableName"
       * </pre>
       *
       * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
       */
      io.dstore.Values.integerValue getNumberOfRows();
      /**
       * <pre>
       * Anzahl Datensätze in der Tabelle "TableName"
       * </pre>
       *
       * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
       */
      io.dstore.Values.integerValueOrBuilder getNumberOfRowsOrBuilder();

      /**
       * <pre>
       * Gesamte Größe der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
       */
      boolean hasTableSizeMb();
      /**
       * <pre>
       * Gesamte Größe der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
       */
      io.dstore.Values.decimalValue getTableSizeMb();
      /**
       * <pre>
       * Gesamte Größe der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getTableSizeMbOrBuilder();

      /**
       * <pre>
       * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
       */
      boolean hasDataSizeMb();
      /**
       * <pre>
       * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
       */
      io.dstore.Values.decimalValue getDataSizeMb();
      /**
       * <pre>
       * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getDataSizeMbOrBuilder();

      /**
       * <pre>
       * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
       */
      boolean hasMballocated();
      /**
       * <pre>
       * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
       */
      io.dstore.Values.decimalValue getMballocated();
      /**
       * <pre>
       * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getMballocatedOrBuilder();

      /**
       * <pre>
       * Name eines Segments in der Datenbank "DBName"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
       */
      boolean hasSegmentName();
      /**
       * <pre>
       * Name eines Segments in der Datenbank "DBName"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
       */
      io.dstore.Values.stringValue getSegmentName();
      /**
       * <pre>
       * Name eines Segments in der Datenbank "DBName"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
       */
      io.dstore.Values.stringValueOrBuilder getSegmentNameOrBuilder();

      /**
       * <pre>
       * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
       */
      boolean hasMbused();
      /**
       * <pre>
       * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
       */
      io.dstore.Values.decimalValue getMbused();
      /**
       * <pre>
       * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getMbusedOrBuilder();

      /**
       * <pre>
       * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
       */
      boolean hasFreeSpaceInPercent();
      /**
       * <pre>
       * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
       */
      io.dstore.Values.decimalValue getFreeSpaceInPercent();
      /**
       * <pre>
       * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getFreeSpaceInPercentOrBuilder();

      /**
       * <pre>
       * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
       * </pre>
       *
       * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
       */
      boolean hasDBName();
      /**
       * <pre>
       * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
       * </pre>
       *
       * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
       */
      io.dstore.Values.stringValue getDBName();
      /**
       * <pre>
       * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
       * </pre>
       *
       * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
       */
      io.dstore.Values.stringValueOrBuilder getDBNameOrBuilder();

      /**
       * <pre>
       * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
       */
      boolean hasMbfree();
      /**
       * <pre>
       * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
       */
      io.dstore.Values.decimalValue getMbfree();
      /**
       * <pre>
       * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getMbfreeOrBuilder();
    }
    /**
     * Protobuf type {@code dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row}
     */
    public  static final class Row extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row)
        RowOrBuilder {
      // Use Row.newBuilder() to construct.
      private Row(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Row() {
        rowId_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private Row(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 80000: {

                rowId_ = input.readInt32();
                break;
              }
              case 80010: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (tableName_ != null) {
                  subBuilder = tableName_.toBuilder();
                }
                tableName_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(tableName_);
                  tableName_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80018: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (indexSizeMb_ != null) {
                  subBuilder = indexSizeMb_.toBuilder();
                }
                indexSizeMb_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(indexSizeMb_);
                  indexSizeMb_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80026: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (numberOfIndexes_ != null) {
                  subBuilder = numberOfIndexes_.toBuilder();
                }
                numberOfIndexes_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(numberOfIndexes_);
                  numberOfIndexes_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80034: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (numberOfRows_ != null) {
                  subBuilder = numberOfRows_.toBuilder();
                }
                numberOfRows_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(numberOfRows_);
                  numberOfRows_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80042: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (tableSizeMb_ != null) {
                  subBuilder = tableSizeMb_.toBuilder();
                }
                tableSizeMb_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(tableSizeMb_);
                  tableSizeMb_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80050: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (dataSizeMb_ != null) {
                  subBuilder = dataSizeMb_.toBuilder();
                }
                dataSizeMb_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(dataSizeMb_);
                  dataSizeMb_ = subBuilder.buildPartial();
                }

                break;
              }
              case 160010: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (mballocated_ != null) {
                  subBuilder = mballocated_.toBuilder();
                }
                mballocated_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(mballocated_);
                  mballocated_ = subBuilder.buildPartial();
                }

                break;
              }
              case 160018: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (segmentName_ != null) {
                  subBuilder = segmentName_.toBuilder();
                }
                segmentName_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(segmentName_);
                  segmentName_ = subBuilder.buildPartial();
                }

                break;
              }
              case 160026: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (mbused_ != null) {
                  subBuilder = mbused_.toBuilder();
                }
                mbused_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(mbused_);
                  mbused_ = subBuilder.buildPartial();
                }

                break;
              }
              case 160034: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (freeSpaceInPercent_ != null) {
                  subBuilder = freeSpaceInPercent_.toBuilder();
                }
                freeSpaceInPercent_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(freeSpaceInPercent_);
                  freeSpaceInPercent_ = subBuilder.buildPartial();
                }

                break;
              }
              case 160042: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (dBName_ != null) {
                  subBuilder = dBName_.toBuilder();
                }
                dBName_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(dBName_);
                  dBName_ = subBuilder.buildPartial();
                }

                break;
              }
              case 160050: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (mbfree_ != null) {
                  subBuilder = mbfree_.toBuilder();
                }
                mbfree_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(mbfree_);
                  mbfree_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.class, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.Builder.class);
      }

      public static final int ROW_ID_FIELD_NUMBER = 10000;
      private int rowId_;
      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      public int getRowId() {
        return rowId_;
      }

      public static final int TABLE_NAME_FIELD_NUMBER = 10001;
      private io.dstore.Values.stringValue tableName_;
      /**
       * <pre>
       * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue table_name = 10001;</code>
       */
      public boolean hasTableName() {
        return tableName_ != null;
      }
      /**
       * <pre>
       * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue table_name = 10001;</code>
       */
      public io.dstore.Values.stringValue getTableName() {
        return tableName_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : tableName_;
      }
      /**
       * <pre>
       * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue table_name = 10001;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getTableNameOrBuilder() {
        return getTableName();
      }

      public static final int INDEX_SIZE_MB_FIELD_NUMBER = 10002;
      private io.dstore.Values.decimalValue indexSizeMb_;
      /**
       * <pre>
       * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
       */
      public boolean hasIndexSizeMb() {
        return indexSizeMb_ != null;
      }
      /**
       * <pre>
       * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
       */
      public io.dstore.Values.decimalValue getIndexSizeMb() {
        return indexSizeMb_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : indexSizeMb_;
      }
      /**
       * <pre>
       * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getIndexSizeMbOrBuilder() {
        return getIndexSizeMb();
      }

      public static final int NUMBER_OF_INDEXES_FIELD_NUMBER = 10003;
      private io.dstore.Values.integerValue numberOfIndexes_;
      /**
       * <pre>
       * Anzahl Indizes der Tabelle "TableName"
       * </pre>
       *
       * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
       */
      public boolean hasNumberOfIndexes() {
        return numberOfIndexes_ != null;
      }
      /**
       * <pre>
       * Anzahl Indizes der Tabelle "TableName"
       * </pre>
       *
       * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
       */
      public io.dstore.Values.integerValue getNumberOfIndexes() {
        return numberOfIndexes_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : numberOfIndexes_;
      }
      /**
       * <pre>
       * Anzahl Indizes der Tabelle "TableName"
       * </pre>
       *
       * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getNumberOfIndexesOrBuilder() {
        return getNumberOfIndexes();
      }

      public static final int NUMBER_OF_ROWS_FIELD_NUMBER = 10004;
      private io.dstore.Values.integerValue numberOfRows_;
      /**
       * <pre>
       * Anzahl Datensätze in der Tabelle "TableName"
       * </pre>
       *
       * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
       */
      public boolean hasNumberOfRows() {
        return numberOfRows_ != null;
      }
      /**
       * <pre>
       * Anzahl Datensätze in der Tabelle "TableName"
       * </pre>
       *
       * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
       */
      public io.dstore.Values.integerValue getNumberOfRows() {
        return numberOfRows_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : numberOfRows_;
      }
      /**
       * <pre>
       * Anzahl Datensätze in der Tabelle "TableName"
       * </pre>
       *
       * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getNumberOfRowsOrBuilder() {
        return getNumberOfRows();
      }

      public static final int TABLE_SIZE_MB_FIELD_NUMBER = 10005;
      private io.dstore.Values.decimalValue tableSizeMb_;
      /**
       * <pre>
       * Gesamte Größe der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
       */
      public boolean hasTableSizeMb() {
        return tableSizeMb_ != null;
      }
      /**
       * <pre>
       * Gesamte Größe der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
       */
      public io.dstore.Values.decimalValue getTableSizeMb() {
        return tableSizeMb_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : tableSizeMb_;
      }
      /**
       * <pre>
       * Gesamte Größe der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getTableSizeMbOrBuilder() {
        return getTableSizeMb();
      }

      public static final int DATA_SIZE_MB_FIELD_NUMBER = 10006;
      private io.dstore.Values.decimalValue dataSizeMb_;
      /**
       * <pre>
       * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
       */
      public boolean hasDataSizeMb() {
        return dataSizeMb_ != null;
      }
      /**
       * <pre>
       * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
       */
      public io.dstore.Values.decimalValue getDataSizeMb() {
        return dataSizeMb_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : dataSizeMb_;
      }
      /**
       * <pre>
       * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getDataSizeMbOrBuilder() {
        return getDataSizeMb();
      }

      public static final int MBALLOCATED_FIELD_NUMBER = 20001;
      private io.dstore.Values.decimalValue mballocated_;
      /**
       * <pre>
       * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
       */
      public boolean hasMballocated() {
        return mballocated_ != null;
      }
      /**
       * <pre>
       * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
       */
      public io.dstore.Values.decimalValue getMballocated() {
        return mballocated_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : mballocated_;
      }
      /**
       * <pre>
       * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getMballocatedOrBuilder() {
        return getMballocated();
      }

      public static final int SEGMENT_NAME_FIELD_NUMBER = 20002;
      private io.dstore.Values.stringValue segmentName_;
      /**
       * <pre>
       * Name eines Segments in der Datenbank "DBName"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
       */
      public boolean hasSegmentName() {
        return segmentName_ != null;
      }
      /**
       * <pre>
       * Name eines Segments in der Datenbank "DBName"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
       */
      public io.dstore.Values.stringValue getSegmentName() {
        return segmentName_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : segmentName_;
      }
      /**
       * <pre>
       * Name eines Segments in der Datenbank "DBName"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getSegmentNameOrBuilder() {
        return getSegmentName();
      }

      public static final int MBUSED_FIELD_NUMBER = 20003;
      private io.dstore.Values.decimalValue mbused_;
      /**
       * <pre>
       * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
       */
      public boolean hasMbused() {
        return mbused_ != null;
      }
      /**
       * <pre>
       * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
       */
      public io.dstore.Values.decimalValue getMbused() {
        return mbused_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : mbused_;
      }
      /**
       * <pre>
       * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getMbusedOrBuilder() {
        return getMbused();
      }

      public static final int FREE_SPACE_IN_PERCENT_FIELD_NUMBER = 20004;
      private io.dstore.Values.decimalValue freeSpaceInPercent_;
      /**
       * <pre>
       * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
       */
      public boolean hasFreeSpaceInPercent() {
        return freeSpaceInPercent_ != null;
      }
      /**
       * <pre>
       * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
       */
      public io.dstore.Values.decimalValue getFreeSpaceInPercent() {
        return freeSpaceInPercent_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : freeSpaceInPercent_;
      }
      /**
       * <pre>
       * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getFreeSpaceInPercentOrBuilder() {
        return getFreeSpaceInPercent();
      }

      public static final int D_B_NAME_FIELD_NUMBER = 20005;
      private io.dstore.Values.stringValue dBName_;
      /**
       * <pre>
       * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
       * </pre>
       *
       * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
       */
      public boolean hasDBName() {
        return dBName_ != null;
      }
      /**
       * <pre>
       * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
       * </pre>
       *
       * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
       */
      public io.dstore.Values.stringValue getDBName() {
        return dBName_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : dBName_;
      }
      /**
       * <pre>
       * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
       * </pre>
       *
       * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getDBNameOrBuilder() {
        return getDBName();
      }

      public static final int MBFREE_FIELD_NUMBER = 20006;
      private io.dstore.Values.decimalValue mbfree_;
      /**
       * <pre>
       * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
       */
      public boolean hasMbfree() {
        return mbfree_ != null;
      }
      /**
       * <pre>
       * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
       */
      public io.dstore.Values.decimalValue getMbfree() {
        return mbfree_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : mbfree_;
      }
      /**
       * <pre>
       * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getMbfreeOrBuilder() {
        return getMbfree();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (rowId_ != 0) {
          output.writeInt32(10000, rowId_);
        }
        if (tableName_ != null) {
          output.writeMessage(10001, getTableName());
        }
        if (indexSizeMb_ != null) {
          output.writeMessage(10002, getIndexSizeMb());
        }
        if (numberOfIndexes_ != null) {
          output.writeMessage(10003, getNumberOfIndexes());
        }
        if (numberOfRows_ != null) {
          output.writeMessage(10004, getNumberOfRows());
        }
        if (tableSizeMb_ != null) {
          output.writeMessage(10005, getTableSizeMb());
        }
        if (dataSizeMb_ != null) {
          output.writeMessage(10006, getDataSizeMb());
        }
        if (mballocated_ != null) {
          output.writeMessage(20001, getMballocated());
        }
        if (segmentName_ != null) {
          output.writeMessage(20002, getSegmentName());
        }
        if (mbused_ != null) {
          output.writeMessage(20003, getMbused());
        }
        if (freeSpaceInPercent_ != null) {
          output.writeMessage(20004, getFreeSpaceInPercent());
        }
        if (dBName_ != null) {
          output.writeMessage(20005, getDBName());
        }
        if (mbfree_ != null) {
          output.writeMessage(20006, getMbfree());
        }
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (rowId_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10000, rowId_);
        }
        if (tableName_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10001, getTableName());
        }
        if (indexSizeMb_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10002, getIndexSizeMb());
        }
        if (numberOfIndexes_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10003, getNumberOfIndexes());
        }
        if (numberOfRows_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10004, getNumberOfRows());
        }
        if (tableSizeMb_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10005, getTableSizeMb());
        }
        if (dataSizeMb_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10006, getDataSizeMb());
        }
        if (mballocated_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20001, getMballocated());
        }
        if (segmentName_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20002, getSegmentName());
        }
        if (mbused_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20003, getMbused());
        }
        if (freeSpaceInPercent_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20004, getFreeSpaceInPercent());
        }
        if (dBName_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20005, getDBName());
        }
        if (mbfree_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20006, getMbfree());
        }
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row)
          io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.RowOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.class, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.Builder.class);
        }

        // Construct using io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          rowId_ = 0;

          if (tableNameBuilder_ == null) {
            tableName_ = null;
          } else {
            tableName_ = null;
            tableNameBuilder_ = null;
          }
          if (indexSizeMbBuilder_ == null) {
            indexSizeMb_ = null;
          } else {
            indexSizeMb_ = null;
            indexSizeMbBuilder_ = null;
          }
          if (numberOfIndexesBuilder_ == null) {
            numberOfIndexes_ = null;
          } else {
            numberOfIndexes_ = null;
            numberOfIndexesBuilder_ = null;
          }
          if (numberOfRowsBuilder_ == null) {
            numberOfRows_ = null;
          } else {
            numberOfRows_ = null;
            numberOfRowsBuilder_ = null;
          }
          if (tableSizeMbBuilder_ == null) {
            tableSizeMb_ = null;
          } else {
            tableSizeMb_ = null;
            tableSizeMbBuilder_ = null;
          }
          if (dataSizeMbBuilder_ == null) {
            dataSizeMb_ = null;
          } else {
            dataSizeMb_ = null;
            dataSizeMbBuilder_ = null;
          }
          if (mballocatedBuilder_ == null) {
            mballocated_ = null;
          } else {
            mballocated_ = null;
            mballocatedBuilder_ = null;
          }
          if (segmentNameBuilder_ == null) {
            segmentName_ = null;
          } else {
            segmentName_ = null;
            segmentNameBuilder_ = null;
          }
          if (mbusedBuilder_ == null) {
            mbused_ = null;
          } else {
            mbused_ = null;
            mbusedBuilder_ = null;
          }
          if (freeSpaceInPercentBuilder_ == null) {
            freeSpaceInPercent_ = null;
          } else {
            freeSpaceInPercent_ = null;
            freeSpaceInPercentBuilder_ = null;
          }
          if (dBNameBuilder_ == null) {
            dBName_ = null;
          } else {
            dBName_ = null;
            dBNameBuilder_ = null;
          }
          if (mbfreeBuilder_ == null) {
            mbfree_ = null;
          } else {
            mbfree_ = null;
            mbfreeBuilder_ = null;
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_descriptor;
        }

        public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row getDefaultInstanceForType() {
          return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.getDefaultInstance();
        }

        public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row build() {
          io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row buildPartial() {
          io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row result = new io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row(this);
          result.rowId_ = rowId_;
          if (tableNameBuilder_ == null) {
            result.tableName_ = tableName_;
          } else {
            result.tableName_ = tableNameBuilder_.build();
          }
          if (indexSizeMbBuilder_ == null) {
            result.indexSizeMb_ = indexSizeMb_;
          } else {
            result.indexSizeMb_ = indexSizeMbBuilder_.build();
          }
          if (numberOfIndexesBuilder_ == null) {
            result.numberOfIndexes_ = numberOfIndexes_;
          } else {
            result.numberOfIndexes_ = numberOfIndexesBuilder_.build();
          }
          if (numberOfRowsBuilder_ == null) {
            result.numberOfRows_ = numberOfRows_;
          } else {
            result.numberOfRows_ = numberOfRowsBuilder_.build();
          }
          if (tableSizeMbBuilder_ == null) {
            result.tableSizeMb_ = tableSizeMb_;
          } else {
            result.tableSizeMb_ = tableSizeMbBuilder_.build();
          }
          if (dataSizeMbBuilder_ == null) {
            result.dataSizeMb_ = dataSizeMb_;
          } else {
            result.dataSizeMb_ = dataSizeMbBuilder_.build();
          }
          if (mballocatedBuilder_ == null) {
            result.mballocated_ = mballocated_;
          } else {
            result.mballocated_ = mballocatedBuilder_.build();
          }
          if (segmentNameBuilder_ == null) {
            result.segmentName_ = segmentName_;
          } else {
            result.segmentName_ = segmentNameBuilder_.build();
          }
          if (mbusedBuilder_ == null) {
            result.mbused_ = mbused_;
          } else {
            result.mbused_ = mbusedBuilder_.build();
          }
          if (freeSpaceInPercentBuilder_ == null) {
            result.freeSpaceInPercent_ = freeSpaceInPercent_;
          } else {
            result.freeSpaceInPercent_ = freeSpaceInPercentBuilder_.build();
          }
          if (dBNameBuilder_ == null) {
            result.dBName_ = dBName_;
          } else {
            result.dBName_ = dBNameBuilder_.build();
          }
          if (mbfreeBuilder_ == null) {
            result.mbfree_ = mbfree_;
          } else {
            result.mbfree_ = mbfreeBuilder_.build();
          }
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row) {
            return mergeFrom((io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row other) {
          if (other == io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.getDefaultInstance()) return this;
          if (other.getRowId() != 0) {
            setRowId(other.getRowId());
          }
          if (other.hasTableName()) {
            mergeTableName(other.getTableName());
          }
          if (other.hasIndexSizeMb()) {
            mergeIndexSizeMb(other.getIndexSizeMb());
          }
          if (other.hasNumberOfIndexes()) {
            mergeNumberOfIndexes(other.getNumberOfIndexes());
          }
          if (other.hasNumberOfRows()) {
            mergeNumberOfRows(other.getNumberOfRows());
          }
          if (other.hasTableSizeMb()) {
            mergeTableSizeMb(other.getTableSizeMb());
          }
          if (other.hasDataSizeMb()) {
            mergeDataSizeMb(other.getDataSizeMb());
          }
          if (other.hasMballocated()) {
            mergeMballocated(other.getMballocated());
          }
          if (other.hasSegmentName()) {
            mergeSegmentName(other.getSegmentName());
          }
          if (other.hasMbused()) {
            mergeMbused(other.getMbused());
          }
          if (other.hasFreeSpaceInPercent()) {
            mergeFreeSpaceInPercent(other.getFreeSpaceInPercent());
          }
          if (other.hasDBName()) {
            mergeDBName(other.getDBName());
          }
          if (other.hasMbfree()) {
            mergeMbfree(other.getMbfree());
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int rowId_ ;
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public int getRowId() {
          return rowId_;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder setRowId(int value) {
          
          rowId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder clearRowId() {
          
          rowId_ = 0;
          onChanged();
          return this;
        }

        private io.dstore.Values.stringValue tableName_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> tableNameBuilder_;
        /**
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue table_name = 10001;</code>
         */
        public boolean hasTableName() {
          return tableNameBuilder_ != null || tableName_ != null;
        }
        /**
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue table_name = 10001;</code>
         */
        public io.dstore.Values.stringValue getTableName() {
          if (tableNameBuilder_ == null) {
            return tableName_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : tableName_;
          } else {
            return tableNameBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue table_name = 10001;</code>
         */
        public Builder setTableName(io.dstore.Values.stringValue value) {
          if (tableNameBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            tableName_ = value;
            onChanged();
          } else {
            tableNameBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue table_name = 10001;</code>
         */
        public Builder setTableName(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (tableNameBuilder_ == null) {
            tableName_ = builderForValue.build();
            onChanged();
          } else {
            tableNameBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue table_name = 10001;</code>
         */
        public Builder mergeTableName(io.dstore.Values.stringValue value) {
          if (tableNameBuilder_ == null) {
            if (tableName_ != null) {
              tableName_ =
                io.dstore.Values.stringValue.newBuilder(tableName_).mergeFrom(value).buildPartial();
            } else {
              tableName_ = value;
            }
            onChanged();
          } else {
            tableNameBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue table_name = 10001;</code>
         */
        public Builder clearTableName() {
          if (tableNameBuilder_ == null) {
            tableName_ = null;
            onChanged();
          } else {
            tableName_ = null;
            tableNameBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue table_name = 10001;</code>
         */
        public io.dstore.Values.stringValue.Builder getTableNameBuilder() {
          
          onChanged();
          return getTableNameFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue table_name = 10001;</code>
         */
        public io.dstore.Values.stringValueOrBuilder getTableNameOrBuilder() {
          if (tableNameBuilder_ != null) {
            return tableNameBuilder_.getMessageOrBuilder();
          } else {
            return tableName_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : tableName_;
          }
        }
        /**
         * <pre>
         * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue table_name = 10001;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getTableNameFieldBuilder() {
          if (tableNameBuilder_ == null) {
            tableNameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getTableName(),
                    getParentForChildren(),
                    isClean());
            tableName_ = null;
          }
          return tableNameBuilder_;
        }

        private io.dstore.Values.decimalValue indexSizeMb_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> indexSizeMbBuilder_;
        /**
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
         */
        public boolean hasIndexSizeMb() {
          return indexSizeMbBuilder_ != null || indexSizeMb_ != null;
        }
        /**
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
         */
        public io.dstore.Values.decimalValue getIndexSizeMb() {
          if (indexSizeMbBuilder_ == null) {
            return indexSizeMb_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : indexSizeMb_;
          } else {
            return indexSizeMbBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
         */
        public Builder setIndexSizeMb(io.dstore.Values.decimalValue value) {
          if (indexSizeMbBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            indexSizeMb_ = value;
            onChanged();
          } else {
            indexSizeMbBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
         */
        public Builder setIndexSizeMb(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (indexSizeMbBuilder_ == null) {
            indexSizeMb_ = builderForValue.build();
            onChanged();
          } else {
            indexSizeMbBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
         */
        public Builder mergeIndexSizeMb(io.dstore.Values.decimalValue value) {
          if (indexSizeMbBuilder_ == null) {
            if (indexSizeMb_ != null) {
              indexSizeMb_ =
                io.dstore.Values.decimalValue.newBuilder(indexSizeMb_).mergeFrom(value).buildPartial();
            } else {
              indexSizeMb_ = value;
            }
            onChanged();
          } else {
            indexSizeMbBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
         */
        public Builder clearIndexSizeMb() {
          if (indexSizeMbBuilder_ == null) {
            indexSizeMb_ = null;
            onChanged();
          } else {
            indexSizeMb_ = null;
            indexSizeMbBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
         */
        public io.dstore.Values.decimalValue.Builder getIndexSizeMbBuilder() {
          
          onChanged();
          return getIndexSizeMbFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getIndexSizeMbOrBuilder() {
          if (indexSizeMbBuilder_ != null) {
            return indexSizeMbBuilder_.getMessageOrBuilder();
          } else {
            return indexSizeMb_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : indexSizeMb_;
          }
        }
        /**
         * <pre>
         * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue index_size_mb = 10002;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getIndexSizeMbFieldBuilder() {
          if (indexSizeMbBuilder_ == null) {
            indexSizeMbBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getIndexSizeMb(),
                    getParentForChildren(),
                    isClean());
            indexSizeMb_ = null;
          }
          return indexSizeMbBuilder_;
        }

        private io.dstore.Values.integerValue numberOfIndexes_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> numberOfIndexesBuilder_;
        /**
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
         */
        public boolean hasNumberOfIndexes() {
          return numberOfIndexesBuilder_ != null || numberOfIndexes_ != null;
        }
        /**
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
         */
        public io.dstore.Values.integerValue getNumberOfIndexes() {
          if (numberOfIndexesBuilder_ == null) {
            return numberOfIndexes_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : numberOfIndexes_;
          } else {
            return numberOfIndexesBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
         */
        public Builder setNumberOfIndexes(io.dstore.Values.integerValue value) {
          if (numberOfIndexesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            numberOfIndexes_ = value;
            onChanged();
          } else {
            numberOfIndexesBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
         */
        public Builder setNumberOfIndexes(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (numberOfIndexesBuilder_ == null) {
            numberOfIndexes_ = builderForValue.build();
            onChanged();
          } else {
            numberOfIndexesBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
         */
        public Builder mergeNumberOfIndexes(io.dstore.Values.integerValue value) {
          if (numberOfIndexesBuilder_ == null) {
            if (numberOfIndexes_ != null) {
              numberOfIndexes_ =
                io.dstore.Values.integerValue.newBuilder(numberOfIndexes_).mergeFrom(value).buildPartial();
            } else {
              numberOfIndexes_ = value;
            }
            onChanged();
          } else {
            numberOfIndexesBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
         */
        public Builder clearNumberOfIndexes() {
          if (numberOfIndexesBuilder_ == null) {
            numberOfIndexes_ = null;
            onChanged();
          } else {
            numberOfIndexes_ = null;
            numberOfIndexesBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
         */
        public io.dstore.Values.integerValue.Builder getNumberOfIndexesBuilder() {
          
          onChanged();
          return getNumberOfIndexesFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getNumberOfIndexesOrBuilder() {
          if (numberOfIndexesBuilder_ != null) {
            return numberOfIndexesBuilder_.getMessageOrBuilder();
          } else {
            return numberOfIndexes_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : numberOfIndexes_;
          }
        }
        /**
         * <pre>
         * Anzahl Indizes der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_indexes = 10003;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getNumberOfIndexesFieldBuilder() {
          if (numberOfIndexesBuilder_ == null) {
            numberOfIndexesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getNumberOfIndexes(),
                    getParentForChildren(),
                    isClean());
            numberOfIndexes_ = null;
          }
          return numberOfIndexesBuilder_;
        }

        private io.dstore.Values.integerValue numberOfRows_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> numberOfRowsBuilder_;
        /**
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
         */
        public boolean hasNumberOfRows() {
          return numberOfRowsBuilder_ != null || numberOfRows_ != null;
        }
        /**
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
         */
        public io.dstore.Values.integerValue getNumberOfRows() {
          if (numberOfRowsBuilder_ == null) {
            return numberOfRows_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : numberOfRows_;
          } else {
            return numberOfRowsBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
         */
        public Builder setNumberOfRows(io.dstore.Values.integerValue value) {
          if (numberOfRowsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            numberOfRows_ = value;
            onChanged();
          } else {
            numberOfRowsBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
         */
        public Builder setNumberOfRows(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (numberOfRowsBuilder_ == null) {
            numberOfRows_ = builderForValue.build();
            onChanged();
          } else {
            numberOfRowsBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
         */
        public Builder mergeNumberOfRows(io.dstore.Values.integerValue value) {
          if (numberOfRowsBuilder_ == null) {
            if (numberOfRows_ != null) {
              numberOfRows_ =
                io.dstore.Values.integerValue.newBuilder(numberOfRows_).mergeFrom(value).buildPartial();
            } else {
              numberOfRows_ = value;
            }
            onChanged();
          } else {
            numberOfRowsBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
         */
        public Builder clearNumberOfRows() {
          if (numberOfRowsBuilder_ == null) {
            numberOfRows_ = null;
            onChanged();
          } else {
            numberOfRows_ = null;
            numberOfRowsBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
         */
        public io.dstore.Values.integerValue.Builder getNumberOfRowsBuilder() {
          
          onChanged();
          return getNumberOfRowsFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getNumberOfRowsOrBuilder() {
          if (numberOfRowsBuilder_ != null) {
            return numberOfRowsBuilder_.getMessageOrBuilder();
          } else {
            return numberOfRows_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : numberOfRows_;
          }
        }
        /**
         * <pre>
         * Anzahl Datensätze in der Tabelle "TableName"
         * </pre>
         *
         * <code>optional .dstore.values.integerValue number_of_rows = 10004;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getNumberOfRowsFieldBuilder() {
          if (numberOfRowsBuilder_ == null) {
            numberOfRowsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getNumberOfRows(),
                    getParentForChildren(),
                    isClean());
            numberOfRows_ = null;
          }
          return numberOfRowsBuilder_;
        }

        private io.dstore.Values.decimalValue tableSizeMb_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> tableSizeMbBuilder_;
        /**
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
         */
        public boolean hasTableSizeMb() {
          return tableSizeMbBuilder_ != null || tableSizeMb_ != null;
        }
        /**
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
         */
        public io.dstore.Values.decimalValue getTableSizeMb() {
          if (tableSizeMbBuilder_ == null) {
            return tableSizeMb_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : tableSizeMb_;
          } else {
            return tableSizeMbBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
         */
        public Builder setTableSizeMb(io.dstore.Values.decimalValue value) {
          if (tableSizeMbBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            tableSizeMb_ = value;
            onChanged();
          } else {
            tableSizeMbBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
         */
        public Builder setTableSizeMb(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (tableSizeMbBuilder_ == null) {
            tableSizeMb_ = builderForValue.build();
            onChanged();
          } else {
            tableSizeMbBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
         */
        public Builder mergeTableSizeMb(io.dstore.Values.decimalValue value) {
          if (tableSizeMbBuilder_ == null) {
            if (tableSizeMb_ != null) {
              tableSizeMb_ =
                io.dstore.Values.decimalValue.newBuilder(tableSizeMb_).mergeFrom(value).buildPartial();
            } else {
              tableSizeMb_ = value;
            }
            onChanged();
          } else {
            tableSizeMbBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
         */
        public Builder clearTableSizeMb() {
          if (tableSizeMbBuilder_ == null) {
            tableSizeMb_ = null;
            onChanged();
          } else {
            tableSizeMb_ = null;
            tableSizeMbBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
         */
        public io.dstore.Values.decimalValue.Builder getTableSizeMbBuilder() {
          
          onChanged();
          return getTableSizeMbFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getTableSizeMbOrBuilder() {
          if (tableSizeMbBuilder_ != null) {
            return tableSizeMbBuilder_.getMessageOrBuilder();
          } else {
            return tableSizeMb_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : tableSizeMb_;
          }
        }
        /**
         * <pre>
         * Gesamte Größe der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue table_size_mb = 10005;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getTableSizeMbFieldBuilder() {
          if (tableSizeMbBuilder_ == null) {
            tableSizeMbBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getTableSizeMb(),
                    getParentForChildren(),
                    isClean());
            tableSizeMb_ = null;
          }
          return tableSizeMbBuilder_;
        }

        private io.dstore.Values.decimalValue dataSizeMb_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> dataSizeMbBuilder_;
        /**
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
         */
        public boolean hasDataSizeMb() {
          return dataSizeMbBuilder_ != null || dataSizeMb_ != null;
        }
        /**
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
         */
        public io.dstore.Values.decimalValue getDataSizeMb() {
          if (dataSizeMbBuilder_ == null) {
            return dataSizeMb_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : dataSizeMb_;
          } else {
            return dataSizeMbBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
         */
        public Builder setDataSizeMb(io.dstore.Values.decimalValue value) {
          if (dataSizeMbBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            dataSizeMb_ = value;
            onChanged();
          } else {
            dataSizeMbBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
         */
        public Builder setDataSizeMb(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (dataSizeMbBuilder_ == null) {
            dataSizeMb_ = builderForValue.build();
            onChanged();
          } else {
            dataSizeMbBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
         */
        public Builder mergeDataSizeMb(io.dstore.Values.decimalValue value) {
          if (dataSizeMbBuilder_ == null) {
            if (dataSizeMb_ != null) {
              dataSizeMb_ =
                io.dstore.Values.decimalValue.newBuilder(dataSizeMb_).mergeFrom(value).buildPartial();
            } else {
              dataSizeMb_ = value;
            }
            onChanged();
          } else {
            dataSizeMbBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
         */
        public Builder clearDataSizeMb() {
          if (dataSizeMbBuilder_ == null) {
            dataSizeMb_ = null;
            onChanged();
          } else {
            dataSizeMb_ = null;
            dataSizeMbBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
         */
        public io.dstore.Values.decimalValue.Builder getDataSizeMbBuilder() {
          
          onChanged();
          return getDataSizeMbFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getDataSizeMbOrBuilder() {
          if (dataSizeMbBuilder_ != null) {
            return dataSizeMbBuilder_.getMessageOrBuilder();
          } else {
            return dataSizeMb_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : dataSizeMb_;
          }
        }
        /**
         * <pre>
         * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue data_size_mb = 10006;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getDataSizeMbFieldBuilder() {
          if (dataSizeMbBuilder_ == null) {
            dataSizeMbBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getDataSizeMb(),
                    getParentForChildren(),
                    isClean());
            dataSizeMb_ = null;
          }
          return dataSizeMbBuilder_;
        }

        private io.dstore.Values.decimalValue mballocated_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> mballocatedBuilder_;
        /**
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
         */
        public boolean hasMballocated() {
          return mballocatedBuilder_ != null || mballocated_ != null;
        }
        /**
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
         */
        public io.dstore.Values.decimalValue getMballocated() {
          if (mballocatedBuilder_ == null) {
            return mballocated_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : mballocated_;
          } else {
            return mballocatedBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
         */
        public Builder setMballocated(io.dstore.Values.decimalValue value) {
          if (mballocatedBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            mballocated_ = value;
            onChanged();
          } else {
            mballocatedBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
         */
        public Builder setMballocated(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (mballocatedBuilder_ == null) {
            mballocated_ = builderForValue.build();
            onChanged();
          } else {
            mballocatedBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
         */
        public Builder mergeMballocated(io.dstore.Values.decimalValue value) {
          if (mballocatedBuilder_ == null) {
            if (mballocated_ != null) {
              mballocated_ =
                io.dstore.Values.decimalValue.newBuilder(mballocated_).mergeFrom(value).buildPartial();
            } else {
              mballocated_ = value;
            }
            onChanged();
          } else {
            mballocatedBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
         */
        public Builder clearMballocated() {
          if (mballocatedBuilder_ == null) {
            mballocated_ = null;
            onChanged();
          } else {
            mballocated_ = null;
            mballocatedBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
         */
        public io.dstore.Values.decimalValue.Builder getMballocatedBuilder() {
          
          onChanged();
          return getMballocatedFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getMballocatedOrBuilder() {
          if (mballocatedBuilder_ != null) {
            return mballocatedBuilder_.getMessageOrBuilder();
          } else {
            return mballocated_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : mballocated_;
          }
        }
        /**
         * <pre>
         * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mballocated = 20001;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getMballocatedFieldBuilder() {
          if (mballocatedBuilder_ == null) {
            mballocatedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getMballocated(),
                    getParentForChildren(),
                    isClean());
            mballocated_ = null;
          }
          return mballocatedBuilder_;
        }

        private io.dstore.Values.stringValue segmentName_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> segmentNameBuilder_;
        /**
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
         */
        public boolean hasSegmentName() {
          return segmentNameBuilder_ != null || segmentName_ != null;
        }
        /**
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
         */
        public io.dstore.Values.stringValue getSegmentName() {
          if (segmentNameBuilder_ == null) {
            return segmentName_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : segmentName_;
          } else {
            return segmentNameBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
         */
        public Builder setSegmentName(io.dstore.Values.stringValue value) {
          if (segmentNameBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            segmentName_ = value;
            onChanged();
          } else {
            segmentNameBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
         */
        public Builder setSegmentName(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (segmentNameBuilder_ == null) {
            segmentName_ = builderForValue.build();
            onChanged();
          } else {
            segmentNameBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
         */
        public Builder mergeSegmentName(io.dstore.Values.stringValue value) {
          if (segmentNameBuilder_ == null) {
            if (segmentName_ != null) {
              segmentName_ =
                io.dstore.Values.stringValue.newBuilder(segmentName_).mergeFrom(value).buildPartial();
            } else {
              segmentName_ = value;
            }
            onChanged();
          } else {
            segmentNameBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
         */
        public Builder clearSegmentName() {
          if (segmentNameBuilder_ == null) {
            segmentName_ = null;
            onChanged();
          } else {
            segmentName_ = null;
            segmentNameBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
         */
        public io.dstore.Values.stringValue.Builder getSegmentNameBuilder() {
          
          onChanged();
          return getSegmentNameFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
         */
        public io.dstore.Values.stringValueOrBuilder getSegmentNameOrBuilder() {
          if (segmentNameBuilder_ != null) {
            return segmentNameBuilder_.getMessageOrBuilder();
          } else {
            return segmentName_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : segmentName_;
          }
        }
        /**
         * <pre>
         * Name eines Segments in der Datenbank "DBName"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue segment_name = 20002;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getSegmentNameFieldBuilder() {
          if (segmentNameBuilder_ == null) {
            segmentNameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getSegmentName(),
                    getParentForChildren(),
                    isClean());
            segmentName_ = null;
          }
          return segmentNameBuilder_;
        }

        private io.dstore.Values.decimalValue mbused_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> mbusedBuilder_;
        /**
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
         */
        public boolean hasMbused() {
          return mbusedBuilder_ != null || mbused_ != null;
        }
        /**
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
         */
        public io.dstore.Values.decimalValue getMbused() {
          if (mbusedBuilder_ == null) {
            return mbused_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : mbused_;
          } else {
            return mbusedBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
         */
        public Builder setMbused(io.dstore.Values.decimalValue value) {
          if (mbusedBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            mbused_ = value;
            onChanged();
          } else {
            mbusedBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
         */
        public Builder setMbused(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (mbusedBuilder_ == null) {
            mbused_ = builderForValue.build();
            onChanged();
          } else {
            mbusedBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
         */
        public Builder mergeMbused(io.dstore.Values.decimalValue value) {
          if (mbusedBuilder_ == null) {
            if (mbused_ != null) {
              mbused_ =
                io.dstore.Values.decimalValue.newBuilder(mbused_).mergeFrom(value).buildPartial();
            } else {
              mbused_ = value;
            }
            onChanged();
          } else {
            mbusedBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
         */
        public Builder clearMbused() {
          if (mbusedBuilder_ == null) {
            mbused_ = null;
            onChanged();
          } else {
            mbused_ = null;
            mbusedBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
         */
        public io.dstore.Values.decimalValue.Builder getMbusedBuilder() {
          
          onChanged();
          return getMbusedFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getMbusedOrBuilder() {
          if (mbusedBuilder_ != null) {
            return mbusedBuilder_.getMessageOrBuilder();
          } else {
            return mbused_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : mbused_;
          }
        }
        /**
         * <pre>
         * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbused = 20003;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getMbusedFieldBuilder() {
          if (mbusedBuilder_ == null) {
            mbusedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getMbused(),
                    getParentForChildren(),
                    isClean());
            mbused_ = null;
          }
          return mbusedBuilder_;
        }

        private io.dstore.Values.decimalValue freeSpaceInPercent_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> freeSpaceInPercentBuilder_;
        /**
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
         */
        public boolean hasFreeSpaceInPercent() {
          return freeSpaceInPercentBuilder_ != null || freeSpaceInPercent_ != null;
        }
        /**
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
         */
        public io.dstore.Values.decimalValue getFreeSpaceInPercent() {
          if (freeSpaceInPercentBuilder_ == null) {
            return freeSpaceInPercent_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : freeSpaceInPercent_;
          } else {
            return freeSpaceInPercentBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
         */
        public Builder setFreeSpaceInPercent(io.dstore.Values.decimalValue value) {
          if (freeSpaceInPercentBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            freeSpaceInPercent_ = value;
            onChanged();
          } else {
            freeSpaceInPercentBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
         */
        public Builder setFreeSpaceInPercent(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (freeSpaceInPercentBuilder_ == null) {
            freeSpaceInPercent_ = builderForValue.build();
            onChanged();
          } else {
            freeSpaceInPercentBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
         */
        public Builder mergeFreeSpaceInPercent(io.dstore.Values.decimalValue value) {
          if (freeSpaceInPercentBuilder_ == null) {
            if (freeSpaceInPercent_ != null) {
              freeSpaceInPercent_ =
                io.dstore.Values.decimalValue.newBuilder(freeSpaceInPercent_).mergeFrom(value).buildPartial();
            } else {
              freeSpaceInPercent_ = value;
            }
            onChanged();
          } else {
            freeSpaceInPercentBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
         */
        public Builder clearFreeSpaceInPercent() {
          if (freeSpaceInPercentBuilder_ == null) {
            freeSpaceInPercent_ = null;
            onChanged();
          } else {
            freeSpaceInPercent_ = null;
            freeSpaceInPercentBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
         */
        public io.dstore.Values.decimalValue.Builder getFreeSpaceInPercentBuilder() {
          
          onChanged();
          return getFreeSpaceInPercentFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getFreeSpaceInPercentOrBuilder() {
          if (freeSpaceInPercentBuilder_ != null) {
            return freeSpaceInPercentBuilder_.getMessageOrBuilder();
          } else {
            return freeSpaceInPercent_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : freeSpaceInPercent_;
          }
        }
        /**
         * <pre>
         * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue free_space_in_percent = 20004;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getFreeSpaceInPercentFieldBuilder() {
          if (freeSpaceInPercentBuilder_ == null) {
            freeSpaceInPercentBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getFreeSpaceInPercent(),
                    getParentForChildren(),
                    isClean());
            freeSpaceInPercent_ = null;
          }
          return freeSpaceInPercentBuilder_;
        }

        private io.dstore.Values.stringValue dBName_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> dBNameBuilder_;
        /**
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         *
         * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
         */
        public boolean hasDBName() {
          return dBNameBuilder_ != null || dBName_ != null;
        }
        /**
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         *
         * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
         */
        public io.dstore.Values.stringValue getDBName() {
          if (dBNameBuilder_ == null) {
            return dBName_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : dBName_;
          } else {
            return dBNameBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         *
         * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
         */
        public Builder setDBName(io.dstore.Values.stringValue value) {
          if (dBNameBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            dBName_ = value;
            onChanged();
          } else {
            dBNameBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         *
         * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
         */
        public Builder setDBName(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (dBNameBuilder_ == null) {
            dBName_ = builderForValue.build();
            onChanged();
          } else {
            dBNameBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         *
         * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
         */
        public Builder mergeDBName(io.dstore.Values.stringValue value) {
          if (dBNameBuilder_ == null) {
            if (dBName_ != null) {
              dBName_ =
                io.dstore.Values.stringValue.newBuilder(dBName_).mergeFrom(value).buildPartial();
            } else {
              dBName_ = value;
            }
            onChanged();
          } else {
            dBNameBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         *
         * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
         */
        public Builder clearDBName() {
          if (dBNameBuilder_ == null) {
            dBName_ = null;
            onChanged();
          } else {
            dBName_ = null;
            dBNameBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         *
         * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
         */
        public io.dstore.Values.stringValue.Builder getDBNameBuilder() {
          
          onChanged();
          return getDBNameFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         *
         * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
         */
        public io.dstore.Values.stringValueOrBuilder getDBNameOrBuilder() {
          if (dBNameBuilder_ != null) {
            return dBNameBuilder_.getMessageOrBuilder();
          } else {
            return dBName_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : dBName_;
          }
        }
        /**
         * <pre>
         * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
         * </pre>
         *
         * <code>optional .dstore.values.stringValue d_b_name = 20005;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getDBNameFieldBuilder() {
          if (dBNameBuilder_ == null) {
            dBNameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getDBName(),
                    getParentForChildren(),
                    isClean());
            dBName_ = null;
          }
          return dBNameBuilder_;
        }

        private io.dstore.Values.decimalValue mbfree_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> mbfreeBuilder_;
        /**
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
         */
        public boolean hasMbfree() {
          return mbfreeBuilder_ != null || mbfree_ != null;
        }
        /**
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
         */
        public io.dstore.Values.decimalValue getMbfree() {
          if (mbfreeBuilder_ == null) {
            return mbfree_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : mbfree_;
          } else {
            return mbfreeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
         */
        public Builder setMbfree(io.dstore.Values.decimalValue value) {
          if (mbfreeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            mbfree_ = value;
            onChanged();
          } else {
            mbfreeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
         */
        public Builder setMbfree(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (mbfreeBuilder_ == null) {
            mbfree_ = builderForValue.build();
            onChanged();
          } else {
            mbfreeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
         */
        public Builder mergeMbfree(io.dstore.Values.decimalValue value) {
          if (mbfreeBuilder_ == null) {
            if (mbfree_ != null) {
              mbfree_ =
                io.dstore.Values.decimalValue.newBuilder(mbfree_).mergeFrom(value).buildPartial();
            } else {
              mbfree_ = value;
            }
            onChanged();
          } else {
            mbfreeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
         */
        public Builder clearMbfree() {
          if (mbfreeBuilder_ == null) {
            mbfree_ = null;
            onChanged();
          } else {
            mbfree_ = null;
            mbfreeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
         */
        public io.dstore.Values.decimalValue.Builder getMbfreeBuilder() {
          
          onChanged();
          return getMbfreeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getMbfreeOrBuilder() {
          if (mbfreeBuilder_ != null) {
            return mbfreeBuilder_.getMessageOrBuilder();
          } else {
            return mbfree_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : mbfree_;
          }
        }
        /**
         * <pre>
         * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue mbfree = 20006;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getMbfreeFieldBuilder() {
          if (mbfreeBuilder_ == null) {
            mbfreeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getMbfree(),
                    getParentForChildren(),
                    isClean());
            mbfree_ = null;
          }
          return mbfreeBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row)
      }

      // @@protoc_insertion_point(class_scope:dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row)
      private static final io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row();
      }

      public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Row>
          PARSER = new com.google.protobuf.AbstractParser<Row>() {
        public Row parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new Row(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Row> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Row> getParserForType() {
        return PARSER;
      }

      public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int META_INFORMATION_FIELD_NUMBER = 2;
    private java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> metaInformation_;
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> getMetaInformationList() {
      return metaInformation_;
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
        getMetaInformationOrBuilderList() {
      return metaInformation_;
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public int getMetaInformationCount() {
      return metaInformation_.size();
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index) {
      return metaInformation_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
        int index) {
      return metaInformation_.get(index);
    }

    public static final int MESSAGE_FIELD_NUMBER = 3;
    private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_;
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public int getMessageCount() {
      return message_.size();
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
      return message_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index) {
      return message_.get(index);
    }

    public static final int ROW_FIELD_NUMBER = 4;
    private java.util.List<io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row> row_;
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     */
    public java.util.List<io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row> getRowList() {
      return row_;
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     */
    public java.util.List<? extends io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.RowOrBuilder> 
        getRowOrBuilderList() {
      return row_;
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     */
    public int getRowCount() {
      return row_.size();
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     */
    public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row getRow(int index) {
      return row_.get(index);
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
     */
    public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.RowOrBuilder getRowOrBuilder(
        int index) {
      return row_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < metaInformation_.size(); i++) {
        output.writeMessage(2, metaInformation_.get(i));
      }
      for (int i = 0; i < message_.size(); i++) {
        output.writeMessage(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        output.writeMessage(4, row_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < metaInformation_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, metaInformation_.get(i));
      }
      for (int i = 0; i < message_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, row_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.mi_GetStorageAllocInfo_Ad.Response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.mi_GetStorageAllocInfo_Ad.Response)
        io.dstore.engine.procedures.MiGetStorageAllocInfoAd.ResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.class, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Builder.class);
      }

      // Construct using io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMetaInformationFieldBuilder();
          getMessageFieldBuilder();
          getRowFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (metaInformationBuilder_ == null) {
          metaInformation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          metaInformationBuilder_.clear();
        }
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          messageBuilder_.clear();
        }
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          rowBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_descriptor;
      }

      public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response getDefaultInstanceForType() {
        return io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.getDefaultInstance();
      }

      public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response build() {
        io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response buildPartial() {
        io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response result = new io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response(this);
        int from_bitField0_ = bitField0_;
        if (metaInformationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            metaInformation_ = java.util.Collections.unmodifiableList(metaInformation_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.metaInformation_ = metaInformation_;
        } else {
          result.metaInformation_ = metaInformationBuilder_.build();
        }
        if (messageBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            message_ = java.util.Collections.unmodifiableList(message_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.message_ = message_;
        } else {
          result.message_ = messageBuilder_.build();
        }
        if (rowBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            row_ = java.util.Collections.unmodifiableList(row_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.row_ = row_;
        } else {
          result.row_ = rowBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response) {
          return mergeFrom((io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response other) {
        if (other == io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.getDefaultInstance()) return this;
        if (metaInformationBuilder_ == null) {
          if (!other.metaInformation_.isEmpty()) {
            if (metaInformation_.isEmpty()) {
              metaInformation_ = other.metaInformation_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMetaInformationIsMutable();
              metaInformation_.addAll(other.metaInformation_);
            }
            onChanged();
          }
        } else {
          if (!other.metaInformation_.isEmpty()) {
            if (metaInformationBuilder_.isEmpty()) {
              metaInformationBuilder_.dispose();
              metaInformationBuilder_ = null;
              metaInformation_ = other.metaInformation_;
              bitField0_ = (bitField0_ & ~0x00000001);
              metaInformationBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMetaInformationFieldBuilder() : null;
            } else {
              metaInformationBuilder_.addAllMessages(other.metaInformation_);
            }
          }
        }
        if (messageBuilder_ == null) {
          if (!other.message_.isEmpty()) {
            if (message_.isEmpty()) {
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMessageIsMutable();
              message_.addAll(other.message_);
            }
            onChanged();
          }
        } else {
          if (!other.message_.isEmpty()) {
            if (messageBuilder_.isEmpty()) {
              messageBuilder_.dispose();
              messageBuilder_ = null;
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
              messageBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMessageFieldBuilder() : null;
            } else {
              messageBuilder_.addAllMessages(other.message_);
            }
          }
        }
        if (rowBuilder_ == null) {
          if (!other.row_.isEmpty()) {
            if (row_.isEmpty()) {
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureRowIsMutable();
              row_.addAll(other.row_);
            }
            onChanged();
          }
        } else {
          if (!other.row_.isEmpty()) {
            if (rowBuilder_.isEmpty()) {
              rowBuilder_.dispose();
              rowBuilder_ = null;
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
              rowBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRowFieldBuilder() : null;
            } else {
              rowBuilder_.addAllMessages(other.row_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> metaInformation_ =
        java.util.Collections.emptyList();
      private void ensureMetaInformationIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          metaInformation_ = new java.util.ArrayList<io.dstore.engine.EngineMetaInformation.MetaInformation>(metaInformation_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> metaInformationBuilder_;

      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> getMetaInformationList() {
        if (metaInformationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(metaInformation_);
        } else {
          return metaInformationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public int getMetaInformationCount() {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.size();
        } else {
          return metaInformationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index) {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.get(index);
        } else {
          return metaInformationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder setMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.set(index, value);
          onChanged();
        } else {
          metaInformationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder setMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.set(index, builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.add(value);
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.add(index, value);
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.add(builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.add(index, builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addAllMetaInformation(
          java.lang.Iterable<? extends io.dstore.engine.EngineMetaInformation.MetaInformation> values) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, metaInformation_);
          onChanged();
        } else {
          metaInformationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder clearMetaInformation() {
        if (metaInformationBuilder_ == null) {
          metaInformation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          metaInformationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder removeMetaInformation(int index) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.remove(index);
          onChanged();
        } else {
          metaInformationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder getMetaInformationBuilder(
          int index) {
        return getMetaInformationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
          int index) {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.get(index);  } else {
          return metaInformationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
           getMetaInformationOrBuilderList() {
        if (metaInformationBuilder_ != null) {
          return metaInformationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(metaInformation_);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder addMetaInformationBuilder() {
        return getMetaInformationFieldBuilder().addBuilder(
            io.dstore.engine.EngineMetaInformation.MetaInformation.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder addMetaInformationBuilder(
          int index) {
        return getMetaInformationFieldBuilder().addBuilder(
            index, io.dstore.engine.EngineMetaInformation.MetaInformation.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation.Builder> 
           getMetaInformationBuilderList() {
        return getMetaInformationFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
          getMetaInformationFieldBuilder() {
        if (metaInformationBuilder_ == null) {
          metaInformationBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder>(
                  metaInformation_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          metaInformation_ = null;
        }
        return metaInformationBuilder_;
      }

      private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_ =
        java.util.Collections.emptyList();
      private void ensureMessageIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>(message_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> messageBuilder_;

      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
        if (messageBuilder_ == null) {
          return java.util.Collections.unmodifiableList(message_);
        } else {
          return messageBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public int getMessageCount() {
        if (messageBuilder_ == null) {
          return message_.size();
        } else {
          return messageBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);
        } else {
          return messageBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.set(index, value);
          onChanged();
        } else {
          messageBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.set(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(value);
          onChanged();
        } else {
          messageBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(index, value);
          onChanged();
        } else {
          messageBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addAllMessage(
          java.lang.Iterable<? extends io.dstore.engine.ProcedureMessage.Message> values) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, message_);
          onChanged();
        } else {
          messageBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder clearMessage() {
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          messageBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder removeMessage(int index) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.remove(index);
          onChanged();
        } else {
          messageBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder getMessageBuilder(
          int index) {
        return getMessageFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
          int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);  } else {
          return messageBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
           getMessageOrBuilderList() {
        if (messageBuilder_ != null) {
          return messageBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(message_);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder() {
        return getMessageFieldBuilder().addBuilder(
            io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder(
          int index) {
        return getMessageFieldBuilder().addBuilder(
            index, io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message.Builder> 
           getMessageBuilderList() {
        return getMessageFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
          getMessageFieldBuilder() {
        if (messageBuilder_ == null) {
          messageBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder>(
                  message_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        return messageBuilder_;
      }

      private java.util.List<io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row> row_ =
        java.util.Collections.emptyList();
      private void ensureRowIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = new java.util.ArrayList<io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row>(row_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.Builder, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.RowOrBuilder> rowBuilder_;

      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public java.util.List<io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row> getRowList() {
        if (rowBuilder_ == null) {
          return java.util.Collections.unmodifiableList(row_);
        } else {
          return rowBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public int getRowCount() {
        if (rowBuilder_ == null) {
          return row_.size();
        } else {
          return rowBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row getRow(int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);
        } else {
          return rowBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public Builder setRow(
          int index, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.set(index, value);
          onChanged();
        } else {
          rowBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public Builder setRow(
          int index, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.set(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public Builder addRow(io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(value);
          onChanged();
        } else {
          rowBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public Builder addRow(
          int index, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(index, value);
          onChanged();
        } else {
          rowBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public Builder addRow(
          io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public Builder addRow(
          int index, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public Builder addAllRow(
          java.lang.Iterable<? extends io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row> values) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, row_);
          onChanged();
        } else {
          rowBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public Builder clearRow() {
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          rowBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public Builder removeRow(int index) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.remove(index);
          onChanged();
        } else {
          rowBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.Builder getRowBuilder(
          int index) {
        return getRowFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.RowOrBuilder getRowOrBuilder(
          int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);  } else {
          return rowBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public java.util.List<? extends io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.RowOrBuilder> 
           getRowOrBuilderList() {
        if (rowBuilder_ != null) {
          return rowBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(row_);
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.Builder addRowBuilder() {
        return getRowFieldBuilder().addBuilder(
            io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.getDefaultInstance());
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.Builder addRowBuilder(
          int index) {
        return getRowFieldBuilder().addBuilder(
            index, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.getDefaultInstance());
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row row = 4;</code>
       */
      public java.util.List<io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.Builder> 
           getRowBuilderList() {
        return getRowFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.Builder, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.RowOrBuilder> 
          getRowFieldBuilder() {
        if (rowBuilder_ == null) {
          rowBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.Row.Builder, io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response.RowOrBuilder>(
                  row_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          row_ = null;
        }
        return rowBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.mi_GetStorageAllocInfo_Ad.Response)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.mi_GetStorageAllocInfo_Ad.Response)
    private static final io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response();
    }

    public static io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Response>
        PARSER = new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Response(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Response> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procedures.MiGetStorageAllocInfoAd.Response getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n8dstore/engine/procedures/mi_GetStorage" +
      "AllocInfo_Ad.proto\022\'dstore.engine.mi_Get" +
      "StorageAllocInfo_Ad\032\023dstore/values.proto" +
      "\032\033dstore/engine/message.proto\032#dstore/en" +
      "gine/metainformation.proto\"\333\001\n\nParameter" +
      "s\022<\n\027get_info_for_a_database\030\001 \001(\0132\033.dst" +
      "ore.values.booleanValue\022%\n\034get_info_for_" +
      "a_database_null\030\351\007 \001(\010\022>\n\032get_storage_al" +
      "loc_info_for\030\002 \001(\0132\032.dstore.values.strin" +
      "gValue\022(\n\037get_storage_alloc_info_for_nul",
      "l\030\352\007 \001(\010\"\324\006\n\010Response\022H\n\020meta_informatio" +
      "n\030\002 \003(\0132..dstore.engine.metainformation." +
      "MetaInformation\022/\n\007message\030\003 \003(\0132\036.dstor" +
      "e.engine.message.Message\022B\n\003row\030\004 \003(\01325." +
      "dstore.engine.mi_GetStorageAllocInfo_Ad." +
      "Response.Row\032\210\005\n\003Row\022\017\n\006row_id\030\220N \001(\005\022/\n" +
      "\ntable_name\030\221N \001(\0132\032.dstore.values.strin" +
      "gValue\0223\n\rindex_size_mb\030\222N \001(\0132\033.dstore." +
      "values.decimalValue\0227\n\021number_of_indexes" +
      "\030\223N \001(\0132\033.dstore.values.integerValue\0224\n\016",
      "number_of_rows\030\224N \001(\0132\033.dstore.values.in" +
      "tegerValue\0223\n\rtable_size_mb\030\225N \001(\0132\033.dst" +
      "ore.values.decimalValue\0222\n\014data_size_mb\030" +
      "\226N \001(\0132\033.dstore.values.decimalValue\0222\n\013m" +
      "ballocated\030\241\234\001 \001(\0132\033.dstore.values.decim" +
      "alValue\0222\n\014segment_name\030\242\234\001 \001(\0132\032.dstore" +
      ".values.stringValue\022-\n\006mbused\030\243\234\001 \001(\0132\033." +
      "dstore.values.decimalValue\022<\n\025free_space" +
      "_in_percent\030\244\234\001 \001(\0132\033.dstore.values.deci" +
      "malValue\022.\n\010d_b_name\030\245\234\001 \001(\0132\032.dstore.va",
      "lues.stringValue\022-\n\006mbfree\030\246\234\001 \001(\0132\033.dst" +
      "ore.values.decimalValueBZ\n\033io.dstore.eng" +
      "ine.proceduresZ;gosdk.dstore.de/engine/p" +
      "rocedures/mi_GetStorageAllocInfo_Adb\006pro" +
      "to3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.dstore.Values.getDescriptor(),
          io.dstore.engine.ProcedureMessage.getDescriptor(),
          io.dstore.engine.EngineMetaInformation.getDescriptor(),
        }, assigner);
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Parameters_descriptor,
        new java.lang.String[] { "GetInfoForADatabase", "GetInfoForADatabaseNull", "GetStorageAllocInfoFor", "GetStorageAllocInfoForNull", });
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_descriptor,
        new java.lang.String[] { "MetaInformation", "Message", "Row", });
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_descriptor =
      internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_descriptor.getNestedTypes().get(0);
    internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dstore_engine_mi_GetStorageAllocInfo_Ad_Response_Row_descriptor,
        new java.lang.String[] { "RowId", "TableName", "IndexSizeMb", "NumberOfIndexes", "NumberOfRows", "TableSizeMb", "DataSizeMb", "Mballocated", "SegmentName", "Mbused", "FreeSpaceInPercent", "DBName", "Mbfree", });
    io.dstore.Values.getDescriptor();
    io.dstore.engine.ProcedureMessage.getDescriptor();
    io.dstore.engine.EngineMetaInformation.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
