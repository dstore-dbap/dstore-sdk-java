// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dstore/engine/procedures/om_GetPrices_Pu.proto

package io.dstore.engine.procedures;

public final class OmGetPricesPu {
  private OmGetPricesPu() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ParametersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetPrices_Pu.Parameters)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.values.stringValue node_ids = 1;</code>
     */
    boolean hasNodeIds();
    /**
     * <code>optional .dstore.values.stringValue node_ids = 1;</code>
     */
    io.dstore.Values.stringValue getNodeIds();
    /**
     * <code>optional .dstore.values.stringValue node_ids = 1;</code>
     */
    io.dstore.Values.stringValueOrBuilder getNodeIdsOrBuilder();

    /**
     * <code>optional bool node_ids_null = 1001;</code>
     */
    boolean getNodeIdsNull();

    /**
     * <code>optional .dstore.values.stringValue quantities = 2;</code>
     */
    boolean hasQuantities();
    /**
     * <code>optional .dstore.values.stringValue quantities = 2;</code>
     */
    io.dstore.Values.stringValue getQuantities();
    /**
     * <code>optional .dstore.values.stringValue quantities = 2;</code>
     */
    io.dstore.Values.stringValueOrBuilder getQuantitiesOrBuilder();

    /**
     * <code>optional bool quantities_null = 1002;</code>
     */
    boolean getQuantitiesNull();

    /**
     * <code>optional .dstore.values.integerValue person_id = 3;</code>
     */
    boolean hasPersonId();
    /**
     * <code>optional .dstore.values.integerValue person_id = 3;</code>
     */
    io.dstore.Values.integerValue getPersonId();
    /**
     * <code>optional .dstore.values.integerValue person_id = 3;</code>
     */
    io.dstore.Values.integerValueOrBuilder getPersonIdOrBuilder();

    /**
     * <code>optional bool person_id_null = 1003;</code>
     */
    boolean getPersonIdNull();

    /**
     * <code>optional .dstore.values.integerValue currency_id = 4;</code>
     */
    boolean hasCurrencyId();
    /**
     * <code>optional .dstore.values.integerValue currency_id = 4;</code>
     */
    io.dstore.Values.integerValue getCurrencyId();
    /**
     * <code>optional .dstore.values.integerValue currency_id = 4;</code>
     */
    io.dstore.Values.integerValueOrBuilder getCurrencyIdOrBuilder();

    /**
     * <code>optional bool currency_id_null = 1004;</code>
     */
    boolean getCurrencyIdNull();

    /**
     * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
     */
    boolean hasIsTreeNodeId();
    /**
     * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
     */
    io.dstore.Values.booleanValue getIsTreeNodeId();
    /**
     * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
     */
    io.dstore.Values.booleanValueOrBuilder getIsTreeNodeIdOrBuilder();

    /**
     * <code>optional bool is_tree_node_id_null = 1005;</code>
     */
    boolean getIsTreeNodeIdNull();

    /**
     * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
     */
    boolean hasPriceNodeCharacteristicId();
    /**
     * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
     */
    io.dstore.Values.integerValue getPriceNodeCharacteristicId();
    /**
     * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
     */
    io.dstore.Values.integerValueOrBuilder getPriceNodeCharacteristicIdOrBuilder();

    /**
     * <code>optional bool price_node_characteristic_id_null = 1006;</code>
     */
    boolean getPriceNodeCharacteristicIdNull();

    /**
     * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
     */
    boolean hasComputeSum();
    /**
     * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
     */
    io.dstore.Values.booleanValue getComputeSum();
    /**
     * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
     */
    io.dstore.Values.booleanValueOrBuilder getComputeSumOrBuilder();

    /**
     * <code>optional bool compute_sum_null = 1007;</code>
     */
    boolean getComputeSumNull();

    /**
     * <code>optional .dstore.values.stringValue unique_id = 8;</code>
     */
    boolean hasUniqueId();
    /**
     * <code>optional .dstore.values.stringValue unique_id = 8;</code>
     */
    io.dstore.Values.stringValue getUniqueId();
    /**
     * <code>optional .dstore.values.stringValue unique_id = 8;</code>
     */
    io.dstore.Values.stringValueOrBuilder getUniqueIdOrBuilder();

    /**
     * <code>optional bool unique_id_null = 1008;</code>
     */
    boolean getUniqueIdNull();

    /**
     * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
     */
    boolean hasGetAdditionalPriceInfo();
    /**
     * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
     */
    io.dstore.Values.booleanValue getGetAdditionalPriceInfo();
    /**
     * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
     */
    io.dstore.Values.booleanValueOrBuilder getGetAdditionalPriceInfoOrBuilder();

    /**
     * <code>optional bool get_additional_price_info_null = 1009;</code>
     */
    boolean getGetAdditionalPriceInfoNull();

    /**
     * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
     */
    boolean hasDeliveryPersonId();
    /**
     * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
     */
    io.dstore.Values.integerValue getDeliveryPersonId();
    /**
     * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
     */
    io.dstore.Values.integerValueOrBuilder getDeliveryPersonIdOrBuilder();

    /**
     * <code>optional bool delivery_person_id_null = 1010;</code>
     */
    boolean getDeliveryPersonIdNull();

    /**
     * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
     */
    boolean hasGetPricePerSingleNodeId();
    /**
     * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
     */
    io.dstore.Values.booleanValue getGetPricePerSingleNodeId();
    /**
     * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
     */
    io.dstore.Values.booleanValueOrBuilder getGetPricePerSingleNodeIdOrBuilder();

    /**
     * <code>optional bool get_price_per_single_node_id_null = 1011;</code>
     */
    boolean getGetPricePerSingleNodeIdNull();

    /**
     * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
     */
    boolean hasPaymentTypeId();
    /**
     * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
     */
    io.dstore.Values.integerValue getPaymentTypeId();
    /**
     * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
     */
    io.dstore.Values.integerValueOrBuilder getPaymentTypeIdOrBuilder();

    /**
     * <code>optional bool payment_type_id_null = 1012;</code>
     */
    boolean getPaymentTypeIdNull();

    /**
     * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
     */
    boolean hasShippingTypeId();
    /**
     * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
     */
    io.dstore.Values.integerValue getShippingTypeId();
    /**
     * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
     */
    io.dstore.Values.integerValueOrBuilder getShippingTypeIdOrBuilder();

    /**
     * <code>optional bool shipping_type_id_null = 1013;</code>
     */
    boolean getShippingTypeIdNull();
  }
  /**
   * Protobuf type {@code dstore.engine.om_GetPrices_Pu.Parameters}
   */
  public  static final class Parameters extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dstore.engine.om_GetPrices_Pu.Parameters)
      ParametersOrBuilder {
    // Use Parameters.newBuilder() to construct.
    private Parameters(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Parameters() {
      nodeIdsNull_ = false;
      quantitiesNull_ = false;
      personIdNull_ = false;
      currencyIdNull_ = false;
      isTreeNodeIdNull_ = false;
      priceNodeCharacteristicIdNull_ = false;
      computeSumNull_ = false;
      uniqueIdNull_ = false;
      getAdditionalPriceInfoNull_ = false;
      deliveryPersonIdNull_ = false;
      getPricePerSingleNodeIdNull_ = false;
      paymentTypeIdNull_ = false;
      shippingTypeIdNull_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Parameters(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.Values.stringValue.Builder subBuilder = null;
              if (nodeIds_ != null) {
                subBuilder = nodeIds_.toBuilder();
              }
              nodeIds_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(nodeIds_);
                nodeIds_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.dstore.Values.stringValue.Builder subBuilder = null;
              if (quantities_ != null) {
                subBuilder = quantities_.toBuilder();
              }
              quantities_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(quantities_);
                quantities_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.dstore.Values.integerValue.Builder subBuilder = null;
              if (personId_ != null) {
                subBuilder = personId_.toBuilder();
              }
              personId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(personId_);
                personId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              io.dstore.Values.integerValue.Builder subBuilder = null;
              if (currencyId_ != null) {
                subBuilder = currencyId_.toBuilder();
              }
              currencyId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(currencyId_);
                currencyId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              io.dstore.Values.booleanValue.Builder subBuilder = null;
              if (isTreeNodeId_ != null) {
                subBuilder = isTreeNodeId_.toBuilder();
              }
              isTreeNodeId_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(isTreeNodeId_);
                isTreeNodeId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              io.dstore.Values.integerValue.Builder subBuilder = null;
              if (priceNodeCharacteristicId_ != null) {
                subBuilder = priceNodeCharacteristicId_.toBuilder();
              }
              priceNodeCharacteristicId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(priceNodeCharacteristicId_);
                priceNodeCharacteristicId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              io.dstore.Values.booleanValue.Builder subBuilder = null;
              if (computeSum_ != null) {
                subBuilder = computeSum_.toBuilder();
              }
              computeSum_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(computeSum_);
                computeSum_ = subBuilder.buildPartial();
              }

              break;
            }
            case 66: {
              io.dstore.Values.stringValue.Builder subBuilder = null;
              if (uniqueId_ != null) {
                subBuilder = uniqueId_.toBuilder();
              }
              uniqueId_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(uniqueId_);
                uniqueId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 74: {
              io.dstore.Values.booleanValue.Builder subBuilder = null;
              if (getAdditionalPriceInfo_ != null) {
                subBuilder = getAdditionalPriceInfo_.toBuilder();
              }
              getAdditionalPriceInfo_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getAdditionalPriceInfo_);
                getAdditionalPriceInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 82: {
              io.dstore.Values.integerValue.Builder subBuilder = null;
              if (deliveryPersonId_ != null) {
                subBuilder = deliveryPersonId_.toBuilder();
              }
              deliveryPersonId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(deliveryPersonId_);
                deliveryPersonId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 90: {
              io.dstore.Values.booleanValue.Builder subBuilder = null;
              if (getPricePerSingleNodeId_ != null) {
                subBuilder = getPricePerSingleNodeId_.toBuilder();
              }
              getPricePerSingleNodeId_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getPricePerSingleNodeId_);
                getPricePerSingleNodeId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 98: {
              io.dstore.Values.integerValue.Builder subBuilder = null;
              if (paymentTypeId_ != null) {
                subBuilder = paymentTypeId_.toBuilder();
              }
              paymentTypeId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(paymentTypeId_);
                paymentTypeId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 106: {
              io.dstore.Values.integerValue.Builder subBuilder = null;
              if (shippingTypeId_ != null) {
                subBuilder = shippingTypeId_.toBuilder();
              }
              shippingTypeId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(shippingTypeId_);
                shippingTypeId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 8008: {

              nodeIdsNull_ = input.readBool();
              break;
            }
            case 8016: {

              quantitiesNull_ = input.readBool();
              break;
            }
            case 8024: {

              personIdNull_ = input.readBool();
              break;
            }
            case 8032: {

              currencyIdNull_ = input.readBool();
              break;
            }
            case 8040: {

              isTreeNodeIdNull_ = input.readBool();
              break;
            }
            case 8048: {

              priceNodeCharacteristicIdNull_ = input.readBool();
              break;
            }
            case 8056: {

              computeSumNull_ = input.readBool();
              break;
            }
            case 8064: {

              uniqueIdNull_ = input.readBool();
              break;
            }
            case 8072: {

              getAdditionalPriceInfoNull_ = input.readBool();
              break;
            }
            case 8080: {

              deliveryPersonIdNull_ = input.readBool();
              break;
            }
            case 8088: {

              getPricePerSingleNodeIdNull_ = input.readBool();
              break;
            }
            case 8096: {

              paymentTypeIdNull_ = input.readBool();
              break;
            }
            case 8104: {

              shippingTypeIdNull_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Parameters_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Parameters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procedures.OmGetPricesPu.Parameters.class, io.dstore.engine.procedures.OmGetPricesPu.Parameters.Builder.class);
    }

    public static final int NODE_IDS_FIELD_NUMBER = 1;
    private io.dstore.Values.stringValue nodeIds_;
    /**
     * <code>optional .dstore.values.stringValue node_ids = 1;</code>
     */
    public boolean hasNodeIds() {
      return nodeIds_ != null;
    }
    /**
     * <code>optional .dstore.values.stringValue node_ids = 1;</code>
     */
    public io.dstore.Values.stringValue getNodeIds() {
      return nodeIds_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : nodeIds_;
    }
    /**
     * <code>optional .dstore.values.stringValue node_ids = 1;</code>
     */
    public io.dstore.Values.stringValueOrBuilder getNodeIdsOrBuilder() {
      return getNodeIds();
    }

    public static final int NODE_IDS_NULL_FIELD_NUMBER = 1001;
    private boolean nodeIdsNull_;
    /**
     * <code>optional bool node_ids_null = 1001;</code>
     */
    public boolean getNodeIdsNull() {
      return nodeIdsNull_;
    }

    public static final int QUANTITIES_FIELD_NUMBER = 2;
    private io.dstore.Values.stringValue quantities_;
    /**
     * <code>optional .dstore.values.stringValue quantities = 2;</code>
     */
    public boolean hasQuantities() {
      return quantities_ != null;
    }
    /**
     * <code>optional .dstore.values.stringValue quantities = 2;</code>
     */
    public io.dstore.Values.stringValue getQuantities() {
      return quantities_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : quantities_;
    }
    /**
     * <code>optional .dstore.values.stringValue quantities = 2;</code>
     */
    public io.dstore.Values.stringValueOrBuilder getQuantitiesOrBuilder() {
      return getQuantities();
    }

    public static final int QUANTITIES_NULL_FIELD_NUMBER = 1002;
    private boolean quantitiesNull_;
    /**
     * <code>optional bool quantities_null = 1002;</code>
     */
    public boolean getQuantitiesNull() {
      return quantitiesNull_;
    }

    public static final int PERSON_ID_FIELD_NUMBER = 3;
    private io.dstore.Values.integerValue personId_;
    /**
     * <code>optional .dstore.values.integerValue person_id = 3;</code>
     */
    public boolean hasPersonId() {
      return personId_ != null;
    }
    /**
     * <code>optional .dstore.values.integerValue person_id = 3;</code>
     */
    public io.dstore.Values.integerValue getPersonId() {
      return personId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : personId_;
    }
    /**
     * <code>optional .dstore.values.integerValue person_id = 3;</code>
     */
    public io.dstore.Values.integerValueOrBuilder getPersonIdOrBuilder() {
      return getPersonId();
    }

    public static final int PERSON_ID_NULL_FIELD_NUMBER = 1003;
    private boolean personIdNull_;
    /**
     * <code>optional bool person_id_null = 1003;</code>
     */
    public boolean getPersonIdNull() {
      return personIdNull_;
    }

    public static final int CURRENCY_ID_FIELD_NUMBER = 4;
    private io.dstore.Values.integerValue currencyId_;
    /**
     * <code>optional .dstore.values.integerValue currency_id = 4;</code>
     */
    public boolean hasCurrencyId() {
      return currencyId_ != null;
    }
    /**
     * <code>optional .dstore.values.integerValue currency_id = 4;</code>
     */
    public io.dstore.Values.integerValue getCurrencyId() {
      return currencyId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : currencyId_;
    }
    /**
     * <code>optional .dstore.values.integerValue currency_id = 4;</code>
     */
    public io.dstore.Values.integerValueOrBuilder getCurrencyIdOrBuilder() {
      return getCurrencyId();
    }

    public static final int CURRENCY_ID_NULL_FIELD_NUMBER = 1004;
    private boolean currencyIdNull_;
    /**
     * <code>optional bool currency_id_null = 1004;</code>
     */
    public boolean getCurrencyIdNull() {
      return currencyIdNull_;
    }

    public static final int IS_TREE_NODE_ID_FIELD_NUMBER = 5;
    private io.dstore.Values.booleanValue isTreeNodeId_;
    /**
     * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
     */
    public boolean hasIsTreeNodeId() {
      return isTreeNodeId_ != null;
    }
    /**
     * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
     */
    public io.dstore.Values.booleanValue getIsTreeNodeId() {
      return isTreeNodeId_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : isTreeNodeId_;
    }
    /**
     * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
     */
    public io.dstore.Values.booleanValueOrBuilder getIsTreeNodeIdOrBuilder() {
      return getIsTreeNodeId();
    }

    public static final int IS_TREE_NODE_ID_NULL_FIELD_NUMBER = 1005;
    private boolean isTreeNodeIdNull_;
    /**
     * <code>optional bool is_tree_node_id_null = 1005;</code>
     */
    public boolean getIsTreeNodeIdNull() {
      return isTreeNodeIdNull_;
    }

    public static final int PRICE_NODE_CHARACTERISTIC_ID_FIELD_NUMBER = 6;
    private io.dstore.Values.integerValue priceNodeCharacteristicId_;
    /**
     * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
     */
    public boolean hasPriceNodeCharacteristicId() {
      return priceNodeCharacteristicId_ != null;
    }
    /**
     * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
     */
    public io.dstore.Values.integerValue getPriceNodeCharacteristicId() {
      return priceNodeCharacteristicId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : priceNodeCharacteristicId_;
    }
    /**
     * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
     */
    public io.dstore.Values.integerValueOrBuilder getPriceNodeCharacteristicIdOrBuilder() {
      return getPriceNodeCharacteristicId();
    }

    public static final int PRICE_NODE_CHARACTERISTIC_ID_NULL_FIELD_NUMBER = 1006;
    private boolean priceNodeCharacteristicIdNull_;
    /**
     * <code>optional bool price_node_characteristic_id_null = 1006;</code>
     */
    public boolean getPriceNodeCharacteristicIdNull() {
      return priceNodeCharacteristicIdNull_;
    }

    public static final int COMPUTE_SUM_FIELD_NUMBER = 7;
    private io.dstore.Values.booleanValue computeSum_;
    /**
     * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
     */
    public boolean hasComputeSum() {
      return computeSum_ != null;
    }
    /**
     * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
     */
    public io.dstore.Values.booleanValue getComputeSum() {
      return computeSum_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : computeSum_;
    }
    /**
     * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
     */
    public io.dstore.Values.booleanValueOrBuilder getComputeSumOrBuilder() {
      return getComputeSum();
    }

    public static final int COMPUTE_SUM_NULL_FIELD_NUMBER = 1007;
    private boolean computeSumNull_;
    /**
     * <code>optional bool compute_sum_null = 1007;</code>
     */
    public boolean getComputeSumNull() {
      return computeSumNull_;
    }

    public static final int UNIQUE_ID_FIELD_NUMBER = 8;
    private io.dstore.Values.stringValue uniqueId_;
    /**
     * <code>optional .dstore.values.stringValue unique_id = 8;</code>
     */
    public boolean hasUniqueId() {
      return uniqueId_ != null;
    }
    /**
     * <code>optional .dstore.values.stringValue unique_id = 8;</code>
     */
    public io.dstore.Values.stringValue getUniqueId() {
      return uniqueId_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : uniqueId_;
    }
    /**
     * <code>optional .dstore.values.stringValue unique_id = 8;</code>
     */
    public io.dstore.Values.stringValueOrBuilder getUniqueIdOrBuilder() {
      return getUniqueId();
    }

    public static final int UNIQUE_ID_NULL_FIELD_NUMBER = 1008;
    private boolean uniqueIdNull_;
    /**
     * <code>optional bool unique_id_null = 1008;</code>
     */
    public boolean getUniqueIdNull() {
      return uniqueIdNull_;
    }

    public static final int GET_ADDITIONAL_PRICE_INFO_FIELD_NUMBER = 9;
    private io.dstore.Values.booleanValue getAdditionalPriceInfo_;
    /**
     * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
     */
    public boolean hasGetAdditionalPriceInfo() {
      return getAdditionalPriceInfo_ != null;
    }
    /**
     * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
     */
    public io.dstore.Values.booleanValue getGetAdditionalPriceInfo() {
      return getAdditionalPriceInfo_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : getAdditionalPriceInfo_;
    }
    /**
     * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
     */
    public io.dstore.Values.booleanValueOrBuilder getGetAdditionalPriceInfoOrBuilder() {
      return getGetAdditionalPriceInfo();
    }

    public static final int GET_ADDITIONAL_PRICE_INFO_NULL_FIELD_NUMBER = 1009;
    private boolean getAdditionalPriceInfoNull_;
    /**
     * <code>optional bool get_additional_price_info_null = 1009;</code>
     */
    public boolean getGetAdditionalPriceInfoNull() {
      return getAdditionalPriceInfoNull_;
    }

    public static final int DELIVERY_PERSON_ID_FIELD_NUMBER = 10;
    private io.dstore.Values.integerValue deliveryPersonId_;
    /**
     * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
     */
    public boolean hasDeliveryPersonId() {
      return deliveryPersonId_ != null;
    }
    /**
     * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
     */
    public io.dstore.Values.integerValue getDeliveryPersonId() {
      return deliveryPersonId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : deliveryPersonId_;
    }
    /**
     * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
     */
    public io.dstore.Values.integerValueOrBuilder getDeliveryPersonIdOrBuilder() {
      return getDeliveryPersonId();
    }

    public static final int DELIVERY_PERSON_ID_NULL_FIELD_NUMBER = 1010;
    private boolean deliveryPersonIdNull_;
    /**
     * <code>optional bool delivery_person_id_null = 1010;</code>
     */
    public boolean getDeliveryPersonIdNull() {
      return deliveryPersonIdNull_;
    }

    public static final int GET_PRICE_PER_SINGLE_NODE_ID_FIELD_NUMBER = 11;
    private io.dstore.Values.booleanValue getPricePerSingleNodeId_;
    /**
     * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
     */
    public boolean hasGetPricePerSingleNodeId() {
      return getPricePerSingleNodeId_ != null;
    }
    /**
     * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
     */
    public io.dstore.Values.booleanValue getGetPricePerSingleNodeId() {
      return getPricePerSingleNodeId_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : getPricePerSingleNodeId_;
    }
    /**
     * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
     */
    public io.dstore.Values.booleanValueOrBuilder getGetPricePerSingleNodeIdOrBuilder() {
      return getGetPricePerSingleNodeId();
    }

    public static final int GET_PRICE_PER_SINGLE_NODE_ID_NULL_FIELD_NUMBER = 1011;
    private boolean getPricePerSingleNodeIdNull_;
    /**
     * <code>optional bool get_price_per_single_node_id_null = 1011;</code>
     */
    public boolean getGetPricePerSingleNodeIdNull() {
      return getPricePerSingleNodeIdNull_;
    }

    public static final int PAYMENT_TYPE_ID_FIELD_NUMBER = 12;
    private io.dstore.Values.integerValue paymentTypeId_;
    /**
     * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
     */
    public boolean hasPaymentTypeId() {
      return paymentTypeId_ != null;
    }
    /**
     * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
     */
    public io.dstore.Values.integerValue getPaymentTypeId() {
      return paymentTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : paymentTypeId_;
    }
    /**
     * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
     */
    public io.dstore.Values.integerValueOrBuilder getPaymentTypeIdOrBuilder() {
      return getPaymentTypeId();
    }

    public static final int PAYMENT_TYPE_ID_NULL_FIELD_NUMBER = 1012;
    private boolean paymentTypeIdNull_;
    /**
     * <code>optional bool payment_type_id_null = 1012;</code>
     */
    public boolean getPaymentTypeIdNull() {
      return paymentTypeIdNull_;
    }

    public static final int SHIPPING_TYPE_ID_FIELD_NUMBER = 13;
    private io.dstore.Values.integerValue shippingTypeId_;
    /**
     * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
     */
    public boolean hasShippingTypeId() {
      return shippingTypeId_ != null;
    }
    /**
     * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
     */
    public io.dstore.Values.integerValue getShippingTypeId() {
      return shippingTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : shippingTypeId_;
    }
    /**
     * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
     */
    public io.dstore.Values.integerValueOrBuilder getShippingTypeIdOrBuilder() {
      return getShippingTypeId();
    }

    public static final int SHIPPING_TYPE_ID_NULL_FIELD_NUMBER = 1013;
    private boolean shippingTypeIdNull_;
    /**
     * <code>optional bool shipping_type_id_null = 1013;</code>
     */
    public boolean getShippingTypeIdNull() {
      return shippingTypeIdNull_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (nodeIds_ != null) {
        output.writeMessage(1, getNodeIds());
      }
      if (quantities_ != null) {
        output.writeMessage(2, getQuantities());
      }
      if (personId_ != null) {
        output.writeMessage(3, getPersonId());
      }
      if (currencyId_ != null) {
        output.writeMessage(4, getCurrencyId());
      }
      if (isTreeNodeId_ != null) {
        output.writeMessage(5, getIsTreeNodeId());
      }
      if (priceNodeCharacteristicId_ != null) {
        output.writeMessage(6, getPriceNodeCharacteristicId());
      }
      if (computeSum_ != null) {
        output.writeMessage(7, getComputeSum());
      }
      if (uniqueId_ != null) {
        output.writeMessage(8, getUniqueId());
      }
      if (getAdditionalPriceInfo_ != null) {
        output.writeMessage(9, getGetAdditionalPriceInfo());
      }
      if (deliveryPersonId_ != null) {
        output.writeMessage(10, getDeliveryPersonId());
      }
      if (getPricePerSingleNodeId_ != null) {
        output.writeMessage(11, getGetPricePerSingleNodeId());
      }
      if (paymentTypeId_ != null) {
        output.writeMessage(12, getPaymentTypeId());
      }
      if (shippingTypeId_ != null) {
        output.writeMessage(13, getShippingTypeId());
      }
      if (nodeIdsNull_ != false) {
        output.writeBool(1001, nodeIdsNull_);
      }
      if (quantitiesNull_ != false) {
        output.writeBool(1002, quantitiesNull_);
      }
      if (personIdNull_ != false) {
        output.writeBool(1003, personIdNull_);
      }
      if (currencyIdNull_ != false) {
        output.writeBool(1004, currencyIdNull_);
      }
      if (isTreeNodeIdNull_ != false) {
        output.writeBool(1005, isTreeNodeIdNull_);
      }
      if (priceNodeCharacteristicIdNull_ != false) {
        output.writeBool(1006, priceNodeCharacteristicIdNull_);
      }
      if (computeSumNull_ != false) {
        output.writeBool(1007, computeSumNull_);
      }
      if (uniqueIdNull_ != false) {
        output.writeBool(1008, uniqueIdNull_);
      }
      if (getAdditionalPriceInfoNull_ != false) {
        output.writeBool(1009, getAdditionalPriceInfoNull_);
      }
      if (deliveryPersonIdNull_ != false) {
        output.writeBool(1010, deliveryPersonIdNull_);
      }
      if (getPricePerSingleNodeIdNull_ != false) {
        output.writeBool(1011, getPricePerSingleNodeIdNull_);
      }
      if (paymentTypeIdNull_ != false) {
        output.writeBool(1012, paymentTypeIdNull_);
      }
      if (shippingTypeIdNull_ != false) {
        output.writeBool(1013, shippingTypeIdNull_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (nodeIds_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getNodeIds());
      }
      if (quantities_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getQuantities());
      }
      if (personId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getPersonId());
      }
      if (currencyId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getCurrencyId());
      }
      if (isTreeNodeId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getIsTreeNodeId());
      }
      if (priceNodeCharacteristicId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getPriceNodeCharacteristicId());
      }
      if (computeSum_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getComputeSum());
      }
      if (uniqueId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getUniqueId());
      }
      if (getAdditionalPriceInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getGetAdditionalPriceInfo());
      }
      if (deliveryPersonId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getDeliveryPersonId());
      }
      if (getPricePerSingleNodeId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getGetPricePerSingleNodeId());
      }
      if (paymentTypeId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getPaymentTypeId());
      }
      if (shippingTypeId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getShippingTypeId());
      }
      if (nodeIdsNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1001, nodeIdsNull_);
      }
      if (quantitiesNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1002, quantitiesNull_);
      }
      if (personIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1003, personIdNull_);
      }
      if (currencyIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1004, currencyIdNull_);
      }
      if (isTreeNodeIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1005, isTreeNodeIdNull_);
      }
      if (priceNodeCharacteristicIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1006, priceNodeCharacteristicIdNull_);
      }
      if (computeSumNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1007, computeSumNull_);
      }
      if (uniqueIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1008, uniqueIdNull_);
      }
      if (getAdditionalPriceInfoNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1009, getAdditionalPriceInfoNull_);
      }
      if (deliveryPersonIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1010, deliveryPersonIdNull_);
      }
      if (getPricePerSingleNodeIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1011, getPricePerSingleNodeIdNull_);
      }
      if (paymentTypeIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1012, paymentTypeIdNull_);
      }
      if (shippingTypeIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1013, shippingTypeIdNull_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.dstore.engine.procedures.OmGetPricesPu.Parameters)) {
        return super.equals(obj);
      }
      io.dstore.engine.procedures.OmGetPricesPu.Parameters other = (io.dstore.engine.procedures.OmGetPricesPu.Parameters) obj;

      boolean result = true;
      result = result && (hasNodeIds() == other.hasNodeIds());
      if (hasNodeIds()) {
        result = result && getNodeIds()
            .equals(other.getNodeIds());
      }
      result = result && (getNodeIdsNull()
          == other.getNodeIdsNull());
      result = result && (hasQuantities() == other.hasQuantities());
      if (hasQuantities()) {
        result = result && getQuantities()
            .equals(other.getQuantities());
      }
      result = result && (getQuantitiesNull()
          == other.getQuantitiesNull());
      result = result && (hasPersonId() == other.hasPersonId());
      if (hasPersonId()) {
        result = result && getPersonId()
            .equals(other.getPersonId());
      }
      result = result && (getPersonIdNull()
          == other.getPersonIdNull());
      result = result && (hasCurrencyId() == other.hasCurrencyId());
      if (hasCurrencyId()) {
        result = result && getCurrencyId()
            .equals(other.getCurrencyId());
      }
      result = result && (getCurrencyIdNull()
          == other.getCurrencyIdNull());
      result = result && (hasIsTreeNodeId() == other.hasIsTreeNodeId());
      if (hasIsTreeNodeId()) {
        result = result && getIsTreeNodeId()
            .equals(other.getIsTreeNodeId());
      }
      result = result && (getIsTreeNodeIdNull()
          == other.getIsTreeNodeIdNull());
      result = result && (hasPriceNodeCharacteristicId() == other.hasPriceNodeCharacteristicId());
      if (hasPriceNodeCharacteristicId()) {
        result = result && getPriceNodeCharacteristicId()
            .equals(other.getPriceNodeCharacteristicId());
      }
      result = result && (getPriceNodeCharacteristicIdNull()
          == other.getPriceNodeCharacteristicIdNull());
      result = result && (hasComputeSum() == other.hasComputeSum());
      if (hasComputeSum()) {
        result = result && getComputeSum()
            .equals(other.getComputeSum());
      }
      result = result && (getComputeSumNull()
          == other.getComputeSumNull());
      result = result && (hasUniqueId() == other.hasUniqueId());
      if (hasUniqueId()) {
        result = result && getUniqueId()
            .equals(other.getUniqueId());
      }
      result = result && (getUniqueIdNull()
          == other.getUniqueIdNull());
      result = result && (hasGetAdditionalPriceInfo() == other.hasGetAdditionalPriceInfo());
      if (hasGetAdditionalPriceInfo()) {
        result = result && getGetAdditionalPriceInfo()
            .equals(other.getGetAdditionalPriceInfo());
      }
      result = result && (getGetAdditionalPriceInfoNull()
          == other.getGetAdditionalPriceInfoNull());
      result = result && (hasDeliveryPersonId() == other.hasDeliveryPersonId());
      if (hasDeliveryPersonId()) {
        result = result && getDeliveryPersonId()
            .equals(other.getDeliveryPersonId());
      }
      result = result && (getDeliveryPersonIdNull()
          == other.getDeliveryPersonIdNull());
      result = result && (hasGetPricePerSingleNodeId() == other.hasGetPricePerSingleNodeId());
      if (hasGetPricePerSingleNodeId()) {
        result = result && getGetPricePerSingleNodeId()
            .equals(other.getGetPricePerSingleNodeId());
      }
      result = result && (getGetPricePerSingleNodeIdNull()
          == other.getGetPricePerSingleNodeIdNull());
      result = result && (hasPaymentTypeId() == other.hasPaymentTypeId());
      if (hasPaymentTypeId()) {
        result = result && getPaymentTypeId()
            .equals(other.getPaymentTypeId());
      }
      result = result && (getPaymentTypeIdNull()
          == other.getPaymentTypeIdNull());
      result = result && (hasShippingTypeId() == other.hasShippingTypeId());
      if (hasShippingTypeId()) {
        result = result && getShippingTypeId()
            .equals(other.getShippingTypeId());
      }
      result = result && (getShippingTypeIdNull()
          == other.getShippingTypeIdNull());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasNodeIds()) {
        hash = (37 * hash) + NODE_IDS_FIELD_NUMBER;
        hash = (53 * hash) + getNodeIds().hashCode();
      }
      hash = (37 * hash) + NODE_IDS_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getNodeIdsNull());
      if (hasQuantities()) {
        hash = (37 * hash) + QUANTITIES_FIELD_NUMBER;
        hash = (53 * hash) + getQuantities().hashCode();
      }
      hash = (37 * hash) + QUANTITIES_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getQuantitiesNull());
      if (hasPersonId()) {
        hash = (37 * hash) + PERSON_ID_FIELD_NUMBER;
        hash = (53 * hash) + getPersonId().hashCode();
      }
      hash = (37 * hash) + PERSON_ID_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getPersonIdNull());
      if (hasCurrencyId()) {
        hash = (37 * hash) + CURRENCY_ID_FIELD_NUMBER;
        hash = (53 * hash) + getCurrencyId().hashCode();
      }
      hash = (37 * hash) + CURRENCY_ID_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getCurrencyIdNull());
      if (hasIsTreeNodeId()) {
        hash = (37 * hash) + IS_TREE_NODE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getIsTreeNodeId().hashCode();
      }
      hash = (37 * hash) + IS_TREE_NODE_ID_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsTreeNodeIdNull());
      if (hasPriceNodeCharacteristicId()) {
        hash = (37 * hash) + PRICE_NODE_CHARACTERISTIC_ID_FIELD_NUMBER;
        hash = (53 * hash) + getPriceNodeCharacteristicId().hashCode();
      }
      hash = (37 * hash) + PRICE_NODE_CHARACTERISTIC_ID_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getPriceNodeCharacteristicIdNull());
      if (hasComputeSum()) {
        hash = (37 * hash) + COMPUTE_SUM_FIELD_NUMBER;
        hash = (53 * hash) + getComputeSum().hashCode();
      }
      hash = (37 * hash) + COMPUTE_SUM_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getComputeSumNull());
      if (hasUniqueId()) {
        hash = (37 * hash) + UNIQUE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getUniqueId().hashCode();
      }
      hash = (37 * hash) + UNIQUE_ID_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUniqueIdNull());
      if (hasGetAdditionalPriceInfo()) {
        hash = (37 * hash) + GET_ADDITIONAL_PRICE_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getGetAdditionalPriceInfo().hashCode();
      }
      hash = (37 * hash) + GET_ADDITIONAL_PRICE_INFO_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getGetAdditionalPriceInfoNull());
      if (hasDeliveryPersonId()) {
        hash = (37 * hash) + DELIVERY_PERSON_ID_FIELD_NUMBER;
        hash = (53 * hash) + getDeliveryPersonId().hashCode();
      }
      hash = (37 * hash) + DELIVERY_PERSON_ID_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDeliveryPersonIdNull());
      if (hasGetPricePerSingleNodeId()) {
        hash = (37 * hash) + GET_PRICE_PER_SINGLE_NODE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getGetPricePerSingleNodeId().hashCode();
      }
      hash = (37 * hash) + GET_PRICE_PER_SINGLE_NODE_ID_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getGetPricePerSingleNodeIdNull());
      if (hasPaymentTypeId()) {
        hash = (37 * hash) + PAYMENT_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getPaymentTypeId().hashCode();
      }
      hash = (37 * hash) + PAYMENT_TYPE_ID_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getPaymentTypeIdNull());
      if (hasShippingTypeId()) {
        hash = (37 * hash) + SHIPPING_TYPE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getShippingTypeId().hashCode();
      }
      hash = (37 * hash) + SHIPPING_TYPE_ID_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getShippingTypeIdNull());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.dstore.engine.procedures.OmGetPricesPu.Parameters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Parameters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Parameters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Parameters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Parameters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Parameters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Parameters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Parameters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procedures.OmGetPricesPu.Parameters prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetPrices_Pu.Parameters}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetPrices_Pu.Parameters)
        io.dstore.engine.procedures.OmGetPricesPu.ParametersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Parameters_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Parameters_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.OmGetPricesPu.Parameters.class, io.dstore.engine.procedures.OmGetPricesPu.Parameters.Builder.class);
      }

      // Construct using io.dstore.engine.procedures.OmGetPricesPu.Parameters.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (nodeIdsBuilder_ == null) {
          nodeIds_ = null;
        } else {
          nodeIds_ = null;
          nodeIdsBuilder_ = null;
        }
        nodeIdsNull_ = false;

        if (quantitiesBuilder_ == null) {
          quantities_ = null;
        } else {
          quantities_ = null;
          quantitiesBuilder_ = null;
        }
        quantitiesNull_ = false;

        if (personIdBuilder_ == null) {
          personId_ = null;
        } else {
          personId_ = null;
          personIdBuilder_ = null;
        }
        personIdNull_ = false;

        if (currencyIdBuilder_ == null) {
          currencyId_ = null;
        } else {
          currencyId_ = null;
          currencyIdBuilder_ = null;
        }
        currencyIdNull_ = false;

        if (isTreeNodeIdBuilder_ == null) {
          isTreeNodeId_ = null;
        } else {
          isTreeNodeId_ = null;
          isTreeNodeIdBuilder_ = null;
        }
        isTreeNodeIdNull_ = false;

        if (priceNodeCharacteristicIdBuilder_ == null) {
          priceNodeCharacteristicId_ = null;
        } else {
          priceNodeCharacteristicId_ = null;
          priceNodeCharacteristicIdBuilder_ = null;
        }
        priceNodeCharacteristicIdNull_ = false;

        if (computeSumBuilder_ == null) {
          computeSum_ = null;
        } else {
          computeSum_ = null;
          computeSumBuilder_ = null;
        }
        computeSumNull_ = false;

        if (uniqueIdBuilder_ == null) {
          uniqueId_ = null;
        } else {
          uniqueId_ = null;
          uniqueIdBuilder_ = null;
        }
        uniqueIdNull_ = false;

        if (getAdditionalPriceInfoBuilder_ == null) {
          getAdditionalPriceInfo_ = null;
        } else {
          getAdditionalPriceInfo_ = null;
          getAdditionalPriceInfoBuilder_ = null;
        }
        getAdditionalPriceInfoNull_ = false;

        if (deliveryPersonIdBuilder_ == null) {
          deliveryPersonId_ = null;
        } else {
          deliveryPersonId_ = null;
          deliveryPersonIdBuilder_ = null;
        }
        deliveryPersonIdNull_ = false;

        if (getPricePerSingleNodeIdBuilder_ == null) {
          getPricePerSingleNodeId_ = null;
        } else {
          getPricePerSingleNodeId_ = null;
          getPricePerSingleNodeIdBuilder_ = null;
        }
        getPricePerSingleNodeIdNull_ = false;

        if (paymentTypeIdBuilder_ == null) {
          paymentTypeId_ = null;
        } else {
          paymentTypeId_ = null;
          paymentTypeIdBuilder_ = null;
        }
        paymentTypeIdNull_ = false;

        if (shippingTypeIdBuilder_ == null) {
          shippingTypeId_ = null;
        } else {
          shippingTypeId_ = null;
          shippingTypeIdBuilder_ = null;
        }
        shippingTypeIdNull_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Parameters_descriptor;
      }

      public io.dstore.engine.procedures.OmGetPricesPu.Parameters getDefaultInstanceForType() {
        return io.dstore.engine.procedures.OmGetPricesPu.Parameters.getDefaultInstance();
      }

      public io.dstore.engine.procedures.OmGetPricesPu.Parameters build() {
        io.dstore.engine.procedures.OmGetPricesPu.Parameters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procedures.OmGetPricesPu.Parameters buildPartial() {
        io.dstore.engine.procedures.OmGetPricesPu.Parameters result = new io.dstore.engine.procedures.OmGetPricesPu.Parameters(this);
        if (nodeIdsBuilder_ == null) {
          result.nodeIds_ = nodeIds_;
        } else {
          result.nodeIds_ = nodeIdsBuilder_.build();
        }
        result.nodeIdsNull_ = nodeIdsNull_;
        if (quantitiesBuilder_ == null) {
          result.quantities_ = quantities_;
        } else {
          result.quantities_ = quantitiesBuilder_.build();
        }
        result.quantitiesNull_ = quantitiesNull_;
        if (personIdBuilder_ == null) {
          result.personId_ = personId_;
        } else {
          result.personId_ = personIdBuilder_.build();
        }
        result.personIdNull_ = personIdNull_;
        if (currencyIdBuilder_ == null) {
          result.currencyId_ = currencyId_;
        } else {
          result.currencyId_ = currencyIdBuilder_.build();
        }
        result.currencyIdNull_ = currencyIdNull_;
        if (isTreeNodeIdBuilder_ == null) {
          result.isTreeNodeId_ = isTreeNodeId_;
        } else {
          result.isTreeNodeId_ = isTreeNodeIdBuilder_.build();
        }
        result.isTreeNodeIdNull_ = isTreeNodeIdNull_;
        if (priceNodeCharacteristicIdBuilder_ == null) {
          result.priceNodeCharacteristicId_ = priceNodeCharacteristicId_;
        } else {
          result.priceNodeCharacteristicId_ = priceNodeCharacteristicIdBuilder_.build();
        }
        result.priceNodeCharacteristicIdNull_ = priceNodeCharacteristicIdNull_;
        if (computeSumBuilder_ == null) {
          result.computeSum_ = computeSum_;
        } else {
          result.computeSum_ = computeSumBuilder_.build();
        }
        result.computeSumNull_ = computeSumNull_;
        if (uniqueIdBuilder_ == null) {
          result.uniqueId_ = uniqueId_;
        } else {
          result.uniqueId_ = uniqueIdBuilder_.build();
        }
        result.uniqueIdNull_ = uniqueIdNull_;
        if (getAdditionalPriceInfoBuilder_ == null) {
          result.getAdditionalPriceInfo_ = getAdditionalPriceInfo_;
        } else {
          result.getAdditionalPriceInfo_ = getAdditionalPriceInfoBuilder_.build();
        }
        result.getAdditionalPriceInfoNull_ = getAdditionalPriceInfoNull_;
        if (deliveryPersonIdBuilder_ == null) {
          result.deliveryPersonId_ = deliveryPersonId_;
        } else {
          result.deliveryPersonId_ = deliveryPersonIdBuilder_.build();
        }
        result.deliveryPersonIdNull_ = deliveryPersonIdNull_;
        if (getPricePerSingleNodeIdBuilder_ == null) {
          result.getPricePerSingleNodeId_ = getPricePerSingleNodeId_;
        } else {
          result.getPricePerSingleNodeId_ = getPricePerSingleNodeIdBuilder_.build();
        }
        result.getPricePerSingleNodeIdNull_ = getPricePerSingleNodeIdNull_;
        if (paymentTypeIdBuilder_ == null) {
          result.paymentTypeId_ = paymentTypeId_;
        } else {
          result.paymentTypeId_ = paymentTypeIdBuilder_.build();
        }
        result.paymentTypeIdNull_ = paymentTypeIdNull_;
        if (shippingTypeIdBuilder_ == null) {
          result.shippingTypeId_ = shippingTypeId_;
        } else {
          result.shippingTypeId_ = shippingTypeIdBuilder_.build();
        }
        result.shippingTypeIdNull_ = shippingTypeIdNull_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procedures.OmGetPricesPu.Parameters) {
          return mergeFrom((io.dstore.engine.procedures.OmGetPricesPu.Parameters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procedures.OmGetPricesPu.Parameters other) {
        if (other == io.dstore.engine.procedures.OmGetPricesPu.Parameters.getDefaultInstance()) return this;
        if (other.hasNodeIds()) {
          mergeNodeIds(other.getNodeIds());
        }
        if (other.getNodeIdsNull() != false) {
          setNodeIdsNull(other.getNodeIdsNull());
        }
        if (other.hasQuantities()) {
          mergeQuantities(other.getQuantities());
        }
        if (other.getQuantitiesNull() != false) {
          setQuantitiesNull(other.getQuantitiesNull());
        }
        if (other.hasPersonId()) {
          mergePersonId(other.getPersonId());
        }
        if (other.getPersonIdNull() != false) {
          setPersonIdNull(other.getPersonIdNull());
        }
        if (other.hasCurrencyId()) {
          mergeCurrencyId(other.getCurrencyId());
        }
        if (other.getCurrencyIdNull() != false) {
          setCurrencyIdNull(other.getCurrencyIdNull());
        }
        if (other.hasIsTreeNodeId()) {
          mergeIsTreeNodeId(other.getIsTreeNodeId());
        }
        if (other.getIsTreeNodeIdNull() != false) {
          setIsTreeNodeIdNull(other.getIsTreeNodeIdNull());
        }
        if (other.hasPriceNodeCharacteristicId()) {
          mergePriceNodeCharacteristicId(other.getPriceNodeCharacteristicId());
        }
        if (other.getPriceNodeCharacteristicIdNull() != false) {
          setPriceNodeCharacteristicIdNull(other.getPriceNodeCharacteristicIdNull());
        }
        if (other.hasComputeSum()) {
          mergeComputeSum(other.getComputeSum());
        }
        if (other.getComputeSumNull() != false) {
          setComputeSumNull(other.getComputeSumNull());
        }
        if (other.hasUniqueId()) {
          mergeUniqueId(other.getUniqueId());
        }
        if (other.getUniqueIdNull() != false) {
          setUniqueIdNull(other.getUniqueIdNull());
        }
        if (other.hasGetAdditionalPriceInfo()) {
          mergeGetAdditionalPriceInfo(other.getGetAdditionalPriceInfo());
        }
        if (other.getGetAdditionalPriceInfoNull() != false) {
          setGetAdditionalPriceInfoNull(other.getGetAdditionalPriceInfoNull());
        }
        if (other.hasDeliveryPersonId()) {
          mergeDeliveryPersonId(other.getDeliveryPersonId());
        }
        if (other.getDeliveryPersonIdNull() != false) {
          setDeliveryPersonIdNull(other.getDeliveryPersonIdNull());
        }
        if (other.hasGetPricePerSingleNodeId()) {
          mergeGetPricePerSingleNodeId(other.getGetPricePerSingleNodeId());
        }
        if (other.getGetPricePerSingleNodeIdNull() != false) {
          setGetPricePerSingleNodeIdNull(other.getGetPricePerSingleNodeIdNull());
        }
        if (other.hasPaymentTypeId()) {
          mergePaymentTypeId(other.getPaymentTypeId());
        }
        if (other.getPaymentTypeIdNull() != false) {
          setPaymentTypeIdNull(other.getPaymentTypeIdNull());
        }
        if (other.hasShippingTypeId()) {
          mergeShippingTypeId(other.getShippingTypeId());
        }
        if (other.getShippingTypeIdNull() != false) {
          setShippingTypeIdNull(other.getShippingTypeIdNull());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procedures.OmGetPricesPu.Parameters parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procedures.OmGetPricesPu.Parameters) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.dstore.Values.stringValue nodeIds_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> nodeIdsBuilder_;
      /**
       * <code>optional .dstore.values.stringValue node_ids = 1;</code>
       */
      public boolean hasNodeIds() {
        return nodeIdsBuilder_ != null || nodeIds_ != null;
      }
      /**
       * <code>optional .dstore.values.stringValue node_ids = 1;</code>
       */
      public io.dstore.Values.stringValue getNodeIds() {
        if (nodeIdsBuilder_ == null) {
          return nodeIds_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : nodeIds_;
        } else {
          return nodeIdsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.stringValue node_ids = 1;</code>
       */
      public Builder setNodeIds(io.dstore.Values.stringValue value) {
        if (nodeIdsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          nodeIds_ = value;
          onChanged();
        } else {
          nodeIdsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue node_ids = 1;</code>
       */
      public Builder setNodeIds(
          io.dstore.Values.stringValue.Builder builderForValue) {
        if (nodeIdsBuilder_ == null) {
          nodeIds_ = builderForValue.build();
          onChanged();
        } else {
          nodeIdsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue node_ids = 1;</code>
       */
      public Builder mergeNodeIds(io.dstore.Values.stringValue value) {
        if (nodeIdsBuilder_ == null) {
          if (nodeIds_ != null) {
            nodeIds_ =
              io.dstore.Values.stringValue.newBuilder(nodeIds_).mergeFrom(value).buildPartial();
          } else {
            nodeIds_ = value;
          }
          onChanged();
        } else {
          nodeIdsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue node_ids = 1;</code>
       */
      public Builder clearNodeIds() {
        if (nodeIdsBuilder_ == null) {
          nodeIds_ = null;
          onChanged();
        } else {
          nodeIds_ = null;
          nodeIdsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue node_ids = 1;</code>
       */
      public io.dstore.Values.stringValue.Builder getNodeIdsBuilder() {
        
        onChanged();
        return getNodeIdsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.stringValue node_ids = 1;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getNodeIdsOrBuilder() {
        if (nodeIdsBuilder_ != null) {
          return nodeIdsBuilder_.getMessageOrBuilder();
        } else {
          return nodeIds_ == null ?
              io.dstore.Values.stringValue.getDefaultInstance() : nodeIds_;
        }
      }
      /**
       * <code>optional .dstore.values.stringValue node_ids = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
          getNodeIdsFieldBuilder() {
        if (nodeIdsBuilder_ == null) {
          nodeIdsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                  getNodeIds(),
                  getParentForChildren(),
                  isClean());
          nodeIds_ = null;
        }
        return nodeIdsBuilder_;
      }

      private boolean nodeIdsNull_ ;
      /**
       * <code>optional bool node_ids_null = 1001;</code>
       */
      public boolean getNodeIdsNull() {
        return nodeIdsNull_;
      }
      /**
       * <code>optional bool node_ids_null = 1001;</code>
       */
      public Builder setNodeIdsNull(boolean value) {
        
        nodeIdsNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool node_ids_null = 1001;</code>
       */
      public Builder clearNodeIdsNull() {
        
        nodeIdsNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.stringValue quantities_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> quantitiesBuilder_;
      /**
       * <code>optional .dstore.values.stringValue quantities = 2;</code>
       */
      public boolean hasQuantities() {
        return quantitiesBuilder_ != null || quantities_ != null;
      }
      /**
       * <code>optional .dstore.values.stringValue quantities = 2;</code>
       */
      public io.dstore.Values.stringValue getQuantities() {
        if (quantitiesBuilder_ == null) {
          return quantities_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : quantities_;
        } else {
          return quantitiesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.stringValue quantities = 2;</code>
       */
      public Builder setQuantities(io.dstore.Values.stringValue value) {
        if (quantitiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          quantities_ = value;
          onChanged();
        } else {
          quantitiesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue quantities = 2;</code>
       */
      public Builder setQuantities(
          io.dstore.Values.stringValue.Builder builderForValue) {
        if (quantitiesBuilder_ == null) {
          quantities_ = builderForValue.build();
          onChanged();
        } else {
          quantitiesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue quantities = 2;</code>
       */
      public Builder mergeQuantities(io.dstore.Values.stringValue value) {
        if (quantitiesBuilder_ == null) {
          if (quantities_ != null) {
            quantities_ =
              io.dstore.Values.stringValue.newBuilder(quantities_).mergeFrom(value).buildPartial();
          } else {
            quantities_ = value;
          }
          onChanged();
        } else {
          quantitiesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue quantities = 2;</code>
       */
      public Builder clearQuantities() {
        if (quantitiesBuilder_ == null) {
          quantities_ = null;
          onChanged();
        } else {
          quantities_ = null;
          quantitiesBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue quantities = 2;</code>
       */
      public io.dstore.Values.stringValue.Builder getQuantitiesBuilder() {
        
        onChanged();
        return getQuantitiesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.stringValue quantities = 2;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getQuantitiesOrBuilder() {
        if (quantitiesBuilder_ != null) {
          return quantitiesBuilder_.getMessageOrBuilder();
        } else {
          return quantities_ == null ?
              io.dstore.Values.stringValue.getDefaultInstance() : quantities_;
        }
      }
      /**
       * <code>optional .dstore.values.stringValue quantities = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
          getQuantitiesFieldBuilder() {
        if (quantitiesBuilder_ == null) {
          quantitiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                  getQuantities(),
                  getParentForChildren(),
                  isClean());
          quantities_ = null;
        }
        return quantitiesBuilder_;
      }

      private boolean quantitiesNull_ ;
      /**
       * <code>optional bool quantities_null = 1002;</code>
       */
      public boolean getQuantitiesNull() {
        return quantitiesNull_;
      }
      /**
       * <code>optional bool quantities_null = 1002;</code>
       */
      public Builder setQuantitiesNull(boolean value) {
        
        quantitiesNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool quantities_null = 1002;</code>
       */
      public Builder clearQuantitiesNull() {
        
        quantitiesNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.integerValue personId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> personIdBuilder_;
      /**
       * <code>optional .dstore.values.integerValue person_id = 3;</code>
       */
      public boolean hasPersonId() {
        return personIdBuilder_ != null || personId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue person_id = 3;</code>
       */
      public io.dstore.Values.integerValue getPersonId() {
        if (personIdBuilder_ == null) {
          return personId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : personId_;
        } else {
          return personIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.integerValue person_id = 3;</code>
       */
      public Builder setPersonId(io.dstore.Values.integerValue value) {
        if (personIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          personId_ = value;
          onChanged();
        } else {
          personIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue person_id = 3;</code>
       */
      public Builder setPersonId(
          io.dstore.Values.integerValue.Builder builderForValue) {
        if (personIdBuilder_ == null) {
          personId_ = builderForValue.build();
          onChanged();
        } else {
          personIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue person_id = 3;</code>
       */
      public Builder mergePersonId(io.dstore.Values.integerValue value) {
        if (personIdBuilder_ == null) {
          if (personId_ != null) {
            personId_ =
              io.dstore.Values.integerValue.newBuilder(personId_).mergeFrom(value).buildPartial();
          } else {
            personId_ = value;
          }
          onChanged();
        } else {
          personIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue person_id = 3;</code>
       */
      public Builder clearPersonId() {
        if (personIdBuilder_ == null) {
          personId_ = null;
          onChanged();
        } else {
          personId_ = null;
          personIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue person_id = 3;</code>
       */
      public io.dstore.Values.integerValue.Builder getPersonIdBuilder() {
        
        onChanged();
        return getPersonIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.integerValue person_id = 3;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getPersonIdOrBuilder() {
        if (personIdBuilder_ != null) {
          return personIdBuilder_.getMessageOrBuilder();
        } else {
          return personId_ == null ?
              io.dstore.Values.integerValue.getDefaultInstance() : personId_;
        }
      }
      /**
       * <code>optional .dstore.values.integerValue person_id = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
          getPersonIdFieldBuilder() {
        if (personIdBuilder_ == null) {
          personIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                  getPersonId(),
                  getParentForChildren(),
                  isClean());
          personId_ = null;
        }
        return personIdBuilder_;
      }

      private boolean personIdNull_ ;
      /**
       * <code>optional bool person_id_null = 1003;</code>
       */
      public boolean getPersonIdNull() {
        return personIdNull_;
      }
      /**
       * <code>optional bool person_id_null = 1003;</code>
       */
      public Builder setPersonIdNull(boolean value) {
        
        personIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool person_id_null = 1003;</code>
       */
      public Builder clearPersonIdNull() {
        
        personIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.integerValue currencyId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> currencyIdBuilder_;
      /**
       * <code>optional .dstore.values.integerValue currency_id = 4;</code>
       */
      public boolean hasCurrencyId() {
        return currencyIdBuilder_ != null || currencyId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue currency_id = 4;</code>
       */
      public io.dstore.Values.integerValue getCurrencyId() {
        if (currencyIdBuilder_ == null) {
          return currencyId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : currencyId_;
        } else {
          return currencyIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.integerValue currency_id = 4;</code>
       */
      public Builder setCurrencyId(io.dstore.Values.integerValue value) {
        if (currencyIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          currencyId_ = value;
          onChanged();
        } else {
          currencyIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue currency_id = 4;</code>
       */
      public Builder setCurrencyId(
          io.dstore.Values.integerValue.Builder builderForValue) {
        if (currencyIdBuilder_ == null) {
          currencyId_ = builderForValue.build();
          onChanged();
        } else {
          currencyIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue currency_id = 4;</code>
       */
      public Builder mergeCurrencyId(io.dstore.Values.integerValue value) {
        if (currencyIdBuilder_ == null) {
          if (currencyId_ != null) {
            currencyId_ =
              io.dstore.Values.integerValue.newBuilder(currencyId_).mergeFrom(value).buildPartial();
          } else {
            currencyId_ = value;
          }
          onChanged();
        } else {
          currencyIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue currency_id = 4;</code>
       */
      public Builder clearCurrencyId() {
        if (currencyIdBuilder_ == null) {
          currencyId_ = null;
          onChanged();
        } else {
          currencyId_ = null;
          currencyIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue currency_id = 4;</code>
       */
      public io.dstore.Values.integerValue.Builder getCurrencyIdBuilder() {
        
        onChanged();
        return getCurrencyIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.integerValue currency_id = 4;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getCurrencyIdOrBuilder() {
        if (currencyIdBuilder_ != null) {
          return currencyIdBuilder_.getMessageOrBuilder();
        } else {
          return currencyId_ == null ?
              io.dstore.Values.integerValue.getDefaultInstance() : currencyId_;
        }
      }
      /**
       * <code>optional .dstore.values.integerValue currency_id = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
          getCurrencyIdFieldBuilder() {
        if (currencyIdBuilder_ == null) {
          currencyIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                  getCurrencyId(),
                  getParentForChildren(),
                  isClean());
          currencyId_ = null;
        }
        return currencyIdBuilder_;
      }

      private boolean currencyIdNull_ ;
      /**
       * <code>optional bool currency_id_null = 1004;</code>
       */
      public boolean getCurrencyIdNull() {
        return currencyIdNull_;
      }
      /**
       * <code>optional bool currency_id_null = 1004;</code>
       */
      public Builder setCurrencyIdNull(boolean value) {
        
        currencyIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool currency_id_null = 1004;</code>
       */
      public Builder clearCurrencyIdNull() {
        
        currencyIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.booleanValue isTreeNodeId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> isTreeNodeIdBuilder_;
      /**
       * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
       */
      public boolean hasIsTreeNodeId() {
        return isTreeNodeIdBuilder_ != null || isTreeNodeId_ != null;
      }
      /**
       * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
       */
      public io.dstore.Values.booleanValue getIsTreeNodeId() {
        if (isTreeNodeIdBuilder_ == null) {
          return isTreeNodeId_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : isTreeNodeId_;
        } else {
          return isTreeNodeIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
       */
      public Builder setIsTreeNodeId(io.dstore.Values.booleanValue value) {
        if (isTreeNodeIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          isTreeNodeId_ = value;
          onChanged();
        } else {
          isTreeNodeIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
       */
      public Builder setIsTreeNodeId(
          io.dstore.Values.booleanValue.Builder builderForValue) {
        if (isTreeNodeIdBuilder_ == null) {
          isTreeNodeId_ = builderForValue.build();
          onChanged();
        } else {
          isTreeNodeIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
       */
      public Builder mergeIsTreeNodeId(io.dstore.Values.booleanValue value) {
        if (isTreeNodeIdBuilder_ == null) {
          if (isTreeNodeId_ != null) {
            isTreeNodeId_ =
              io.dstore.Values.booleanValue.newBuilder(isTreeNodeId_).mergeFrom(value).buildPartial();
          } else {
            isTreeNodeId_ = value;
          }
          onChanged();
        } else {
          isTreeNodeIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
       */
      public Builder clearIsTreeNodeId() {
        if (isTreeNodeIdBuilder_ == null) {
          isTreeNodeId_ = null;
          onChanged();
        } else {
          isTreeNodeId_ = null;
          isTreeNodeIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
       */
      public io.dstore.Values.booleanValue.Builder getIsTreeNodeIdBuilder() {
        
        onChanged();
        return getIsTreeNodeIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getIsTreeNodeIdOrBuilder() {
        if (isTreeNodeIdBuilder_ != null) {
          return isTreeNodeIdBuilder_.getMessageOrBuilder();
        } else {
          return isTreeNodeId_ == null ?
              io.dstore.Values.booleanValue.getDefaultInstance() : isTreeNodeId_;
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue is_tree_node_id = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
          getIsTreeNodeIdFieldBuilder() {
        if (isTreeNodeIdBuilder_ == null) {
          isTreeNodeIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                  getIsTreeNodeId(),
                  getParentForChildren(),
                  isClean());
          isTreeNodeId_ = null;
        }
        return isTreeNodeIdBuilder_;
      }

      private boolean isTreeNodeIdNull_ ;
      /**
       * <code>optional bool is_tree_node_id_null = 1005;</code>
       */
      public boolean getIsTreeNodeIdNull() {
        return isTreeNodeIdNull_;
      }
      /**
       * <code>optional bool is_tree_node_id_null = 1005;</code>
       */
      public Builder setIsTreeNodeIdNull(boolean value) {
        
        isTreeNodeIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_tree_node_id_null = 1005;</code>
       */
      public Builder clearIsTreeNodeIdNull() {
        
        isTreeNodeIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.integerValue priceNodeCharacteristicId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> priceNodeCharacteristicIdBuilder_;
      /**
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
       */
      public boolean hasPriceNodeCharacteristicId() {
        return priceNodeCharacteristicIdBuilder_ != null || priceNodeCharacteristicId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
       */
      public io.dstore.Values.integerValue getPriceNodeCharacteristicId() {
        if (priceNodeCharacteristicIdBuilder_ == null) {
          return priceNodeCharacteristicId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : priceNodeCharacteristicId_;
        } else {
          return priceNodeCharacteristicIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
       */
      public Builder setPriceNodeCharacteristicId(io.dstore.Values.integerValue value) {
        if (priceNodeCharacteristicIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          priceNodeCharacteristicId_ = value;
          onChanged();
        } else {
          priceNodeCharacteristicIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
       */
      public Builder setPriceNodeCharacteristicId(
          io.dstore.Values.integerValue.Builder builderForValue) {
        if (priceNodeCharacteristicIdBuilder_ == null) {
          priceNodeCharacteristicId_ = builderForValue.build();
          onChanged();
        } else {
          priceNodeCharacteristicIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
       */
      public Builder mergePriceNodeCharacteristicId(io.dstore.Values.integerValue value) {
        if (priceNodeCharacteristicIdBuilder_ == null) {
          if (priceNodeCharacteristicId_ != null) {
            priceNodeCharacteristicId_ =
              io.dstore.Values.integerValue.newBuilder(priceNodeCharacteristicId_).mergeFrom(value).buildPartial();
          } else {
            priceNodeCharacteristicId_ = value;
          }
          onChanged();
        } else {
          priceNodeCharacteristicIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
       */
      public Builder clearPriceNodeCharacteristicId() {
        if (priceNodeCharacteristicIdBuilder_ == null) {
          priceNodeCharacteristicId_ = null;
          onChanged();
        } else {
          priceNodeCharacteristicId_ = null;
          priceNodeCharacteristicIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
       */
      public io.dstore.Values.integerValue.Builder getPriceNodeCharacteristicIdBuilder() {
        
        onChanged();
        return getPriceNodeCharacteristicIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getPriceNodeCharacteristicIdOrBuilder() {
        if (priceNodeCharacteristicIdBuilder_ != null) {
          return priceNodeCharacteristicIdBuilder_.getMessageOrBuilder();
        } else {
          return priceNodeCharacteristicId_ == null ?
              io.dstore.Values.integerValue.getDefaultInstance() : priceNodeCharacteristicId_;
        }
      }
      /**
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
          getPriceNodeCharacteristicIdFieldBuilder() {
        if (priceNodeCharacteristicIdBuilder_ == null) {
          priceNodeCharacteristicIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                  getPriceNodeCharacteristicId(),
                  getParentForChildren(),
                  isClean());
          priceNodeCharacteristicId_ = null;
        }
        return priceNodeCharacteristicIdBuilder_;
      }

      private boolean priceNodeCharacteristicIdNull_ ;
      /**
       * <code>optional bool price_node_characteristic_id_null = 1006;</code>
       */
      public boolean getPriceNodeCharacteristicIdNull() {
        return priceNodeCharacteristicIdNull_;
      }
      /**
       * <code>optional bool price_node_characteristic_id_null = 1006;</code>
       */
      public Builder setPriceNodeCharacteristicIdNull(boolean value) {
        
        priceNodeCharacteristicIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool price_node_characteristic_id_null = 1006;</code>
       */
      public Builder clearPriceNodeCharacteristicIdNull() {
        
        priceNodeCharacteristicIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.booleanValue computeSum_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> computeSumBuilder_;
      /**
       * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
       */
      public boolean hasComputeSum() {
        return computeSumBuilder_ != null || computeSum_ != null;
      }
      /**
       * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
       */
      public io.dstore.Values.booleanValue getComputeSum() {
        if (computeSumBuilder_ == null) {
          return computeSum_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : computeSum_;
        } else {
          return computeSumBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
       */
      public Builder setComputeSum(io.dstore.Values.booleanValue value) {
        if (computeSumBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          computeSum_ = value;
          onChanged();
        } else {
          computeSumBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
       */
      public Builder setComputeSum(
          io.dstore.Values.booleanValue.Builder builderForValue) {
        if (computeSumBuilder_ == null) {
          computeSum_ = builderForValue.build();
          onChanged();
        } else {
          computeSumBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
       */
      public Builder mergeComputeSum(io.dstore.Values.booleanValue value) {
        if (computeSumBuilder_ == null) {
          if (computeSum_ != null) {
            computeSum_ =
              io.dstore.Values.booleanValue.newBuilder(computeSum_).mergeFrom(value).buildPartial();
          } else {
            computeSum_ = value;
          }
          onChanged();
        } else {
          computeSumBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
       */
      public Builder clearComputeSum() {
        if (computeSumBuilder_ == null) {
          computeSum_ = null;
          onChanged();
        } else {
          computeSum_ = null;
          computeSumBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
       */
      public io.dstore.Values.booleanValue.Builder getComputeSumBuilder() {
        
        onChanged();
        return getComputeSumFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getComputeSumOrBuilder() {
        if (computeSumBuilder_ != null) {
          return computeSumBuilder_.getMessageOrBuilder();
        } else {
          return computeSum_ == null ?
              io.dstore.Values.booleanValue.getDefaultInstance() : computeSum_;
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue compute_sum = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
          getComputeSumFieldBuilder() {
        if (computeSumBuilder_ == null) {
          computeSumBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                  getComputeSum(),
                  getParentForChildren(),
                  isClean());
          computeSum_ = null;
        }
        return computeSumBuilder_;
      }

      private boolean computeSumNull_ ;
      /**
       * <code>optional bool compute_sum_null = 1007;</code>
       */
      public boolean getComputeSumNull() {
        return computeSumNull_;
      }
      /**
       * <code>optional bool compute_sum_null = 1007;</code>
       */
      public Builder setComputeSumNull(boolean value) {
        
        computeSumNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool compute_sum_null = 1007;</code>
       */
      public Builder clearComputeSumNull() {
        
        computeSumNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.stringValue uniqueId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> uniqueIdBuilder_;
      /**
       * <code>optional .dstore.values.stringValue unique_id = 8;</code>
       */
      public boolean hasUniqueId() {
        return uniqueIdBuilder_ != null || uniqueId_ != null;
      }
      /**
       * <code>optional .dstore.values.stringValue unique_id = 8;</code>
       */
      public io.dstore.Values.stringValue getUniqueId() {
        if (uniqueIdBuilder_ == null) {
          return uniqueId_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : uniqueId_;
        } else {
          return uniqueIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.stringValue unique_id = 8;</code>
       */
      public Builder setUniqueId(io.dstore.Values.stringValue value) {
        if (uniqueIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          uniqueId_ = value;
          onChanged();
        } else {
          uniqueIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue unique_id = 8;</code>
       */
      public Builder setUniqueId(
          io.dstore.Values.stringValue.Builder builderForValue) {
        if (uniqueIdBuilder_ == null) {
          uniqueId_ = builderForValue.build();
          onChanged();
        } else {
          uniqueIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue unique_id = 8;</code>
       */
      public Builder mergeUniqueId(io.dstore.Values.stringValue value) {
        if (uniqueIdBuilder_ == null) {
          if (uniqueId_ != null) {
            uniqueId_ =
              io.dstore.Values.stringValue.newBuilder(uniqueId_).mergeFrom(value).buildPartial();
          } else {
            uniqueId_ = value;
          }
          onChanged();
        } else {
          uniqueIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue unique_id = 8;</code>
       */
      public Builder clearUniqueId() {
        if (uniqueIdBuilder_ == null) {
          uniqueId_ = null;
          onChanged();
        } else {
          uniqueId_ = null;
          uniqueIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.stringValue unique_id = 8;</code>
       */
      public io.dstore.Values.stringValue.Builder getUniqueIdBuilder() {
        
        onChanged();
        return getUniqueIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.stringValue unique_id = 8;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getUniqueIdOrBuilder() {
        if (uniqueIdBuilder_ != null) {
          return uniqueIdBuilder_.getMessageOrBuilder();
        } else {
          return uniqueId_ == null ?
              io.dstore.Values.stringValue.getDefaultInstance() : uniqueId_;
        }
      }
      /**
       * <code>optional .dstore.values.stringValue unique_id = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
          getUniqueIdFieldBuilder() {
        if (uniqueIdBuilder_ == null) {
          uniqueIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                  getUniqueId(),
                  getParentForChildren(),
                  isClean());
          uniqueId_ = null;
        }
        return uniqueIdBuilder_;
      }

      private boolean uniqueIdNull_ ;
      /**
       * <code>optional bool unique_id_null = 1008;</code>
       */
      public boolean getUniqueIdNull() {
        return uniqueIdNull_;
      }
      /**
       * <code>optional bool unique_id_null = 1008;</code>
       */
      public Builder setUniqueIdNull(boolean value) {
        
        uniqueIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool unique_id_null = 1008;</code>
       */
      public Builder clearUniqueIdNull() {
        
        uniqueIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.booleanValue getAdditionalPriceInfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> getAdditionalPriceInfoBuilder_;
      /**
       * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
       */
      public boolean hasGetAdditionalPriceInfo() {
        return getAdditionalPriceInfoBuilder_ != null || getAdditionalPriceInfo_ != null;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
       */
      public io.dstore.Values.booleanValue getGetAdditionalPriceInfo() {
        if (getAdditionalPriceInfoBuilder_ == null) {
          return getAdditionalPriceInfo_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : getAdditionalPriceInfo_;
        } else {
          return getAdditionalPriceInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
       */
      public Builder setGetAdditionalPriceInfo(io.dstore.Values.booleanValue value) {
        if (getAdditionalPriceInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getAdditionalPriceInfo_ = value;
          onChanged();
        } else {
          getAdditionalPriceInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
       */
      public Builder setGetAdditionalPriceInfo(
          io.dstore.Values.booleanValue.Builder builderForValue) {
        if (getAdditionalPriceInfoBuilder_ == null) {
          getAdditionalPriceInfo_ = builderForValue.build();
          onChanged();
        } else {
          getAdditionalPriceInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
       */
      public Builder mergeGetAdditionalPriceInfo(io.dstore.Values.booleanValue value) {
        if (getAdditionalPriceInfoBuilder_ == null) {
          if (getAdditionalPriceInfo_ != null) {
            getAdditionalPriceInfo_ =
              io.dstore.Values.booleanValue.newBuilder(getAdditionalPriceInfo_).mergeFrom(value).buildPartial();
          } else {
            getAdditionalPriceInfo_ = value;
          }
          onChanged();
        } else {
          getAdditionalPriceInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
       */
      public Builder clearGetAdditionalPriceInfo() {
        if (getAdditionalPriceInfoBuilder_ == null) {
          getAdditionalPriceInfo_ = null;
          onChanged();
        } else {
          getAdditionalPriceInfo_ = null;
          getAdditionalPriceInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
       */
      public io.dstore.Values.booleanValue.Builder getGetAdditionalPriceInfoBuilder() {
        
        onChanged();
        return getGetAdditionalPriceInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getGetAdditionalPriceInfoOrBuilder() {
        if (getAdditionalPriceInfoBuilder_ != null) {
          return getAdditionalPriceInfoBuilder_.getMessageOrBuilder();
        } else {
          return getAdditionalPriceInfo_ == null ?
              io.dstore.Values.booleanValue.getDefaultInstance() : getAdditionalPriceInfo_;
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue get_additional_price_info = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
          getGetAdditionalPriceInfoFieldBuilder() {
        if (getAdditionalPriceInfoBuilder_ == null) {
          getAdditionalPriceInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                  getGetAdditionalPriceInfo(),
                  getParentForChildren(),
                  isClean());
          getAdditionalPriceInfo_ = null;
        }
        return getAdditionalPriceInfoBuilder_;
      }

      private boolean getAdditionalPriceInfoNull_ ;
      /**
       * <code>optional bool get_additional_price_info_null = 1009;</code>
       */
      public boolean getGetAdditionalPriceInfoNull() {
        return getAdditionalPriceInfoNull_;
      }
      /**
       * <code>optional bool get_additional_price_info_null = 1009;</code>
       */
      public Builder setGetAdditionalPriceInfoNull(boolean value) {
        
        getAdditionalPriceInfoNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool get_additional_price_info_null = 1009;</code>
       */
      public Builder clearGetAdditionalPriceInfoNull() {
        
        getAdditionalPriceInfoNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.integerValue deliveryPersonId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> deliveryPersonIdBuilder_;
      /**
       * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
       */
      public boolean hasDeliveryPersonId() {
        return deliveryPersonIdBuilder_ != null || deliveryPersonId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
       */
      public io.dstore.Values.integerValue getDeliveryPersonId() {
        if (deliveryPersonIdBuilder_ == null) {
          return deliveryPersonId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : deliveryPersonId_;
        } else {
          return deliveryPersonIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
       */
      public Builder setDeliveryPersonId(io.dstore.Values.integerValue value) {
        if (deliveryPersonIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          deliveryPersonId_ = value;
          onChanged();
        } else {
          deliveryPersonIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
       */
      public Builder setDeliveryPersonId(
          io.dstore.Values.integerValue.Builder builderForValue) {
        if (deliveryPersonIdBuilder_ == null) {
          deliveryPersonId_ = builderForValue.build();
          onChanged();
        } else {
          deliveryPersonIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
       */
      public Builder mergeDeliveryPersonId(io.dstore.Values.integerValue value) {
        if (deliveryPersonIdBuilder_ == null) {
          if (deliveryPersonId_ != null) {
            deliveryPersonId_ =
              io.dstore.Values.integerValue.newBuilder(deliveryPersonId_).mergeFrom(value).buildPartial();
          } else {
            deliveryPersonId_ = value;
          }
          onChanged();
        } else {
          deliveryPersonIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
       */
      public Builder clearDeliveryPersonId() {
        if (deliveryPersonIdBuilder_ == null) {
          deliveryPersonId_ = null;
          onChanged();
        } else {
          deliveryPersonId_ = null;
          deliveryPersonIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
       */
      public io.dstore.Values.integerValue.Builder getDeliveryPersonIdBuilder() {
        
        onChanged();
        return getDeliveryPersonIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getDeliveryPersonIdOrBuilder() {
        if (deliveryPersonIdBuilder_ != null) {
          return deliveryPersonIdBuilder_.getMessageOrBuilder();
        } else {
          return deliveryPersonId_ == null ?
              io.dstore.Values.integerValue.getDefaultInstance() : deliveryPersonId_;
        }
      }
      /**
       * <code>optional .dstore.values.integerValue delivery_person_id = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
          getDeliveryPersonIdFieldBuilder() {
        if (deliveryPersonIdBuilder_ == null) {
          deliveryPersonIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                  getDeliveryPersonId(),
                  getParentForChildren(),
                  isClean());
          deliveryPersonId_ = null;
        }
        return deliveryPersonIdBuilder_;
      }

      private boolean deliveryPersonIdNull_ ;
      /**
       * <code>optional bool delivery_person_id_null = 1010;</code>
       */
      public boolean getDeliveryPersonIdNull() {
        return deliveryPersonIdNull_;
      }
      /**
       * <code>optional bool delivery_person_id_null = 1010;</code>
       */
      public Builder setDeliveryPersonIdNull(boolean value) {
        
        deliveryPersonIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool delivery_person_id_null = 1010;</code>
       */
      public Builder clearDeliveryPersonIdNull() {
        
        deliveryPersonIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.booleanValue getPricePerSingleNodeId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> getPricePerSingleNodeIdBuilder_;
      /**
       * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
       */
      public boolean hasGetPricePerSingleNodeId() {
        return getPricePerSingleNodeIdBuilder_ != null || getPricePerSingleNodeId_ != null;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
       */
      public io.dstore.Values.booleanValue getGetPricePerSingleNodeId() {
        if (getPricePerSingleNodeIdBuilder_ == null) {
          return getPricePerSingleNodeId_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : getPricePerSingleNodeId_;
        } else {
          return getPricePerSingleNodeIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
       */
      public Builder setGetPricePerSingleNodeId(io.dstore.Values.booleanValue value) {
        if (getPricePerSingleNodeIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getPricePerSingleNodeId_ = value;
          onChanged();
        } else {
          getPricePerSingleNodeIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
       */
      public Builder setGetPricePerSingleNodeId(
          io.dstore.Values.booleanValue.Builder builderForValue) {
        if (getPricePerSingleNodeIdBuilder_ == null) {
          getPricePerSingleNodeId_ = builderForValue.build();
          onChanged();
        } else {
          getPricePerSingleNodeIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
       */
      public Builder mergeGetPricePerSingleNodeId(io.dstore.Values.booleanValue value) {
        if (getPricePerSingleNodeIdBuilder_ == null) {
          if (getPricePerSingleNodeId_ != null) {
            getPricePerSingleNodeId_ =
              io.dstore.Values.booleanValue.newBuilder(getPricePerSingleNodeId_).mergeFrom(value).buildPartial();
          } else {
            getPricePerSingleNodeId_ = value;
          }
          onChanged();
        } else {
          getPricePerSingleNodeIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
       */
      public Builder clearGetPricePerSingleNodeId() {
        if (getPricePerSingleNodeIdBuilder_ == null) {
          getPricePerSingleNodeId_ = null;
          onChanged();
        } else {
          getPricePerSingleNodeId_ = null;
          getPricePerSingleNodeIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
       */
      public io.dstore.Values.booleanValue.Builder getGetPricePerSingleNodeIdBuilder() {
        
        onChanged();
        return getGetPricePerSingleNodeIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getGetPricePerSingleNodeIdOrBuilder() {
        if (getPricePerSingleNodeIdBuilder_ != null) {
          return getPricePerSingleNodeIdBuilder_.getMessageOrBuilder();
        } else {
          return getPricePerSingleNodeId_ == null ?
              io.dstore.Values.booleanValue.getDefaultInstance() : getPricePerSingleNodeId_;
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue get_price_per_single_node_id = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
          getGetPricePerSingleNodeIdFieldBuilder() {
        if (getPricePerSingleNodeIdBuilder_ == null) {
          getPricePerSingleNodeIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                  getGetPricePerSingleNodeId(),
                  getParentForChildren(),
                  isClean());
          getPricePerSingleNodeId_ = null;
        }
        return getPricePerSingleNodeIdBuilder_;
      }

      private boolean getPricePerSingleNodeIdNull_ ;
      /**
       * <code>optional bool get_price_per_single_node_id_null = 1011;</code>
       */
      public boolean getGetPricePerSingleNodeIdNull() {
        return getPricePerSingleNodeIdNull_;
      }
      /**
       * <code>optional bool get_price_per_single_node_id_null = 1011;</code>
       */
      public Builder setGetPricePerSingleNodeIdNull(boolean value) {
        
        getPricePerSingleNodeIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool get_price_per_single_node_id_null = 1011;</code>
       */
      public Builder clearGetPricePerSingleNodeIdNull() {
        
        getPricePerSingleNodeIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.integerValue paymentTypeId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> paymentTypeIdBuilder_;
      /**
       * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
       */
      public boolean hasPaymentTypeId() {
        return paymentTypeIdBuilder_ != null || paymentTypeId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
       */
      public io.dstore.Values.integerValue getPaymentTypeId() {
        if (paymentTypeIdBuilder_ == null) {
          return paymentTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : paymentTypeId_;
        } else {
          return paymentTypeIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
       */
      public Builder setPaymentTypeId(io.dstore.Values.integerValue value) {
        if (paymentTypeIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          paymentTypeId_ = value;
          onChanged();
        } else {
          paymentTypeIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
       */
      public Builder setPaymentTypeId(
          io.dstore.Values.integerValue.Builder builderForValue) {
        if (paymentTypeIdBuilder_ == null) {
          paymentTypeId_ = builderForValue.build();
          onChanged();
        } else {
          paymentTypeIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
       */
      public Builder mergePaymentTypeId(io.dstore.Values.integerValue value) {
        if (paymentTypeIdBuilder_ == null) {
          if (paymentTypeId_ != null) {
            paymentTypeId_ =
              io.dstore.Values.integerValue.newBuilder(paymentTypeId_).mergeFrom(value).buildPartial();
          } else {
            paymentTypeId_ = value;
          }
          onChanged();
        } else {
          paymentTypeIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
       */
      public Builder clearPaymentTypeId() {
        if (paymentTypeIdBuilder_ == null) {
          paymentTypeId_ = null;
          onChanged();
        } else {
          paymentTypeId_ = null;
          paymentTypeIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
       */
      public io.dstore.Values.integerValue.Builder getPaymentTypeIdBuilder() {
        
        onChanged();
        return getPaymentTypeIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getPaymentTypeIdOrBuilder() {
        if (paymentTypeIdBuilder_ != null) {
          return paymentTypeIdBuilder_.getMessageOrBuilder();
        } else {
          return paymentTypeId_ == null ?
              io.dstore.Values.integerValue.getDefaultInstance() : paymentTypeId_;
        }
      }
      /**
       * <code>optional .dstore.values.integerValue payment_type_id = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
          getPaymentTypeIdFieldBuilder() {
        if (paymentTypeIdBuilder_ == null) {
          paymentTypeIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                  getPaymentTypeId(),
                  getParentForChildren(),
                  isClean());
          paymentTypeId_ = null;
        }
        return paymentTypeIdBuilder_;
      }

      private boolean paymentTypeIdNull_ ;
      /**
       * <code>optional bool payment_type_id_null = 1012;</code>
       */
      public boolean getPaymentTypeIdNull() {
        return paymentTypeIdNull_;
      }
      /**
       * <code>optional bool payment_type_id_null = 1012;</code>
       */
      public Builder setPaymentTypeIdNull(boolean value) {
        
        paymentTypeIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool payment_type_id_null = 1012;</code>
       */
      public Builder clearPaymentTypeIdNull() {
        
        paymentTypeIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.integerValue shippingTypeId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> shippingTypeIdBuilder_;
      /**
       * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
       */
      public boolean hasShippingTypeId() {
        return shippingTypeIdBuilder_ != null || shippingTypeId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
       */
      public io.dstore.Values.integerValue getShippingTypeId() {
        if (shippingTypeIdBuilder_ == null) {
          return shippingTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : shippingTypeId_;
        } else {
          return shippingTypeIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
       */
      public Builder setShippingTypeId(io.dstore.Values.integerValue value) {
        if (shippingTypeIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          shippingTypeId_ = value;
          onChanged();
        } else {
          shippingTypeIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
       */
      public Builder setShippingTypeId(
          io.dstore.Values.integerValue.Builder builderForValue) {
        if (shippingTypeIdBuilder_ == null) {
          shippingTypeId_ = builderForValue.build();
          onChanged();
        } else {
          shippingTypeIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
       */
      public Builder mergeShippingTypeId(io.dstore.Values.integerValue value) {
        if (shippingTypeIdBuilder_ == null) {
          if (shippingTypeId_ != null) {
            shippingTypeId_ =
              io.dstore.Values.integerValue.newBuilder(shippingTypeId_).mergeFrom(value).buildPartial();
          } else {
            shippingTypeId_ = value;
          }
          onChanged();
        } else {
          shippingTypeIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
       */
      public Builder clearShippingTypeId() {
        if (shippingTypeIdBuilder_ == null) {
          shippingTypeId_ = null;
          onChanged();
        } else {
          shippingTypeId_ = null;
          shippingTypeIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
       */
      public io.dstore.Values.integerValue.Builder getShippingTypeIdBuilder() {
        
        onChanged();
        return getShippingTypeIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getShippingTypeIdOrBuilder() {
        if (shippingTypeIdBuilder_ != null) {
          return shippingTypeIdBuilder_.getMessageOrBuilder();
        } else {
          return shippingTypeId_ == null ?
              io.dstore.Values.integerValue.getDefaultInstance() : shippingTypeId_;
        }
      }
      /**
       * <code>optional .dstore.values.integerValue shipping_type_id = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
          getShippingTypeIdFieldBuilder() {
        if (shippingTypeIdBuilder_ == null) {
          shippingTypeIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                  getShippingTypeId(),
                  getParentForChildren(),
                  isClean());
          shippingTypeId_ = null;
        }
        return shippingTypeIdBuilder_;
      }

      private boolean shippingTypeIdNull_ ;
      /**
       * <code>optional bool shipping_type_id_null = 1013;</code>
       */
      public boolean getShippingTypeIdNull() {
        return shippingTypeIdNull_;
      }
      /**
       * <code>optional bool shipping_type_id_null = 1013;</code>
       */
      public Builder setShippingTypeIdNull(boolean value) {
        
        shippingTypeIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool shipping_type_id_null = 1013;</code>
       */
      public Builder clearShippingTypeIdNull() {
        
        shippingTypeIdNull_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetPrices_Pu.Parameters)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.om_GetPrices_Pu.Parameters)
    private static final io.dstore.engine.procedures.OmGetPricesPu.Parameters DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procedures.OmGetPricesPu.Parameters();
    }

    public static io.dstore.engine.procedures.OmGetPricesPu.Parameters getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Parameters>
        PARSER = new com.google.protobuf.AbstractParser<Parameters>() {
      public Parameters parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Parameters(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Parameters> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Parameters> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procedures.OmGetPricesPu.Parameters getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetPrices_Pu.Response)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    java.util.List<io.dstore.engine.MetaInformation> 
        getMetaInformationList();
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    io.dstore.engine.MetaInformation getMetaInformation(int index);
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    int getMetaInformationCount();
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    java.util.List<? extends io.dstore.engine.MetaInformationOrBuilder> 
        getMetaInformationOrBuilderList();
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    io.dstore.engine.MetaInformationOrBuilder getMetaInformationOrBuilder(
        int index);

    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    java.util.List<io.dstore.engine.Message> 
        getMessageList();
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    io.dstore.engine.Message getMessage(int index);
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    int getMessageCount();
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    java.util.List<? extends io.dstore.engine.MessageOrBuilder> 
        getMessageOrBuilderList();
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    io.dstore.engine.MessageOrBuilder getMessageOrBuilder(
        int index);

    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
     */
    java.util.List<io.dstore.engine.procedures.OmGetPricesPu.Response.Row> 
        getRowList();
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
     */
    io.dstore.engine.procedures.OmGetPricesPu.Response.Row getRow(int index);
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
     */
    int getRowCount();
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
     */
    java.util.List<? extends io.dstore.engine.procedures.OmGetPricesPu.Response.RowOrBuilder> 
        getRowOrBuilderList();
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
     */
    io.dstore.engine.procedures.OmGetPricesPu.Response.RowOrBuilder getRowOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dstore.engine.om_GetPrices_Pu.Response}
   */
  public  static final class Response extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dstore.engine.om_GetPrices_Pu.Response)
      ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Response() {
      metaInformation_ = java.util.Collections.emptyList();
      message_ = java.util.Collections.emptyList();
      row_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                metaInformation_ = new java.util.ArrayList<io.dstore.engine.MetaInformation>();
                mutable_bitField0_ |= 0x00000001;
              }
              metaInformation_.add(
                  input.readMessage(io.dstore.engine.MetaInformation.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                message_ = new java.util.ArrayList<io.dstore.engine.Message>();
                mutable_bitField0_ |= 0x00000002;
              }
              message_.add(
                  input.readMessage(io.dstore.engine.Message.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                row_ = new java.util.ArrayList<io.dstore.engine.procedures.OmGetPricesPu.Response.Row>();
                mutable_bitField0_ |= 0x00000004;
              }
              row_.add(
                  input.readMessage(io.dstore.engine.procedures.OmGetPricesPu.Response.Row.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          metaInformation_ = java.util.Collections.unmodifiableList(metaInformation_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = java.util.Collections.unmodifiableList(message_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = java.util.Collections.unmodifiableList(row_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procedures.OmGetPricesPu.Response.class, io.dstore.engine.procedures.OmGetPricesPu.Response.Builder.class);
    }

    public interface RowOrBuilder extends
        // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetPrices_Pu.Response.Row)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      int getRowId();

      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
       */
      boolean hasTotalNettoPrice();
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
       */
      io.dstore.Values.decimalValue getTotalNettoPrice();
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getTotalNettoPriceOrBuilder();

      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
       */
      boolean hasPreciseAbsUnitGrossSurcharge();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
       */
      io.dstore.Values.decimalValue getPreciseAbsUnitGrossSurcharge();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getPreciseAbsUnitGrossSurchargeOrBuilder();

      /**
       * <pre>
       * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
       * </pre>
       *
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
       */
      boolean hasPriceNodeCharacteristicId();
      /**
       * <pre>
       * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
       * </pre>
       *
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
       */
      io.dstore.Values.integerValue getPriceNodeCharacteristicId();
      /**
       * <pre>
       * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
       * </pre>
       *
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
       */
      io.dstore.Values.integerValueOrBuilder getPriceNodeCharacteristicIdOrBuilder();

      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
       */
      boolean hasAbsoluteUnitNettoSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
       */
      io.dstore.Values.decimalValue getAbsoluteUnitNettoSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getAbsoluteUnitNettoSurchargeOrBuilder();

      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
       */
      boolean hasUnitGrossPrice();
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
       */
      io.dstore.Values.decimalValue getUnitGrossPrice();
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getUnitGrossPriceOrBuilder();

      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
       */
      boolean hasAbsoluteTotalNetSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
       */
      io.dstore.Values.decimalValue getAbsoluteTotalNetSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getAbsoluteTotalNetSurchargeOrBuilder();

      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
       */
      boolean hasAbsoluteTotalGrossSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
       */
      io.dstore.Values.decimalValue getAbsoluteTotalGrossSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getAbsoluteTotalGrossSurchargeOrBuilder();

      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
       */
      boolean hasUnitBruttoPrice();
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
       */
      io.dstore.Values.decimalValue getUnitBruttoPrice();
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getUnitBruttoPriceOrBuilder();

      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
       */
      boolean hasPreciseUnitGrossPrice();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
       */
      io.dstore.Values.decimalValue getPreciseUnitGrossPrice();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getPreciseUnitGrossPriceOrBuilder();

      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
       */
      boolean hasUnitNetPrice();
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
       */
      io.dstore.Values.decimalValue getUnitNetPrice();
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getUnitNetPriceOrBuilder();

      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
       */
      boolean hasTotalBruttoPrice();
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
       */
      io.dstore.Values.decimalValue getTotalBruttoPrice();
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getTotalBruttoPriceOrBuilder();

      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
       */
      boolean hasPreciseAbsUnitNetSurcharge();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
       */
      io.dstore.Values.decimalValue getPreciseAbsUnitNetSurcharge();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getPreciseAbsUnitNetSurchargeOrBuilder();

      /**
       * <pre>
       * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
       */
      boolean hasSurchargeReason();
      /**
       * <pre>
       * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
       */
      io.dstore.Values.stringValue getSurchargeReason();
      /**
       * <pre>
       * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
       */
      io.dstore.Values.stringValueOrBuilder getSurchargeReasonOrBuilder();

      /**
       * <pre>
       * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_id = 10014;</code>
       */
      boolean hasNodeId();
      /**
       * <pre>
       * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_id = 10014;</code>
       */
      io.dstore.Values.integerValue getNodeId();
      /**
       * <pre>
       * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_id = 10014;</code>
       */
      io.dstore.Values.integerValueOrBuilder getNodeIdOrBuilder();

      /**
       * <pre>
       * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
       * </pre>
       *
       * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
       */
      boolean hasTreeNodeId();
      /**
       * <pre>
       * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
       * </pre>
       *
       * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
       */
      io.dstore.Values.integerValue getTreeNodeId();
      /**
       * <pre>
       * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
       * </pre>
       *
       * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
       */
      io.dstore.Values.integerValueOrBuilder getTreeNodeIdOrBuilder();

      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
       */
      boolean hasAbsoluteTotalNettoSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
       */
      io.dstore.Values.decimalValue getAbsoluteTotalNettoSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getAbsoluteTotalNettoSurchargeOrBuilder();

      /**
       * <pre>
       * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
       */
      boolean hasRelativeSurcharge();
      /**
       * <pre>
       * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
       */
      io.dstore.Values.decimalValue getRelativeSurcharge();
      /**
       * <pre>
       * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getRelativeSurchargeOrBuilder();

      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
       */
      boolean hasAbsoluteTotalBruttoSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
       */
      io.dstore.Values.decimalValue getAbsoluteTotalBruttoSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getAbsoluteTotalBruttoSurchargeOrBuilder();

      /**
       * <pre>
       * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
       */
      boolean hasSurchargeGeneratedByCampIds();
      /**
       * <pre>
       * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
       */
      io.dstore.Values.stringValue getSurchargeGeneratedByCampIds();
      /**
       * <pre>
       * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
       */
      io.dstore.Values.stringValueOrBuilder getSurchargeGeneratedByCampIdsOrBuilder();

      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
       */
      boolean hasPreciseTotalGrossPrice();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
       */
      io.dstore.Values.decimalValue getPreciseTotalGrossPrice();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getPreciseTotalGrossPriceOrBuilder();

      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
       */
      boolean hasUnitNettoPrice();
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
       */
      io.dstore.Values.decimalValue getUnitNettoPrice();
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getUnitNettoPriceOrBuilder();

      /**
       * <pre>
       * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
       */
      boolean hasTaxesMultiplier();
      /**
       * <pre>
       * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
       */
      io.dstore.Values.decimalValue getTaxesMultiplier();
      /**
       * <pre>
       * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getTaxesMultiplierOrBuilder();

      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
       */
      boolean hasPreciseAbsTotalGrossSurcharge();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
       */
      io.dstore.Values.decimalValue getPreciseAbsTotalGrossSurcharge();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getPreciseAbsTotalGrossSurchargeOrBuilder();

      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
       */
      boolean hasPreciseAbsTotalNetSurcharge();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
       */
      io.dstore.Values.decimalValue getPreciseAbsTotalNetSurcharge();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getPreciseAbsTotalNetSurchargeOrBuilder();

      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
       */
      boolean hasTotalNetPrice();
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
       */
      io.dstore.Values.decimalValue getTotalNetPrice();
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getTotalNetPriceOrBuilder();

      /**
       * <pre>
       * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
       * </pre>
       *
       * <code>optional .dstore.values.integerValue quantity = 10026;</code>
       */
      boolean hasQuantity();
      /**
       * <pre>
       * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
       * </pre>
       *
       * <code>optional .dstore.values.integerValue quantity = 10026;</code>
       */
      io.dstore.Values.integerValue getQuantity();
      /**
       * <pre>
       * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
       * </pre>
       *
       * <code>optional .dstore.values.integerValue quantity = 10026;</code>
       */
      io.dstore.Values.integerValueOrBuilder getQuantityOrBuilder();

      /**
       * <pre>
       * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
       * </pre>
       *
       * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
       */
      boolean hasQuantityPerBundleItemSetIdList();
      /**
       * <pre>
       * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
       * </pre>
       *
       * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
       */
      io.dstore.Values.stringValue getQuantityPerBundleItemSetIdList();
      /**
       * <pre>
       * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
       * </pre>
       *
       * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
       */
      io.dstore.Values.stringValueOrBuilder getQuantityPerBundleItemSetIdListOrBuilder();

      /**
       * <pre>
       * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
       */
      boolean hasSurchargeValue();
      /**
       * <pre>
       * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
       */
      io.dstore.Values.decimalValue getSurchargeValue();
      /**
       * <pre>
       * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getSurchargeValueOrBuilder();

      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
       */
      boolean hasAbsoluteUnitNetSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
       */
      io.dstore.Values.decimalValue getAbsoluteUnitNetSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getAbsoluteUnitNetSurchargeOrBuilder();

      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
       */
      boolean hasAbsoluteUnitBruttoSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
       */
      io.dstore.Values.decimalValue getAbsoluteUnitBruttoSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getAbsoluteUnitBruttoSurchargeOrBuilder();

      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
       */
      boolean hasAbsoluteUnitGrossSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
       */
      io.dstore.Values.decimalValue getAbsoluteUnitGrossSurcharge();
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getAbsoluteUnitGrossSurchargeOrBuilder();

      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
       */
      boolean hasPreciseTotalNetPrice();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
       */
      io.dstore.Values.decimalValue getPreciseTotalNetPrice();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getPreciseTotalNetPriceOrBuilder();

      /**
       * <pre>
       * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
       */
      boolean hasSurchargeTypeId();
      /**
       * <pre>
       * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
       */
      io.dstore.Values.integerValue getSurchargeTypeId();
      /**
       * <pre>
       * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
       */
      io.dstore.Values.integerValueOrBuilder getSurchargeTypeIdOrBuilder();

      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
       */
      boolean hasPreciseUnitNetPrice();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
       */
      io.dstore.Values.decimalValue getPreciseUnitNetPrice();
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getPreciseUnitNetPriceOrBuilder();

      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
       */
      boolean hasTotalGrossPrice();
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
       */
      io.dstore.Values.decimalValue getTotalGrossPrice();
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
       */
      io.dstore.Values.decimalValueOrBuilder getTotalGrossPriceOrBuilder();
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetPrices_Pu.Response.Row}
     */
    public  static final class Row extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:dstore.engine.om_GetPrices_Pu.Response.Row)
        RowOrBuilder {
      // Use Row.newBuilder() to construct.
      private Row(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Row() {
        rowId_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private Row(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        int mutable_bitField1_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 80000: {

                rowId_ = input.readInt32();
                break;
              }
              case 80010: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (totalNettoPrice_ != null) {
                  subBuilder = totalNettoPrice_.toBuilder();
                }
                totalNettoPrice_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(totalNettoPrice_);
                  totalNettoPrice_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80018: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (preciseAbsUnitGrossSurcharge_ != null) {
                  subBuilder = preciseAbsUnitGrossSurcharge_.toBuilder();
                }
                preciseAbsUnitGrossSurcharge_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(preciseAbsUnitGrossSurcharge_);
                  preciseAbsUnitGrossSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80026: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (priceNodeCharacteristicId_ != null) {
                  subBuilder = priceNodeCharacteristicId_.toBuilder();
                }
                priceNodeCharacteristicId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(priceNodeCharacteristicId_);
                  priceNodeCharacteristicId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80034: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (absoluteUnitNettoSurcharge_ != null) {
                  subBuilder = absoluteUnitNettoSurcharge_.toBuilder();
                }
                absoluteUnitNettoSurcharge_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(absoluteUnitNettoSurcharge_);
                  absoluteUnitNettoSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80042: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (unitGrossPrice_ != null) {
                  subBuilder = unitGrossPrice_.toBuilder();
                }
                unitGrossPrice_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(unitGrossPrice_);
                  unitGrossPrice_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80050: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (absoluteTotalNetSurcharge_ != null) {
                  subBuilder = absoluteTotalNetSurcharge_.toBuilder();
                }
                absoluteTotalNetSurcharge_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(absoluteTotalNetSurcharge_);
                  absoluteTotalNetSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80058: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (absoluteTotalGrossSurcharge_ != null) {
                  subBuilder = absoluteTotalGrossSurcharge_.toBuilder();
                }
                absoluteTotalGrossSurcharge_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(absoluteTotalGrossSurcharge_);
                  absoluteTotalGrossSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80066: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (unitBruttoPrice_ != null) {
                  subBuilder = unitBruttoPrice_.toBuilder();
                }
                unitBruttoPrice_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(unitBruttoPrice_);
                  unitBruttoPrice_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80074: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (preciseUnitGrossPrice_ != null) {
                  subBuilder = preciseUnitGrossPrice_.toBuilder();
                }
                preciseUnitGrossPrice_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(preciseUnitGrossPrice_);
                  preciseUnitGrossPrice_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80082: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (unitNetPrice_ != null) {
                  subBuilder = unitNetPrice_.toBuilder();
                }
                unitNetPrice_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(unitNetPrice_);
                  unitNetPrice_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80090: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (totalBruttoPrice_ != null) {
                  subBuilder = totalBruttoPrice_.toBuilder();
                }
                totalBruttoPrice_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(totalBruttoPrice_);
                  totalBruttoPrice_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80098: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (preciseAbsUnitNetSurcharge_ != null) {
                  subBuilder = preciseAbsUnitNetSurcharge_.toBuilder();
                }
                preciseAbsUnitNetSurcharge_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(preciseAbsUnitNetSurcharge_);
                  preciseAbsUnitNetSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80106: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (surchargeReason_ != null) {
                  subBuilder = surchargeReason_.toBuilder();
                }
                surchargeReason_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(surchargeReason_);
                  surchargeReason_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80114: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (nodeId_ != null) {
                  subBuilder = nodeId_.toBuilder();
                }
                nodeId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(nodeId_);
                  nodeId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80122: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (treeNodeId_ != null) {
                  subBuilder = treeNodeId_.toBuilder();
                }
                treeNodeId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(treeNodeId_);
                  treeNodeId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80130: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (absoluteTotalNettoSurcharge_ != null) {
                  subBuilder = absoluteTotalNettoSurcharge_.toBuilder();
                }
                absoluteTotalNettoSurcharge_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(absoluteTotalNettoSurcharge_);
                  absoluteTotalNettoSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80138: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (relativeSurcharge_ != null) {
                  subBuilder = relativeSurcharge_.toBuilder();
                }
                relativeSurcharge_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(relativeSurcharge_);
                  relativeSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80146: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (absoluteTotalBruttoSurcharge_ != null) {
                  subBuilder = absoluteTotalBruttoSurcharge_.toBuilder();
                }
                absoluteTotalBruttoSurcharge_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(absoluteTotalBruttoSurcharge_);
                  absoluteTotalBruttoSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80154: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (surchargeGeneratedByCampIds_ != null) {
                  subBuilder = surchargeGeneratedByCampIds_.toBuilder();
                }
                surchargeGeneratedByCampIds_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(surchargeGeneratedByCampIds_);
                  surchargeGeneratedByCampIds_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80162: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (preciseTotalGrossPrice_ != null) {
                  subBuilder = preciseTotalGrossPrice_.toBuilder();
                }
                preciseTotalGrossPrice_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(preciseTotalGrossPrice_);
                  preciseTotalGrossPrice_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80170: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (unitNettoPrice_ != null) {
                  subBuilder = unitNettoPrice_.toBuilder();
                }
                unitNettoPrice_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(unitNettoPrice_);
                  unitNettoPrice_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80178: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (taxesMultiplier_ != null) {
                  subBuilder = taxesMultiplier_.toBuilder();
                }
                taxesMultiplier_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(taxesMultiplier_);
                  taxesMultiplier_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80186: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (preciseAbsTotalGrossSurcharge_ != null) {
                  subBuilder = preciseAbsTotalGrossSurcharge_.toBuilder();
                }
                preciseAbsTotalGrossSurcharge_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(preciseAbsTotalGrossSurcharge_);
                  preciseAbsTotalGrossSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80194: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (preciseAbsTotalNetSurcharge_ != null) {
                  subBuilder = preciseAbsTotalNetSurcharge_.toBuilder();
                }
                preciseAbsTotalNetSurcharge_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(preciseAbsTotalNetSurcharge_);
                  preciseAbsTotalNetSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80202: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (totalNetPrice_ != null) {
                  subBuilder = totalNetPrice_.toBuilder();
                }
                totalNetPrice_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(totalNetPrice_);
                  totalNetPrice_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80210: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (quantity_ != null) {
                  subBuilder = quantity_.toBuilder();
                }
                quantity_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(quantity_);
                  quantity_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80218: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (quantityPerBundleItemSetIdList_ != null) {
                  subBuilder = quantityPerBundleItemSetIdList_.toBuilder();
                }
                quantityPerBundleItemSetIdList_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(quantityPerBundleItemSetIdList_);
                  quantityPerBundleItemSetIdList_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80226: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (surchargeValue_ != null) {
                  subBuilder = surchargeValue_.toBuilder();
                }
                surchargeValue_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(surchargeValue_);
                  surchargeValue_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80234: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (absoluteUnitNetSurcharge_ != null) {
                  subBuilder = absoluteUnitNetSurcharge_.toBuilder();
                }
                absoluteUnitNetSurcharge_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(absoluteUnitNetSurcharge_);
                  absoluteUnitNetSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80242: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (absoluteUnitBruttoSurcharge_ != null) {
                  subBuilder = absoluteUnitBruttoSurcharge_.toBuilder();
                }
                absoluteUnitBruttoSurcharge_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(absoluteUnitBruttoSurcharge_);
                  absoluteUnitBruttoSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80250: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (absoluteUnitGrossSurcharge_ != null) {
                  subBuilder = absoluteUnitGrossSurcharge_.toBuilder();
                }
                absoluteUnitGrossSurcharge_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(absoluteUnitGrossSurcharge_);
                  absoluteUnitGrossSurcharge_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80258: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (preciseTotalNetPrice_ != null) {
                  subBuilder = preciseTotalNetPrice_.toBuilder();
                }
                preciseTotalNetPrice_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(preciseTotalNetPrice_);
                  preciseTotalNetPrice_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80266: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (surchargeTypeId_ != null) {
                  subBuilder = surchargeTypeId_.toBuilder();
                }
                surchargeTypeId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(surchargeTypeId_);
                  surchargeTypeId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80274: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (preciseUnitNetPrice_ != null) {
                  subBuilder = preciseUnitNetPrice_.toBuilder();
                }
                preciseUnitNetPrice_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(preciseUnitNetPrice_);
                  preciseUnitNetPrice_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80282: {
                io.dstore.Values.decimalValue.Builder subBuilder = null;
                if (totalGrossPrice_ != null) {
                  subBuilder = totalGrossPrice_.toBuilder();
                }
                totalGrossPrice_ = input.readMessage(io.dstore.Values.decimalValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(totalGrossPrice_);
                  totalGrossPrice_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Response_Row_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Response_Row_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.OmGetPricesPu.Response.Row.class, io.dstore.engine.procedures.OmGetPricesPu.Response.Row.Builder.class);
      }

      public static final int ROW_ID_FIELD_NUMBER = 10000;
      private int rowId_;
      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      public int getRowId() {
        return rowId_;
      }

      public static final int TOTAL_NETTO_PRICE_FIELD_NUMBER = 10001;
      private io.dstore.Values.decimalValue totalNettoPrice_;
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
       */
      public boolean hasTotalNettoPrice() {
        return totalNettoPrice_ != null;
      }
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
       */
      public io.dstore.Values.decimalValue getTotalNettoPrice() {
        return totalNettoPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : totalNettoPrice_;
      }
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getTotalNettoPriceOrBuilder() {
        return getTotalNettoPrice();
      }

      public static final int PRECISE_ABS_UNIT_GROSS_SURCHARGE_FIELD_NUMBER = 10002;
      private io.dstore.Values.decimalValue preciseAbsUnitGrossSurcharge_;
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
       */
      public boolean hasPreciseAbsUnitGrossSurcharge() {
        return preciseAbsUnitGrossSurcharge_ != null;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
       */
      public io.dstore.Values.decimalValue getPreciseAbsUnitGrossSurcharge() {
        return preciseAbsUnitGrossSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseAbsUnitGrossSurcharge_;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getPreciseAbsUnitGrossSurchargeOrBuilder() {
        return getPreciseAbsUnitGrossSurcharge();
      }

      public static final int PRICE_NODE_CHARACTERISTIC_ID_FIELD_NUMBER = 10003;
      private io.dstore.Values.integerValue priceNodeCharacteristicId_;
      /**
       * <pre>
       * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
       * </pre>
       *
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
       */
      public boolean hasPriceNodeCharacteristicId() {
        return priceNodeCharacteristicId_ != null;
      }
      /**
       * <pre>
       * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
       * </pre>
       *
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
       */
      public io.dstore.Values.integerValue getPriceNodeCharacteristicId() {
        return priceNodeCharacteristicId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : priceNodeCharacteristicId_;
      }
      /**
       * <pre>
       * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
       * </pre>
       *
       * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getPriceNodeCharacteristicIdOrBuilder() {
        return getPriceNodeCharacteristicId();
      }

      public static final int ABSOLUTE_UNIT_NETTO_SURCHARGE_FIELD_NUMBER = 10004;
      private io.dstore.Values.decimalValue absoluteUnitNettoSurcharge_;
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
       */
      public boolean hasAbsoluteUnitNettoSurcharge() {
        return absoluteUnitNettoSurcharge_ != null;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
       */
      public io.dstore.Values.decimalValue getAbsoluteUnitNettoSurcharge() {
        return absoluteUnitNettoSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteUnitNettoSurcharge_;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getAbsoluteUnitNettoSurchargeOrBuilder() {
        return getAbsoluteUnitNettoSurcharge();
      }

      public static final int UNIT_GROSS_PRICE_FIELD_NUMBER = 10005;
      private io.dstore.Values.decimalValue unitGrossPrice_;
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
       */
      public boolean hasUnitGrossPrice() {
        return unitGrossPrice_ != null;
      }
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
       */
      public io.dstore.Values.decimalValue getUnitGrossPrice() {
        return unitGrossPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : unitGrossPrice_;
      }
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getUnitGrossPriceOrBuilder() {
        return getUnitGrossPrice();
      }

      public static final int ABSOLUTE_TOTAL_NET_SURCHARGE_FIELD_NUMBER = 10006;
      private io.dstore.Values.decimalValue absoluteTotalNetSurcharge_;
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
       */
      public boolean hasAbsoluteTotalNetSurcharge() {
        return absoluteTotalNetSurcharge_ != null;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
       */
      public io.dstore.Values.decimalValue getAbsoluteTotalNetSurcharge() {
        return absoluteTotalNetSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteTotalNetSurcharge_;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getAbsoluteTotalNetSurchargeOrBuilder() {
        return getAbsoluteTotalNetSurcharge();
      }

      public static final int ABSOLUTE_TOTAL_GROSS_SURCHARGE_FIELD_NUMBER = 10007;
      private io.dstore.Values.decimalValue absoluteTotalGrossSurcharge_;
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
       */
      public boolean hasAbsoluteTotalGrossSurcharge() {
        return absoluteTotalGrossSurcharge_ != null;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
       */
      public io.dstore.Values.decimalValue getAbsoluteTotalGrossSurcharge() {
        return absoluteTotalGrossSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteTotalGrossSurcharge_;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getAbsoluteTotalGrossSurchargeOrBuilder() {
        return getAbsoluteTotalGrossSurcharge();
      }

      public static final int UNIT_BRUTTO_PRICE_FIELD_NUMBER = 10008;
      private io.dstore.Values.decimalValue unitBruttoPrice_;
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
       */
      public boolean hasUnitBruttoPrice() {
        return unitBruttoPrice_ != null;
      }
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
       */
      public io.dstore.Values.decimalValue getUnitBruttoPrice() {
        return unitBruttoPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : unitBruttoPrice_;
      }
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getUnitBruttoPriceOrBuilder() {
        return getUnitBruttoPrice();
      }

      public static final int PRECISE_UNIT_GROSS_PRICE_FIELD_NUMBER = 10009;
      private io.dstore.Values.decimalValue preciseUnitGrossPrice_;
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
       */
      public boolean hasPreciseUnitGrossPrice() {
        return preciseUnitGrossPrice_ != null;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
       */
      public io.dstore.Values.decimalValue getPreciseUnitGrossPrice() {
        return preciseUnitGrossPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseUnitGrossPrice_;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getPreciseUnitGrossPriceOrBuilder() {
        return getPreciseUnitGrossPrice();
      }

      public static final int UNIT_NET_PRICE_FIELD_NUMBER = 10010;
      private io.dstore.Values.decimalValue unitNetPrice_;
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
       */
      public boolean hasUnitNetPrice() {
        return unitNetPrice_ != null;
      }
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
       */
      public io.dstore.Values.decimalValue getUnitNetPrice() {
        return unitNetPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : unitNetPrice_;
      }
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getUnitNetPriceOrBuilder() {
        return getUnitNetPrice();
      }

      public static final int TOTAL_BRUTTO_PRICE_FIELD_NUMBER = 10011;
      private io.dstore.Values.decimalValue totalBruttoPrice_;
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
       */
      public boolean hasTotalBruttoPrice() {
        return totalBruttoPrice_ != null;
      }
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
       */
      public io.dstore.Values.decimalValue getTotalBruttoPrice() {
        return totalBruttoPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : totalBruttoPrice_;
      }
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getTotalBruttoPriceOrBuilder() {
        return getTotalBruttoPrice();
      }

      public static final int PRECISE_ABS_UNIT_NET_SURCHARGE_FIELD_NUMBER = 10012;
      private io.dstore.Values.decimalValue preciseAbsUnitNetSurcharge_;
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
       */
      public boolean hasPreciseAbsUnitNetSurcharge() {
        return preciseAbsUnitNetSurcharge_ != null;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
       */
      public io.dstore.Values.decimalValue getPreciseAbsUnitNetSurcharge() {
        return preciseAbsUnitNetSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseAbsUnitNetSurcharge_;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getPreciseAbsUnitNetSurchargeOrBuilder() {
        return getPreciseAbsUnitNetSurcharge();
      }

      public static final int SURCHARGE_REASON_FIELD_NUMBER = 10013;
      private io.dstore.Values.stringValue surchargeReason_;
      /**
       * <pre>
       * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
       */
      public boolean hasSurchargeReason() {
        return surchargeReason_ != null;
      }
      /**
       * <pre>
       * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
       */
      public io.dstore.Values.stringValue getSurchargeReason() {
        return surchargeReason_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : surchargeReason_;
      }
      /**
       * <pre>
       * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getSurchargeReasonOrBuilder() {
        return getSurchargeReason();
      }

      public static final int NODE_ID_FIELD_NUMBER = 10014;
      private io.dstore.Values.integerValue nodeId_;
      /**
       * <pre>
       * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_id = 10014;</code>
       */
      public boolean hasNodeId() {
        return nodeId_ != null;
      }
      /**
       * <pre>
       * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_id = 10014;</code>
       */
      public io.dstore.Values.integerValue getNodeId() {
        return nodeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : nodeId_;
      }
      /**
       * <pre>
       * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_id = 10014;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getNodeIdOrBuilder() {
        return getNodeId();
      }

      public static final int TREE_NODE_ID_FIELD_NUMBER = 10015;
      private io.dstore.Values.integerValue treeNodeId_;
      /**
       * <pre>
       * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
       * </pre>
       *
       * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
       */
      public boolean hasTreeNodeId() {
        return treeNodeId_ != null;
      }
      /**
       * <pre>
       * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
       * </pre>
       *
       * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
       */
      public io.dstore.Values.integerValue getTreeNodeId() {
        return treeNodeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : treeNodeId_;
      }
      /**
       * <pre>
       * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
       * </pre>
       *
       * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getTreeNodeIdOrBuilder() {
        return getTreeNodeId();
      }

      public static final int ABSOLUTE_TOTAL_NETTO_SURCHARGE_FIELD_NUMBER = 10016;
      private io.dstore.Values.decimalValue absoluteTotalNettoSurcharge_;
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
       */
      public boolean hasAbsoluteTotalNettoSurcharge() {
        return absoluteTotalNettoSurcharge_ != null;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
       */
      public io.dstore.Values.decimalValue getAbsoluteTotalNettoSurcharge() {
        return absoluteTotalNettoSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteTotalNettoSurcharge_;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getAbsoluteTotalNettoSurchargeOrBuilder() {
        return getAbsoluteTotalNettoSurcharge();
      }

      public static final int RELATIVE_SURCHARGE_FIELD_NUMBER = 10017;
      private io.dstore.Values.decimalValue relativeSurcharge_;
      /**
       * <pre>
       * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
       */
      public boolean hasRelativeSurcharge() {
        return relativeSurcharge_ != null;
      }
      /**
       * <pre>
       * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
       */
      public io.dstore.Values.decimalValue getRelativeSurcharge() {
        return relativeSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : relativeSurcharge_;
      }
      /**
       * <pre>
       * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getRelativeSurchargeOrBuilder() {
        return getRelativeSurcharge();
      }

      public static final int ABSOLUTE_TOTAL_BRUTTO_SURCHARGE_FIELD_NUMBER = 10018;
      private io.dstore.Values.decimalValue absoluteTotalBruttoSurcharge_;
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
       */
      public boolean hasAbsoluteTotalBruttoSurcharge() {
        return absoluteTotalBruttoSurcharge_ != null;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
       */
      public io.dstore.Values.decimalValue getAbsoluteTotalBruttoSurcharge() {
        return absoluteTotalBruttoSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteTotalBruttoSurcharge_;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getAbsoluteTotalBruttoSurchargeOrBuilder() {
        return getAbsoluteTotalBruttoSurcharge();
      }

      public static final int SURCHARGE_GENERATED_BY_CAMP_IDS_FIELD_NUMBER = 10019;
      private io.dstore.Values.stringValue surchargeGeneratedByCampIds_;
      /**
       * <pre>
       * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
       */
      public boolean hasSurchargeGeneratedByCampIds() {
        return surchargeGeneratedByCampIds_ != null;
      }
      /**
       * <pre>
       * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
       */
      public io.dstore.Values.stringValue getSurchargeGeneratedByCampIds() {
        return surchargeGeneratedByCampIds_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : surchargeGeneratedByCampIds_;
      }
      /**
       * <pre>
       * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getSurchargeGeneratedByCampIdsOrBuilder() {
        return getSurchargeGeneratedByCampIds();
      }

      public static final int PRECISE_TOTAL_GROSS_PRICE_FIELD_NUMBER = 10020;
      private io.dstore.Values.decimalValue preciseTotalGrossPrice_;
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
       */
      public boolean hasPreciseTotalGrossPrice() {
        return preciseTotalGrossPrice_ != null;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
       */
      public io.dstore.Values.decimalValue getPreciseTotalGrossPrice() {
        return preciseTotalGrossPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseTotalGrossPrice_;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getPreciseTotalGrossPriceOrBuilder() {
        return getPreciseTotalGrossPrice();
      }

      public static final int UNIT_NETTO_PRICE_FIELD_NUMBER = 10021;
      private io.dstore.Values.decimalValue unitNettoPrice_;
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
       */
      public boolean hasUnitNettoPrice() {
        return unitNettoPrice_ != null;
      }
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
       */
      public io.dstore.Values.decimalValue getUnitNettoPrice() {
        return unitNettoPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : unitNettoPrice_;
      }
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getUnitNettoPriceOrBuilder() {
        return getUnitNettoPrice();
      }

      public static final int TAXES_MULTIPLIER_FIELD_NUMBER = 10022;
      private io.dstore.Values.decimalValue taxesMultiplier_;
      /**
       * <pre>
       * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
       */
      public boolean hasTaxesMultiplier() {
        return taxesMultiplier_ != null;
      }
      /**
       * <pre>
       * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
       */
      public io.dstore.Values.decimalValue getTaxesMultiplier() {
        return taxesMultiplier_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : taxesMultiplier_;
      }
      /**
       * <pre>
       * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getTaxesMultiplierOrBuilder() {
        return getTaxesMultiplier();
      }

      public static final int PRECISE_ABS_TOTAL_GROSS_SURCHARGE_FIELD_NUMBER = 10023;
      private io.dstore.Values.decimalValue preciseAbsTotalGrossSurcharge_;
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
       */
      public boolean hasPreciseAbsTotalGrossSurcharge() {
        return preciseAbsTotalGrossSurcharge_ != null;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
       */
      public io.dstore.Values.decimalValue getPreciseAbsTotalGrossSurcharge() {
        return preciseAbsTotalGrossSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseAbsTotalGrossSurcharge_;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getPreciseAbsTotalGrossSurchargeOrBuilder() {
        return getPreciseAbsTotalGrossSurcharge();
      }

      public static final int PRECISE_ABS_TOTAL_NET_SURCHARGE_FIELD_NUMBER = 10024;
      private io.dstore.Values.decimalValue preciseAbsTotalNetSurcharge_;
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
       */
      public boolean hasPreciseAbsTotalNetSurcharge() {
        return preciseAbsTotalNetSurcharge_ != null;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
       */
      public io.dstore.Values.decimalValue getPreciseAbsTotalNetSurcharge() {
        return preciseAbsTotalNetSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseAbsTotalNetSurcharge_;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getPreciseAbsTotalNetSurchargeOrBuilder() {
        return getPreciseAbsTotalNetSurcharge();
      }

      public static final int TOTAL_NET_PRICE_FIELD_NUMBER = 10025;
      private io.dstore.Values.decimalValue totalNetPrice_;
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
       */
      public boolean hasTotalNetPrice() {
        return totalNetPrice_ != null;
      }
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
       */
      public io.dstore.Values.decimalValue getTotalNetPrice() {
        return totalNetPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : totalNetPrice_;
      }
      /**
       * <pre>
       * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getTotalNetPriceOrBuilder() {
        return getTotalNetPrice();
      }

      public static final int QUANTITY_FIELD_NUMBER = 10026;
      private io.dstore.Values.integerValue quantity_;
      /**
       * <pre>
       * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
       * </pre>
       *
       * <code>optional .dstore.values.integerValue quantity = 10026;</code>
       */
      public boolean hasQuantity() {
        return quantity_ != null;
      }
      /**
       * <pre>
       * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
       * </pre>
       *
       * <code>optional .dstore.values.integerValue quantity = 10026;</code>
       */
      public io.dstore.Values.integerValue getQuantity() {
        return quantity_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : quantity_;
      }
      /**
       * <pre>
       * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
       * </pre>
       *
       * <code>optional .dstore.values.integerValue quantity = 10026;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getQuantityOrBuilder() {
        return getQuantity();
      }

      public static final int QUANTITY_PER_BUNDLE_ITEM_SET_ID_LIST_FIELD_NUMBER = 10027;
      private io.dstore.Values.stringValue quantityPerBundleItemSetIdList_;
      /**
       * <pre>
       * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
       * </pre>
       *
       * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
       */
      public boolean hasQuantityPerBundleItemSetIdList() {
        return quantityPerBundleItemSetIdList_ != null;
      }
      /**
       * <pre>
       * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
       * </pre>
       *
       * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
       */
      public io.dstore.Values.stringValue getQuantityPerBundleItemSetIdList() {
        return quantityPerBundleItemSetIdList_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : quantityPerBundleItemSetIdList_;
      }
      /**
       * <pre>
       * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
       * </pre>
       *
       * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getQuantityPerBundleItemSetIdListOrBuilder() {
        return getQuantityPerBundleItemSetIdList();
      }

      public static final int SURCHARGE_VALUE_FIELD_NUMBER = 10028;
      private io.dstore.Values.decimalValue surchargeValue_;
      /**
       * <pre>
       * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
       */
      public boolean hasSurchargeValue() {
        return surchargeValue_ != null;
      }
      /**
       * <pre>
       * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
       */
      public io.dstore.Values.decimalValue getSurchargeValue() {
        return surchargeValue_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : surchargeValue_;
      }
      /**
       * <pre>
       * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getSurchargeValueOrBuilder() {
        return getSurchargeValue();
      }

      public static final int ABSOLUTE_UNIT_NET_SURCHARGE_FIELD_NUMBER = 10029;
      private io.dstore.Values.decimalValue absoluteUnitNetSurcharge_;
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
       */
      public boolean hasAbsoluteUnitNetSurcharge() {
        return absoluteUnitNetSurcharge_ != null;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
       */
      public io.dstore.Values.decimalValue getAbsoluteUnitNetSurcharge() {
        return absoluteUnitNetSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteUnitNetSurcharge_;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getAbsoluteUnitNetSurchargeOrBuilder() {
        return getAbsoluteUnitNetSurcharge();
      }

      public static final int ABSOLUTE_UNIT_BRUTTO_SURCHARGE_FIELD_NUMBER = 10030;
      private io.dstore.Values.decimalValue absoluteUnitBruttoSurcharge_;
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
       */
      public boolean hasAbsoluteUnitBruttoSurcharge() {
        return absoluteUnitBruttoSurcharge_ != null;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
       */
      public io.dstore.Values.decimalValue getAbsoluteUnitBruttoSurcharge() {
        return absoluteUnitBruttoSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteUnitBruttoSurcharge_;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getAbsoluteUnitBruttoSurchargeOrBuilder() {
        return getAbsoluteUnitBruttoSurcharge();
      }

      public static final int ABSOLUTE_UNIT_GROSS_SURCHARGE_FIELD_NUMBER = 10031;
      private io.dstore.Values.decimalValue absoluteUnitGrossSurcharge_;
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
       */
      public boolean hasAbsoluteUnitGrossSurcharge() {
        return absoluteUnitGrossSurcharge_ != null;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
       */
      public io.dstore.Values.decimalValue getAbsoluteUnitGrossSurcharge() {
        return absoluteUnitGrossSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteUnitGrossSurcharge_;
      }
      /**
       * <pre>
       * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getAbsoluteUnitGrossSurchargeOrBuilder() {
        return getAbsoluteUnitGrossSurcharge();
      }

      public static final int PRECISE_TOTAL_NET_PRICE_FIELD_NUMBER = 10032;
      private io.dstore.Values.decimalValue preciseTotalNetPrice_;
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
       */
      public boolean hasPreciseTotalNetPrice() {
        return preciseTotalNetPrice_ != null;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
       */
      public io.dstore.Values.decimalValue getPreciseTotalNetPrice() {
        return preciseTotalNetPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseTotalNetPrice_;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getPreciseTotalNetPriceOrBuilder() {
        return getPreciseTotalNetPrice();
      }

      public static final int SURCHARGE_TYPE_ID_FIELD_NUMBER = 10033;
      private io.dstore.Values.integerValue surchargeTypeId_;
      /**
       * <pre>
       * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
       */
      public boolean hasSurchargeTypeId() {
        return surchargeTypeId_ != null;
      }
      /**
       * <pre>
       * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
       */
      public io.dstore.Values.integerValue getSurchargeTypeId() {
        return surchargeTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeId_;
      }
      /**
       * <pre>
       * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getSurchargeTypeIdOrBuilder() {
        return getSurchargeTypeId();
      }

      public static final int PRECISE_UNIT_NET_PRICE_FIELD_NUMBER = 10034;
      private io.dstore.Values.decimalValue preciseUnitNetPrice_;
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
       */
      public boolean hasPreciseUnitNetPrice() {
        return preciseUnitNetPrice_ != null;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
       */
      public io.dstore.Values.decimalValue getPreciseUnitNetPrice() {
        return preciseUnitNetPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseUnitNetPrice_;
      }
      /**
       * <pre>
       * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getPreciseUnitNetPriceOrBuilder() {
        return getPreciseUnitNetPrice();
      }

      public static final int TOTAL_GROSS_PRICE_FIELD_NUMBER = 10035;
      private io.dstore.Values.decimalValue totalGrossPrice_;
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
       */
      public boolean hasTotalGrossPrice() {
        return totalGrossPrice_ != null;
      }
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
       */
      public io.dstore.Values.decimalValue getTotalGrossPrice() {
        return totalGrossPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : totalGrossPrice_;
      }
      /**
       * <pre>
       * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
       * </pre>
       *
       * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
       */
      public io.dstore.Values.decimalValueOrBuilder getTotalGrossPriceOrBuilder() {
        return getTotalGrossPrice();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (rowId_ != 0) {
          output.writeInt32(10000, rowId_);
        }
        if (totalNettoPrice_ != null) {
          output.writeMessage(10001, getTotalNettoPrice());
        }
        if (preciseAbsUnitGrossSurcharge_ != null) {
          output.writeMessage(10002, getPreciseAbsUnitGrossSurcharge());
        }
        if (priceNodeCharacteristicId_ != null) {
          output.writeMessage(10003, getPriceNodeCharacteristicId());
        }
        if (absoluteUnitNettoSurcharge_ != null) {
          output.writeMessage(10004, getAbsoluteUnitNettoSurcharge());
        }
        if (unitGrossPrice_ != null) {
          output.writeMessage(10005, getUnitGrossPrice());
        }
        if (absoluteTotalNetSurcharge_ != null) {
          output.writeMessage(10006, getAbsoluteTotalNetSurcharge());
        }
        if (absoluteTotalGrossSurcharge_ != null) {
          output.writeMessage(10007, getAbsoluteTotalGrossSurcharge());
        }
        if (unitBruttoPrice_ != null) {
          output.writeMessage(10008, getUnitBruttoPrice());
        }
        if (preciseUnitGrossPrice_ != null) {
          output.writeMessage(10009, getPreciseUnitGrossPrice());
        }
        if (unitNetPrice_ != null) {
          output.writeMessage(10010, getUnitNetPrice());
        }
        if (totalBruttoPrice_ != null) {
          output.writeMessage(10011, getTotalBruttoPrice());
        }
        if (preciseAbsUnitNetSurcharge_ != null) {
          output.writeMessage(10012, getPreciseAbsUnitNetSurcharge());
        }
        if (surchargeReason_ != null) {
          output.writeMessage(10013, getSurchargeReason());
        }
        if (nodeId_ != null) {
          output.writeMessage(10014, getNodeId());
        }
        if (treeNodeId_ != null) {
          output.writeMessage(10015, getTreeNodeId());
        }
        if (absoluteTotalNettoSurcharge_ != null) {
          output.writeMessage(10016, getAbsoluteTotalNettoSurcharge());
        }
        if (relativeSurcharge_ != null) {
          output.writeMessage(10017, getRelativeSurcharge());
        }
        if (absoluteTotalBruttoSurcharge_ != null) {
          output.writeMessage(10018, getAbsoluteTotalBruttoSurcharge());
        }
        if (surchargeGeneratedByCampIds_ != null) {
          output.writeMessage(10019, getSurchargeGeneratedByCampIds());
        }
        if (preciseTotalGrossPrice_ != null) {
          output.writeMessage(10020, getPreciseTotalGrossPrice());
        }
        if (unitNettoPrice_ != null) {
          output.writeMessage(10021, getUnitNettoPrice());
        }
        if (taxesMultiplier_ != null) {
          output.writeMessage(10022, getTaxesMultiplier());
        }
        if (preciseAbsTotalGrossSurcharge_ != null) {
          output.writeMessage(10023, getPreciseAbsTotalGrossSurcharge());
        }
        if (preciseAbsTotalNetSurcharge_ != null) {
          output.writeMessage(10024, getPreciseAbsTotalNetSurcharge());
        }
        if (totalNetPrice_ != null) {
          output.writeMessage(10025, getTotalNetPrice());
        }
        if (quantity_ != null) {
          output.writeMessage(10026, getQuantity());
        }
        if (quantityPerBundleItemSetIdList_ != null) {
          output.writeMessage(10027, getQuantityPerBundleItemSetIdList());
        }
        if (surchargeValue_ != null) {
          output.writeMessage(10028, getSurchargeValue());
        }
        if (absoluteUnitNetSurcharge_ != null) {
          output.writeMessage(10029, getAbsoluteUnitNetSurcharge());
        }
        if (absoluteUnitBruttoSurcharge_ != null) {
          output.writeMessage(10030, getAbsoluteUnitBruttoSurcharge());
        }
        if (absoluteUnitGrossSurcharge_ != null) {
          output.writeMessage(10031, getAbsoluteUnitGrossSurcharge());
        }
        if (preciseTotalNetPrice_ != null) {
          output.writeMessage(10032, getPreciseTotalNetPrice());
        }
        if (surchargeTypeId_ != null) {
          output.writeMessage(10033, getSurchargeTypeId());
        }
        if (preciseUnitNetPrice_ != null) {
          output.writeMessage(10034, getPreciseUnitNetPrice());
        }
        if (totalGrossPrice_ != null) {
          output.writeMessage(10035, getTotalGrossPrice());
        }
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (rowId_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10000, rowId_);
        }
        if (totalNettoPrice_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10001, getTotalNettoPrice());
        }
        if (preciseAbsUnitGrossSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10002, getPreciseAbsUnitGrossSurcharge());
        }
        if (priceNodeCharacteristicId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10003, getPriceNodeCharacteristicId());
        }
        if (absoluteUnitNettoSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10004, getAbsoluteUnitNettoSurcharge());
        }
        if (unitGrossPrice_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10005, getUnitGrossPrice());
        }
        if (absoluteTotalNetSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10006, getAbsoluteTotalNetSurcharge());
        }
        if (absoluteTotalGrossSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10007, getAbsoluteTotalGrossSurcharge());
        }
        if (unitBruttoPrice_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10008, getUnitBruttoPrice());
        }
        if (preciseUnitGrossPrice_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10009, getPreciseUnitGrossPrice());
        }
        if (unitNetPrice_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10010, getUnitNetPrice());
        }
        if (totalBruttoPrice_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10011, getTotalBruttoPrice());
        }
        if (preciseAbsUnitNetSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10012, getPreciseAbsUnitNetSurcharge());
        }
        if (surchargeReason_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10013, getSurchargeReason());
        }
        if (nodeId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10014, getNodeId());
        }
        if (treeNodeId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10015, getTreeNodeId());
        }
        if (absoluteTotalNettoSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10016, getAbsoluteTotalNettoSurcharge());
        }
        if (relativeSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10017, getRelativeSurcharge());
        }
        if (absoluteTotalBruttoSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10018, getAbsoluteTotalBruttoSurcharge());
        }
        if (surchargeGeneratedByCampIds_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10019, getSurchargeGeneratedByCampIds());
        }
        if (preciseTotalGrossPrice_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10020, getPreciseTotalGrossPrice());
        }
        if (unitNettoPrice_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10021, getUnitNettoPrice());
        }
        if (taxesMultiplier_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10022, getTaxesMultiplier());
        }
        if (preciseAbsTotalGrossSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10023, getPreciseAbsTotalGrossSurcharge());
        }
        if (preciseAbsTotalNetSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10024, getPreciseAbsTotalNetSurcharge());
        }
        if (totalNetPrice_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10025, getTotalNetPrice());
        }
        if (quantity_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10026, getQuantity());
        }
        if (quantityPerBundleItemSetIdList_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10027, getQuantityPerBundleItemSetIdList());
        }
        if (surchargeValue_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10028, getSurchargeValue());
        }
        if (absoluteUnitNetSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10029, getAbsoluteUnitNetSurcharge());
        }
        if (absoluteUnitBruttoSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10030, getAbsoluteUnitBruttoSurcharge());
        }
        if (absoluteUnitGrossSurcharge_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10031, getAbsoluteUnitGrossSurcharge());
        }
        if (preciseTotalNetPrice_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10032, getPreciseTotalNetPrice());
        }
        if (surchargeTypeId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10033, getSurchargeTypeId());
        }
        if (preciseUnitNetPrice_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10034, getPreciseUnitNetPrice());
        }
        if (totalGrossPrice_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10035, getTotalGrossPrice());
        }
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof io.dstore.engine.procedures.OmGetPricesPu.Response.Row)) {
          return super.equals(obj);
        }
        io.dstore.engine.procedures.OmGetPricesPu.Response.Row other = (io.dstore.engine.procedures.OmGetPricesPu.Response.Row) obj;

        boolean result = true;
        result = result && (getRowId()
            == other.getRowId());
        result = result && (hasTotalNettoPrice() == other.hasTotalNettoPrice());
        if (hasTotalNettoPrice()) {
          result = result && getTotalNettoPrice()
              .equals(other.getTotalNettoPrice());
        }
        result = result && (hasPreciseAbsUnitGrossSurcharge() == other.hasPreciseAbsUnitGrossSurcharge());
        if (hasPreciseAbsUnitGrossSurcharge()) {
          result = result && getPreciseAbsUnitGrossSurcharge()
              .equals(other.getPreciseAbsUnitGrossSurcharge());
        }
        result = result && (hasPriceNodeCharacteristicId() == other.hasPriceNodeCharacteristicId());
        if (hasPriceNodeCharacteristicId()) {
          result = result && getPriceNodeCharacteristicId()
              .equals(other.getPriceNodeCharacteristicId());
        }
        result = result && (hasAbsoluteUnitNettoSurcharge() == other.hasAbsoluteUnitNettoSurcharge());
        if (hasAbsoluteUnitNettoSurcharge()) {
          result = result && getAbsoluteUnitNettoSurcharge()
              .equals(other.getAbsoluteUnitNettoSurcharge());
        }
        result = result && (hasUnitGrossPrice() == other.hasUnitGrossPrice());
        if (hasUnitGrossPrice()) {
          result = result && getUnitGrossPrice()
              .equals(other.getUnitGrossPrice());
        }
        result = result && (hasAbsoluteTotalNetSurcharge() == other.hasAbsoluteTotalNetSurcharge());
        if (hasAbsoluteTotalNetSurcharge()) {
          result = result && getAbsoluteTotalNetSurcharge()
              .equals(other.getAbsoluteTotalNetSurcharge());
        }
        result = result && (hasAbsoluteTotalGrossSurcharge() == other.hasAbsoluteTotalGrossSurcharge());
        if (hasAbsoluteTotalGrossSurcharge()) {
          result = result && getAbsoluteTotalGrossSurcharge()
              .equals(other.getAbsoluteTotalGrossSurcharge());
        }
        result = result && (hasUnitBruttoPrice() == other.hasUnitBruttoPrice());
        if (hasUnitBruttoPrice()) {
          result = result && getUnitBruttoPrice()
              .equals(other.getUnitBruttoPrice());
        }
        result = result && (hasPreciseUnitGrossPrice() == other.hasPreciseUnitGrossPrice());
        if (hasPreciseUnitGrossPrice()) {
          result = result && getPreciseUnitGrossPrice()
              .equals(other.getPreciseUnitGrossPrice());
        }
        result = result && (hasUnitNetPrice() == other.hasUnitNetPrice());
        if (hasUnitNetPrice()) {
          result = result && getUnitNetPrice()
              .equals(other.getUnitNetPrice());
        }
        result = result && (hasTotalBruttoPrice() == other.hasTotalBruttoPrice());
        if (hasTotalBruttoPrice()) {
          result = result && getTotalBruttoPrice()
              .equals(other.getTotalBruttoPrice());
        }
        result = result && (hasPreciseAbsUnitNetSurcharge() == other.hasPreciseAbsUnitNetSurcharge());
        if (hasPreciseAbsUnitNetSurcharge()) {
          result = result && getPreciseAbsUnitNetSurcharge()
              .equals(other.getPreciseAbsUnitNetSurcharge());
        }
        result = result && (hasSurchargeReason() == other.hasSurchargeReason());
        if (hasSurchargeReason()) {
          result = result && getSurchargeReason()
              .equals(other.getSurchargeReason());
        }
        result = result && (hasNodeId() == other.hasNodeId());
        if (hasNodeId()) {
          result = result && getNodeId()
              .equals(other.getNodeId());
        }
        result = result && (hasTreeNodeId() == other.hasTreeNodeId());
        if (hasTreeNodeId()) {
          result = result && getTreeNodeId()
              .equals(other.getTreeNodeId());
        }
        result = result && (hasAbsoluteTotalNettoSurcharge() == other.hasAbsoluteTotalNettoSurcharge());
        if (hasAbsoluteTotalNettoSurcharge()) {
          result = result && getAbsoluteTotalNettoSurcharge()
              .equals(other.getAbsoluteTotalNettoSurcharge());
        }
        result = result && (hasRelativeSurcharge() == other.hasRelativeSurcharge());
        if (hasRelativeSurcharge()) {
          result = result && getRelativeSurcharge()
              .equals(other.getRelativeSurcharge());
        }
        result = result && (hasAbsoluteTotalBruttoSurcharge() == other.hasAbsoluteTotalBruttoSurcharge());
        if (hasAbsoluteTotalBruttoSurcharge()) {
          result = result && getAbsoluteTotalBruttoSurcharge()
              .equals(other.getAbsoluteTotalBruttoSurcharge());
        }
        result = result && (hasSurchargeGeneratedByCampIds() == other.hasSurchargeGeneratedByCampIds());
        if (hasSurchargeGeneratedByCampIds()) {
          result = result && getSurchargeGeneratedByCampIds()
              .equals(other.getSurchargeGeneratedByCampIds());
        }
        result = result && (hasPreciseTotalGrossPrice() == other.hasPreciseTotalGrossPrice());
        if (hasPreciseTotalGrossPrice()) {
          result = result && getPreciseTotalGrossPrice()
              .equals(other.getPreciseTotalGrossPrice());
        }
        result = result && (hasUnitNettoPrice() == other.hasUnitNettoPrice());
        if (hasUnitNettoPrice()) {
          result = result && getUnitNettoPrice()
              .equals(other.getUnitNettoPrice());
        }
        result = result && (hasTaxesMultiplier() == other.hasTaxesMultiplier());
        if (hasTaxesMultiplier()) {
          result = result && getTaxesMultiplier()
              .equals(other.getTaxesMultiplier());
        }
        result = result && (hasPreciseAbsTotalGrossSurcharge() == other.hasPreciseAbsTotalGrossSurcharge());
        if (hasPreciseAbsTotalGrossSurcharge()) {
          result = result && getPreciseAbsTotalGrossSurcharge()
              .equals(other.getPreciseAbsTotalGrossSurcharge());
        }
        result = result && (hasPreciseAbsTotalNetSurcharge() == other.hasPreciseAbsTotalNetSurcharge());
        if (hasPreciseAbsTotalNetSurcharge()) {
          result = result && getPreciseAbsTotalNetSurcharge()
              .equals(other.getPreciseAbsTotalNetSurcharge());
        }
        result = result && (hasTotalNetPrice() == other.hasTotalNetPrice());
        if (hasTotalNetPrice()) {
          result = result && getTotalNetPrice()
              .equals(other.getTotalNetPrice());
        }
        result = result && (hasQuantity() == other.hasQuantity());
        if (hasQuantity()) {
          result = result && getQuantity()
              .equals(other.getQuantity());
        }
        result = result && (hasQuantityPerBundleItemSetIdList() == other.hasQuantityPerBundleItemSetIdList());
        if (hasQuantityPerBundleItemSetIdList()) {
          result = result && getQuantityPerBundleItemSetIdList()
              .equals(other.getQuantityPerBundleItemSetIdList());
        }
        result = result && (hasSurchargeValue() == other.hasSurchargeValue());
        if (hasSurchargeValue()) {
          result = result && getSurchargeValue()
              .equals(other.getSurchargeValue());
        }
        result = result && (hasAbsoluteUnitNetSurcharge() == other.hasAbsoluteUnitNetSurcharge());
        if (hasAbsoluteUnitNetSurcharge()) {
          result = result && getAbsoluteUnitNetSurcharge()
              .equals(other.getAbsoluteUnitNetSurcharge());
        }
        result = result && (hasAbsoluteUnitBruttoSurcharge() == other.hasAbsoluteUnitBruttoSurcharge());
        if (hasAbsoluteUnitBruttoSurcharge()) {
          result = result && getAbsoluteUnitBruttoSurcharge()
              .equals(other.getAbsoluteUnitBruttoSurcharge());
        }
        result = result && (hasAbsoluteUnitGrossSurcharge() == other.hasAbsoluteUnitGrossSurcharge());
        if (hasAbsoluteUnitGrossSurcharge()) {
          result = result && getAbsoluteUnitGrossSurcharge()
              .equals(other.getAbsoluteUnitGrossSurcharge());
        }
        result = result && (hasPreciseTotalNetPrice() == other.hasPreciseTotalNetPrice());
        if (hasPreciseTotalNetPrice()) {
          result = result && getPreciseTotalNetPrice()
              .equals(other.getPreciseTotalNetPrice());
        }
        result = result && (hasSurchargeTypeId() == other.hasSurchargeTypeId());
        if (hasSurchargeTypeId()) {
          result = result && getSurchargeTypeId()
              .equals(other.getSurchargeTypeId());
        }
        result = result && (hasPreciseUnitNetPrice() == other.hasPreciseUnitNetPrice());
        if (hasPreciseUnitNetPrice()) {
          result = result && getPreciseUnitNetPrice()
              .equals(other.getPreciseUnitNetPrice());
        }
        result = result && (hasTotalGrossPrice() == other.hasTotalGrossPrice());
        if (hasTotalGrossPrice()) {
          result = result && getTotalGrossPrice()
              .equals(other.getTotalGrossPrice());
        }
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptorForType().hashCode();
        hash = (37 * hash) + ROW_ID_FIELD_NUMBER;
        hash = (53 * hash) + getRowId();
        if (hasTotalNettoPrice()) {
          hash = (37 * hash) + TOTAL_NETTO_PRICE_FIELD_NUMBER;
          hash = (53 * hash) + getTotalNettoPrice().hashCode();
        }
        if (hasPreciseAbsUnitGrossSurcharge()) {
          hash = (37 * hash) + PRECISE_ABS_UNIT_GROSS_SURCHARGE_FIELD_NUMBER;
          hash = (53 * hash) + getPreciseAbsUnitGrossSurcharge().hashCode();
        }
        if (hasPriceNodeCharacteristicId()) {
          hash = (37 * hash) + PRICE_NODE_CHARACTERISTIC_ID_FIELD_NUMBER;
          hash = (53 * hash) + getPriceNodeCharacteristicId().hashCode();
        }
        if (hasAbsoluteUnitNettoSurcharge()) {
          hash = (37 * hash) + ABSOLUTE_UNIT_NETTO_SURCHARGE_FIELD_NUMBER;
          hash = (53 * hash) + getAbsoluteUnitNettoSurcharge().hashCode();
        }
        if (hasUnitGrossPrice()) {
          hash = (37 * hash) + UNIT_GROSS_PRICE_FIELD_NUMBER;
          hash = (53 * hash) + getUnitGrossPrice().hashCode();
        }
        if (hasAbsoluteTotalNetSurcharge()) {
          hash = (37 * hash) + ABSOLUTE_TOTAL_NET_SURCHARGE_FIELD_NUMBER;
          hash = (53 * hash) + getAbsoluteTotalNetSurcharge().hashCode();
        }
        if (hasAbsoluteTotalGrossSurcharge()) {
          hash = (37 * hash) + ABSOLUTE_TOTAL_GROSS_SURCHARGE_FIELD_NUMBER;
          hash = (53 * hash) + getAbsoluteTotalGrossSurcharge().hashCode();
        }
        if (hasUnitBruttoPrice()) {
          hash = (37 * hash) + UNIT_BRUTTO_PRICE_FIELD_NUMBER;
          hash = (53 * hash) + getUnitBruttoPrice().hashCode();
        }
        if (hasPreciseUnitGrossPrice()) {
          hash = (37 * hash) + PRECISE_UNIT_GROSS_PRICE_FIELD_NUMBER;
          hash = (53 * hash) + getPreciseUnitGrossPrice().hashCode();
        }
        if (hasUnitNetPrice()) {
          hash = (37 * hash) + UNIT_NET_PRICE_FIELD_NUMBER;
          hash = (53 * hash) + getUnitNetPrice().hashCode();
        }
        if (hasTotalBruttoPrice()) {
          hash = (37 * hash) + TOTAL_BRUTTO_PRICE_FIELD_NUMBER;
          hash = (53 * hash) + getTotalBruttoPrice().hashCode();
        }
        if (hasPreciseAbsUnitNetSurcharge()) {
          hash = (37 * hash) + PRECISE_ABS_UNIT_NET_SURCHARGE_FIELD_NUMBER;
          hash = (53 * hash) + getPreciseAbsUnitNetSurcharge().hashCode();
        }
        if (hasSurchargeReason()) {
          hash = (37 * hash) + SURCHARGE_REASON_FIELD_NUMBER;
          hash = (53 * hash) + getSurchargeReason().hashCode();
        }
        if (hasNodeId()) {
          hash = (37 * hash) + NODE_ID_FIELD_NUMBER;
          hash = (53 * hash) + getNodeId().hashCode();
        }
        if (hasTreeNodeId()) {
          hash = (37 * hash) + TREE_NODE_ID_FIELD_NUMBER;
          hash = (53 * hash) + getTreeNodeId().hashCode();
        }
        if (hasAbsoluteTotalNettoSurcharge()) {
          hash = (37 * hash) + ABSOLUTE_TOTAL_NETTO_SURCHARGE_FIELD_NUMBER;
          hash = (53 * hash) + getAbsoluteTotalNettoSurcharge().hashCode();
        }
        if (hasRelativeSurcharge()) {
          hash = (37 * hash) + RELATIVE_SURCHARGE_FIELD_NUMBER;
          hash = (53 * hash) + getRelativeSurcharge().hashCode();
        }
        if (hasAbsoluteTotalBruttoSurcharge()) {
          hash = (37 * hash) + ABSOLUTE_TOTAL_BRUTTO_SURCHARGE_FIELD_NUMBER;
          hash = (53 * hash) + getAbsoluteTotalBruttoSurcharge().hashCode();
        }
        if (hasSurchargeGeneratedByCampIds()) {
          hash = (37 * hash) + SURCHARGE_GENERATED_BY_CAMP_IDS_FIELD_NUMBER;
          hash = (53 * hash) + getSurchargeGeneratedByCampIds().hashCode();
        }
        if (hasPreciseTotalGrossPrice()) {
          hash = (37 * hash) + PRECISE_TOTAL_GROSS_PRICE_FIELD_NUMBER;
          hash = (53 * hash) + getPreciseTotalGrossPrice().hashCode();
        }
        if (hasUnitNettoPrice()) {
          hash = (37 * hash) + UNIT_NETTO_PRICE_FIELD_NUMBER;
          hash = (53 * hash) + getUnitNettoPrice().hashCode();
        }
        if (hasTaxesMultiplier()) {
          hash = (37 * hash) + TAXES_MULTIPLIER_FIELD_NUMBER;
          hash = (53 * hash) + getTaxesMultiplier().hashCode();
        }
        if (hasPreciseAbsTotalGrossSurcharge()) {
          hash = (37 * hash) + PRECISE_ABS_TOTAL_GROSS_SURCHARGE_FIELD_NUMBER;
          hash = (53 * hash) + getPreciseAbsTotalGrossSurcharge().hashCode();
        }
        if (hasPreciseAbsTotalNetSurcharge()) {
          hash = (37 * hash) + PRECISE_ABS_TOTAL_NET_SURCHARGE_FIELD_NUMBER;
          hash = (53 * hash) + getPreciseAbsTotalNetSurcharge().hashCode();
        }
        if (hasTotalNetPrice()) {
          hash = (37 * hash) + TOTAL_NET_PRICE_FIELD_NUMBER;
          hash = (53 * hash) + getTotalNetPrice().hashCode();
        }
        if (hasQuantity()) {
          hash = (37 * hash) + QUANTITY_FIELD_NUMBER;
          hash = (53 * hash) + getQuantity().hashCode();
        }
        if (hasQuantityPerBundleItemSetIdList()) {
          hash = (37 * hash) + QUANTITY_PER_BUNDLE_ITEM_SET_ID_LIST_FIELD_NUMBER;
          hash = (53 * hash) + getQuantityPerBundleItemSetIdList().hashCode();
        }
        if (hasSurchargeValue()) {
          hash = (37 * hash) + SURCHARGE_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + getSurchargeValue().hashCode();
        }
        if (hasAbsoluteUnitNetSurcharge()) {
          hash = (37 * hash) + ABSOLUTE_UNIT_NET_SURCHARGE_FIELD_NUMBER;
          hash = (53 * hash) + getAbsoluteUnitNetSurcharge().hashCode();
        }
        if (hasAbsoluteUnitBruttoSurcharge()) {
          hash = (37 * hash) + ABSOLUTE_UNIT_BRUTTO_SURCHARGE_FIELD_NUMBER;
          hash = (53 * hash) + getAbsoluteUnitBruttoSurcharge().hashCode();
        }
        if (hasAbsoluteUnitGrossSurcharge()) {
          hash = (37 * hash) + ABSOLUTE_UNIT_GROSS_SURCHARGE_FIELD_NUMBER;
          hash = (53 * hash) + getAbsoluteUnitGrossSurcharge().hashCode();
        }
        if (hasPreciseTotalNetPrice()) {
          hash = (37 * hash) + PRECISE_TOTAL_NET_PRICE_FIELD_NUMBER;
          hash = (53 * hash) + getPreciseTotalNetPrice().hashCode();
        }
        if (hasSurchargeTypeId()) {
          hash = (37 * hash) + SURCHARGE_TYPE_ID_FIELD_NUMBER;
          hash = (53 * hash) + getSurchargeTypeId().hashCode();
        }
        if (hasPreciseUnitNetPrice()) {
          hash = (37 * hash) + PRECISE_UNIT_NET_PRICE_FIELD_NUMBER;
          hash = (53 * hash) + getPreciseUnitNetPrice().hashCode();
        }
        if (hasTotalGrossPrice()) {
          hash = (37 * hash) + TOTAL_GROSS_PRICE_FIELD_NUMBER;
          hash = (53 * hash) + getTotalGrossPrice().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static io.dstore.engine.procedures.OmGetPricesPu.Response.Row parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procedures.OmGetPricesPu.Response.Row parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procedures.OmGetPricesPu.Response.Row parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procedures.OmGetPricesPu.Response.Row parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procedures.OmGetPricesPu.Response.Row parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.dstore.engine.procedures.OmGetPricesPu.Response.Row parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.dstore.engine.procedures.OmGetPricesPu.Response.Row parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.dstore.engine.procedures.OmGetPricesPu.Response.Row parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.dstore.engine.procedures.OmGetPricesPu.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.dstore.engine.procedures.OmGetPricesPu.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.dstore.engine.procedures.OmGetPricesPu.Response.Row prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code dstore.engine.om_GetPrices_Pu.Response.Row}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetPrices_Pu.Response.Row)
          io.dstore.engine.procedures.OmGetPricesPu.Response.RowOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Response_Row_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Response_Row_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.dstore.engine.procedures.OmGetPricesPu.Response.Row.class, io.dstore.engine.procedures.OmGetPricesPu.Response.Row.Builder.class);
        }

        // Construct using io.dstore.engine.procedures.OmGetPricesPu.Response.Row.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          rowId_ = 0;

          if (totalNettoPriceBuilder_ == null) {
            totalNettoPrice_ = null;
          } else {
            totalNettoPrice_ = null;
            totalNettoPriceBuilder_ = null;
          }
          if (preciseAbsUnitGrossSurchargeBuilder_ == null) {
            preciseAbsUnitGrossSurcharge_ = null;
          } else {
            preciseAbsUnitGrossSurcharge_ = null;
            preciseAbsUnitGrossSurchargeBuilder_ = null;
          }
          if (priceNodeCharacteristicIdBuilder_ == null) {
            priceNodeCharacteristicId_ = null;
          } else {
            priceNodeCharacteristicId_ = null;
            priceNodeCharacteristicIdBuilder_ = null;
          }
          if (absoluteUnitNettoSurchargeBuilder_ == null) {
            absoluteUnitNettoSurcharge_ = null;
          } else {
            absoluteUnitNettoSurcharge_ = null;
            absoluteUnitNettoSurchargeBuilder_ = null;
          }
          if (unitGrossPriceBuilder_ == null) {
            unitGrossPrice_ = null;
          } else {
            unitGrossPrice_ = null;
            unitGrossPriceBuilder_ = null;
          }
          if (absoluteTotalNetSurchargeBuilder_ == null) {
            absoluteTotalNetSurcharge_ = null;
          } else {
            absoluteTotalNetSurcharge_ = null;
            absoluteTotalNetSurchargeBuilder_ = null;
          }
          if (absoluteTotalGrossSurchargeBuilder_ == null) {
            absoluteTotalGrossSurcharge_ = null;
          } else {
            absoluteTotalGrossSurcharge_ = null;
            absoluteTotalGrossSurchargeBuilder_ = null;
          }
          if (unitBruttoPriceBuilder_ == null) {
            unitBruttoPrice_ = null;
          } else {
            unitBruttoPrice_ = null;
            unitBruttoPriceBuilder_ = null;
          }
          if (preciseUnitGrossPriceBuilder_ == null) {
            preciseUnitGrossPrice_ = null;
          } else {
            preciseUnitGrossPrice_ = null;
            preciseUnitGrossPriceBuilder_ = null;
          }
          if (unitNetPriceBuilder_ == null) {
            unitNetPrice_ = null;
          } else {
            unitNetPrice_ = null;
            unitNetPriceBuilder_ = null;
          }
          if (totalBruttoPriceBuilder_ == null) {
            totalBruttoPrice_ = null;
          } else {
            totalBruttoPrice_ = null;
            totalBruttoPriceBuilder_ = null;
          }
          if (preciseAbsUnitNetSurchargeBuilder_ == null) {
            preciseAbsUnitNetSurcharge_ = null;
          } else {
            preciseAbsUnitNetSurcharge_ = null;
            preciseAbsUnitNetSurchargeBuilder_ = null;
          }
          if (surchargeReasonBuilder_ == null) {
            surchargeReason_ = null;
          } else {
            surchargeReason_ = null;
            surchargeReasonBuilder_ = null;
          }
          if (nodeIdBuilder_ == null) {
            nodeId_ = null;
          } else {
            nodeId_ = null;
            nodeIdBuilder_ = null;
          }
          if (treeNodeIdBuilder_ == null) {
            treeNodeId_ = null;
          } else {
            treeNodeId_ = null;
            treeNodeIdBuilder_ = null;
          }
          if (absoluteTotalNettoSurchargeBuilder_ == null) {
            absoluteTotalNettoSurcharge_ = null;
          } else {
            absoluteTotalNettoSurcharge_ = null;
            absoluteTotalNettoSurchargeBuilder_ = null;
          }
          if (relativeSurchargeBuilder_ == null) {
            relativeSurcharge_ = null;
          } else {
            relativeSurcharge_ = null;
            relativeSurchargeBuilder_ = null;
          }
          if (absoluteTotalBruttoSurchargeBuilder_ == null) {
            absoluteTotalBruttoSurcharge_ = null;
          } else {
            absoluteTotalBruttoSurcharge_ = null;
            absoluteTotalBruttoSurchargeBuilder_ = null;
          }
          if (surchargeGeneratedByCampIdsBuilder_ == null) {
            surchargeGeneratedByCampIds_ = null;
          } else {
            surchargeGeneratedByCampIds_ = null;
            surchargeGeneratedByCampIdsBuilder_ = null;
          }
          if (preciseTotalGrossPriceBuilder_ == null) {
            preciseTotalGrossPrice_ = null;
          } else {
            preciseTotalGrossPrice_ = null;
            preciseTotalGrossPriceBuilder_ = null;
          }
          if (unitNettoPriceBuilder_ == null) {
            unitNettoPrice_ = null;
          } else {
            unitNettoPrice_ = null;
            unitNettoPriceBuilder_ = null;
          }
          if (taxesMultiplierBuilder_ == null) {
            taxesMultiplier_ = null;
          } else {
            taxesMultiplier_ = null;
            taxesMultiplierBuilder_ = null;
          }
          if (preciseAbsTotalGrossSurchargeBuilder_ == null) {
            preciseAbsTotalGrossSurcharge_ = null;
          } else {
            preciseAbsTotalGrossSurcharge_ = null;
            preciseAbsTotalGrossSurchargeBuilder_ = null;
          }
          if (preciseAbsTotalNetSurchargeBuilder_ == null) {
            preciseAbsTotalNetSurcharge_ = null;
          } else {
            preciseAbsTotalNetSurcharge_ = null;
            preciseAbsTotalNetSurchargeBuilder_ = null;
          }
          if (totalNetPriceBuilder_ == null) {
            totalNetPrice_ = null;
          } else {
            totalNetPrice_ = null;
            totalNetPriceBuilder_ = null;
          }
          if (quantityBuilder_ == null) {
            quantity_ = null;
          } else {
            quantity_ = null;
            quantityBuilder_ = null;
          }
          if (quantityPerBundleItemSetIdListBuilder_ == null) {
            quantityPerBundleItemSetIdList_ = null;
          } else {
            quantityPerBundleItemSetIdList_ = null;
            quantityPerBundleItemSetIdListBuilder_ = null;
          }
          if (surchargeValueBuilder_ == null) {
            surchargeValue_ = null;
          } else {
            surchargeValue_ = null;
            surchargeValueBuilder_ = null;
          }
          if (absoluteUnitNetSurchargeBuilder_ == null) {
            absoluteUnitNetSurcharge_ = null;
          } else {
            absoluteUnitNetSurcharge_ = null;
            absoluteUnitNetSurchargeBuilder_ = null;
          }
          if (absoluteUnitBruttoSurchargeBuilder_ == null) {
            absoluteUnitBruttoSurcharge_ = null;
          } else {
            absoluteUnitBruttoSurcharge_ = null;
            absoluteUnitBruttoSurchargeBuilder_ = null;
          }
          if (absoluteUnitGrossSurchargeBuilder_ == null) {
            absoluteUnitGrossSurcharge_ = null;
          } else {
            absoluteUnitGrossSurcharge_ = null;
            absoluteUnitGrossSurchargeBuilder_ = null;
          }
          if (preciseTotalNetPriceBuilder_ == null) {
            preciseTotalNetPrice_ = null;
          } else {
            preciseTotalNetPrice_ = null;
            preciseTotalNetPriceBuilder_ = null;
          }
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeId_ = null;
          } else {
            surchargeTypeId_ = null;
            surchargeTypeIdBuilder_ = null;
          }
          if (preciseUnitNetPriceBuilder_ == null) {
            preciseUnitNetPrice_ = null;
          } else {
            preciseUnitNetPrice_ = null;
            preciseUnitNetPriceBuilder_ = null;
          }
          if (totalGrossPriceBuilder_ == null) {
            totalGrossPrice_ = null;
          } else {
            totalGrossPrice_ = null;
            totalGrossPriceBuilder_ = null;
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Response_Row_descriptor;
        }

        public io.dstore.engine.procedures.OmGetPricesPu.Response.Row getDefaultInstanceForType() {
          return io.dstore.engine.procedures.OmGetPricesPu.Response.Row.getDefaultInstance();
        }

        public io.dstore.engine.procedures.OmGetPricesPu.Response.Row build() {
          io.dstore.engine.procedures.OmGetPricesPu.Response.Row result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.dstore.engine.procedures.OmGetPricesPu.Response.Row buildPartial() {
          io.dstore.engine.procedures.OmGetPricesPu.Response.Row result = new io.dstore.engine.procedures.OmGetPricesPu.Response.Row(this);
          result.rowId_ = rowId_;
          if (totalNettoPriceBuilder_ == null) {
            result.totalNettoPrice_ = totalNettoPrice_;
          } else {
            result.totalNettoPrice_ = totalNettoPriceBuilder_.build();
          }
          if (preciseAbsUnitGrossSurchargeBuilder_ == null) {
            result.preciseAbsUnitGrossSurcharge_ = preciseAbsUnitGrossSurcharge_;
          } else {
            result.preciseAbsUnitGrossSurcharge_ = preciseAbsUnitGrossSurchargeBuilder_.build();
          }
          if (priceNodeCharacteristicIdBuilder_ == null) {
            result.priceNodeCharacteristicId_ = priceNodeCharacteristicId_;
          } else {
            result.priceNodeCharacteristicId_ = priceNodeCharacteristicIdBuilder_.build();
          }
          if (absoluteUnitNettoSurchargeBuilder_ == null) {
            result.absoluteUnitNettoSurcharge_ = absoluteUnitNettoSurcharge_;
          } else {
            result.absoluteUnitNettoSurcharge_ = absoluteUnitNettoSurchargeBuilder_.build();
          }
          if (unitGrossPriceBuilder_ == null) {
            result.unitGrossPrice_ = unitGrossPrice_;
          } else {
            result.unitGrossPrice_ = unitGrossPriceBuilder_.build();
          }
          if (absoluteTotalNetSurchargeBuilder_ == null) {
            result.absoluteTotalNetSurcharge_ = absoluteTotalNetSurcharge_;
          } else {
            result.absoluteTotalNetSurcharge_ = absoluteTotalNetSurchargeBuilder_.build();
          }
          if (absoluteTotalGrossSurchargeBuilder_ == null) {
            result.absoluteTotalGrossSurcharge_ = absoluteTotalGrossSurcharge_;
          } else {
            result.absoluteTotalGrossSurcharge_ = absoluteTotalGrossSurchargeBuilder_.build();
          }
          if (unitBruttoPriceBuilder_ == null) {
            result.unitBruttoPrice_ = unitBruttoPrice_;
          } else {
            result.unitBruttoPrice_ = unitBruttoPriceBuilder_.build();
          }
          if (preciseUnitGrossPriceBuilder_ == null) {
            result.preciseUnitGrossPrice_ = preciseUnitGrossPrice_;
          } else {
            result.preciseUnitGrossPrice_ = preciseUnitGrossPriceBuilder_.build();
          }
          if (unitNetPriceBuilder_ == null) {
            result.unitNetPrice_ = unitNetPrice_;
          } else {
            result.unitNetPrice_ = unitNetPriceBuilder_.build();
          }
          if (totalBruttoPriceBuilder_ == null) {
            result.totalBruttoPrice_ = totalBruttoPrice_;
          } else {
            result.totalBruttoPrice_ = totalBruttoPriceBuilder_.build();
          }
          if (preciseAbsUnitNetSurchargeBuilder_ == null) {
            result.preciseAbsUnitNetSurcharge_ = preciseAbsUnitNetSurcharge_;
          } else {
            result.preciseAbsUnitNetSurcharge_ = preciseAbsUnitNetSurchargeBuilder_.build();
          }
          if (surchargeReasonBuilder_ == null) {
            result.surchargeReason_ = surchargeReason_;
          } else {
            result.surchargeReason_ = surchargeReasonBuilder_.build();
          }
          if (nodeIdBuilder_ == null) {
            result.nodeId_ = nodeId_;
          } else {
            result.nodeId_ = nodeIdBuilder_.build();
          }
          if (treeNodeIdBuilder_ == null) {
            result.treeNodeId_ = treeNodeId_;
          } else {
            result.treeNodeId_ = treeNodeIdBuilder_.build();
          }
          if (absoluteTotalNettoSurchargeBuilder_ == null) {
            result.absoluteTotalNettoSurcharge_ = absoluteTotalNettoSurcharge_;
          } else {
            result.absoluteTotalNettoSurcharge_ = absoluteTotalNettoSurchargeBuilder_.build();
          }
          if (relativeSurchargeBuilder_ == null) {
            result.relativeSurcharge_ = relativeSurcharge_;
          } else {
            result.relativeSurcharge_ = relativeSurchargeBuilder_.build();
          }
          if (absoluteTotalBruttoSurchargeBuilder_ == null) {
            result.absoluteTotalBruttoSurcharge_ = absoluteTotalBruttoSurcharge_;
          } else {
            result.absoluteTotalBruttoSurcharge_ = absoluteTotalBruttoSurchargeBuilder_.build();
          }
          if (surchargeGeneratedByCampIdsBuilder_ == null) {
            result.surchargeGeneratedByCampIds_ = surchargeGeneratedByCampIds_;
          } else {
            result.surchargeGeneratedByCampIds_ = surchargeGeneratedByCampIdsBuilder_.build();
          }
          if (preciseTotalGrossPriceBuilder_ == null) {
            result.preciseTotalGrossPrice_ = preciseTotalGrossPrice_;
          } else {
            result.preciseTotalGrossPrice_ = preciseTotalGrossPriceBuilder_.build();
          }
          if (unitNettoPriceBuilder_ == null) {
            result.unitNettoPrice_ = unitNettoPrice_;
          } else {
            result.unitNettoPrice_ = unitNettoPriceBuilder_.build();
          }
          if (taxesMultiplierBuilder_ == null) {
            result.taxesMultiplier_ = taxesMultiplier_;
          } else {
            result.taxesMultiplier_ = taxesMultiplierBuilder_.build();
          }
          if (preciseAbsTotalGrossSurchargeBuilder_ == null) {
            result.preciseAbsTotalGrossSurcharge_ = preciseAbsTotalGrossSurcharge_;
          } else {
            result.preciseAbsTotalGrossSurcharge_ = preciseAbsTotalGrossSurchargeBuilder_.build();
          }
          if (preciseAbsTotalNetSurchargeBuilder_ == null) {
            result.preciseAbsTotalNetSurcharge_ = preciseAbsTotalNetSurcharge_;
          } else {
            result.preciseAbsTotalNetSurcharge_ = preciseAbsTotalNetSurchargeBuilder_.build();
          }
          if (totalNetPriceBuilder_ == null) {
            result.totalNetPrice_ = totalNetPrice_;
          } else {
            result.totalNetPrice_ = totalNetPriceBuilder_.build();
          }
          if (quantityBuilder_ == null) {
            result.quantity_ = quantity_;
          } else {
            result.quantity_ = quantityBuilder_.build();
          }
          if (quantityPerBundleItemSetIdListBuilder_ == null) {
            result.quantityPerBundleItemSetIdList_ = quantityPerBundleItemSetIdList_;
          } else {
            result.quantityPerBundleItemSetIdList_ = quantityPerBundleItemSetIdListBuilder_.build();
          }
          if (surchargeValueBuilder_ == null) {
            result.surchargeValue_ = surchargeValue_;
          } else {
            result.surchargeValue_ = surchargeValueBuilder_.build();
          }
          if (absoluteUnitNetSurchargeBuilder_ == null) {
            result.absoluteUnitNetSurcharge_ = absoluteUnitNetSurcharge_;
          } else {
            result.absoluteUnitNetSurcharge_ = absoluteUnitNetSurchargeBuilder_.build();
          }
          if (absoluteUnitBruttoSurchargeBuilder_ == null) {
            result.absoluteUnitBruttoSurcharge_ = absoluteUnitBruttoSurcharge_;
          } else {
            result.absoluteUnitBruttoSurcharge_ = absoluteUnitBruttoSurchargeBuilder_.build();
          }
          if (absoluteUnitGrossSurchargeBuilder_ == null) {
            result.absoluteUnitGrossSurcharge_ = absoluteUnitGrossSurcharge_;
          } else {
            result.absoluteUnitGrossSurcharge_ = absoluteUnitGrossSurchargeBuilder_.build();
          }
          if (preciseTotalNetPriceBuilder_ == null) {
            result.preciseTotalNetPrice_ = preciseTotalNetPrice_;
          } else {
            result.preciseTotalNetPrice_ = preciseTotalNetPriceBuilder_.build();
          }
          if (surchargeTypeIdBuilder_ == null) {
            result.surchargeTypeId_ = surchargeTypeId_;
          } else {
            result.surchargeTypeId_ = surchargeTypeIdBuilder_.build();
          }
          if (preciseUnitNetPriceBuilder_ == null) {
            result.preciseUnitNetPrice_ = preciseUnitNetPrice_;
          } else {
            result.preciseUnitNetPrice_ = preciseUnitNetPriceBuilder_.build();
          }
          if (totalGrossPriceBuilder_ == null) {
            result.totalGrossPrice_ = totalGrossPrice_;
          } else {
            result.totalGrossPrice_ = totalGrossPriceBuilder_.build();
          }
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.dstore.engine.procedures.OmGetPricesPu.Response.Row) {
            return mergeFrom((io.dstore.engine.procedures.OmGetPricesPu.Response.Row)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.dstore.engine.procedures.OmGetPricesPu.Response.Row other) {
          if (other == io.dstore.engine.procedures.OmGetPricesPu.Response.Row.getDefaultInstance()) return this;
          if (other.getRowId() != 0) {
            setRowId(other.getRowId());
          }
          if (other.hasTotalNettoPrice()) {
            mergeTotalNettoPrice(other.getTotalNettoPrice());
          }
          if (other.hasPreciseAbsUnitGrossSurcharge()) {
            mergePreciseAbsUnitGrossSurcharge(other.getPreciseAbsUnitGrossSurcharge());
          }
          if (other.hasPriceNodeCharacteristicId()) {
            mergePriceNodeCharacteristicId(other.getPriceNodeCharacteristicId());
          }
          if (other.hasAbsoluteUnitNettoSurcharge()) {
            mergeAbsoluteUnitNettoSurcharge(other.getAbsoluteUnitNettoSurcharge());
          }
          if (other.hasUnitGrossPrice()) {
            mergeUnitGrossPrice(other.getUnitGrossPrice());
          }
          if (other.hasAbsoluteTotalNetSurcharge()) {
            mergeAbsoluteTotalNetSurcharge(other.getAbsoluteTotalNetSurcharge());
          }
          if (other.hasAbsoluteTotalGrossSurcharge()) {
            mergeAbsoluteTotalGrossSurcharge(other.getAbsoluteTotalGrossSurcharge());
          }
          if (other.hasUnitBruttoPrice()) {
            mergeUnitBruttoPrice(other.getUnitBruttoPrice());
          }
          if (other.hasPreciseUnitGrossPrice()) {
            mergePreciseUnitGrossPrice(other.getPreciseUnitGrossPrice());
          }
          if (other.hasUnitNetPrice()) {
            mergeUnitNetPrice(other.getUnitNetPrice());
          }
          if (other.hasTotalBruttoPrice()) {
            mergeTotalBruttoPrice(other.getTotalBruttoPrice());
          }
          if (other.hasPreciseAbsUnitNetSurcharge()) {
            mergePreciseAbsUnitNetSurcharge(other.getPreciseAbsUnitNetSurcharge());
          }
          if (other.hasSurchargeReason()) {
            mergeSurchargeReason(other.getSurchargeReason());
          }
          if (other.hasNodeId()) {
            mergeNodeId(other.getNodeId());
          }
          if (other.hasTreeNodeId()) {
            mergeTreeNodeId(other.getTreeNodeId());
          }
          if (other.hasAbsoluteTotalNettoSurcharge()) {
            mergeAbsoluteTotalNettoSurcharge(other.getAbsoluteTotalNettoSurcharge());
          }
          if (other.hasRelativeSurcharge()) {
            mergeRelativeSurcharge(other.getRelativeSurcharge());
          }
          if (other.hasAbsoluteTotalBruttoSurcharge()) {
            mergeAbsoluteTotalBruttoSurcharge(other.getAbsoluteTotalBruttoSurcharge());
          }
          if (other.hasSurchargeGeneratedByCampIds()) {
            mergeSurchargeGeneratedByCampIds(other.getSurchargeGeneratedByCampIds());
          }
          if (other.hasPreciseTotalGrossPrice()) {
            mergePreciseTotalGrossPrice(other.getPreciseTotalGrossPrice());
          }
          if (other.hasUnitNettoPrice()) {
            mergeUnitNettoPrice(other.getUnitNettoPrice());
          }
          if (other.hasTaxesMultiplier()) {
            mergeTaxesMultiplier(other.getTaxesMultiplier());
          }
          if (other.hasPreciseAbsTotalGrossSurcharge()) {
            mergePreciseAbsTotalGrossSurcharge(other.getPreciseAbsTotalGrossSurcharge());
          }
          if (other.hasPreciseAbsTotalNetSurcharge()) {
            mergePreciseAbsTotalNetSurcharge(other.getPreciseAbsTotalNetSurcharge());
          }
          if (other.hasTotalNetPrice()) {
            mergeTotalNetPrice(other.getTotalNetPrice());
          }
          if (other.hasQuantity()) {
            mergeQuantity(other.getQuantity());
          }
          if (other.hasQuantityPerBundleItemSetIdList()) {
            mergeQuantityPerBundleItemSetIdList(other.getQuantityPerBundleItemSetIdList());
          }
          if (other.hasSurchargeValue()) {
            mergeSurchargeValue(other.getSurchargeValue());
          }
          if (other.hasAbsoluteUnitNetSurcharge()) {
            mergeAbsoluteUnitNetSurcharge(other.getAbsoluteUnitNetSurcharge());
          }
          if (other.hasAbsoluteUnitBruttoSurcharge()) {
            mergeAbsoluteUnitBruttoSurcharge(other.getAbsoluteUnitBruttoSurcharge());
          }
          if (other.hasAbsoluteUnitGrossSurcharge()) {
            mergeAbsoluteUnitGrossSurcharge(other.getAbsoluteUnitGrossSurcharge());
          }
          if (other.hasPreciseTotalNetPrice()) {
            mergePreciseTotalNetPrice(other.getPreciseTotalNetPrice());
          }
          if (other.hasSurchargeTypeId()) {
            mergeSurchargeTypeId(other.getSurchargeTypeId());
          }
          if (other.hasPreciseUnitNetPrice()) {
            mergePreciseUnitNetPrice(other.getPreciseUnitNetPrice());
          }
          if (other.hasTotalGrossPrice()) {
            mergeTotalGrossPrice(other.getTotalGrossPrice());
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.dstore.engine.procedures.OmGetPricesPu.Response.Row parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.dstore.engine.procedures.OmGetPricesPu.Response.Row) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int rowId_ ;
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public int getRowId() {
          return rowId_;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder setRowId(int value) {
          
          rowId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder clearRowId() {
          
          rowId_ = 0;
          onChanged();
          return this;
        }

        private io.dstore.Values.decimalValue totalNettoPrice_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> totalNettoPriceBuilder_;
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
         */
        public boolean hasTotalNettoPrice() {
          return totalNettoPriceBuilder_ != null || totalNettoPrice_ != null;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
         */
        public io.dstore.Values.decimalValue getTotalNettoPrice() {
          if (totalNettoPriceBuilder_ == null) {
            return totalNettoPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : totalNettoPrice_;
          } else {
            return totalNettoPriceBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
         */
        public Builder setTotalNettoPrice(io.dstore.Values.decimalValue value) {
          if (totalNettoPriceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            totalNettoPrice_ = value;
            onChanged();
          } else {
            totalNettoPriceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
         */
        public Builder setTotalNettoPrice(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (totalNettoPriceBuilder_ == null) {
            totalNettoPrice_ = builderForValue.build();
            onChanged();
          } else {
            totalNettoPriceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
         */
        public Builder mergeTotalNettoPrice(io.dstore.Values.decimalValue value) {
          if (totalNettoPriceBuilder_ == null) {
            if (totalNettoPrice_ != null) {
              totalNettoPrice_ =
                io.dstore.Values.decimalValue.newBuilder(totalNettoPrice_).mergeFrom(value).buildPartial();
            } else {
              totalNettoPrice_ = value;
            }
            onChanged();
          } else {
            totalNettoPriceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
         */
        public Builder clearTotalNettoPrice() {
          if (totalNettoPriceBuilder_ == null) {
            totalNettoPrice_ = null;
            onChanged();
          } else {
            totalNettoPrice_ = null;
            totalNettoPriceBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
         */
        public io.dstore.Values.decimalValue.Builder getTotalNettoPriceBuilder() {
          
          onChanged();
          return getTotalNettoPriceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getTotalNettoPriceOrBuilder() {
          if (totalNettoPriceBuilder_ != null) {
            return totalNettoPriceBuilder_.getMessageOrBuilder();
          } else {
            return totalNettoPrice_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : totalNettoPrice_;
          }
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_netto_price = 10001;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getTotalNettoPriceFieldBuilder() {
          if (totalNettoPriceBuilder_ == null) {
            totalNettoPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getTotalNettoPrice(),
                    getParentForChildren(),
                    isClean());
            totalNettoPrice_ = null;
          }
          return totalNettoPriceBuilder_;
        }

        private io.dstore.Values.decimalValue preciseAbsUnitGrossSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> preciseAbsUnitGrossSurchargeBuilder_;
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
         */
        public boolean hasPreciseAbsUnitGrossSurcharge() {
          return preciseAbsUnitGrossSurchargeBuilder_ != null || preciseAbsUnitGrossSurcharge_ != null;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
         */
        public io.dstore.Values.decimalValue getPreciseAbsUnitGrossSurcharge() {
          if (preciseAbsUnitGrossSurchargeBuilder_ == null) {
            return preciseAbsUnitGrossSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseAbsUnitGrossSurcharge_;
          } else {
            return preciseAbsUnitGrossSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
         */
        public Builder setPreciseAbsUnitGrossSurcharge(io.dstore.Values.decimalValue value) {
          if (preciseAbsUnitGrossSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            preciseAbsUnitGrossSurcharge_ = value;
            onChanged();
          } else {
            preciseAbsUnitGrossSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
         */
        public Builder setPreciseAbsUnitGrossSurcharge(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (preciseAbsUnitGrossSurchargeBuilder_ == null) {
            preciseAbsUnitGrossSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            preciseAbsUnitGrossSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
         */
        public Builder mergePreciseAbsUnitGrossSurcharge(io.dstore.Values.decimalValue value) {
          if (preciseAbsUnitGrossSurchargeBuilder_ == null) {
            if (preciseAbsUnitGrossSurcharge_ != null) {
              preciseAbsUnitGrossSurcharge_ =
                io.dstore.Values.decimalValue.newBuilder(preciseAbsUnitGrossSurcharge_).mergeFrom(value).buildPartial();
            } else {
              preciseAbsUnitGrossSurcharge_ = value;
            }
            onChanged();
          } else {
            preciseAbsUnitGrossSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
         */
        public Builder clearPreciseAbsUnitGrossSurcharge() {
          if (preciseAbsUnitGrossSurchargeBuilder_ == null) {
            preciseAbsUnitGrossSurcharge_ = null;
            onChanged();
          } else {
            preciseAbsUnitGrossSurcharge_ = null;
            preciseAbsUnitGrossSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
         */
        public io.dstore.Values.decimalValue.Builder getPreciseAbsUnitGrossSurchargeBuilder() {
          
          onChanged();
          return getPreciseAbsUnitGrossSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getPreciseAbsUnitGrossSurchargeOrBuilder() {
          if (preciseAbsUnitGrossSurchargeBuilder_ != null) {
            return preciseAbsUnitGrossSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return preciseAbsUnitGrossSurcharge_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : preciseAbsUnitGrossSurcharge_;
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_gross_surcharge = 10002;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getPreciseAbsUnitGrossSurchargeFieldBuilder() {
          if (preciseAbsUnitGrossSurchargeBuilder_ == null) {
            preciseAbsUnitGrossSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getPreciseAbsUnitGrossSurcharge(),
                    getParentForChildren(),
                    isClean());
            preciseAbsUnitGrossSurcharge_ = null;
          }
          return preciseAbsUnitGrossSurchargeBuilder_;
        }

        private io.dstore.Values.integerValue priceNodeCharacteristicId_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> priceNodeCharacteristicIdBuilder_;
        /**
         * <pre>
         * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
         */
        public boolean hasPriceNodeCharacteristicId() {
          return priceNodeCharacteristicIdBuilder_ != null || priceNodeCharacteristicId_ != null;
        }
        /**
         * <pre>
         * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
         */
        public io.dstore.Values.integerValue getPriceNodeCharacteristicId() {
          if (priceNodeCharacteristicIdBuilder_ == null) {
            return priceNodeCharacteristicId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : priceNodeCharacteristicId_;
          } else {
            return priceNodeCharacteristicIdBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
         */
        public Builder setPriceNodeCharacteristicId(io.dstore.Values.integerValue value) {
          if (priceNodeCharacteristicIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            priceNodeCharacteristicId_ = value;
            onChanged();
          } else {
            priceNodeCharacteristicIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
         */
        public Builder setPriceNodeCharacteristicId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (priceNodeCharacteristicIdBuilder_ == null) {
            priceNodeCharacteristicId_ = builderForValue.build();
            onChanged();
          } else {
            priceNodeCharacteristicIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
         */
        public Builder mergePriceNodeCharacteristicId(io.dstore.Values.integerValue value) {
          if (priceNodeCharacteristicIdBuilder_ == null) {
            if (priceNodeCharacteristicId_ != null) {
              priceNodeCharacteristicId_ =
                io.dstore.Values.integerValue.newBuilder(priceNodeCharacteristicId_).mergeFrom(value).buildPartial();
            } else {
              priceNodeCharacteristicId_ = value;
            }
            onChanged();
          } else {
            priceNodeCharacteristicIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
         */
        public Builder clearPriceNodeCharacteristicId() {
          if (priceNodeCharacteristicIdBuilder_ == null) {
            priceNodeCharacteristicId_ = null;
            onChanged();
          } else {
            priceNodeCharacteristicId_ = null;
            priceNodeCharacteristicIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
         */
        public io.dstore.Values.integerValue.Builder getPriceNodeCharacteristicIdBuilder() {
          
          onChanged();
          return getPriceNodeCharacteristicIdFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getPriceNodeCharacteristicIdOrBuilder() {
          if (priceNodeCharacteristicIdBuilder_ != null) {
            return priceNodeCharacteristicIdBuilder_.getMessageOrBuilder();
          } else {
            return priceNodeCharacteristicId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : priceNodeCharacteristicId_;
          }
        }
        /**
         * <pre>
         * Merkmal-ID, die den Preis bestimmt hat (genauer : die Eigenschaft von "TreeNodeID" zu diesem Merkmal hat den Preis bestimmt)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue price_node_characteristic_id = 10003;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getPriceNodeCharacteristicIdFieldBuilder() {
          if (priceNodeCharacteristicIdBuilder_ == null) {
            priceNodeCharacteristicIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getPriceNodeCharacteristicId(),
                    getParentForChildren(),
                    isClean());
            priceNodeCharacteristicId_ = null;
          }
          return priceNodeCharacteristicIdBuilder_;
        }

        private io.dstore.Values.decimalValue absoluteUnitNettoSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> absoluteUnitNettoSurchargeBuilder_;
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
         */
        public boolean hasAbsoluteUnitNettoSurcharge() {
          return absoluteUnitNettoSurchargeBuilder_ != null || absoluteUnitNettoSurcharge_ != null;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
         */
        public io.dstore.Values.decimalValue getAbsoluteUnitNettoSurcharge() {
          if (absoluteUnitNettoSurchargeBuilder_ == null) {
            return absoluteUnitNettoSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteUnitNettoSurcharge_;
          } else {
            return absoluteUnitNettoSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
         */
        public Builder setAbsoluteUnitNettoSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteUnitNettoSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            absoluteUnitNettoSurcharge_ = value;
            onChanged();
          } else {
            absoluteUnitNettoSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
         */
        public Builder setAbsoluteUnitNettoSurcharge(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (absoluteUnitNettoSurchargeBuilder_ == null) {
            absoluteUnitNettoSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            absoluteUnitNettoSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
         */
        public Builder mergeAbsoluteUnitNettoSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteUnitNettoSurchargeBuilder_ == null) {
            if (absoluteUnitNettoSurcharge_ != null) {
              absoluteUnitNettoSurcharge_ =
                io.dstore.Values.decimalValue.newBuilder(absoluteUnitNettoSurcharge_).mergeFrom(value).buildPartial();
            } else {
              absoluteUnitNettoSurcharge_ = value;
            }
            onChanged();
          } else {
            absoluteUnitNettoSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
         */
        public Builder clearAbsoluteUnitNettoSurcharge() {
          if (absoluteUnitNettoSurchargeBuilder_ == null) {
            absoluteUnitNettoSurcharge_ = null;
            onChanged();
          } else {
            absoluteUnitNettoSurcharge_ = null;
            absoluteUnitNettoSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
         */
        public io.dstore.Values.decimalValue.Builder getAbsoluteUnitNettoSurchargeBuilder() {
          
          onChanged();
          return getAbsoluteUnitNettoSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getAbsoluteUnitNettoSurchargeOrBuilder() {
          if (absoluteUnitNettoSurchargeBuilder_ != null) {
            return absoluteUnitNettoSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return absoluteUnitNettoSurcharge_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : absoluteUnitNettoSurcharge_;
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_netto_surcharge = 10004;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getAbsoluteUnitNettoSurchargeFieldBuilder() {
          if (absoluteUnitNettoSurchargeBuilder_ == null) {
            absoluteUnitNettoSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getAbsoluteUnitNettoSurcharge(),
                    getParentForChildren(),
                    isClean());
            absoluteUnitNettoSurcharge_ = null;
          }
          return absoluteUnitNettoSurchargeBuilder_;
        }

        private io.dstore.Values.decimalValue unitGrossPrice_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> unitGrossPriceBuilder_;
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
         */
        public boolean hasUnitGrossPrice() {
          return unitGrossPriceBuilder_ != null || unitGrossPrice_ != null;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
         */
        public io.dstore.Values.decimalValue getUnitGrossPrice() {
          if (unitGrossPriceBuilder_ == null) {
            return unitGrossPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : unitGrossPrice_;
          } else {
            return unitGrossPriceBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
         */
        public Builder setUnitGrossPrice(io.dstore.Values.decimalValue value) {
          if (unitGrossPriceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            unitGrossPrice_ = value;
            onChanged();
          } else {
            unitGrossPriceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
         */
        public Builder setUnitGrossPrice(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (unitGrossPriceBuilder_ == null) {
            unitGrossPrice_ = builderForValue.build();
            onChanged();
          } else {
            unitGrossPriceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
         */
        public Builder mergeUnitGrossPrice(io.dstore.Values.decimalValue value) {
          if (unitGrossPriceBuilder_ == null) {
            if (unitGrossPrice_ != null) {
              unitGrossPrice_ =
                io.dstore.Values.decimalValue.newBuilder(unitGrossPrice_).mergeFrom(value).buildPartial();
            } else {
              unitGrossPrice_ = value;
            }
            onChanged();
          } else {
            unitGrossPriceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
         */
        public Builder clearUnitGrossPrice() {
          if (unitGrossPriceBuilder_ == null) {
            unitGrossPrice_ = null;
            onChanged();
          } else {
            unitGrossPrice_ = null;
            unitGrossPriceBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
         */
        public io.dstore.Values.decimalValue.Builder getUnitGrossPriceBuilder() {
          
          onChanged();
          return getUnitGrossPriceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getUnitGrossPriceOrBuilder() {
          if (unitGrossPriceBuilder_ != null) {
            return unitGrossPriceBuilder_.getMessageOrBuilder();
          } else {
            return unitGrossPrice_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : unitGrossPrice_;
          }
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_gross_price = 10005;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getUnitGrossPriceFieldBuilder() {
          if (unitGrossPriceBuilder_ == null) {
            unitGrossPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getUnitGrossPrice(),
                    getParentForChildren(),
                    isClean());
            unitGrossPrice_ = null;
          }
          return unitGrossPriceBuilder_;
        }

        private io.dstore.Values.decimalValue absoluteTotalNetSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> absoluteTotalNetSurchargeBuilder_;
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
         */
        public boolean hasAbsoluteTotalNetSurcharge() {
          return absoluteTotalNetSurchargeBuilder_ != null || absoluteTotalNetSurcharge_ != null;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
         */
        public io.dstore.Values.decimalValue getAbsoluteTotalNetSurcharge() {
          if (absoluteTotalNetSurchargeBuilder_ == null) {
            return absoluteTotalNetSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteTotalNetSurcharge_;
          } else {
            return absoluteTotalNetSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
         */
        public Builder setAbsoluteTotalNetSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteTotalNetSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            absoluteTotalNetSurcharge_ = value;
            onChanged();
          } else {
            absoluteTotalNetSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
         */
        public Builder setAbsoluteTotalNetSurcharge(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (absoluteTotalNetSurchargeBuilder_ == null) {
            absoluteTotalNetSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            absoluteTotalNetSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
         */
        public Builder mergeAbsoluteTotalNetSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteTotalNetSurchargeBuilder_ == null) {
            if (absoluteTotalNetSurcharge_ != null) {
              absoluteTotalNetSurcharge_ =
                io.dstore.Values.decimalValue.newBuilder(absoluteTotalNetSurcharge_).mergeFrom(value).buildPartial();
            } else {
              absoluteTotalNetSurcharge_ = value;
            }
            onChanged();
          } else {
            absoluteTotalNetSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
         */
        public Builder clearAbsoluteTotalNetSurcharge() {
          if (absoluteTotalNetSurchargeBuilder_ == null) {
            absoluteTotalNetSurcharge_ = null;
            onChanged();
          } else {
            absoluteTotalNetSurcharge_ = null;
            absoluteTotalNetSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
         */
        public io.dstore.Values.decimalValue.Builder getAbsoluteTotalNetSurchargeBuilder() {
          
          onChanged();
          return getAbsoluteTotalNetSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getAbsoluteTotalNetSurchargeOrBuilder() {
          if (absoluteTotalNetSurchargeBuilder_ != null) {
            return absoluteTotalNetSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return absoluteTotalNetSurcharge_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : absoluteTotalNetSurcharge_;
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_net_surcharge = 10006;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getAbsoluteTotalNetSurchargeFieldBuilder() {
          if (absoluteTotalNetSurchargeBuilder_ == null) {
            absoluteTotalNetSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getAbsoluteTotalNetSurcharge(),
                    getParentForChildren(),
                    isClean());
            absoluteTotalNetSurcharge_ = null;
          }
          return absoluteTotalNetSurchargeBuilder_;
        }

        private io.dstore.Values.decimalValue absoluteTotalGrossSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> absoluteTotalGrossSurchargeBuilder_;
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
         */
        public boolean hasAbsoluteTotalGrossSurcharge() {
          return absoluteTotalGrossSurchargeBuilder_ != null || absoluteTotalGrossSurcharge_ != null;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
         */
        public io.dstore.Values.decimalValue getAbsoluteTotalGrossSurcharge() {
          if (absoluteTotalGrossSurchargeBuilder_ == null) {
            return absoluteTotalGrossSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteTotalGrossSurcharge_;
          } else {
            return absoluteTotalGrossSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
         */
        public Builder setAbsoluteTotalGrossSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteTotalGrossSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            absoluteTotalGrossSurcharge_ = value;
            onChanged();
          } else {
            absoluteTotalGrossSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
         */
        public Builder setAbsoluteTotalGrossSurcharge(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (absoluteTotalGrossSurchargeBuilder_ == null) {
            absoluteTotalGrossSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            absoluteTotalGrossSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
         */
        public Builder mergeAbsoluteTotalGrossSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteTotalGrossSurchargeBuilder_ == null) {
            if (absoluteTotalGrossSurcharge_ != null) {
              absoluteTotalGrossSurcharge_ =
                io.dstore.Values.decimalValue.newBuilder(absoluteTotalGrossSurcharge_).mergeFrom(value).buildPartial();
            } else {
              absoluteTotalGrossSurcharge_ = value;
            }
            onChanged();
          } else {
            absoluteTotalGrossSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
         */
        public Builder clearAbsoluteTotalGrossSurcharge() {
          if (absoluteTotalGrossSurchargeBuilder_ == null) {
            absoluteTotalGrossSurcharge_ = null;
            onChanged();
          } else {
            absoluteTotalGrossSurcharge_ = null;
            absoluteTotalGrossSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
         */
        public io.dstore.Values.decimalValue.Builder getAbsoluteTotalGrossSurchargeBuilder() {
          
          onChanged();
          return getAbsoluteTotalGrossSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getAbsoluteTotalGrossSurchargeOrBuilder() {
          if (absoluteTotalGrossSurchargeBuilder_ != null) {
            return absoluteTotalGrossSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return absoluteTotalGrossSurcharge_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : absoluteTotalGrossSurcharge_;
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_gross_surcharge = 10007;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getAbsoluteTotalGrossSurchargeFieldBuilder() {
          if (absoluteTotalGrossSurchargeBuilder_ == null) {
            absoluteTotalGrossSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getAbsoluteTotalGrossSurcharge(),
                    getParentForChildren(),
                    isClean());
            absoluteTotalGrossSurcharge_ = null;
          }
          return absoluteTotalGrossSurchargeBuilder_;
        }

        private io.dstore.Values.decimalValue unitBruttoPrice_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> unitBruttoPriceBuilder_;
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
         */
        public boolean hasUnitBruttoPrice() {
          return unitBruttoPriceBuilder_ != null || unitBruttoPrice_ != null;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
         */
        public io.dstore.Values.decimalValue getUnitBruttoPrice() {
          if (unitBruttoPriceBuilder_ == null) {
            return unitBruttoPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : unitBruttoPrice_;
          } else {
            return unitBruttoPriceBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
         */
        public Builder setUnitBruttoPrice(io.dstore.Values.decimalValue value) {
          if (unitBruttoPriceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            unitBruttoPrice_ = value;
            onChanged();
          } else {
            unitBruttoPriceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
         */
        public Builder setUnitBruttoPrice(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (unitBruttoPriceBuilder_ == null) {
            unitBruttoPrice_ = builderForValue.build();
            onChanged();
          } else {
            unitBruttoPriceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
         */
        public Builder mergeUnitBruttoPrice(io.dstore.Values.decimalValue value) {
          if (unitBruttoPriceBuilder_ == null) {
            if (unitBruttoPrice_ != null) {
              unitBruttoPrice_ =
                io.dstore.Values.decimalValue.newBuilder(unitBruttoPrice_).mergeFrom(value).buildPartial();
            } else {
              unitBruttoPrice_ = value;
            }
            onChanged();
          } else {
            unitBruttoPriceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
         */
        public Builder clearUnitBruttoPrice() {
          if (unitBruttoPriceBuilder_ == null) {
            unitBruttoPrice_ = null;
            onChanged();
          } else {
            unitBruttoPrice_ = null;
            unitBruttoPriceBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
         */
        public io.dstore.Values.decimalValue.Builder getUnitBruttoPriceBuilder() {
          
          onChanged();
          return getUnitBruttoPriceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getUnitBruttoPriceOrBuilder() {
          if (unitBruttoPriceBuilder_ != null) {
            return unitBruttoPriceBuilder_.getMessageOrBuilder();
          } else {
            return unitBruttoPrice_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : unitBruttoPrice_;
          }
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_brutto_price = 10008;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getUnitBruttoPriceFieldBuilder() {
          if (unitBruttoPriceBuilder_ == null) {
            unitBruttoPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getUnitBruttoPrice(),
                    getParentForChildren(),
                    isClean());
            unitBruttoPrice_ = null;
          }
          return unitBruttoPriceBuilder_;
        }

        private io.dstore.Values.decimalValue preciseUnitGrossPrice_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> preciseUnitGrossPriceBuilder_;
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
         */
        public boolean hasPreciseUnitGrossPrice() {
          return preciseUnitGrossPriceBuilder_ != null || preciseUnitGrossPrice_ != null;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
         */
        public io.dstore.Values.decimalValue getPreciseUnitGrossPrice() {
          if (preciseUnitGrossPriceBuilder_ == null) {
            return preciseUnitGrossPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseUnitGrossPrice_;
          } else {
            return preciseUnitGrossPriceBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
         */
        public Builder setPreciseUnitGrossPrice(io.dstore.Values.decimalValue value) {
          if (preciseUnitGrossPriceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            preciseUnitGrossPrice_ = value;
            onChanged();
          } else {
            preciseUnitGrossPriceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
         */
        public Builder setPreciseUnitGrossPrice(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (preciseUnitGrossPriceBuilder_ == null) {
            preciseUnitGrossPrice_ = builderForValue.build();
            onChanged();
          } else {
            preciseUnitGrossPriceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
         */
        public Builder mergePreciseUnitGrossPrice(io.dstore.Values.decimalValue value) {
          if (preciseUnitGrossPriceBuilder_ == null) {
            if (preciseUnitGrossPrice_ != null) {
              preciseUnitGrossPrice_ =
                io.dstore.Values.decimalValue.newBuilder(preciseUnitGrossPrice_).mergeFrom(value).buildPartial();
            } else {
              preciseUnitGrossPrice_ = value;
            }
            onChanged();
          } else {
            preciseUnitGrossPriceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
         */
        public Builder clearPreciseUnitGrossPrice() {
          if (preciseUnitGrossPriceBuilder_ == null) {
            preciseUnitGrossPrice_ = null;
            onChanged();
          } else {
            preciseUnitGrossPrice_ = null;
            preciseUnitGrossPriceBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
         */
        public io.dstore.Values.decimalValue.Builder getPreciseUnitGrossPriceBuilder() {
          
          onChanged();
          return getPreciseUnitGrossPriceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getPreciseUnitGrossPriceOrBuilder() {
          if (preciseUnitGrossPriceBuilder_ != null) {
            return preciseUnitGrossPriceBuilder_.getMessageOrBuilder();
          } else {
            return preciseUnitGrossPrice_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : preciseUnitGrossPrice_;
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_gross_price = 10009;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getPreciseUnitGrossPriceFieldBuilder() {
          if (preciseUnitGrossPriceBuilder_ == null) {
            preciseUnitGrossPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getPreciseUnitGrossPrice(),
                    getParentForChildren(),
                    isClean());
            preciseUnitGrossPrice_ = null;
          }
          return preciseUnitGrossPriceBuilder_;
        }

        private io.dstore.Values.decimalValue unitNetPrice_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> unitNetPriceBuilder_;
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
         */
        public boolean hasUnitNetPrice() {
          return unitNetPriceBuilder_ != null || unitNetPrice_ != null;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
         */
        public io.dstore.Values.decimalValue getUnitNetPrice() {
          if (unitNetPriceBuilder_ == null) {
            return unitNetPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : unitNetPrice_;
          } else {
            return unitNetPriceBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
         */
        public Builder setUnitNetPrice(io.dstore.Values.decimalValue value) {
          if (unitNetPriceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            unitNetPrice_ = value;
            onChanged();
          } else {
            unitNetPriceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
         */
        public Builder setUnitNetPrice(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (unitNetPriceBuilder_ == null) {
            unitNetPrice_ = builderForValue.build();
            onChanged();
          } else {
            unitNetPriceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
         */
        public Builder mergeUnitNetPrice(io.dstore.Values.decimalValue value) {
          if (unitNetPriceBuilder_ == null) {
            if (unitNetPrice_ != null) {
              unitNetPrice_ =
                io.dstore.Values.decimalValue.newBuilder(unitNetPrice_).mergeFrom(value).buildPartial();
            } else {
              unitNetPrice_ = value;
            }
            onChanged();
          } else {
            unitNetPriceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
         */
        public Builder clearUnitNetPrice() {
          if (unitNetPriceBuilder_ == null) {
            unitNetPrice_ = null;
            onChanged();
          } else {
            unitNetPrice_ = null;
            unitNetPriceBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
         */
        public io.dstore.Values.decimalValue.Builder getUnitNetPriceBuilder() {
          
          onChanged();
          return getUnitNetPriceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getUnitNetPriceOrBuilder() {
          if (unitNetPriceBuilder_ != null) {
            return unitNetPriceBuilder_.getMessageOrBuilder();
          } else {
            return unitNetPrice_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : unitNetPrice_;
          }
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_net_price = 10010;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getUnitNetPriceFieldBuilder() {
          if (unitNetPriceBuilder_ == null) {
            unitNetPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getUnitNetPrice(),
                    getParentForChildren(),
                    isClean());
            unitNetPrice_ = null;
          }
          return unitNetPriceBuilder_;
        }

        private io.dstore.Values.decimalValue totalBruttoPrice_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> totalBruttoPriceBuilder_;
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
         */
        public boolean hasTotalBruttoPrice() {
          return totalBruttoPriceBuilder_ != null || totalBruttoPrice_ != null;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
         */
        public io.dstore.Values.decimalValue getTotalBruttoPrice() {
          if (totalBruttoPriceBuilder_ == null) {
            return totalBruttoPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : totalBruttoPrice_;
          } else {
            return totalBruttoPriceBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
         */
        public Builder setTotalBruttoPrice(io.dstore.Values.decimalValue value) {
          if (totalBruttoPriceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            totalBruttoPrice_ = value;
            onChanged();
          } else {
            totalBruttoPriceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
         */
        public Builder setTotalBruttoPrice(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (totalBruttoPriceBuilder_ == null) {
            totalBruttoPrice_ = builderForValue.build();
            onChanged();
          } else {
            totalBruttoPriceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
         */
        public Builder mergeTotalBruttoPrice(io.dstore.Values.decimalValue value) {
          if (totalBruttoPriceBuilder_ == null) {
            if (totalBruttoPrice_ != null) {
              totalBruttoPrice_ =
                io.dstore.Values.decimalValue.newBuilder(totalBruttoPrice_).mergeFrom(value).buildPartial();
            } else {
              totalBruttoPrice_ = value;
            }
            onChanged();
          } else {
            totalBruttoPriceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
         */
        public Builder clearTotalBruttoPrice() {
          if (totalBruttoPriceBuilder_ == null) {
            totalBruttoPrice_ = null;
            onChanged();
          } else {
            totalBruttoPrice_ = null;
            totalBruttoPriceBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
         */
        public io.dstore.Values.decimalValue.Builder getTotalBruttoPriceBuilder() {
          
          onChanged();
          return getTotalBruttoPriceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getTotalBruttoPriceOrBuilder() {
          if (totalBruttoPriceBuilder_ != null) {
            return totalBruttoPriceBuilder_.getMessageOrBuilder();
          } else {
            return totalBruttoPrice_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : totalBruttoPrice_;
          }
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_brutto_price = 10011;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getTotalBruttoPriceFieldBuilder() {
          if (totalBruttoPriceBuilder_ == null) {
            totalBruttoPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getTotalBruttoPrice(),
                    getParentForChildren(),
                    isClean());
            totalBruttoPrice_ = null;
          }
          return totalBruttoPriceBuilder_;
        }

        private io.dstore.Values.decimalValue preciseAbsUnitNetSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> preciseAbsUnitNetSurchargeBuilder_;
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
         */
        public boolean hasPreciseAbsUnitNetSurcharge() {
          return preciseAbsUnitNetSurchargeBuilder_ != null || preciseAbsUnitNetSurcharge_ != null;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
         */
        public io.dstore.Values.decimalValue getPreciseAbsUnitNetSurcharge() {
          if (preciseAbsUnitNetSurchargeBuilder_ == null) {
            return preciseAbsUnitNetSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseAbsUnitNetSurcharge_;
          } else {
            return preciseAbsUnitNetSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
         */
        public Builder setPreciseAbsUnitNetSurcharge(io.dstore.Values.decimalValue value) {
          if (preciseAbsUnitNetSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            preciseAbsUnitNetSurcharge_ = value;
            onChanged();
          } else {
            preciseAbsUnitNetSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
         */
        public Builder setPreciseAbsUnitNetSurcharge(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (preciseAbsUnitNetSurchargeBuilder_ == null) {
            preciseAbsUnitNetSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            preciseAbsUnitNetSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
         */
        public Builder mergePreciseAbsUnitNetSurcharge(io.dstore.Values.decimalValue value) {
          if (preciseAbsUnitNetSurchargeBuilder_ == null) {
            if (preciseAbsUnitNetSurcharge_ != null) {
              preciseAbsUnitNetSurcharge_ =
                io.dstore.Values.decimalValue.newBuilder(preciseAbsUnitNetSurcharge_).mergeFrom(value).buildPartial();
            } else {
              preciseAbsUnitNetSurcharge_ = value;
            }
            onChanged();
          } else {
            preciseAbsUnitNetSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
         */
        public Builder clearPreciseAbsUnitNetSurcharge() {
          if (preciseAbsUnitNetSurchargeBuilder_ == null) {
            preciseAbsUnitNetSurcharge_ = null;
            onChanged();
          } else {
            preciseAbsUnitNetSurcharge_ = null;
            preciseAbsUnitNetSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
         */
        public io.dstore.Values.decimalValue.Builder getPreciseAbsUnitNetSurchargeBuilder() {
          
          onChanged();
          return getPreciseAbsUnitNetSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getPreciseAbsUnitNetSurchargeOrBuilder() {
          if (preciseAbsUnitNetSurchargeBuilder_ != null) {
            return preciseAbsUnitNetSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return preciseAbsUnitNetSurcharge_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : preciseAbsUnitNetSurcharge_;
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteUnitNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_unit_net_surcharge = 10012;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getPreciseAbsUnitNetSurchargeFieldBuilder() {
          if (preciseAbsUnitNetSurchargeBuilder_ == null) {
            preciseAbsUnitNetSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getPreciseAbsUnitNetSurcharge(),
                    getParentForChildren(),
                    isClean());
            preciseAbsUnitNetSurcharge_ = null;
          }
          return preciseAbsUnitNetSurchargeBuilder_;
        }

        private io.dstore.Values.stringValue surchargeReason_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> surchargeReasonBuilder_;
        /**
         * <pre>
         * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
         */
        public boolean hasSurchargeReason() {
          return surchargeReasonBuilder_ != null || surchargeReason_ != null;
        }
        /**
         * <pre>
         * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
         */
        public io.dstore.Values.stringValue getSurchargeReason() {
          if (surchargeReasonBuilder_ == null) {
            return surchargeReason_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : surchargeReason_;
          } else {
            return surchargeReasonBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
         */
        public Builder setSurchargeReason(io.dstore.Values.stringValue value) {
          if (surchargeReasonBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            surchargeReason_ = value;
            onChanged();
          } else {
            surchargeReasonBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
         */
        public Builder setSurchargeReason(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (surchargeReasonBuilder_ == null) {
            surchargeReason_ = builderForValue.build();
            onChanged();
          } else {
            surchargeReasonBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
         */
        public Builder mergeSurchargeReason(io.dstore.Values.stringValue value) {
          if (surchargeReasonBuilder_ == null) {
            if (surchargeReason_ != null) {
              surchargeReason_ =
                io.dstore.Values.stringValue.newBuilder(surchargeReason_).mergeFrom(value).buildPartial();
            } else {
              surchargeReason_ = value;
            }
            onChanged();
          } else {
            surchargeReasonBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
         */
        public Builder clearSurchargeReason() {
          if (surchargeReasonBuilder_ == null) {
            surchargeReason_ = null;
            onChanged();
          } else {
            surchargeReason_ = null;
            surchargeReasonBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
         */
        public io.dstore.Values.stringValue.Builder getSurchargeReasonBuilder() {
          
          onChanged();
          return getSurchargeReasonFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
         */
        public io.dstore.Values.stringValueOrBuilder getSurchargeReasonOrBuilder() {
          if (surchargeReasonBuilder_ != null) {
            return surchargeReasonBuilder_.getMessageOrBuilder();
          } else {
            return surchargeReason_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : surchargeReason_;
          }
        }
        /**
         * <pre>
         * "Grund" für einen evtl. vorhandenen Rabatt (z.B. ein "Aktionsname", der letztlich von der individuellen Rabatt-Ermittlung durch "_ac_om_GetSurcharges" stammt). Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_reason = 10013;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getSurchargeReasonFieldBuilder() {
          if (surchargeReasonBuilder_ == null) {
            surchargeReasonBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getSurchargeReason(),
                    getParentForChildren(),
                    isClean());
            surchargeReason_ = null;
          }
          return surchargeReasonBuilder_;
        }

        private io.dstore.Values.integerValue nodeId_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> nodeIdBuilder_;
        /**
         * <pre>
         * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_id = 10014;</code>
         */
        public boolean hasNodeId() {
          return nodeIdBuilder_ != null || nodeId_ != null;
        }
        /**
         * <pre>
         * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_id = 10014;</code>
         */
        public io.dstore.Values.integerValue getNodeId() {
          if (nodeIdBuilder_ == null) {
            return nodeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : nodeId_;
          } else {
            return nodeIdBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_id = 10014;</code>
         */
        public Builder setNodeId(io.dstore.Values.integerValue value) {
          if (nodeIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            nodeId_ = value;
            onChanged();
          } else {
            nodeIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_id = 10014;</code>
         */
        public Builder setNodeId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (nodeIdBuilder_ == null) {
            nodeId_ = builderForValue.build();
            onChanged();
          } else {
            nodeIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_id = 10014;</code>
         */
        public Builder mergeNodeId(io.dstore.Values.integerValue value) {
          if (nodeIdBuilder_ == null) {
            if (nodeId_ != null) {
              nodeId_ =
                io.dstore.Values.integerValue.newBuilder(nodeId_).mergeFrom(value).buildPartial();
            } else {
              nodeId_ = value;
            }
            onChanged();
          } else {
            nodeIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_id = 10014;</code>
         */
        public Builder clearNodeId() {
          if (nodeIdBuilder_ == null) {
            nodeId_ = null;
            onChanged();
          } else {
            nodeId_ = null;
            nodeIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_id = 10014;</code>
         */
        public io.dstore.Values.integerValue.Builder getNodeIdBuilder() {
          
          onChanged();
          return getNodeIdFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_id = 10014;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getNodeIdOrBuilder() {
          if (nodeIdBuilder_ != null) {
            return nodeIdBuilder_.getMessageOrBuilder();
          } else {
            return nodeId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : nodeId_;
          }
        }
        /**
         * <pre>
         * ID eines Artikel-Elementes, zu dem der Verkaufspreis ermittelt wurde (also entweder ein Element, das in "&#64;NodeIDs" übergeben wurde, oder ein Element, das zu einer "TreeNodeID" korrespondiert, die in "&#64;NodeIDs" angegeben wurde)
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_id = 10014;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getNodeIdFieldBuilder() {
          if (nodeIdBuilder_ == null) {
            nodeIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getNodeId(),
                    getParentForChildren(),
                    isClean());
            nodeId_ = null;
          }
          return nodeIdBuilder_;
        }

        private io.dstore.Values.integerValue treeNodeId_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> treeNodeIdBuilder_;
        /**
         * <pre>
         * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
         */
        public boolean hasTreeNodeId() {
          return treeNodeIdBuilder_ != null || treeNodeId_ != null;
        }
        /**
         * <pre>
         * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
         */
        public io.dstore.Values.integerValue getTreeNodeId() {
          if (treeNodeIdBuilder_ == null) {
            return treeNodeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : treeNodeId_;
          } else {
            return treeNodeIdBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
         */
        public Builder setTreeNodeId(io.dstore.Values.integerValue value) {
          if (treeNodeIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            treeNodeId_ = value;
            onChanged();
          } else {
            treeNodeIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
         */
        public Builder setTreeNodeId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (treeNodeIdBuilder_ == null) {
            treeNodeId_ = builderForValue.build();
            onChanged();
          } else {
            treeNodeIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
         */
        public Builder mergeTreeNodeId(io.dstore.Values.integerValue value) {
          if (treeNodeIdBuilder_ == null) {
            if (treeNodeId_ != null) {
              treeNodeId_ =
                io.dstore.Values.integerValue.newBuilder(treeNodeId_).mergeFrom(value).buildPartial();
            } else {
              treeNodeId_ = value;
            }
            onChanged();
          } else {
            treeNodeIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
         */
        public Builder clearTreeNodeId() {
          if (treeNodeIdBuilder_ == null) {
            treeNodeId_ = null;
            onChanged();
          } else {
            treeNodeId_ = null;
            treeNodeIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
         */
        public io.dstore.Values.integerValue.Builder getTreeNodeIdBuilder() {
          
          onChanged();
          return getTreeNodeIdFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getTreeNodeIdOrBuilder() {
          if (treeNodeIdBuilder_ != null) {
            return treeNodeIdBuilder_.getMessageOrBuilder();
          } else {
            return treeNodeId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : treeNodeId_;
          }
        }
        /**
         * <pre>
         * ID eines zur "NodeID" korrespondierenden Elementes im Artikelbaum, das zur Preisermittlung herangezogen wurde bzw. (falls "&#64;IsTreeNodeID = 1") eine ID, die in "&#64;NodeIDs" übergeben wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue tree_node_id = 10015;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getTreeNodeIdFieldBuilder() {
          if (treeNodeIdBuilder_ == null) {
            treeNodeIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getTreeNodeId(),
                    getParentForChildren(),
                    isClean());
            treeNodeId_ = null;
          }
          return treeNodeIdBuilder_;
        }

        private io.dstore.Values.decimalValue absoluteTotalNettoSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> absoluteTotalNettoSurchargeBuilder_;
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
         */
        public boolean hasAbsoluteTotalNettoSurcharge() {
          return absoluteTotalNettoSurchargeBuilder_ != null || absoluteTotalNettoSurcharge_ != null;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
         */
        public io.dstore.Values.decimalValue getAbsoluteTotalNettoSurcharge() {
          if (absoluteTotalNettoSurchargeBuilder_ == null) {
            return absoluteTotalNettoSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteTotalNettoSurcharge_;
          } else {
            return absoluteTotalNettoSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
         */
        public Builder setAbsoluteTotalNettoSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteTotalNettoSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            absoluteTotalNettoSurcharge_ = value;
            onChanged();
          } else {
            absoluteTotalNettoSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
         */
        public Builder setAbsoluteTotalNettoSurcharge(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (absoluteTotalNettoSurchargeBuilder_ == null) {
            absoluteTotalNettoSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            absoluteTotalNettoSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
         */
        public Builder mergeAbsoluteTotalNettoSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteTotalNettoSurchargeBuilder_ == null) {
            if (absoluteTotalNettoSurcharge_ != null) {
              absoluteTotalNettoSurcharge_ =
                io.dstore.Values.decimalValue.newBuilder(absoluteTotalNettoSurcharge_).mergeFrom(value).buildPartial();
            } else {
              absoluteTotalNettoSurcharge_ = value;
            }
            onChanged();
          } else {
            absoluteTotalNettoSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
         */
        public Builder clearAbsoluteTotalNettoSurcharge() {
          if (absoluteTotalNettoSurchargeBuilder_ == null) {
            absoluteTotalNettoSurcharge_ = null;
            onChanged();
          } else {
            absoluteTotalNettoSurcharge_ = null;
            absoluteTotalNettoSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
         */
        public io.dstore.Values.decimalValue.Builder getAbsoluteTotalNettoSurchargeBuilder() {
          
          onChanged();
          return getAbsoluteTotalNettoSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getAbsoluteTotalNettoSurchargeOrBuilder() {
          if (absoluteTotalNettoSurchargeBuilder_ != null) {
            return absoluteTotalNettoSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return absoluteTotalNettoSurcharge_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : absoluteTotalNettoSurcharge_;
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalNetPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_netto_surcharge = 10016;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getAbsoluteTotalNettoSurchargeFieldBuilder() {
          if (absoluteTotalNettoSurchargeBuilder_ == null) {
            absoluteTotalNettoSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getAbsoluteTotalNettoSurcharge(),
                    getParentForChildren(),
                    isClean());
            absoluteTotalNettoSurcharge_ = null;
          }
          return absoluteTotalNettoSurchargeBuilder_;
        }

        private io.dstore.Values.decimalValue relativeSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> relativeSurchargeBuilder_;
        /**
         * <pre>
         * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
         */
        public boolean hasRelativeSurcharge() {
          return relativeSurchargeBuilder_ != null || relativeSurcharge_ != null;
        }
        /**
         * <pre>
         * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
         */
        public io.dstore.Values.decimalValue getRelativeSurcharge() {
          if (relativeSurchargeBuilder_ == null) {
            return relativeSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : relativeSurcharge_;
          } else {
            return relativeSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
         */
        public Builder setRelativeSurcharge(io.dstore.Values.decimalValue value) {
          if (relativeSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            relativeSurcharge_ = value;
            onChanged();
          } else {
            relativeSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
         */
        public Builder setRelativeSurcharge(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (relativeSurchargeBuilder_ == null) {
            relativeSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            relativeSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
         */
        public Builder mergeRelativeSurcharge(io.dstore.Values.decimalValue value) {
          if (relativeSurchargeBuilder_ == null) {
            if (relativeSurcharge_ != null) {
              relativeSurcharge_ =
                io.dstore.Values.decimalValue.newBuilder(relativeSurcharge_).mergeFrom(value).buildPartial();
            } else {
              relativeSurcharge_ = value;
            }
            onChanged();
          } else {
            relativeSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
         */
        public Builder clearRelativeSurcharge() {
          if (relativeSurchargeBuilder_ == null) {
            relativeSurcharge_ = null;
            onChanged();
          } else {
            relativeSurcharge_ = null;
            relativeSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
         */
        public io.dstore.Values.decimalValue.Builder getRelativeSurchargeBuilder() {
          
          onChanged();
          return getRelativeSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getRelativeSurchargeOrBuilder() {
          if (relativeSurchargeBuilder_ != null) {
            return relativeSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return relativeSurcharge_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : relativeSurcharge_;
          }
        }
        /**
         * <pre>
         * Relativer Rabatt/Aufschlag in Prozent (der in den Preisen bereits enthalten ist !). Ein negativer Wert bedeutet einen Rabatt, sonst beinhaltet der Verkaufspreis einen Aufschlag.
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue relative_surcharge = 10017;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getRelativeSurchargeFieldBuilder() {
          if (relativeSurchargeBuilder_ == null) {
            relativeSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getRelativeSurcharge(),
                    getParentForChildren(),
                    isClean());
            relativeSurcharge_ = null;
          }
          return relativeSurchargeBuilder_;
        }

        private io.dstore.Values.decimalValue absoluteTotalBruttoSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> absoluteTotalBruttoSurchargeBuilder_;
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
         */
        public boolean hasAbsoluteTotalBruttoSurcharge() {
          return absoluteTotalBruttoSurchargeBuilder_ != null || absoluteTotalBruttoSurcharge_ != null;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
         */
        public io.dstore.Values.decimalValue getAbsoluteTotalBruttoSurcharge() {
          if (absoluteTotalBruttoSurchargeBuilder_ == null) {
            return absoluteTotalBruttoSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteTotalBruttoSurcharge_;
          } else {
            return absoluteTotalBruttoSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
         */
        public Builder setAbsoluteTotalBruttoSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteTotalBruttoSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            absoluteTotalBruttoSurcharge_ = value;
            onChanged();
          } else {
            absoluteTotalBruttoSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
         */
        public Builder setAbsoluteTotalBruttoSurcharge(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (absoluteTotalBruttoSurchargeBuilder_ == null) {
            absoluteTotalBruttoSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            absoluteTotalBruttoSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
         */
        public Builder mergeAbsoluteTotalBruttoSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteTotalBruttoSurchargeBuilder_ == null) {
            if (absoluteTotalBruttoSurcharge_ != null) {
              absoluteTotalBruttoSurcharge_ =
                io.dstore.Values.decimalValue.newBuilder(absoluteTotalBruttoSurcharge_).mergeFrom(value).buildPartial();
            } else {
              absoluteTotalBruttoSurcharge_ = value;
            }
            onChanged();
          } else {
            absoluteTotalBruttoSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
         */
        public Builder clearAbsoluteTotalBruttoSurcharge() {
          if (absoluteTotalBruttoSurchargeBuilder_ == null) {
            absoluteTotalBruttoSurcharge_ = null;
            onChanged();
          } else {
            absoluteTotalBruttoSurcharge_ = null;
            absoluteTotalBruttoSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
         */
        public io.dstore.Values.decimalValue.Builder getAbsoluteTotalBruttoSurchargeBuilder() {
          
          onChanged();
          return getAbsoluteTotalBruttoSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getAbsoluteTotalBruttoSurchargeOrBuilder() {
          if (absoluteTotalBruttoSurchargeBuilder_ != null) {
            return absoluteTotalBruttoSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return absoluteTotalBruttoSurcharge_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : absoluteTotalBruttoSurcharge_;
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der im "TotalGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_total_brutto_surcharge = 10018;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getAbsoluteTotalBruttoSurchargeFieldBuilder() {
          if (absoluteTotalBruttoSurchargeBuilder_ == null) {
            absoluteTotalBruttoSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getAbsoluteTotalBruttoSurcharge(),
                    getParentForChildren(),
                    isClean());
            absoluteTotalBruttoSurcharge_ = null;
          }
          return absoluteTotalBruttoSurchargeBuilder_;
        }

        private io.dstore.Values.stringValue surchargeGeneratedByCampIds_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> surchargeGeneratedByCampIdsBuilder_;
        /**
         * <pre>
         * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
         */
        public boolean hasSurchargeGeneratedByCampIds() {
          return surchargeGeneratedByCampIdsBuilder_ != null || surchargeGeneratedByCampIds_ != null;
        }
        /**
         * <pre>
         * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
         */
        public io.dstore.Values.stringValue getSurchargeGeneratedByCampIds() {
          if (surchargeGeneratedByCampIdsBuilder_ == null) {
            return surchargeGeneratedByCampIds_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : surchargeGeneratedByCampIds_;
          } else {
            return surchargeGeneratedByCampIdsBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
         */
        public Builder setSurchargeGeneratedByCampIds(io.dstore.Values.stringValue value) {
          if (surchargeGeneratedByCampIdsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            surchargeGeneratedByCampIds_ = value;
            onChanged();
          } else {
            surchargeGeneratedByCampIdsBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
         */
        public Builder setSurchargeGeneratedByCampIds(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (surchargeGeneratedByCampIdsBuilder_ == null) {
            surchargeGeneratedByCampIds_ = builderForValue.build();
            onChanged();
          } else {
            surchargeGeneratedByCampIdsBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
         */
        public Builder mergeSurchargeGeneratedByCampIds(io.dstore.Values.stringValue value) {
          if (surchargeGeneratedByCampIdsBuilder_ == null) {
            if (surchargeGeneratedByCampIds_ != null) {
              surchargeGeneratedByCampIds_ =
                io.dstore.Values.stringValue.newBuilder(surchargeGeneratedByCampIds_).mergeFrom(value).buildPartial();
            } else {
              surchargeGeneratedByCampIds_ = value;
            }
            onChanged();
          } else {
            surchargeGeneratedByCampIdsBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
         */
        public Builder clearSurchargeGeneratedByCampIds() {
          if (surchargeGeneratedByCampIdsBuilder_ == null) {
            surchargeGeneratedByCampIds_ = null;
            onChanged();
          } else {
            surchargeGeneratedByCampIds_ = null;
            surchargeGeneratedByCampIdsBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
         */
        public io.dstore.Values.stringValue.Builder getSurchargeGeneratedByCampIdsBuilder() {
          
          onChanged();
          return getSurchargeGeneratedByCampIdsFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
         */
        public io.dstore.Values.stringValueOrBuilder getSurchargeGeneratedByCampIdsOrBuilder() {
          if (surchargeGeneratedByCampIdsBuilder_ != null) {
            return surchargeGeneratedByCampIdsBuilder_.getMessageOrBuilder();
          } else {
            return surchargeGeneratedByCampIds_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : surchargeGeneratedByCampIds_;
          }
        }
        /**
         * <pre>
         * Liste von "CampaignID"s der Verkaufsaktionen, die zur Rabattierung der Position geführt haben. Immer "NULL", wenn "&#64;GetAdditionalPriceInfo = 0" ist oder keine Rabattierung vorliegt !
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_generated_by_camp_ids = 10019;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getSurchargeGeneratedByCampIdsFieldBuilder() {
          if (surchargeGeneratedByCampIdsBuilder_ == null) {
            surchargeGeneratedByCampIdsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getSurchargeGeneratedByCampIds(),
                    getParentForChildren(),
                    isClean());
            surchargeGeneratedByCampIds_ = null;
          }
          return surchargeGeneratedByCampIdsBuilder_;
        }

        private io.dstore.Values.decimalValue preciseTotalGrossPrice_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> preciseTotalGrossPriceBuilder_;
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
         */
        public boolean hasPreciseTotalGrossPrice() {
          return preciseTotalGrossPriceBuilder_ != null || preciseTotalGrossPrice_ != null;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
         */
        public io.dstore.Values.decimalValue getPreciseTotalGrossPrice() {
          if (preciseTotalGrossPriceBuilder_ == null) {
            return preciseTotalGrossPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseTotalGrossPrice_;
          } else {
            return preciseTotalGrossPriceBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
         */
        public Builder setPreciseTotalGrossPrice(io.dstore.Values.decimalValue value) {
          if (preciseTotalGrossPriceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            preciseTotalGrossPrice_ = value;
            onChanged();
          } else {
            preciseTotalGrossPriceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
         */
        public Builder setPreciseTotalGrossPrice(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (preciseTotalGrossPriceBuilder_ == null) {
            preciseTotalGrossPrice_ = builderForValue.build();
            onChanged();
          } else {
            preciseTotalGrossPriceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
         */
        public Builder mergePreciseTotalGrossPrice(io.dstore.Values.decimalValue value) {
          if (preciseTotalGrossPriceBuilder_ == null) {
            if (preciseTotalGrossPrice_ != null) {
              preciseTotalGrossPrice_ =
                io.dstore.Values.decimalValue.newBuilder(preciseTotalGrossPrice_).mergeFrom(value).buildPartial();
            } else {
              preciseTotalGrossPrice_ = value;
            }
            onChanged();
          } else {
            preciseTotalGrossPriceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
         */
        public Builder clearPreciseTotalGrossPrice() {
          if (preciseTotalGrossPriceBuilder_ == null) {
            preciseTotalGrossPrice_ = null;
            onChanged();
          } else {
            preciseTotalGrossPrice_ = null;
            preciseTotalGrossPriceBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
         */
        public io.dstore.Values.decimalValue.Builder getPreciseTotalGrossPriceBuilder() {
          
          onChanged();
          return getPreciseTotalGrossPriceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getPreciseTotalGrossPriceOrBuilder() {
          if (preciseTotalGrossPriceBuilder_ != null) {
            return preciseTotalGrossPriceBuilder_.getMessageOrBuilder();
          } else {
            return preciseTotalGrossPrice_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : preciseTotalGrossPrice_;
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalGrossPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_gross_price = 10020;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getPreciseTotalGrossPriceFieldBuilder() {
          if (preciseTotalGrossPriceBuilder_ == null) {
            preciseTotalGrossPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getPreciseTotalGrossPrice(),
                    getParentForChildren(),
                    isClean());
            preciseTotalGrossPrice_ = null;
          }
          return preciseTotalGrossPriceBuilder_;
        }

        private io.dstore.Values.decimalValue unitNettoPrice_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> unitNettoPriceBuilder_;
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
         */
        public boolean hasUnitNettoPrice() {
          return unitNettoPriceBuilder_ != null || unitNettoPrice_ != null;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
         */
        public io.dstore.Values.decimalValue getUnitNettoPrice() {
          if (unitNettoPriceBuilder_ == null) {
            return unitNettoPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : unitNettoPrice_;
          } else {
            return unitNettoPriceBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
         */
        public Builder setUnitNettoPrice(io.dstore.Values.decimalValue value) {
          if (unitNettoPriceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            unitNettoPrice_ = value;
            onChanged();
          } else {
            unitNettoPriceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
         */
        public Builder setUnitNettoPrice(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (unitNettoPriceBuilder_ == null) {
            unitNettoPrice_ = builderForValue.build();
            onChanged();
          } else {
            unitNettoPriceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
         */
        public Builder mergeUnitNettoPrice(io.dstore.Values.decimalValue value) {
          if (unitNettoPriceBuilder_ == null) {
            if (unitNettoPrice_ != null) {
              unitNettoPrice_ =
                io.dstore.Values.decimalValue.newBuilder(unitNettoPrice_).mergeFrom(value).buildPartial();
            } else {
              unitNettoPrice_ = value;
            }
            onChanged();
          } else {
            unitNettoPriceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
         */
        public Builder clearUnitNettoPrice() {
          if (unitNettoPriceBuilder_ == null) {
            unitNettoPrice_ = null;
            onChanged();
          } else {
            unitNettoPrice_ = null;
            unitNettoPriceBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
         */
        public io.dstore.Values.decimalValue.Builder getUnitNettoPriceBuilder() {
          
          onChanged();
          return getUnitNettoPriceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getUnitNettoPriceOrBuilder() {
          if (unitNettoPriceBuilder_ != null) {
            return unitNettoPriceBuilder_.getMessageOrBuilder();
          } else {
            return unitNettoPrice_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : unitNettoPrice_;
          }
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel EINMAL bestellt (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue unit_netto_price = 10021;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getUnitNettoPriceFieldBuilder() {
          if (unitNettoPriceBuilder_ == null) {
            unitNettoPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getUnitNettoPrice(),
                    getParentForChildren(),
                    isClean());
            unitNettoPrice_ = null;
          }
          return unitNettoPriceBuilder_;
        }

        private io.dstore.Values.decimalValue taxesMultiplier_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> taxesMultiplierBuilder_;
        /**
         * <pre>
         * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
         */
        public boolean hasTaxesMultiplier() {
          return taxesMultiplierBuilder_ != null || taxesMultiplier_ != null;
        }
        /**
         * <pre>
         * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
         */
        public io.dstore.Values.decimalValue getTaxesMultiplier() {
          if (taxesMultiplierBuilder_ == null) {
            return taxesMultiplier_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : taxesMultiplier_;
          } else {
            return taxesMultiplierBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
         */
        public Builder setTaxesMultiplier(io.dstore.Values.decimalValue value) {
          if (taxesMultiplierBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            taxesMultiplier_ = value;
            onChanged();
          } else {
            taxesMultiplierBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
         */
        public Builder setTaxesMultiplier(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (taxesMultiplierBuilder_ == null) {
            taxesMultiplier_ = builderForValue.build();
            onChanged();
          } else {
            taxesMultiplierBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
         */
        public Builder mergeTaxesMultiplier(io.dstore.Values.decimalValue value) {
          if (taxesMultiplierBuilder_ == null) {
            if (taxesMultiplier_ != null) {
              taxesMultiplier_ =
                io.dstore.Values.decimalValue.newBuilder(taxesMultiplier_).mergeFrom(value).buildPartial();
            } else {
              taxesMultiplier_ = value;
            }
            onChanged();
          } else {
            taxesMultiplierBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
         */
        public Builder clearTaxesMultiplier() {
          if (taxesMultiplierBuilder_ == null) {
            taxesMultiplier_ = null;
            onChanged();
          } else {
            taxesMultiplier_ = null;
            taxesMultiplierBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
         */
        public io.dstore.Values.decimalValue.Builder getTaxesMultiplierBuilder() {
          
          onChanged();
          return getTaxesMultiplierFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getTaxesMultiplierOrBuilder() {
          if (taxesMultiplierBuilder_ != null) {
            return taxesMultiplierBuilder_.getMessageOrBuilder();
          } else {
            return taxesMultiplier_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : taxesMultiplier_;
          }
        }
        /**
         * <pre>
         * Mehrwertsteuer als "Multiplikator". D.h. beträgt die Mehrwertsteuer z.B. "16 %", steht hier der Wert "1.16".
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue taxes_multiplier = 10022;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getTaxesMultiplierFieldBuilder() {
          if (taxesMultiplierBuilder_ == null) {
            taxesMultiplierBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getTaxesMultiplier(),
                    getParentForChildren(),
                    isClean());
            taxesMultiplier_ = null;
          }
          return taxesMultiplierBuilder_;
        }

        private io.dstore.Values.decimalValue preciseAbsTotalGrossSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> preciseAbsTotalGrossSurchargeBuilder_;
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
         */
        public boolean hasPreciseAbsTotalGrossSurcharge() {
          return preciseAbsTotalGrossSurchargeBuilder_ != null || preciseAbsTotalGrossSurcharge_ != null;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
         */
        public io.dstore.Values.decimalValue getPreciseAbsTotalGrossSurcharge() {
          if (preciseAbsTotalGrossSurchargeBuilder_ == null) {
            return preciseAbsTotalGrossSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseAbsTotalGrossSurcharge_;
          } else {
            return preciseAbsTotalGrossSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
         */
        public Builder setPreciseAbsTotalGrossSurcharge(io.dstore.Values.decimalValue value) {
          if (preciseAbsTotalGrossSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            preciseAbsTotalGrossSurcharge_ = value;
            onChanged();
          } else {
            preciseAbsTotalGrossSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
         */
        public Builder setPreciseAbsTotalGrossSurcharge(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (preciseAbsTotalGrossSurchargeBuilder_ == null) {
            preciseAbsTotalGrossSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            preciseAbsTotalGrossSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
         */
        public Builder mergePreciseAbsTotalGrossSurcharge(io.dstore.Values.decimalValue value) {
          if (preciseAbsTotalGrossSurchargeBuilder_ == null) {
            if (preciseAbsTotalGrossSurcharge_ != null) {
              preciseAbsTotalGrossSurcharge_ =
                io.dstore.Values.decimalValue.newBuilder(preciseAbsTotalGrossSurcharge_).mergeFrom(value).buildPartial();
            } else {
              preciseAbsTotalGrossSurcharge_ = value;
            }
            onChanged();
          } else {
            preciseAbsTotalGrossSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
         */
        public Builder clearPreciseAbsTotalGrossSurcharge() {
          if (preciseAbsTotalGrossSurchargeBuilder_ == null) {
            preciseAbsTotalGrossSurcharge_ = null;
            onChanged();
          } else {
            preciseAbsTotalGrossSurcharge_ = null;
            preciseAbsTotalGrossSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
         */
        public io.dstore.Values.decimalValue.Builder getPreciseAbsTotalGrossSurchargeBuilder() {
          
          onChanged();
          return getPreciseAbsTotalGrossSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getPreciseAbsTotalGrossSurchargeOrBuilder() {
          if (preciseAbsTotalGrossSurchargeBuilder_ != null) {
            return preciseAbsTotalGrossSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return preciseAbsTotalGrossSurcharge_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : preciseAbsTotalGrossSurcharge_;
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_gross_surcharge = 10023;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getPreciseAbsTotalGrossSurchargeFieldBuilder() {
          if (preciseAbsTotalGrossSurchargeBuilder_ == null) {
            preciseAbsTotalGrossSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getPreciseAbsTotalGrossSurcharge(),
                    getParentForChildren(),
                    isClean());
            preciseAbsTotalGrossSurcharge_ = null;
          }
          return preciseAbsTotalGrossSurchargeBuilder_;
        }

        private io.dstore.Values.decimalValue preciseAbsTotalNetSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> preciseAbsTotalNetSurchargeBuilder_;
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
         */
        public boolean hasPreciseAbsTotalNetSurcharge() {
          return preciseAbsTotalNetSurchargeBuilder_ != null || preciseAbsTotalNetSurcharge_ != null;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
         */
        public io.dstore.Values.decimalValue getPreciseAbsTotalNetSurcharge() {
          if (preciseAbsTotalNetSurchargeBuilder_ == null) {
            return preciseAbsTotalNetSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseAbsTotalNetSurcharge_;
          } else {
            return preciseAbsTotalNetSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
         */
        public Builder setPreciseAbsTotalNetSurcharge(io.dstore.Values.decimalValue value) {
          if (preciseAbsTotalNetSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            preciseAbsTotalNetSurcharge_ = value;
            onChanged();
          } else {
            preciseAbsTotalNetSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
         */
        public Builder setPreciseAbsTotalNetSurcharge(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (preciseAbsTotalNetSurchargeBuilder_ == null) {
            preciseAbsTotalNetSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            preciseAbsTotalNetSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
         */
        public Builder mergePreciseAbsTotalNetSurcharge(io.dstore.Values.decimalValue value) {
          if (preciseAbsTotalNetSurchargeBuilder_ == null) {
            if (preciseAbsTotalNetSurcharge_ != null) {
              preciseAbsTotalNetSurcharge_ =
                io.dstore.Values.decimalValue.newBuilder(preciseAbsTotalNetSurcharge_).mergeFrom(value).buildPartial();
            } else {
              preciseAbsTotalNetSurcharge_ = value;
            }
            onChanged();
          } else {
            preciseAbsTotalNetSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
         */
        public Builder clearPreciseAbsTotalNetSurcharge() {
          if (preciseAbsTotalNetSurchargeBuilder_ == null) {
            preciseAbsTotalNetSurcharge_ = null;
            onChanged();
          } else {
            preciseAbsTotalNetSurcharge_ = null;
            preciseAbsTotalNetSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
         */
        public io.dstore.Values.decimalValue.Builder getPreciseAbsTotalNetSurchargeBuilder() {
          
          onChanged();
          return getPreciseAbsTotalNetSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getPreciseAbsTotalNetSurchargeOrBuilder() {
          if (preciseAbsTotalNetSurchargeBuilder_ != null) {
            return preciseAbsTotalNetSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return preciseAbsTotalNetSurcharge_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : preciseAbsTotalNetSurcharge_;
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "AbsoluteTotalNetSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_abs_total_net_surcharge = 10024;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getPreciseAbsTotalNetSurchargeFieldBuilder() {
          if (preciseAbsTotalNetSurchargeBuilder_ == null) {
            preciseAbsTotalNetSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getPreciseAbsTotalNetSurcharge(),
                    getParentForChildren(),
                    isClean());
            preciseAbsTotalNetSurcharge_ = null;
          }
          return preciseAbsTotalNetSurchargeBuilder_;
        }

        private io.dstore.Values.decimalValue totalNetPrice_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> totalNetPriceBuilder_;
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
         */
        public boolean hasTotalNetPrice() {
          return totalNetPriceBuilder_ != null || totalNetPrice_ != null;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
         */
        public io.dstore.Values.decimalValue getTotalNetPrice() {
          if (totalNetPriceBuilder_ == null) {
            return totalNetPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : totalNetPrice_;
          } else {
            return totalNetPriceBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
         */
        public Builder setTotalNetPrice(io.dstore.Values.decimalValue value) {
          if (totalNetPriceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            totalNetPrice_ = value;
            onChanged();
          } else {
            totalNetPriceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
         */
        public Builder setTotalNetPrice(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (totalNetPriceBuilder_ == null) {
            totalNetPrice_ = builderForValue.build();
            onChanged();
          } else {
            totalNetPriceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
         */
        public Builder mergeTotalNetPrice(io.dstore.Values.decimalValue value) {
          if (totalNetPriceBuilder_ == null) {
            if (totalNetPrice_ != null) {
              totalNetPrice_ =
                io.dstore.Values.decimalValue.newBuilder(totalNetPrice_).mergeFrom(value).buildPartial();
            } else {
              totalNetPrice_ = value;
            }
            onChanged();
          } else {
            totalNetPriceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
         */
        public Builder clearTotalNetPrice() {
          if (totalNetPriceBuilder_ == null) {
            totalNetPrice_ = null;
            onChanged();
          } else {
            totalNetPrice_ = null;
            totalNetPriceBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
         */
        public io.dstore.Values.decimalValue.Builder getTotalNetPriceBuilder() {
          
          onChanged();
          return getTotalNetPriceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getTotalNetPriceOrBuilder() {
          if (totalNetPriceBuilder_ != null) {
            return totalNetPriceBuilder_.getMessageOrBuilder();
          } else {
            return totalNetPrice_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : totalNetPrice_;
          }
        }
        /**
         * <pre>
         * Netto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_net_price = 10025;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getTotalNetPriceFieldBuilder() {
          if (totalNetPriceBuilder_ == null) {
            totalNetPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getTotalNetPrice(),
                    getParentForChildren(),
                    isClean());
            totalNetPrice_ = null;
          }
          return totalNetPriceBuilder_;
        }

        private io.dstore.Values.integerValue quantity_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> quantityBuilder_;
        /**
         * <pre>
         * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
         * </pre>
         *
         * <code>optional .dstore.values.integerValue quantity = 10026;</code>
         */
        public boolean hasQuantity() {
          return quantityBuilder_ != null || quantity_ != null;
        }
        /**
         * <pre>
         * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
         * </pre>
         *
         * <code>optional .dstore.values.integerValue quantity = 10026;</code>
         */
        public io.dstore.Values.integerValue getQuantity() {
          if (quantityBuilder_ == null) {
            return quantity_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : quantity_;
          } else {
            return quantityBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
         * </pre>
         *
         * <code>optional .dstore.values.integerValue quantity = 10026;</code>
         */
        public Builder setQuantity(io.dstore.Values.integerValue value) {
          if (quantityBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            quantity_ = value;
            onChanged();
          } else {
            quantityBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
         * </pre>
         *
         * <code>optional .dstore.values.integerValue quantity = 10026;</code>
         */
        public Builder setQuantity(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (quantityBuilder_ == null) {
            quantity_ = builderForValue.build();
            onChanged();
          } else {
            quantityBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
         * </pre>
         *
         * <code>optional .dstore.values.integerValue quantity = 10026;</code>
         */
        public Builder mergeQuantity(io.dstore.Values.integerValue value) {
          if (quantityBuilder_ == null) {
            if (quantity_ != null) {
              quantity_ =
                io.dstore.Values.integerValue.newBuilder(quantity_).mergeFrom(value).buildPartial();
            } else {
              quantity_ = value;
            }
            onChanged();
          } else {
            quantityBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
         * </pre>
         *
         * <code>optional .dstore.values.integerValue quantity = 10026;</code>
         */
        public Builder clearQuantity() {
          if (quantityBuilder_ == null) {
            quantity_ = null;
            onChanged();
          } else {
            quantity_ = null;
            quantityBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
         * </pre>
         *
         * <code>optional .dstore.values.integerValue quantity = 10026;</code>
         */
        public io.dstore.Values.integerValue.Builder getQuantityBuilder() {
          
          onChanged();
          return getQuantityFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
         * </pre>
         *
         * <code>optional .dstore.values.integerValue quantity = 10026;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getQuantityOrBuilder() {
          if (quantityBuilder_ != null) {
            return quantityBuilder_.getMessageOrBuilder();
          } else {
            return quantity_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : quantity_;
          }
        }
        /**
         * <pre>
         * Wieviel von dem Artikel bestellt werden soll. Hier steht also entweder die Zahl, die in "&#64;Quantities" angegeben wurde, oder "1".
         * </pre>
         *
         * <code>optional .dstore.values.integerValue quantity = 10026;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getQuantityFieldBuilder() {
          if (quantityBuilder_ == null) {
            quantityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getQuantity(),
                    getParentForChildren(),
                    isClean());
            quantity_ = null;
          }
          return quantityBuilder_;
        }

        private io.dstore.Values.stringValue quantityPerBundleItemSetIdList_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> quantityPerBundleItemSetIdListBuilder_;
        /**
         * <pre>
         * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
         * </pre>
         *
         * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
         */
        public boolean hasQuantityPerBundleItemSetIdList() {
          return quantityPerBundleItemSetIdListBuilder_ != null || quantityPerBundleItemSetIdList_ != null;
        }
        /**
         * <pre>
         * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
         * </pre>
         *
         * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
         */
        public io.dstore.Values.stringValue getQuantityPerBundleItemSetIdList() {
          if (quantityPerBundleItemSetIdListBuilder_ == null) {
            return quantityPerBundleItemSetIdList_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : quantityPerBundleItemSetIdList_;
          } else {
            return quantityPerBundleItemSetIdListBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
         * </pre>
         *
         * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
         */
        public Builder setQuantityPerBundleItemSetIdList(io.dstore.Values.stringValue value) {
          if (quantityPerBundleItemSetIdListBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            quantityPerBundleItemSetIdList_ = value;
            onChanged();
          } else {
            quantityPerBundleItemSetIdListBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
         * </pre>
         *
         * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
         */
        public Builder setQuantityPerBundleItemSetIdList(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (quantityPerBundleItemSetIdListBuilder_ == null) {
            quantityPerBundleItemSetIdList_ = builderForValue.build();
            onChanged();
          } else {
            quantityPerBundleItemSetIdListBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
         * </pre>
         *
         * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
         */
        public Builder mergeQuantityPerBundleItemSetIdList(io.dstore.Values.stringValue value) {
          if (quantityPerBundleItemSetIdListBuilder_ == null) {
            if (quantityPerBundleItemSetIdList_ != null) {
              quantityPerBundleItemSetIdList_ =
                io.dstore.Values.stringValue.newBuilder(quantityPerBundleItemSetIdList_).mergeFrom(value).buildPartial();
            } else {
              quantityPerBundleItemSetIdList_ = value;
            }
            onChanged();
          } else {
            quantityPerBundleItemSetIdListBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
         * </pre>
         *
         * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
         */
        public Builder clearQuantityPerBundleItemSetIdList() {
          if (quantityPerBundleItemSetIdListBuilder_ == null) {
            quantityPerBundleItemSetIdList_ = null;
            onChanged();
          } else {
            quantityPerBundleItemSetIdList_ = null;
            quantityPerBundleItemSetIdListBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
         * </pre>
         *
         * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
         */
        public io.dstore.Values.stringValue.Builder getQuantityPerBundleItemSetIdListBuilder() {
          
          onChanged();
          return getQuantityPerBundleItemSetIdListFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
         * </pre>
         *
         * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
         */
        public io.dstore.Values.stringValueOrBuilder getQuantityPerBundleItemSetIdListOrBuilder() {
          if (quantityPerBundleItemSetIdListBuilder_ != null) {
            return quantityPerBundleItemSetIdListBuilder_.getMessageOrBuilder();
          } else {
            return quantityPerBundleItemSetIdList_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : quantityPerBundleItemSetIdList_;
          }
        }
        /**
         * <pre>
         * Durch ein "," getrennte Liste von Listen, deren Werte wiederum durch "&amp;" getrennt sind, und ein Wert die Form &lt;Menge&gt;x&lt;BundleItemSetID&gt; hat. Dies besagt jeweils, wieviel (&lt;Menge&gt;) von "Quantity" der "TreeNodeID" zu der "&lt;ItemSetID&gt;" des Bundles gehört.
         * </pre>
         *
         * <code>optional .dstore.values.stringValue quantity_per_bundle_item_set_id_list = 10027;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getQuantityPerBundleItemSetIdListFieldBuilder() {
          if (quantityPerBundleItemSetIdListBuilder_ == null) {
            quantityPerBundleItemSetIdListBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getQuantityPerBundleItemSetIdList(),
                    getParentForChildren(),
                    isClean());
            quantityPerBundleItemSetIdList_ = null;
          }
          return quantityPerBundleItemSetIdListBuilder_;
        }

        private io.dstore.Values.decimalValue surchargeValue_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> surchargeValueBuilder_;
        /**
         * <pre>
         * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
         */
        public boolean hasSurchargeValue() {
          return surchargeValueBuilder_ != null || surchargeValue_ != null;
        }
        /**
         * <pre>
         * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
         */
        public io.dstore.Values.decimalValue getSurchargeValue() {
          if (surchargeValueBuilder_ == null) {
            return surchargeValue_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : surchargeValue_;
          } else {
            return surchargeValueBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
         */
        public Builder setSurchargeValue(io.dstore.Values.decimalValue value) {
          if (surchargeValueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            surchargeValue_ = value;
            onChanged();
          } else {
            surchargeValueBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
         */
        public Builder setSurchargeValue(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (surchargeValueBuilder_ == null) {
            surchargeValue_ = builderForValue.build();
            onChanged();
          } else {
            surchargeValueBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
         */
        public Builder mergeSurchargeValue(io.dstore.Values.decimalValue value) {
          if (surchargeValueBuilder_ == null) {
            if (surchargeValue_ != null) {
              surchargeValue_ =
                io.dstore.Values.decimalValue.newBuilder(surchargeValue_).mergeFrom(value).buildPartial();
            } else {
              surchargeValue_ = value;
            }
            onChanged();
          } else {
            surchargeValueBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
         */
        public Builder clearSurchargeValue() {
          if (surchargeValueBuilder_ == null) {
            surchargeValue_ = null;
            onChanged();
          } else {
            surchargeValue_ = null;
            surchargeValueBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
         */
        public io.dstore.Values.decimalValue.Builder getSurchargeValueBuilder() {
          
          onChanged();
          return getSurchargeValueFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getSurchargeValueOrBuilder() {
          if (surchargeValueBuilder_ != null) {
            return surchargeValueBuilder_.getMessageOrBuilder();
          } else {
            return surchargeValue_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : surchargeValue_;
          }
        }
        /**
         * <pre>
         * Der Wert des Aufschlags bzw. Rabattes, der verwendet wurde. Ist die "SurchargeTypeID" relativ definiert, entspricht dieser Wert dem in "RelativeSurcharge", andernfalls dem Wert in "AbsoluteUnitNetSurcharge" bzw. "AbsoluteUnitGrossSurcharge"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue surcharge_value = 10028;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getSurchargeValueFieldBuilder() {
          if (surchargeValueBuilder_ == null) {
            surchargeValueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getSurchargeValue(),
                    getParentForChildren(),
                    isClean());
            surchargeValue_ = null;
          }
          return surchargeValueBuilder_;
        }

        private io.dstore.Values.decimalValue absoluteUnitNetSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> absoluteUnitNetSurchargeBuilder_;
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
         */
        public boolean hasAbsoluteUnitNetSurcharge() {
          return absoluteUnitNetSurchargeBuilder_ != null || absoluteUnitNetSurcharge_ != null;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
         */
        public io.dstore.Values.decimalValue getAbsoluteUnitNetSurcharge() {
          if (absoluteUnitNetSurchargeBuilder_ == null) {
            return absoluteUnitNetSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteUnitNetSurcharge_;
          } else {
            return absoluteUnitNetSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
         */
        public Builder setAbsoluteUnitNetSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteUnitNetSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            absoluteUnitNetSurcharge_ = value;
            onChanged();
          } else {
            absoluteUnitNetSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
         */
        public Builder setAbsoluteUnitNetSurcharge(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (absoluteUnitNetSurchargeBuilder_ == null) {
            absoluteUnitNetSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            absoluteUnitNetSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
         */
        public Builder mergeAbsoluteUnitNetSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteUnitNetSurchargeBuilder_ == null) {
            if (absoluteUnitNetSurcharge_ != null) {
              absoluteUnitNetSurcharge_ =
                io.dstore.Values.decimalValue.newBuilder(absoluteUnitNetSurcharge_).mergeFrom(value).buildPartial();
            } else {
              absoluteUnitNetSurcharge_ = value;
            }
            onChanged();
          } else {
            absoluteUnitNetSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
         */
        public Builder clearAbsoluteUnitNetSurcharge() {
          if (absoluteUnitNetSurchargeBuilder_ == null) {
            absoluteUnitNetSurcharge_ = null;
            onChanged();
          } else {
            absoluteUnitNetSurcharge_ = null;
            absoluteUnitNetSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
         */
        public io.dstore.Values.decimalValue.Builder getAbsoluteUnitNetSurchargeBuilder() {
          
          onChanged();
          return getAbsoluteUnitNetSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getAbsoluteUnitNetSurchargeOrBuilder() {
          if (absoluteUnitNetSurchargeBuilder_ != null) {
            return absoluteUnitNetSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return absoluteUnitNetSurcharge_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : absoluteUnitNetSurcharge_;
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitNetPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_net_surcharge = 10029;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getAbsoluteUnitNetSurchargeFieldBuilder() {
          if (absoluteUnitNetSurchargeBuilder_ == null) {
            absoluteUnitNetSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getAbsoluteUnitNetSurcharge(),
                    getParentForChildren(),
                    isClean());
            absoluteUnitNetSurcharge_ = null;
          }
          return absoluteUnitNetSurchargeBuilder_;
        }

        private io.dstore.Values.decimalValue absoluteUnitBruttoSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> absoluteUnitBruttoSurchargeBuilder_;
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
         */
        public boolean hasAbsoluteUnitBruttoSurcharge() {
          return absoluteUnitBruttoSurchargeBuilder_ != null || absoluteUnitBruttoSurcharge_ != null;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
         */
        public io.dstore.Values.decimalValue getAbsoluteUnitBruttoSurcharge() {
          if (absoluteUnitBruttoSurchargeBuilder_ == null) {
            return absoluteUnitBruttoSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteUnitBruttoSurcharge_;
          } else {
            return absoluteUnitBruttoSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
         */
        public Builder setAbsoluteUnitBruttoSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteUnitBruttoSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            absoluteUnitBruttoSurcharge_ = value;
            onChanged();
          } else {
            absoluteUnitBruttoSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
         */
        public Builder setAbsoluteUnitBruttoSurcharge(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (absoluteUnitBruttoSurchargeBuilder_ == null) {
            absoluteUnitBruttoSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            absoluteUnitBruttoSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
         */
        public Builder mergeAbsoluteUnitBruttoSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteUnitBruttoSurchargeBuilder_ == null) {
            if (absoluteUnitBruttoSurcharge_ != null) {
              absoluteUnitBruttoSurcharge_ =
                io.dstore.Values.decimalValue.newBuilder(absoluteUnitBruttoSurcharge_).mergeFrom(value).buildPartial();
            } else {
              absoluteUnitBruttoSurcharge_ = value;
            }
            onChanged();
          } else {
            absoluteUnitBruttoSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
         */
        public Builder clearAbsoluteUnitBruttoSurcharge() {
          if (absoluteUnitBruttoSurchargeBuilder_ == null) {
            absoluteUnitBruttoSurcharge_ = null;
            onChanged();
          } else {
            absoluteUnitBruttoSurcharge_ = null;
            absoluteUnitBruttoSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
         */
        public io.dstore.Values.decimalValue.Builder getAbsoluteUnitBruttoSurchargeBuilder() {
          
          onChanged();
          return getAbsoluteUnitBruttoSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getAbsoluteUnitBruttoSurchargeOrBuilder() {
          if (absoluteUnitBruttoSurchargeBuilder_ != null) {
            return absoluteUnitBruttoSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return absoluteUnitBruttoSurcharge_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : absoluteUnitBruttoSurcharge_;
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_brutto_surcharge = 10030;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getAbsoluteUnitBruttoSurchargeFieldBuilder() {
          if (absoluteUnitBruttoSurchargeBuilder_ == null) {
            absoluteUnitBruttoSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getAbsoluteUnitBruttoSurcharge(),
                    getParentForChildren(),
                    isClean());
            absoluteUnitBruttoSurcharge_ = null;
          }
          return absoluteUnitBruttoSurchargeBuilder_;
        }

        private io.dstore.Values.decimalValue absoluteUnitGrossSurcharge_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> absoluteUnitGrossSurchargeBuilder_;
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
         */
        public boolean hasAbsoluteUnitGrossSurcharge() {
          return absoluteUnitGrossSurchargeBuilder_ != null || absoluteUnitGrossSurcharge_ != null;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
         */
        public io.dstore.Values.decimalValue getAbsoluteUnitGrossSurcharge() {
          if (absoluteUnitGrossSurchargeBuilder_ == null) {
            return absoluteUnitGrossSurcharge_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : absoluteUnitGrossSurcharge_;
          } else {
            return absoluteUnitGrossSurchargeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
         */
        public Builder setAbsoluteUnitGrossSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteUnitGrossSurchargeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            absoluteUnitGrossSurcharge_ = value;
            onChanged();
          } else {
            absoluteUnitGrossSurchargeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
         */
        public Builder setAbsoluteUnitGrossSurcharge(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (absoluteUnitGrossSurchargeBuilder_ == null) {
            absoluteUnitGrossSurcharge_ = builderForValue.build();
            onChanged();
          } else {
            absoluteUnitGrossSurchargeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
         */
        public Builder mergeAbsoluteUnitGrossSurcharge(io.dstore.Values.decimalValue value) {
          if (absoluteUnitGrossSurchargeBuilder_ == null) {
            if (absoluteUnitGrossSurcharge_ != null) {
              absoluteUnitGrossSurcharge_ =
                io.dstore.Values.decimalValue.newBuilder(absoluteUnitGrossSurcharge_).mergeFrom(value).buildPartial();
            } else {
              absoluteUnitGrossSurcharge_ = value;
            }
            onChanged();
          } else {
            absoluteUnitGrossSurchargeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
         */
        public Builder clearAbsoluteUnitGrossSurcharge() {
          if (absoluteUnitGrossSurchargeBuilder_ == null) {
            absoluteUnitGrossSurcharge_ = null;
            onChanged();
          } else {
            absoluteUnitGrossSurcharge_ = null;
            absoluteUnitGrossSurchargeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
         */
        public io.dstore.Values.decimalValue.Builder getAbsoluteUnitGrossSurchargeBuilder() {
          
          onChanged();
          return getAbsoluteUnitGrossSurchargeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getAbsoluteUnitGrossSurchargeOrBuilder() {
          if (absoluteUnitGrossSurchargeBuilder_ != null) {
            return absoluteUnitGrossSurchargeBuilder_.getMessageOrBuilder();
          } else {
            return absoluteUnitGrossSurcharge_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : absoluteUnitGrossSurcharge_;
          }
        }
        /**
         * <pre>
         * Absoluter Rabatt/Aufschlag, der in "UnitGrossPrice" bereits ENTHALTEN ist
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue absolute_unit_gross_surcharge = 10031;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getAbsoluteUnitGrossSurchargeFieldBuilder() {
          if (absoluteUnitGrossSurchargeBuilder_ == null) {
            absoluteUnitGrossSurchargeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getAbsoluteUnitGrossSurcharge(),
                    getParentForChildren(),
                    isClean());
            absoluteUnitGrossSurcharge_ = null;
          }
          return absoluteUnitGrossSurchargeBuilder_;
        }

        private io.dstore.Values.decimalValue preciseTotalNetPrice_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> preciseTotalNetPriceBuilder_;
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
         */
        public boolean hasPreciseTotalNetPrice() {
          return preciseTotalNetPriceBuilder_ != null || preciseTotalNetPrice_ != null;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
         */
        public io.dstore.Values.decimalValue getPreciseTotalNetPrice() {
          if (preciseTotalNetPriceBuilder_ == null) {
            return preciseTotalNetPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseTotalNetPrice_;
          } else {
            return preciseTotalNetPriceBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
         */
        public Builder setPreciseTotalNetPrice(io.dstore.Values.decimalValue value) {
          if (preciseTotalNetPriceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            preciseTotalNetPrice_ = value;
            onChanged();
          } else {
            preciseTotalNetPriceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
         */
        public Builder setPreciseTotalNetPrice(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (preciseTotalNetPriceBuilder_ == null) {
            preciseTotalNetPrice_ = builderForValue.build();
            onChanged();
          } else {
            preciseTotalNetPriceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
         */
        public Builder mergePreciseTotalNetPrice(io.dstore.Values.decimalValue value) {
          if (preciseTotalNetPriceBuilder_ == null) {
            if (preciseTotalNetPrice_ != null) {
              preciseTotalNetPrice_ =
                io.dstore.Values.decimalValue.newBuilder(preciseTotalNetPrice_).mergeFrom(value).buildPartial();
            } else {
              preciseTotalNetPrice_ = value;
            }
            onChanged();
          } else {
            preciseTotalNetPriceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
         */
        public Builder clearPreciseTotalNetPrice() {
          if (preciseTotalNetPriceBuilder_ == null) {
            preciseTotalNetPrice_ = null;
            onChanged();
          } else {
            preciseTotalNetPrice_ = null;
            preciseTotalNetPriceBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
         */
        public io.dstore.Values.decimalValue.Builder getPreciseTotalNetPriceBuilder() {
          
          onChanged();
          return getPreciseTotalNetPriceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getPreciseTotalNetPriceOrBuilder() {
          if (preciseTotalNetPriceBuilder_ != null) {
            return preciseTotalNetPriceBuilder_.getMessageOrBuilder();
          } else {
            return preciseTotalNetPrice_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : preciseTotalNetPrice_;
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "TotalNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_total_net_price = 10032;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getPreciseTotalNetPriceFieldBuilder() {
          if (preciseTotalNetPriceBuilder_ == null) {
            preciseTotalNetPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getPreciseTotalNetPrice(),
                    getParentForChildren(),
                    isClean());
            preciseTotalNetPrice_ = null;
          }
          return preciseTotalNetPriceBuilder_;
        }

        private io.dstore.Values.integerValue surchargeTypeId_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> surchargeTypeIdBuilder_;
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
         */
        public boolean hasSurchargeTypeId() {
          return surchargeTypeIdBuilder_ != null || surchargeTypeId_ != null;
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
         */
        public io.dstore.Values.integerValue getSurchargeTypeId() {
          if (surchargeTypeIdBuilder_ == null) {
            return surchargeTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeId_;
          } else {
            return surchargeTypeIdBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
         */
        public Builder setSurchargeTypeId(io.dstore.Values.integerValue value) {
          if (surchargeTypeIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            surchargeTypeId_ = value;
            onChanged();
          } else {
            surchargeTypeIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
         */
        public Builder setSurchargeTypeId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeId_ = builderForValue.build();
            onChanged();
          } else {
            surchargeTypeIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
         */
        public Builder mergeSurchargeTypeId(io.dstore.Values.integerValue value) {
          if (surchargeTypeIdBuilder_ == null) {
            if (surchargeTypeId_ != null) {
              surchargeTypeId_ =
                io.dstore.Values.integerValue.newBuilder(surchargeTypeId_).mergeFrom(value).buildPartial();
            } else {
              surchargeTypeId_ = value;
            }
            onChanged();
          } else {
            surchargeTypeIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
         */
        public Builder clearSurchargeTypeId() {
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeId_ = null;
            onChanged();
          } else {
            surchargeTypeId_ = null;
            surchargeTypeIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
         */
        public io.dstore.Values.integerValue.Builder getSurchargeTypeIdBuilder() {
          
          onChanged();
          return getSurchargeTypeIdFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getSurchargeTypeIdOrBuilder() {
          if (surchargeTypeIdBuilder_ != null) {
            return surchargeTypeIdBuilder_.getMessageOrBuilder();
          } else {
            return surchargeTypeId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeId_;
          }
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, die ermittelt und bei der Preis-Ermittlung angewandt wurde
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10033;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getSurchargeTypeIdFieldBuilder() {
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getSurchargeTypeId(),
                    getParentForChildren(),
                    isClean());
            surchargeTypeId_ = null;
          }
          return surchargeTypeIdBuilder_;
        }

        private io.dstore.Values.decimalValue preciseUnitNetPrice_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> preciseUnitNetPriceBuilder_;
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
         */
        public boolean hasPreciseUnitNetPrice() {
          return preciseUnitNetPriceBuilder_ != null || preciseUnitNetPrice_ != null;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
         */
        public io.dstore.Values.decimalValue getPreciseUnitNetPrice() {
          if (preciseUnitNetPriceBuilder_ == null) {
            return preciseUnitNetPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : preciseUnitNetPrice_;
          } else {
            return preciseUnitNetPriceBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
         */
        public Builder setPreciseUnitNetPrice(io.dstore.Values.decimalValue value) {
          if (preciseUnitNetPriceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            preciseUnitNetPrice_ = value;
            onChanged();
          } else {
            preciseUnitNetPriceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
         */
        public Builder setPreciseUnitNetPrice(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (preciseUnitNetPriceBuilder_ == null) {
            preciseUnitNetPrice_ = builderForValue.build();
            onChanged();
          } else {
            preciseUnitNetPriceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
         */
        public Builder mergePreciseUnitNetPrice(io.dstore.Values.decimalValue value) {
          if (preciseUnitNetPriceBuilder_ == null) {
            if (preciseUnitNetPrice_ != null) {
              preciseUnitNetPrice_ =
                io.dstore.Values.decimalValue.newBuilder(preciseUnitNetPrice_).mergeFrom(value).buildPartial();
            } else {
              preciseUnitNetPrice_ = value;
            }
            onChanged();
          } else {
            preciseUnitNetPriceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
         */
        public Builder clearPreciseUnitNetPrice() {
          if (preciseUnitNetPriceBuilder_ == null) {
            preciseUnitNetPrice_ = null;
            onChanged();
          } else {
            preciseUnitNetPrice_ = null;
            preciseUnitNetPriceBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
         */
        public io.dstore.Values.decimalValue.Builder getPreciseUnitNetPriceBuilder() {
          
          onChanged();
          return getPreciseUnitNetPriceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getPreciseUnitNetPriceOrBuilder() {
          if (preciseUnitNetPriceBuilder_ != null) {
            return preciseUnitNetPriceBuilder_.getMessageOrBuilder();
          } else {
            return preciseUnitNetPrice_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : preciseUnitNetPrice_;
          }
        }
        /**
         * <pre>
         * Exakter (intern gespeicherter) Wert für "UnitNetPrice"
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue precise_unit_net_price = 10034;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getPreciseUnitNetPriceFieldBuilder() {
          if (preciseUnitNetPriceBuilder_ == null) {
            preciseUnitNetPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getPreciseUnitNetPrice(),
                    getParentForChildren(),
                    isClean());
            preciseUnitNetPrice_ = null;
          }
          return preciseUnitNetPriceBuilder_;
        }

        private io.dstore.Values.decimalValue totalGrossPrice_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> totalGrossPriceBuilder_;
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
         */
        public boolean hasTotalGrossPrice() {
          return totalGrossPriceBuilder_ != null || totalGrossPrice_ != null;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
         */
        public io.dstore.Values.decimalValue getTotalGrossPrice() {
          if (totalGrossPriceBuilder_ == null) {
            return totalGrossPrice_ == null ? io.dstore.Values.decimalValue.getDefaultInstance() : totalGrossPrice_;
          } else {
            return totalGrossPriceBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
         */
        public Builder setTotalGrossPrice(io.dstore.Values.decimalValue value) {
          if (totalGrossPriceBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            totalGrossPrice_ = value;
            onChanged();
          } else {
            totalGrossPriceBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
         */
        public Builder setTotalGrossPrice(
            io.dstore.Values.decimalValue.Builder builderForValue) {
          if (totalGrossPriceBuilder_ == null) {
            totalGrossPrice_ = builderForValue.build();
            onChanged();
          } else {
            totalGrossPriceBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
         */
        public Builder mergeTotalGrossPrice(io.dstore.Values.decimalValue value) {
          if (totalGrossPriceBuilder_ == null) {
            if (totalGrossPrice_ != null) {
              totalGrossPrice_ =
                io.dstore.Values.decimalValue.newBuilder(totalGrossPrice_).mergeFrom(value).buildPartial();
            } else {
              totalGrossPrice_ = value;
            }
            onChanged();
          } else {
            totalGrossPriceBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
         */
        public Builder clearTotalGrossPrice() {
          if (totalGrossPriceBuilder_ == null) {
            totalGrossPrice_ = null;
            onChanged();
          } else {
            totalGrossPrice_ = null;
            totalGrossPriceBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
         */
        public io.dstore.Values.decimalValue.Builder getTotalGrossPriceBuilder() {
          
          onChanged();
          return getTotalGrossPriceFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
         */
        public io.dstore.Values.decimalValueOrBuilder getTotalGrossPriceOrBuilder() {
          if (totalGrossPriceBuilder_ != null) {
            return totalGrossPriceBuilder_.getMessageOrBuilder();
          } else {
            return totalGrossPrice_ == null ?
                io.dstore.Values.decimalValue.getDefaultInstance() : totalGrossPrice_;
          }
        }
        /**
         * <pre>
         * Brutto-Preis von "NodeID", wenn man den Artikel "Quantity-Mal" bestellt
         * </pre>
         *
         * <code>optional .dstore.values.decimalValue total_gross_price = 10035;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder> 
            getTotalGrossPriceFieldBuilder() {
          if (totalGrossPriceBuilder_ == null) {
            totalGrossPriceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.decimalValue, io.dstore.Values.decimalValue.Builder, io.dstore.Values.decimalValueOrBuilder>(
                    getTotalGrossPrice(),
                    getParentForChildren(),
                    isClean());
            totalGrossPrice_ = null;
          }
          return totalGrossPriceBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetPrices_Pu.Response.Row)
      }

      // @@protoc_insertion_point(class_scope:dstore.engine.om_GetPrices_Pu.Response.Row)
      private static final io.dstore.engine.procedures.OmGetPricesPu.Response.Row DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.dstore.engine.procedures.OmGetPricesPu.Response.Row();
      }

      public static io.dstore.engine.procedures.OmGetPricesPu.Response.Row getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Row>
          PARSER = new com.google.protobuf.AbstractParser<Row>() {
        public Row parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new Row(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Row> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Row> getParserForType() {
        return PARSER;
      }

      public io.dstore.engine.procedures.OmGetPricesPu.Response.Row getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int META_INFORMATION_FIELD_NUMBER = 2;
    private java.util.List<io.dstore.engine.MetaInformation> metaInformation_;
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    public java.util.List<io.dstore.engine.MetaInformation> getMetaInformationList() {
      return metaInformation_;
    }
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    public java.util.List<? extends io.dstore.engine.MetaInformationOrBuilder> 
        getMetaInformationOrBuilderList() {
      return metaInformation_;
    }
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    public int getMetaInformationCount() {
      return metaInformation_.size();
    }
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    public io.dstore.engine.MetaInformation getMetaInformation(int index) {
      return metaInformation_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    public io.dstore.engine.MetaInformationOrBuilder getMetaInformationOrBuilder(
        int index) {
      return metaInformation_.get(index);
    }

    public static final int MESSAGE_FIELD_NUMBER = 3;
    private java.util.List<io.dstore.engine.Message> message_;
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    public java.util.List<io.dstore.engine.Message> getMessageList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    public java.util.List<? extends io.dstore.engine.MessageOrBuilder> 
        getMessageOrBuilderList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    public int getMessageCount() {
      return message_.size();
    }
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    public io.dstore.engine.Message getMessage(int index) {
      return message_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    public io.dstore.engine.MessageOrBuilder getMessageOrBuilder(
        int index) {
      return message_.get(index);
    }

    public static final int ROW_FIELD_NUMBER = 4;
    private java.util.List<io.dstore.engine.procedures.OmGetPricesPu.Response.Row> row_;
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
     */
    public java.util.List<io.dstore.engine.procedures.OmGetPricesPu.Response.Row> getRowList() {
      return row_;
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
     */
    public java.util.List<? extends io.dstore.engine.procedures.OmGetPricesPu.Response.RowOrBuilder> 
        getRowOrBuilderList() {
      return row_;
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
     */
    public int getRowCount() {
      return row_.size();
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
     */
    public io.dstore.engine.procedures.OmGetPricesPu.Response.Row getRow(int index) {
      return row_.get(index);
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
     */
    public io.dstore.engine.procedures.OmGetPricesPu.Response.RowOrBuilder getRowOrBuilder(
        int index) {
      return row_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < metaInformation_.size(); i++) {
        output.writeMessage(2, metaInformation_.get(i));
      }
      for (int i = 0; i < message_.size(); i++) {
        output.writeMessage(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        output.writeMessage(4, row_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < metaInformation_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, metaInformation_.get(i));
      }
      for (int i = 0; i < message_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, row_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.dstore.engine.procedures.OmGetPricesPu.Response)) {
        return super.equals(obj);
      }
      io.dstore.engine.procedures.OmGetPricesPu.Response other = (io.dstore.engine.procedures.OmGetPricesPu.Response) obj;

      boolean result = true;
      result = result && getMetaInformationList()
          .equals(other.getMetaInformationList());
      result = result && getMessageList()
          .equals(other.getMessageList());
      result = result && getRowList()
          .equals(other.getRowList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getMetaInformationCount() > 0) {
        hash = (37 * hash) + META_INFORMATION_FIELD_NUMBER;
        hash = (53 * hash) + getMetaInformationList().hashCode();
      }
      if (getMessageCount() > 0) {
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessageList().hashCode();
      }
      if (getRowCount() > 0) {
        hash = (37 * hash) + ROW_FIELD_NUMBER;
        hash = (53 * hash) + getRowList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.dstore.engine.procedures.OmGetPricesPu.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.OmGetPricesPu.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procedures.OmGetPricesPu.Response prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetPrices_Pu.Response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetPrices_Pu.Response)
        io.dstore.engine.procedures.OmGetPricesPu.ResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.OmGetPricesPu.Response.class, io.dstore.engine.procedures.OmGetPricesPu.Response.Builder.class);
      }

      // Construct using io.dstore.engine.procedures.OmGetPricesPu.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMetaInformationFieldBuilder();
          getMessageFieldBuilder();
          getRowFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (metaInformationBuilder_ == null) {
          metaInformation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          metaInformationBuilder_.clear();
        }
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          messageBuilder_.clear();
        }
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          rowBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procedures.OmGetPricesPu.internal_static_dstore_engine_om_GetPrices_Pu_Response_descriptor;
      }

      public io.dstore.engine.procedures.OmGetPricesPu.Response getDefaultInstanceForType() {
        return io.dstore.engine.procedures.OmGetPricesPu.Response.getDefaultInstance();
      }

      public io.dstore.engine.procedures.OmGetPricesPu.Response build() {
        io.dstore.engine.procedures.OmGetPricesPu.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procedures.OmGetPricesPu.Response buildPartial() {
        io.dstore.engine.procedures.OmGetPricesPu.Response result = new io.dstore.engine.procedures.OmGetPricesPu.Response(this);
        int from_bitField0_ = bitField0_;
        if (metaInformationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            metaInformation_ = java.util.Collections.unmodifiableList(metaInformation_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.metaInformation_ = metaInformation_;
        } else {
          result.metaInformation_ = metaInformationBuilder_.build();
        }
        if (messageBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            message_ = java.util.Collections.unmodifiableList(message_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.message_ = message_;
        } else {
          result.message_ = messageBuilder_.build();
        }
        if (rowBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            row_ = java.util.Collections.unmodifiableList(row_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.row_ = row_;
        } else {
          result.row_ = rowBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procedures.OmGetPricesPu.Response) {
          return mergeFrom((io.dstore.engine.procedures.OmGetPricesPu.Response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procedures.OmGetPricesPu.Response other) {
        if (other == io.dstore.engine.procedures.OmGetPricesPu.Response.getDefaultInstance()) return this;
        if (metaInformationBuilder_ == null) {
          if (!other.metaInformation_.isEmpty()) {
            if (metaInformation_.isEmpty()) {
              metaInformation_ = other.metaInformation_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMetaInformationIsMutable();
              metaInformation_.addAll(other.metaInformation_);
            }
            onChanged();
          }
        } else {
          if (!other.metaInformation_.isEmpty()) {
            if (metaInformationBuilder_.isEmpty()) {
              metaInformationBuilder_.dispose();
              metaInformationBuilder_ = null;
              metaInformation_ = other.metaInformation_;
              bitField0_ = (bitField0_ & ~0x00000001);
              metaInformationBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMetaInformationFieldBuilder() : null;
            } else {
              metaInformationBuilder_.addAllMessages(other.metaInformation_);
            }
          }
        }
        if (messageBuilder_ == null) {
          if (!other.message_.isEmpty()) {
            if (message_.isEmpty()) {
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMessageIsMutable();
              message_.addAll(other.message_);
            }
            onChanged();
          }
        } else {
          if (!other.message_.isEmpty()) {
            if (messageBuilder_.isEmpty()) {
              messageBuilder_.dispose();
              messageBuilder_ = null;
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
              messageBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMessageFieldBuilder() : null;
            } else {
              messageBuilder_.addAllMessages(other.message_);
            }
          }
        }
        if (rowBuilder_ == null) {
          if (!other.row_.isEmpty()) {
            if (row_.isEmpty()) {
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureRowIsMutable();
              row_.addAll(other.row_);
            }
            onChanged();
          }
        } else {
          if (!other.row_.isEmpty()) {
            if (rowBuilder_.isEmpty()) {
              rowBuilder_.dispose();
              rowBuilder_ = null;
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
              rowBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRowFieldBuilder() : null;
            } else {
              rowBuilder_.addAllMessages(other.row_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procedures.OmGetPricesPu.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procedures.OmGetPricesPu.Response) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.dstore.engine.MetaInformation> metaInformation_ =
        java.util.Collections.emptyList();
      private void ensureMetaInformationIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          metaInformation_ = new java.util.ArrayList<io.dstore.engine.MetaInformation>(metaInformation_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.MetaInformation, io.dstore.engine.MetaInformation.Builder, io.dstore.engine.MetaInformationOrBuilder> metaInformationBuilder_;

      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<io.dstore.engine.MetaInformation> getMetaInformationList() {
        if (metaInformationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(metaInformation_);
        } else {
          return metaInformationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public int getMetaInformationCount() {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.size();
        } else {
          return metaInformationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.MetaInformation getMetaInformation(int index) {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.get(index);
        } else {
          return metaInformationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder setMetaInformation(
          int index, io.dstore.engine.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.set(index, value);
          onChanged();
        } else {
          metaInformationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder setMetaInformation(
          int index, io.dstore.engine.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.set(index, builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(io.dstore.engine.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.add(value);
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          int index, io.dstore.engine.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.add(index, value);
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          io.dstore.engine.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.add(builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          int index, io.dstore.engine.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.add(index, builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder addAllMetaInformation(
          java.lang.Iterable<? extends io.dstore.engine.MetaInformation> values) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, metaInformation_);
          onChanged();
        } else {
          metaInformationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder clearMetaInformation() {
        if (metaInformationBuilder_ == null) {
          metaInformation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          metaInformationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder removeMetaInformation(int index) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.remove(index);
          onChanged();
        } else {
          metaInformationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.MetaInformation.Builder getMetaInformationBuilder(
          int index) {
        return getMetaInformationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.MetaInformationOrBuilder getMetaInformationOrBuilder(
          int index) {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.get(index);  } else {
          return metaInformationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<? extends io.dstore.engine.MetaInformationOrBuilder> 
           getMetaInformationOrBuilderList() {
        if (metaInformationBuilder_ != null) {
          return metaInformationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(metaInformation_);
        }
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.MetaInformation.Builder addMetaInformationBuilder() {
        return getMetaInformationFieldBuilder().addBuilder(
            io.dstore.engine.MetaInformation.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.MetaInformation.Builder addMetaInformationBuilder(
          int index) {
        return getMetaInformationFieldBuilder().addBuilder(
            index, io.dstore.engine.MetaInformation.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<io.dstore.engine.MetaInformation.Builder> 
           getMetaInformationBuilderList() {
        return getMetaInformationFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.MetaInformation, io.dstore.engine.MetaInformation.Builder, io.dstore.engine.MetaInformationOrBuilder> 
          getMetaInformationFieldBuilder() {
        if (metaInformationBuilder_ == null) {
          metaInformationBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.dstore.engine.MetaInformation, io.dstore.engine.MetaInformation.Builder, io.dstore.engine.MetaInformationOrBuilder>(
                  metaInformation_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          metaInformation_ = null;
        }
        return metaInformationBuilder_;
      }

      private java.util.List<io.dstore.engine.Message> message_ =
        java.util.Collections.emptyList();
      private void ensureMessageIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = new java.util.ArrayList<io.dstore.engine.Message>(message_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.Message, io.dstore.engine.Message.Builder, io.dstore.engine.MessageOrBuilder> messageBuilder_;

      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.Message> getMessageList() {
        if (messageBuilder_ == null) {
          return java.util.Collections.unmodifiableList(message_);
        } else {
          return messageBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public int getMessageCount() {
        if (messageBuilder_ == null) {
          return message_.size();
        } else {
          return messageBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public io.dstore.engine.Message getMessage(int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);
        } else {
          return messageBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.set(index, value);
          onChanged();
        } else {
          messageBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.set(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder addMessage(io.dstore.engine.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(value);
          onChanged();
        } else {
          messageBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(index, value);
          onChanged();
        } else {
          messageBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder addMessage(
          io.dstore.engine.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder addAllMessage(
          java.lang.Iterable<? extends io.dstore.engine.Message> values) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, message_);
          onChanged();
        } else {
          messageBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder clearMessage() {
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          messageBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder removeMessage(int index) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.remove(index);
          onChanged();
        } else {
          messageBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public io.dstore.engine.Message.Builder getMessageBuilder(
          int index) {
        return getMessageFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public io.dstore.engine.MessageOrBuilder getMessageOrBuilder(
          int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);  } else {
          return messageBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public java.util.List<? extends io.dstore.engine.MessageOrBuilder> 
           getMessageOrBuilderList() {
        if (messageBuilder_ != null) {
          return messageBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(message_);
        }
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public io.dstore.engine.Message.Builder addMessageBuilder() {
        return getMessageFieldBuilder().addBuilder(
            io.dstore.engine.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public io.dstore.engine.Message.Builder addMessageBuilder(
          int index) {
        return getMessageFieldBuilder().addBuilder(
            index, io.dstore.engine.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.Message.Builder> 
           getMessageBuilderList() {
        return getMessageFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.Message, io.dstore.engine.Message.Builder, io.dstore.engine.MessageOrBuilder> 
          getMessageFieldBuilder() {
        if (messageBuilder_ == null) {
          messageBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.dstore.engine.Message, io.dstore.engine.Message.Builder, io.dstore.engine.MessageOrBuilder>(
                  message_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        return messageBuilder_;
      }

      private java.util.List<io.dstore.engine.procedures.OmGetPricesPu.Response.Row> row_ =
        java.util.Collections.emptyList();
      private void ensureRowIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = new java.util.ArrayList<io.dstore.engine.procedures.OmGetPricesPu.Response.Row>(row_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.procedures.OmGetPricesPu.Response.Row, io.dstore.engine.procedures.OmGetPricesPu.Response.Row.Builder, io.dstore.engine.procedures.OmGetPricesPu.Response.RowOrBuilder> rowBuilder_;

      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public java.util.List<io.dstore.engine.procedures.OmGetPricesPu.Response.Row> getRowList() {
        if (rowBuilder_ == null) {
          return java.util.Collections.unmodifiableList(row_);
        } else {
          return rowBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public int getRowCount() {
        if (rowBuilder_ == null) {
          return row_.size();
        } else {
          return rowBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.OmGetPricesPu.Response.Row getRow(int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);
        } else {
          return rowBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public Builder setRow(
          int index, io.dstore.engine.procedures.OmGetPricesPu.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.set(index, value);
          onChanged();
        } else {
          rowBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public Builder setRow(
          int index, io.dstore.engine.procedures.OmGetPricesPu.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.set(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public Builder addRow(io.dstore.engine.procedures.OmGetPricesPu.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(value);
          onChanged();
        } else {
          rowBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public Builder addRow(
          int index, io.dstore.engine.procedures.OmGetPricesPu.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(index, value);
          onChanged();
        } else {
          rowBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public Builder addRow(
          io.dstore.engine.procedures.OmGetPricesPu.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public Builder addRow(
          int index, io.dstore.engine.procedures.OmGetPricesPu.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public Builder addAllRow(
          java.lang.Iterable<? extends io.dstore.engine.procedures.OmGetPricesPu.Response.Row> values) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, row_);
          onChanged();
        } else {
          rowBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public Builder clearRow() {
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          rowBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public Builder removeRow(int index) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.remove(index);
          onChanged();
        } else {
          rowBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.OmGetPricesPu.Response.Row.Builder getRowBuilder(
          int index) {
        return getRowFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.OmGetPricesPu.Response.RowOrBuilder getRowOrBuilder(
          int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);  } else {
          return rowBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public java.util.List<? extends io.dstore.engine.procedures.OmGetPricesPu.Response.RowOrBuilder> 
           getRowOrBuilderList() {
        if (rowBuilder_ != null) {
          return rowBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(row_);
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.OmGetPricesPu.Response.Row.Builder addRowBuilder() {
        return getRowFieldBuilder().addBuilder(
            io.dstore.engine.procedures.OmGetPricesPu.Response.Row.getDefaultInstance());
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.OmGetPricesPu.Response.Row.Builder addRowBuilder(
          int index) {
        return getRowFieldBuilder().addBuilder(
            index, io.dstore.engine.procedures.OmGetPricesPu.Response.Row.getDefaultInstance());
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetPrices_Pu.Response.Row row = 4;</code>
       */
      public java.util.List<io.dstore.engine.procedures.OmGetPricesPu.Response.Row.Builder> 
           getRowBuilderList() {
        return getRowFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.procedures.OmGetPricesPu.Response.Row, io.dstore.engine.procedures.OmGetPricesPu.Response.Row.Builder, io.dstore.engine.procedures.OmGetPricesPu.Response.RowOrBuilder> 
          getRowFieldBuilder() {
        if (rowBuilder_ == null) {
          rowBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.dstore.engine.procedures.OmGetPricesPu.Response.Row, io.dstore.engine.procedures.OmGetPricesPu.Response.Row.Builder, io.dstore.engine.procedures.OmGetPricesPu.Response.RowOrBuilder>(
                  row_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          row_ = null;
        }
        return rowBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetPrices_Pu.Response)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.om_GetPrices_Pu.Response)
    private static final io.dstore.engine.procedures.OmGetPricesPu.Response DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procedures.OmGetPricesPu.Response();
    }

    public static io.dstore.engine.procedures.OmGetPricesPu.Response getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Response>
        PARSER = new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Response(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Response> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procedures.OmGetPricesPu.Response getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetPrices_Pu_Parameters_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dstore_engine_om_GetPrices_Pu_Parameters_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetPrices_Pu_Response_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dstore_engine_om_GetPrices_Pu_Response_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetPrices_Pu_Response_Row_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dstore_engine_om_GetPrices_Pu_Response_Row_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n.dstore/engine/procedures/om_GetPrices_" +
      "Pu.proto\022\035dstore.engine.om_GetPrices_Pu\032" +
      "\023dstore/values.proto\032\032dstore/engine/engi" +
      "ne.proto\"\352\010\n\nParameters\022,\n\010node_ids\030\001 \001(" +
      "\0132\032.dstore.values.stringValue\022\026\n\rnode_id" +
      "s_null\030\351\007 \001(\010\022.\n\nquantities\030\002 \001(\0132\032.dsto" +
      "re.values.stringValue\022\030\n\017quantities_null" +
      "\030\352\007 \001(\010\022.\n\tperson_id\030\003 \001(\0132\033.dstore.valu" +
      "es.integerValue\022\027\n\016person_id_null\030\353\007 \001(\010" +
      "\0220\n\013currency_id\030\004 \001(\0132\033.dstore.values.in",
      "tegerValue\022\031\n\020currency_id_null\030\354\007 \001(\010\0224\n" +
      "\017is_tree_node_id\030\005 \001(\0132\033.dstore.values.b" +
      "ooleanValue\022\035\n\024is_tree_node_id_null\030\355\007 \001" +
      "(\010\022A\n\034price_node_characteristic_id\030\006 \001(\013" +
      "2\033.dstore.values.integerValue\022*\n!price_n" +
      "ode_characteristic_id_null\030\356\007 \001(\010\0220\n\013com" +
      "pute_sum\030\007 \001(\0132\033.dstore.values.booleanVa" +
      "lue\022\031\n\020compute_sum_null\030\357\007 \001(\010\022-\n\tunique" +
      "_id\030\010 \001(\0132\032.dstore.values.stringValue\022\027\n" +
      "\016unique_id_null\030\360\007 \001(\010\022>\n\031get_additional",
      "_price_info\030\t \001(\0132\033.dstore.values.boolea" +
      "nValue\022\'\n\036get_additional_price_info_null" +
      "\030\361\007 \001(\010\0227\n\022delivery_person_id\030\n \001(\0132\033.ds" +
      "tore.values.integerValue\022 \n\027delivery_per" +
      "son_id_null\030\362\007 \001(\010\022A\n\034get_price_per_sing" +
      "le_node_id\030\013 \001(\0132\033.dstore.values.boolean" +
      "Value\022*\n!get_price_per_single_node_id_nu" +
      "ll\030\363\007 \001(\010\0224\n\017payment_type_id\030\014 \001(\0132\033.dst" +
      "ore.values.integerValue\022\035\n\024payment_type_" +
      "id_null\030\364\007 \001(\010\0225\n\020shipping_type_id\030\r \001(\013",
      "2\033.dstore.values.integerValue\022\036\n\025shippin" +
      "g_type_id_null\030\365\007 \001(\010\"\311\022\n\010Response\0228\n\020me" +
      "ta_information\030\002 \003(\0132\036.dstore.engine.Met" +
      "aInformation\022\'\n\007message\030\003 \003(\0132\026.dstore.e" +
      "ngine.Message\0228\n\003row\030\004 \003(\0132+.dstore.engi" +
      "ne.om_GetPrices_Pu.Response.Row\032\237\021\n\003Row\022" +
      "\017\n\006row_id\030\220N \001(\005\0227\n\021total_netto_price\030\221N" +
      " \001(\0132\033.dstore.values.decimalValue\022F\n pre" +
      "cise_abs_unit_gross_surcharge\030\222N \001(\0132\033.d" +
      "store.values.decimalValue\022B\n\034price_node_",
      "characteristic_id\030\223N \001(\0132\033.dstore.values" +
      ".integerValue\022C\n\035absolute_unit_netto_sur" +
      "charge\030\224N \001(\0132\033.dstore.values.decimalVal" +
      "ue\0226\n\020unit_gross_price\030\225N \001(\0132\033.dstore.v" +
      "alues.decimalValue\022B\n\034absolute_total_net" +
      "_surcharge\030\226N \001(\0132\033.dstore.values.decima" +
      "lValue\022D\n\036absolute_total_gross_surcharge" +
      "\030\227N \001(\0132\033.dstore.values.decimalValue\0227\n\021" +
      "unit_brutto_price\030\230N \001(\0132\033.dstore.values" +
      ".decimalValue\022>\n\030precise_unit_gross_pric",
      "e\030\231N \001(\0132\033.dstore.values.decimalValue\0224\n" +
      "\016unit_net_price\030\232N \001(\0132\033.dstore.values.d" +
      "ecimalValue\0228\n\022total_brutto_price\030\233N \001(\013" +
      "2\033.dstore.values.decimalValue\022D\n\036precise" +
      "_abs_unit_net_surcharge\030\234N \001(\0132\033.dstore." +
      "values.decimalValue\0225\n\020surcharge_reason\030" +
      "\235N \001(\0132\032.dstore.values.stringValue\022-\n\007no" +
      "de_id\030\236N \001(\0132\033.dstore.values.integerValu" +
      "e\0222\n\014tree_node_id\030\237N \001(\0132\033.dstore.values" +
      ".integerValue\022D\n\036absolute_total_netto_su",
      "rcharge\030\240N \001(\0132\033.dstore.values.decimalVa" +
      "lue\0228\n\022relative_surcharge\030\241N \001(\0132\033.dstor" +
      "e.values.decimalValue\022E\n\037absolute_total_" +
      "brutto_surcharge\030\242N \001(\0132\033.dstore.values." +
      "decimalValue\022D\n\037surcharge_generated_by_c" +
      "amp_ids\030\243N \001(\0132\032.dstore.values.stringVal" +
      "ue\022?\n\031precise_total_gross_price\030\244N \001(\0132\033" +
      ".dstore.values.decimalValue\0226\n\020unit_nett" +
      "o_price\030\245N \001(\0132\033.dstore.values.decimalVa" +
      "lue\0226\n\020taxes_multiplier\030\246N \001(\0132\033.dstore.",
      "values.decimalValue\022G\n!precise_abs_total" +
      "_gross_surcharge\030\247N \001(\0132\033.dstore.values." +
      "decimalValue\022E\n\037precise_abs_total_net_su" +
      "rcharge\030\250N \001(\0132\033.dstore.values.decimalVa" +
      "lue\0225\n\017total_net_price\030\251N \001(\0132\033.dstore.v" +
      "alues.decimalValue\022.\n\010quantity\030\252N \001(\0132\033." +
      "dstore.values.integerValue\022I\n$quantity_p" +
      "er_bundle_item_set_id_list\030\253N \001(\0132\032.dsto" +
      "re.values.stringValue\0225\n\017surcharge_value" +
      "\030\254N \001(\0132\033.dstore.values.decimalValue\022A\n\033",
      "absolute_unit_net_surcharge\030\255N \001(\0132\033.dst" +
      "ore.values.decimalValue\022D\n\036absolute_unit" +
      "_brutto_surcharge\030\256N \001(\0132\033.dstore.values" +
      ".decimalValue\022C\n\035absolute_unit_gross_sur" +
      "charge\030\257N \001(\0132\033.dstore.values.decimalVal" +
      "ue\022=\n\027precise_total_net_price\030\260N \001(\0132\033.d" +
      "store.values.decimalValue\0227\n\021surcharge_t" +
      "ype_id\030\261N \001(\0132\033.dstore.values.integerVal" +
      "ue\022<\n\026precise_unit_net_price\030\262N \001(\0132\033.ds" +
      "tore.values.decimalValue\0227\n\021total_gross_",
      "price\030\263N \001(\0132\033.dstore.values.decimalValu" +
      "eBP\n\033io.dstore.engine.proceduresZ1gosdk." +
      "dstore.de/engine/procedures/om_GetPrices" +
      "_Pub\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.dstore.Values.getDescriptor(),
          io.dstore.engine.EngineOuterClass.getDescriptor(),
        }, assigner);
    internal_static_dstore_engine_om_GetPrices_Pu_Parameters_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dstore_engine_om_GetPrices_Pu_Parameters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dstore_engine_om_GetPrices_Pu_Parameters_descriptor,
        new java.lang.String[] { "NodeIds", "NodeIdsNull", "Quantities", "QuantitiesNull", "PersonId", "PersonIdNull", "CurrencyId", "CurrencyIdNull", "IsTreeNodeId", "IsTreeNodeIdNull", "PriceNodeCharacteristicId", "PriceNodeCharacteristicIdNull", "ComputeSum", "ComputeSumNull", "UniqueId", "UniqueIdNull", "GetAdditionalPriceInfo", "GetAdditionalPriceInfoNull", "DeliveryPersonId", "DeliveryPersonIdNull", "GetPricePerSingleNodeId", "GetPricePerSingleNodeIdNull", "PaymentTypeId", "PaymentTypeIdNull", "ShippingTypeId", "ShippingTypeIdNull", });
    internal_static_dstore_engine_om_GetPrices_Pu_Response_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dstore_engine_om_GetPrices_Pu_Response_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dstore_engine_om_GetPrices_Pu_Response_descriptor,
        new java.lang.String[] { "MetaInformation", "Message", "Row", });
    internal_static_dstore_engine_om_GetPrices_Pu_Response_Row_descriptor =
      internal_static_dstore_engine_om_GetPrices_Pu_Response_descriptor.getNestedTypes().get(0);
    internal_static_dstore_engine_om_GetPrices_Pu_Response_Row_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dstore_engine_om_GetPrices_Pu_Response_Row_descriptor,
        new java.lang.String[] { "RowId", "TotalNettoPrice", "PreciseAbsUnitGrossSurcharge", "PriceNodeCharacteristicId", "AbsoluteUnitNettoSurcharge", "UnitGrossPrice", "AbsoluteTotalNetSurcharge", "AbsoluteTotalGrossSurcharge", "UnitBruttoPrice", "PreciseUnitGrossPrice", "UnitNetPrice", "TotalBruttoPrice", "PreciseAbsUnitNetSurcharge", "SurchargeReason", "NodeId", "TreeNodeId", "AbsoluteTotalNettoSurcharge", "RelativeSurcharge", "AbsoluteTotalBruttoSurcharge", "SurchargeGeneratedByCampIds", "PreciseTotalGrossPrice", "UnitNettoPrice", "TaxesMultiplier", "PreciseAbsTotalGrossSurcharge", "PreciseAbsTotalNetSurcharge", "TotalNetPrice", "Quantity", "QuantityPerBundleItemSetIdList", "SurchargeValue", "AbsoluteUnitNetSurcharge", "AbsoluteUnitBruttoSurcharge", "AbsoluteUnitGrossSurcharge", "PreciseTotalNetPrice", "SurchargeTypeId", "PreciseUnitNetPrice", "TotalGrossPrice", });
    io.dstore.Values.getDescriptor();
    io.dstore.engine.EngineOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
