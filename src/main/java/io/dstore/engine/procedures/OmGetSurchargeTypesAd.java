// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dstore/engine/procedures/om_GetSurchargeTypes_Ad.proto

package io.dstore.engine.procedures;

public final class OmGetSurchargeTypesAd {
  private OmGetSurchargeTypesAd() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ParametersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetSurchargeTypes_Ad.Parameters)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.values.integerValue language_id = 1;</code>
     */
    boolean hasLanguageId();
    /**
     * <code>optional .dstore.values.integerValue language_id = 1;</code>
     */
    io.dstore.Values.integerValue getLanguageId();
    /**
     * <code>optional .dstore.values.integerValue language_id = 1;</code>
     */
    io.dstore.Values.integerValueOrBuilder getLanguageIdOrBuilder();

    /**
     * <code>optional bool language_id_null = 1001;</code>
     */
    boolean getLanguageIdNull();

    /**
     * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
     */
    boolean hasSurchargeTypeCategoryId();
    /**
     * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
     */
    io.dstore.Values.integerValue getSurchargeTypeCategoryId();
    /**
     * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
     */
    io.dstore.Values.integerValueOrBuilder getSurchargeTypeCategoryIdOrBuilder();

    /**
     * <code>optional bool surcharge_type_category_id_null = 1002;</code>
     */
    boolean getSurchargeTypeCategoryIdNull();
  }
  /**
   * Protobuf type {@code dstore.engine.om_GetSurchargeTypes_Ad.Parameters}
   */
  public  static final class Parameters extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dstore.engine.om_GetSurchargeTypes_Ad.Parameters)
      ParametersOrBuilder {
    // Use Parameters.newBuilder() to construct.
    private Parameters(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Parameters() {
      languageIdNull_ = false;
      surchargeTypeCategoryIdNull_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Parameters(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.Values.integerValue.Builder subBuilder = null;
              if (languageId_ != null) {
                subBuilder = languageId_.toBuilder();
              }
              languageId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(languageId_);
                languageId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.dstore.Values.integerValue.Builder subBuilder = null;
              if (surchargeTypeCategoryId_ != null) {
                subBuilder = surchargeTypeCategoryId_.toBuilder();
              }
              surchargeTypeCategoryId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(surchargeTypeCategoryId_);
                surchargeTypeCategoryId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 8008: {

              languageIdNull_ = input.readBool();
              break;
            }
            case 8016: {

              surchargeTypeCategoryIdNull_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Parameters_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Parameters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters.class, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters.Builder.class);
    }

    public static final int LANGUAGE_ID_FIELD_NUMBER = 1;
    private io.dstore.Values.integerValue languageId_;
    /**
     * <code>optional .dstore.values.integerValue language_id = 1;</code>
     */
    public boolean hasLanguageId() {
      return languageId_ != null;
    }
    /**
     * <code>optional .dstore.values.integerValue language_id = 1;</code>
     */
    public io.dstore.Values.integerValue getLanguageId() {
      return languageId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : languageId_;
    }
    /**
     * <code>optional .dstore.values.integerValue language_id = 1;</code>
     */
    public io.dstore.Values.integerValueOrBuilder getLanguageIdOrBuilder() {
      return getLanguageId();
    }

    public static final int LANGUAGE_ID_NULL_FIELD_NUMBER = 1001;
    private boolean languageIdNull_;
    /**
     * <code>optional bool language_id_null = 1001;</code>
     */
    public boolean getLanguageIdNull() {
      return languageIdNull_;
    }

    public static final int SURCHARGE_TYPE_CATEGORY_ID_FIELD_NUMBER = 2;
    private io.dstore.Values.integerValue surchargeTypeCategoryId_;
    /**
     * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
     */
    public boolean hasSurchargeTypeCategoryId() {
      return surchargeTypeCategoryId_ != null;
    }
    /**
     * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
     */
    public io.dstore.Values.integerValue getSurchargeTypeCategoryId() {
      return surchargeTypeCategoryId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeCategoryId_;
    }
    /**
     * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
     */
    public io.dstore.Values.integerValueOrBuilder getSurchargeTypeCategoryIdOrBuilder() {
      return getSurchargeTypeCategoryId();
    }

    public static final int SURCHARGE_TYPE_CATEGORY_ID_NULL_FIELD_NUMBER = 1002;
    private boolean surchargeTypeCategoryIdNull_;
    /**
     * <code>optional bool surcharge_type_category_id_null = 1002;</code>
     */
    public boolean getSurchargeTypeCategoryIdNull() {
      return surchargeTypeCategoryIdNull_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (languageId_ != null) {
        output.writeMessage(1, getLanguageId());
      }
      if (surchargeTypeCategoryId_ != null) {
        output.writeMessage(2, getSurchargeTypeCategoryId());
      }
      if (languageIdNull_ != false) {
        output.writeBool(1001, languageIdNull_);
      }
      if (surchargeTypeCategoryIdNull_ != false) {
        output.writeBool(1002, surchargeTypeCategoryIdNull_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (languageId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getLanguageId());
      }
      if (surchargeTypeCategoryId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getSurchargeTypeCategoryId());
      }
      if (languageIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1001, languageIdNull_);
      }
      if (surchargeTypeCategoryIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1002, surchargeTypeCategoryIdNull_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters)) {
        return super.equals(obj);
      }
      io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters other = (io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters) obj;

      boolean result = true;
      result = result && (hasLanguageId() == other.hasLanguageId());
      if (hasLanguageId()) {
        result = result && getLanguageId()
            .equals(other.getLanguageId());
      }
      result = result && (getLanguageIdNull()
          == other.getLanguageIdNull());
      result = result && (hasSurchargeTypeCategoryId() == other.hasSurchargeTypeCategoryId());
      if (hasSurchargeTypeCategoryId()) {
        result = result && getSurchargeTypeCategoryId()
            .equals(other.getSurchargeTypeCategoryId());
      }
      result = result && (getSurchargeTypeCategoryIdNull()
          == other.getSurchargeTypeCategoryIdNull());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasLanguageId()) {
        hash = (37 * hash) + LANGUAGE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getLanguageId().hashCode();
      }
      hash = (37 * hash) + LANGUAGE_ID_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getLanguageIdNull());
      if (hasSurchargeTypeCategoryId()) {
        hash = (37 * hash) + SURCHARGE_TYPE_CATEGORY_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSurchargeTypeCategoryId().hashCode();
      }
      hash = (37 * hash) + SURCHARGE_TYPE_CATEGORY_ID_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getSurchargeTypeCategoryIdNull());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetSurchargeTypes_Ad.Parameters}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetSurchargeTypes_Ad.Parameters)
        io.dstore.engine.procedures.OmGetSurchargeTypesAd.ParametersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Parameters_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Parameters_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters.class, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters.Builder.class);
      }

      // Construct using io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (languageIdBuilder_ == null) {
          languageId_ = null;
        } else {
          languageId_ = null;
          languageIdBuilder_ = null;
        }
        languageIdNull_ = false;

        if (surchargeTypeCategoryIdBuilder_ == null) {
          surchargeTypeCategoryId_ = null;
        } else {
          surchargeTypeCategoryId_ = null;
          surchargeTypeCategoryIdBuilder_ = null;
        }
        surchargeTypeCategoryIdNull_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Parameters_descriptor;
      }

      public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters getDefaultInstanceForType() {
        return io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters.getDefaultInstance();
      }

      public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters build() {
        io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters buildPartial() {
        io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters result = new io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters(this);
        if (languageIdBuilder_ == null) {
          result.languageId_ = languageId_;
        } else {
          result.languageId_ = languageIdBuilder_.build();
        }
        result.languageIdNull_ = languageIdNull_;
        if (surchargeTypeCategoryIdBuilder_ == null) {
          result.surchargeTypeCategoryId_ = surchargeTypeCategoryId_;
        } else {
          result.surchargeTypeCategoryId_ = surchargeTypeCategoryIdBuilder_.build();
        }
        result.surchargeTypeCategoryIdNull_ = surchargeTypeCategoryIdNull_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters) {
          return mergeFrom((io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters other) {
        if (other == io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters.getDefaultInstance()) return this;
        if (other.hasLanguageId()) {
          mergeLanguageId(other.getLanguageId());
        }
        if (other.getLanguageIdNull() != false) {
          setLanguageIdNull(other.getLanguageIdNull());
        }
        if (other.hasSurchargeTypeCategoryId()) {
          mergeSurchargeTypeCategoryId(other.getSurchargeTypeCategoryId());
        }
        if (other.getSurchargeTypeCategoryIdNull() != false) {
          setSurchargeTypeCategoryIdNull(other.getSurchargeTypeCategoryIdNull());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.dstore.Values.integerValue languageId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> languageIdBuilder_;
      /**
       * <code>optional .dstore.values.integerValue language_id = 1;</code>
       */
      public boolean hasLanguageId() {
        return languageIdBuilder_ != null || languageId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue language_id = 1;</code>
       */
      public io.dstore.Values.integerValue getLanguageId() {
        if (languageIdBuilder_ == null) {
          return languageId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : languageId_;
        } else {
          return languageIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.integerValue language_id = 1;</code>
       */
      public Builder setLanguageId(io.dstore.Values.integerValue value) {
        if (languageIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          languageId_ = value;
          onChanged();
        } else {
          languageIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue language_id = 1;</code>
       */
      public Builder setLanguageId(
          io.dstore.Values.integerValue.Builder builderForValue) {
        if (languageIdBuilder_ == null) {
          languageId_ = builderForValue.build();
          onChanged();
        } else {
          languageIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue language_id = 1;</code>
       */
      public Builder mergeLanguageId(io.dstore.Values.integerValue value) {
        if (languageIdBuilder_ == null) {
          if (languageId_ != null) {
            languageId_ =
              io.dstore.Values.integerValue.newBuilder(languageId_).mergeFrom(value).buildPartial();
          } else {
            languageId_ = value;
          }
          onChanged();
        } else {
          languageIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue language_id = 1;</code>
       */
      public Builder clearLanguageId() {
        if (languageIdBuilder_ == null) {
          languageId_ = null;
          onChanged();
        } else {
          languageId_ = null;
          languageIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue language_id = 1;</code>
       */
      public io.dstore.Values.integerValue.Builder getLanguageIdBuilder() {
        
        onChanged();
        return getLanguageIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.integerValue language_id = 1;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getLanguageIdOrBuilder() {
        if (languageIdBuilder_ != null) {
          return languageIdBuilder_.getMessageOrBuilder();
        } else {
          return languageId_ == null ?
              io.dstore.Values.integerValue.getDefaultInstance() : languageId_;
        }
      }
      /**
       * <code>optional .dstore.values.integerValue language_id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
          getLanguageIdFieldBuilder() {
        if (languageIdBuilder_ == null) {
          languageIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                  getLanguageId(),
                  getParentForChildren(),
                  isClean());
          languageId_ = null;
        }
        return languageIdBuilder_;
      }

      private boolean languageIdNull_ ;
      /**
       * <code>optional bool language_id_null = 1001;</code>
       */
      public boolean getLanguageIdNull() {
        return languageIdNull_;
      }
      /**
       * <code>optional bool language_id_null = 1001;</code>
       */
      public Builder setLanguageIdNull(boolean value) {
        
        languageIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool language_id_null = 1001;</code>
       */
      public Builder clearLanguageIdNull() {
        
        languageIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.integerValue surchargeTypeCategoryId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> surchargeTypeCategoryIdBuilder_;
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
       */
      public boolean hasSurchargeTypeCategoryId() {
        return surchargeTypeCategoryIdBuilder_ != null || surchargeTypeCategoryId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
       */
      public io.dstore.Values.integerValue getSurchargeTypeCategoryId() {
        if (surchargeTypeCategoryIdBuilder_ == null) {
          return surchargeTypeCategoryId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeCategoryId_;
        } else {
          return surchargeTypeCategoryIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
       */
      public Builder setSurchargeTypeCategoryId(io.dstore.Values.integerValue value) {
        if (surchargeTypeCategoryIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          surchargeTypeCategoryId_ = value;
          onChanged();
        } else {
          surchargeTypeCategoryIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
       */
      public Builder setSurchargeTypeCategoryId(
          io.dstore.Values.integerValue.Builder builderForValue) {
        if (surchargeTypeCategoryIdBuilder_ == null) {
          surchargeTypeCategoryId_ = builderForValue.build();
          onChanged();
        } else {
          surchargeTypeCategoryIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
       */
      public Builder mergeSurchargeTypeCategoryId(io.dstore.Values.integerValue value) {
        if (surchargeTypeCategoryIdBuilder_ == null) {
          if (surchargeTypeCategoryId_ != null) {
            surchargeTypeCategoryId_ =
              io.dstore.Values.integerValue.newBuilder(surchargeTypeCategoryId_).mergeFrom(value).buildPartial();
          } else {
            surchargeTypeCategoryId_ = value;
          }
          onChanged();
        } else {
          surchargeTypeCategoryIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
       */
      public Builder clearSurchargeTypeCategoryId() {
        if (surchargeTypeCategoryIdBuilder_ == null) {
          surchargeTypeCategoryId_ = null;
          onChanged();
        } else {
          surchargeTypeCategoryId_ = null;
          surchargeTypeCategoryIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
       */
      public io.dstore.Values.integerValue.Builder getSurchargeTypeCategoryIdBuilder() {
        
        onChanged();
        return getSurchargeTypeCategoryIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getSurchargeTypeCategoryIdOrBuilder() {
        if (surchargeTypeCategoryIdBuilder_ != null) {
          return surchargeTypeCategoryIdBuilder_.getMessageOrBuilder();
        } else {
          return surchargeTypeCategoryId_ == null ?
              io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeCategoryId_;
        }
      }
      /**
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
          getSurchargeTypeCategoryIdFieldBuilder() {
        if (surchargeTypeCategoryIdBuilder_ == null) {
          surchargeTypeCategoryIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                  getSurchargeTypeCategoryId(),
                  getParentForChildren(),
                  isClean());
          surchargeTypeCategoryId_ = null;
        }
        return surchargeTypeCategoryIdBuilder_;
      }

      private boolean surchargeTypeCategoryIdNull_ ;
      /**
       * <code>optional bool surcharge_type_category_id_null = 1002;</code>
       */
      public boolean getSurchargeTypeCategoryIdNull() {
        return surchargeTypeCategoryIdNull_;
      }
      /**
       * <code>optional bool surcharge_type_category_id_null = 1002;</code>
       */
      public Builder setSurchargeTypeCategoryIdNull(boolean value) {
        
        surchargeTypeCategoryIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool surcharge_type_category_id_null = 1002;</code>
       */
      public Builder clearSurchargeTypeCategoryIdNull() {
        
        surchargeTypeCategoryIdNull_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetSurchargeTypes_Ad.Parameters)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.om_GetSurchargeTypes_Ad.Parameters)
    private static final io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters();
    }

    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Parameters>
        PARSER = new com.google.protobuf.AbstractParser<Parameters>() {
      public Parameters parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Parameters(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Parameters> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Parameters> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Parameters getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetSurchargeTypes_Ad.Response)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> 
        getMetaInformationList();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index);
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    int getMetaInformationCount();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
        getMetaInformationOrBuilderList();
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
        int index);

    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<io.dstore.engine.ProcedureMessage.Message> 
        getMessageList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.Message getMessage(int index);
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    int getMessageCount();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList();
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index);

    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
     */
    java.util.List<io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row> 
        getRowList();
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
     */
    io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row getRow(int index);
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
     */
    int getRowCount();
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
     */
    java.util.List<? extends io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.RowOrBuilder> 
        getRowOrBuilderList();
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
     */
    io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.RowOrBuilder getRowOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dstore.engine.om_GetSurchargeTypes_Ad.Response}
   */
  public  static final class Response extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dstore.engine.om_GetSurchargeTypes_Ad.Response)
      ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Response() {
      metaInformation_ = java.util.Collections.emptyList();
      message_ = java.util.Collections.emptyList();
      row_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                metaInformation_ = new java.util.ArrayList<io.dstore.engine.EngineMetaInformation.MetaInformation>();
                mutable_bitField0_ |= 0x00000001;
              }
              metaInformation_.add(
                  input.readMessage(io.dstore.engine.EngineMetaInformation.MetaInformation.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>();
                mutable_bitField0_ |= 0x00000002;
              }
              message_.add(
                  input.readMessage(io.dstore.engine.ProcedureMessage.Message.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                row_ = new java.util.ArrayList<io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row>();
                mutable_bitField0_ |= 0x00000004;
              }
              row_.add(
                  input.readMessage(io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          metaInformation_ = java.util.Collections.unmodifiableList(metaInformation_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = java.util.Collections.unmodifiableList(message_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = java.util.Collections.unmodifiableList(row_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.class, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Builder.class);
    }

    public interface RowOrBuilder extends
        // @@protoc_insertion_point(interface_extends:dstore.engine.om_GetSurchargeTypes_Ad.Response.Row)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      int getRowId();

      /**
       * <pre>
       * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue relative = 10001;</code>
       */
      boolean hasRelative();
      /**
       * <pre>
       * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue relative = 10001;</code>
       */
      io.dstore.Values.booleanValue getRelative();
      /**
       * <pre>
       * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue relative = 10001;</code>
       */
      io.dstore.Values.booleanValueOrBuilder getRelativeOrBuilder();

      /**
       * <pre>
       * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
       */
      boolean hasUnitId();
      /**
       * <pre>
       * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
       */
      io.dstore.Values.integerValue getUnitId();
      /**
       * <pre>
       * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
       */
      io.dstore.Values.integerValueOrBuilder getUnitIdOrBuilder();

      /**
       * <pre>
       * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
       */
      boolean hasCategoryPriorityNo();
      /**
       * <pre>
       * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
       */
      io.dstore.Values.integerValue getCategoryPriorityNo();
      /**
       * <pre>
       * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
       */
      io.dstore.Values.integerValueOrBuilder getCategoryPriorityNoOrBuilder();

      /**
       * <pre>
       * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
       */
      boolean hasTranslatedDescription();
      /**
       * <pre>
       * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
       */
      io.dstore.Values.stringValue getTranslatedDescription();
      /**
       * <pre>
       * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
       */
      io.dstore.Values.stringValueOrBuilder getTranslatedDescriptionOrBuilder();

      /**
       * <pre>
       * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
       */
      boolean hasBrutto();
      /**
       * <pre>
       * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
       */
      io.dstore.Values.booleanValue getBrutto();
      /**
       * <pre>
       * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
       */
      io.dstore.Values.booleanValueOrBuilder getBruttoOrBuilder();

      /**
       * <pre>
       * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
       */
      boolean hasUnitSymbol();
      /**
       * <pre>
       * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
       */
      io.dstore.Values.stringValue getUnitSymbol();
      /**
       * <pre>
       * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
       */
      io.dstore.Values.stringValueOrBuilder getUnitSymbolOrBuilder();

      /**
       * <pre>
       * Bezeichnung von "SurchargeTypeCategoryID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue category_description = 10007;</code>
       */
      boolean hasCategoryDescription();
      /**
       * <pre>
       * Bezeichnung von "SurchargeTypeCategoryID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue category_description = 10007;</code>
       */
      io.dstore.Values.stringValue getCategoryDescription();
      /**
       * <pre>
       * Bezeichnung von "SurchargeTypeCategoryID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue category_description = 10007;</code>
       */
      io.dstore.Values.stringValueOrBuilder getCategoryDescriptionOrBuilder();

      /**
       * <pre>
       * Bezeichnung der "SurchargeTypeID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
       */
      boolean hasSurchargeTypeDescription();
      /**
       * <pre>
       * Bezeichnung der "SurchargeTypeID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
       */
      io.dstore.Values.stringValue getSurchargeTypeDescription();
      /**
       * <pre>
       * Bezeichnung der "SurchargeTypeID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
       */
      io.dstore.Values.stringValueOrBuilder getSurchargeTypeDescriptionOrBuilder();

      /**
       * <pre>
       * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
       * </pre>
       *
       * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
       */
      boolean hasIsAbsoluteValue();
      /**
       * <pre>
       * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
       * </pre>
       *
       * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
       */
      io.dstore.Values.integerValue getIsAbsoluteValue();
      /**
       * <pre>
       * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
       * </pre>
       *
       * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
       */
      io.dstore.Values.integerValueOrBuilder getIsAbsoluteValueOrBuilder();

      /**
       * <pre>
       * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
       */
      boolean hasSurchargeTypeId();
      /**
       * <pre>
       * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
       */
      io.dstore.Values.integerValue getSurchargeTypeId();
      /**
       * <pre>
       * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
       */
      io.dstore.Values.integerValueOrBuilder getSurchargeTypeIdOrBuilder();

      /**
       * <pre>
       * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
       */
      boolean hasSurchargeTypeCategoryId();
      /**
       * <pre>
       * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
       */
      io.dstore.Values.integerValue getSurchargeTypeCategoryId();
      /**
       * <pre>
       * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
       */
      io.dstore.Values.integerValueOrBuilder getSurchargeTypeCategoryIdOrBuilder();
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetSurchargeTypes_Ad.Response.Row}
     */
    public  static final class Row extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:dstore.engine.om_GetSurchargeTypes_Ad.Response.Row)
        RowOrBuilder {
      // Use Row.newBuilder() to construct.
      private Row(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Row() {
        rowId_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private Row(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 80000: {

                rowId_ = input.readInt32();
                break;
              }
              case 80010: {
                io.dstore.Values.booleanValue.Builder subBuilder = null;
                if (relative_ != null) {
                  subBuilder = relative_.toBuilder();
                }
                relative_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(relative_);
                  relative_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80018: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (unitId_ != null) {
                  subBuilder = unitId_.toBuilder();
                }
                unitId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(unitId_);
                  unitId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80026: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (categoryPriorityNo_ != null) {
                  subBuilder = categoryPriorityNo_.toBuilder();
                }
                categoryPriorityNo_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(categoryPriorityNo_);
                  categoryPriorityNo_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80034: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (translatedDescription_ != null) {
                  subBuilder = translatedDescription_.toBuilder();
                }
                translatedDescription_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(translatedDescription_);
                  translatedDescription_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80042: {
                io.dstore.Values.booleanValue.Builder subBuilder = null;
                if (brutto_ != null) {
                  subBuilder = brutto_.toBuilder();
                }
                brutto_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(brutto_);
                  brutto_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80050: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (unitSymbol_ != null) {
                  subBuilder = unitSymbol_.toBuilder();
                }
                unitSymbol_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(unitSymbol_);
                  unitSymbol_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80058: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (categoryDescription_ != null) {
                  subBuilder = categoryDescription_.toBuilder();
                }
                categoryDescription_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(categoryDescription_);
                  categoryDescription_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80066: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (surchargeTypeDescription_ != null) {
                  subBuilder = surchargeTypeDescription_.toBuilder();
                }
                surchargeTypeDescription_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(surchargeTypeDescription_);
                  surchargeTypeDescription_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80074: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (isAbsoluteValue_ != null) {
                  subBuilder = isAbsoluteValue_.toBuilder();
                }
                isAbsoluteValue_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(isAbsoluteValue_);
                  isAbsoluteValue_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80082: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (surchargeTypeId_ != null) {
                  subBuilder = surchargeTypeId_.toBuilder();
                }
                surchargeTypeId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(surchargeTypeId_);
                  surchargeTypeId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80090: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (surchargeTypeCategoryId_ != null) {
                  subBuilder = surchargeTypeCategoryId_.toBuilder();
                }
                surchargeTypeCategoryId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(surchargeTypeCategoryId_);
                  surchargeTypeCategoryId_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_Row_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_Row_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.class, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.Builder.class);
      }

      public static final int ROW_ID_FIELD_NUMBER = 10000;
      private int rowId_;
      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      public int getRowId() {
        return rowId_;
      }

      public static final int RELATIVE_FIELD_NUMBER = 10001;
      private io.dstore.Values.booleanValue relative_;
      /**
       * <pre>
       * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue relative = 10001;</code>
       */
      public boolean hasRelative() {
        return relative_ != null;
      }
      /**
       * <pre>
       * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue relative = 10001;</code>
       */
      public io.dstore.Values.booleanValue getRelative() {
        return relative_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : relative_;
      }
      /**
       * <pre>
       * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue relative = 10001;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getRelativeOrBuilder() {
        return getRelative();
      }

      public static final int UNIT_ID_FIELD_NUMBER = 10002;
      private io.dstore.Values.integerValue unitId_;
      /**
       * <pre>
       * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
       */
      public boolean hasUnitId() {
        return unitId_ != null;
      }
      /**
       * <pre>
       * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
       */
      public io.dstore.Values.integerValue getUnitId() {
        return unitId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : unitId_;
      }
      /**
       * <pre>
       * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getUnitIdOrBuilder() {
        return getUnitId();
      }

      public static final int CATEGORY_PRIORITY_NO_FIELD_NUMBER = 10003;
      private io.dstore.Values.integerValue categoryPriorityNo_;
      /**
       * <pre>
       * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
       */
      public boolean hasCategoryPriorityNo() {
        return categoryPriorityNo_ != null;
      }
      /**
       * <pre>
       * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
       */
      public io.dstore.Values.integerValue getCategoryPriorityNo() {
        return categoryPriorityNo_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : categoryPriorityNo_;
      }
      /**
       * <pre>
       * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getCategoryPriorityNoOrBuilder() {
        return getCategoryPriorityNo();
      }

      public static final int TRANSLATED_DESCRIPTION_FIELD_NUMBER = 10004;
      private io.dstore.Values.stringValue translatedDescription_;
      /**
       * <pre>
       * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
       */
      public boolean hasTranslatedDescription() {
        return translatedDescription_ != null;
      }
      /**
       * <pre>
       * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
       */
      public io.dstore.Values.stringValue getTranslatedDescription() {
        return translatedDescription_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : translatedDescription_;
      }
      /**
       * <pre>
       * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getTranslatedDescriptionOrBuilder() {
        return getTranslatedDescription();
      }

      public static final int BRUTTO_FIELD_NUMBER = 10005;
      private io.dstore.Values.booleanValue brutto_;
      /**
       * <pre>
       * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
       */
      public boolean hasBrutto() {
        return brutto_ != null;
      }
      /**
       * <pre>
       * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
       */
      public io.dstore.Values.booleanValue getBrutto() {
        return brutto_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : brutto_;
      }
      /**
       * <pre>
       * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getBruttoOrBuilder() {
        return getBrutto();
      }

      public static final int UNIT_SYMBOL_FIELD_NUMBER = 10006;
      private io.dstore.Values.stringValue unitSymbol_;
      /**
       * <pre>
       * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
       */
      public boolean hasUnitSymbol() {
        return unitSymbol_ != null;
      }
      /**
       * <pre>
       * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
       */
      public io.dstore.Values.stringValue getUnitSymbol() {
        return unitSymbol_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : unitSymbol_;
      }
      /**
       * <pre>
       * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getUnitSymbolOrBuilder() {
        return getUnitSymbol();
      }

      public static final int CATEGORY_DESCRIPTION_FIELD_NUMBER = 10007;
      private io.dstore.Values.stringValue categoryDescription_;
      /**
       * <pre>
       * Bezeichnung von "SurchargeTypeCategoryID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue category_description = 10007;</code>
       */
      public boolean hasCategoryDescription() {
        return categoryDescription_ != null;
      }
      /**
       * <pre>
       * Bezeichnung von "SurchargeTypeCategoryID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue category_description = 10007;</code>
       */
      public io.dstore.Values.stringValue getCategoryDescription() {
        return categoryDescription_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : categoryDescription_;
      }
      /**
       * <pre>
       * Bezeichnung von "SurchargeTypeCategoryID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue category_description = 10007;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getCategoryDescriptionOrBuilder() {
        return getCategoryDescription();
      }

      public static final int SURCHARGE_TYPE_DESCRIPTION_FIELD_NUMBER = 10008;
      private io.dstore.Values.stringValue surchargeTypeDescription_;
      /**
       * <pre>
       * Bezeichnung der "SurchargeTypeID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
       */
      public boolean hasSurchargeTypeDescription() {
        return surchargeTypeDescription_ != null;
      }
      /**
       * <pre>
       * Bezeichnung der "SurchargeTypeID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
       */
      public io.dstore.Values.stringValue getSurchargeTypeDescription() {
        return surchargeTypeDescription_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : surchargeTypeDescription_;
      }
      /**
       * <pre>
       * Bezeichnung der "SurchargeTypeID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getSurchargeTypeDescriptionOrBuilder() {
        return getSurchargeTypeDescription();
      }

      public static final int IS_ABSOLUTE_VALUE_FIELD_NUMBER = 10009;
      private io.dstore.Values.integerValue isAbsoluteValue_;
      /**
       * <pre>
       * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
       * </pre>
       *
       * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
       */
      public boolean hasIsAbsoluteValue() {
        return isAbsoluteValue_ != null;
      }
      /**
       * <pre>
       * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
       * </pre>
       *
       * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
       */
      public io.dstore.Values.integerValue getIsAbsoluteValue() {
        return isAbsoluteValue_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : isAbsoluteValue_;
      }
      /**
       * <pre>
       * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
       * </pre>
       *
       * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getIsAbsoluteValueOrBuilder() {
        return getIsAbsoluteValue();
      }

      public static final int SURCHARGE_TYPE_ID_FIELD_NUMBER = 10010;
      private io.dstore.Values.integerValue surchargeTypeId_;
      /**
       * <pre>
       * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
       */
      public boolean hasSurchargeTypeId() {
        return surchargeTypeId_ != null;
      }
      /**
       * <pre>
       * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
       */
      public io.dstore.Values.integerValue getSurchargeTypeId() {
        return surchargeTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeId_;
      }
      /**
       * <pre>
       * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getSurchargeTypeIdOrBuilder() {
        return getSurchargeTypeId();
      }

      public static final int SURCHARGE_TYPE_CATEGORY_ID_FIELD_NUMBER = 10011;
      private io.dstore.Values.integerValue surchargeTypeCategoryId_;
      /**
       * <pre>
       * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
       */
      public boolean hasSurchargeTypeCategoryId() {
        return surchargeTypeCategoryId_ != null;
      }
      /**
       * <pre>
       * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
       */
      public io.dstore.Values.integerValue getSurchargeTypeCategoryId() {
        return surchargeTypeCategoryId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeCategoryId_;
      }
      /**
       * <pre>
       * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
       * </pre>
       *
       * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getSurchargeTypeCategoryIdOrBuilder() {
        return getSurchargeTypeCategoryId();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (rowId_ != 0) {
          output.writeInt32(10000, rowId_);
        }
        if (relative_ != null) {
          output.writeMessage(10001, getRelative());
        }
        if (unitId_ != null) {
          output.writeMessage(10002, getUnitId());
        }
        if (categoryPriorityNo_ != null) {
          output.writeMessage(10003, getCategoryPriorityNo());
        }
        if (translatedDescription_ != null) {
          output.writeMessage(10004, getTranslatedDescription());
        }
        if (brutto_ != null) {
          output.writeMessage(10005, getBrutto());
        }
        if (unitSymbol_ != null) {
          output.writeMessage(10006, getUnitSymbol());
        }
        if (categoryDescription_ != null) {
          output.writeMessage(10007, getCategoryDescription());
        }
        if (surchargeTypeDescription_ != null) {
          output.writeMessage(10008, getSurchargeTypeDescription());
        }
        if (isAbsoluteValue_ != null) {
          output.writeMessage(10009, getIsAbsoluteValue());
        }
        if (surchargeTypeId_ != null) {
          output.writeMessage(10010, getSurchargeTypeId());
        }
        if (surchargeTypeCategoryId_ != null) {
          output.writeMessage(10011, getSurchargeTypeCategoryId());
        }
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (rowId_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10000, rowId_);
        }
        if (relative_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10001, getRelative());
        }
        if (unitId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10002, getUnitId());
        }
        if (categoryPriorityNo_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10003, getCategoryPriorityNo());
        }
        if (translatedDescription_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10004, getTranslatedDescription());
        }
        if (brutto_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10005, getBrutto());
        }
        if (unitSymbol_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10006, getUnitSymbol());
        }
        if (categoryDescription_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10007, getCategoryDescription());
        }
        if (surchargeTypeDescription_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10008, getSurchargeTypeDescription());
        }
        if (isAbsoluteValue_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10009, getIsAbsoluteValue());
        }
        if (surchargeTypeId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10010, getSurchargeTypeId());
        }
        if (surchargeTypeCategoryId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10011, getSurchargeTypeCategoryId());
        }
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row)) {
          return super.equals(obj);
        }
        io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row other = (io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row) obj;

        boolean result = true;
        result = result && (getRowId()
            == other.getRowId());
        result = result && (hasRelative() == other.hasRelative());
        if (hasRelative()) {
          result = result && getRelative()
              .equals(other.getRelative());
        }
        result = result && (hasUnitId() == other.hasUnitId());
        if (hasUnitId()) {
          result = result && getUnitId()
              .equals(other.getUnitId());
        }
        result = result && (hasCategoryPriorityNo() == other.hasCategoryPriorityNo());
        if (hasCategoryPriorityNo()) {
          result = result && getCategoryPriorityNo()
              .equals(other.getCategoryPriorityNo());
        }
        result = result && (hasTranslatedDescription() == other.hasTranslatedDescription());
        if (hasTranslatedDescription()) {
          result = result && getTranslatedDescription()
              .equals(other.getTranslatedDescription());
        }
        result = result && (hasBrutto() == other.hasBrutto());
        if (hasBrutto()) {
          result = result && getBrutto()
              .equals(other.getBrutto());
        }
        result = result && (hasUnitSymbol() == other.hasUnitSymbol());
        if (hasUnitSymbol()) {
          result = result && getUnitSymbol()
              .equals(other.getUnitSymbol());
        }
        result = result && (hasCategoryDescription() == other.hasCategoryDescription());
        if (hasCategoryDescription()) {
          result = result && getCategoryDescription()
              .equals(other.getCategoryDescription());
        }
        result = result && (hasSurchargeTypeDescription() == other.hasSurchargeTypeDescription());
        if (hasSurchargeTypeDescription()) {
          result = result && getSurchargeTypeDescription()
              .equals(other.getSurchargeTypeDescription());
        }
        result = result && (hasIsAbsoluteValue() == other.hasIsAbsoluteValue());
        if (hasIsAbsoluteValue()) {
          result = result && getIsAbsoluteValue()
              .equals(other.getIsAbsoluteValue());
        }
        result = result && (hasSurchargeTypeId() == other.hasSurchargeTypeId());
        if (hasSurchargeTypeId()) {
          result = result && getSurchargeTypeId()
              .equals(other.getSurchargeTypeId());
        }
        result = result && (hasSurchargeTypeCategoryId() == other.hasSurchargeTypeCategoryId());
        if (hasSurchargeTypeCategoryId()) {
          result = result && getSurchargeTypeCategoryId()
              .equals(other.getSurchargeTypeCategoryId());
        }
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptorForType().hashCode();
        hash = (37 * hash) + ROW_ID_FIELD_NUMBER;
        hash = (53 * hash) + getRowId();
        if (hasRelative()) {
          hash = (37 * hash) + RELATIVE_FIELD_NUMBER;
          hash = (53 * hash) + getRelative().hashCode();
        }
        if (hasUnitId()) {
          hash = (37 * hash) + UNIT_ID_FIELD_NUMBER;
          hash = (53 * hash) + getUnitId().hashCode();
        }
        if (hasCategoryPriorityNo()) {
          hash = (37 * hash) + CATEGORY_PRIORITY_NO_FIELD_NUMBER;
          hash = (53 * hash) + getCategoryPriorityNo().hashCode();
        }
        if (hasTranslatedDescription()) {
          hash = (37 * hash) + TRANSLATED_DESCRIPTION_FIELD_NUMBER;
          hash = (53 * hash) + getTranslatedDescription().hashCode();
        }
        if (hasBrutto()) {
          hash = (37 * hash) + BRUTTO_FIELD_NUMBER;
          hash = (53 * hash) + getBrutto().hashCode();
        }
        if (hasUnitSymbol()) {
          hash = (37 * hash) + UNIT_SYMBOL_FIELD_NUMBER;
          hash = (53 * hash) + getUnitSymbol().hashCode();
        }
        if (hasCategoryDescription()) {
          hash = (37 * hash) + CATEGORY_DESCRIPTION_FIELD_NUMBER;
          hash = (53 * hash) + getCategoryDescription().hashCode();
        }
        if (hasSurchargeTypeDescription()) {
          hash = (37 * hash) + SURCHARGE_TYPE_DESCRIPTION_FIELD_NUMBER;
          hash = (53 * hash) + getSurchargeTypeDescription().hashCode();
        }
        if (hasIsAbsoluteValue()) {
          hash = (37 * hash) + IS_ABSOLUTE_VALUE_FIELD_NUMBER;
          hash = (53 * hash) + getIsAbsoluteValue().hashCode();
        }
        if (hasSurchargeTypeId()) {
          hash = (37 * hash) + SURCHARGE_TYPE_ID_FIELD_NUMBER;
          hash = (53 * hash) + getSurchargeTypeId().hashCode();
        }
        if (hasSurchargeTypeCategoryId()) {
          hash = (37 * hash) + SURCHARGE_TYPE_CATEGORY_ID_FIELD_NUMBER;
          hash = (53 * hash) + getSurchargeTypeCategoryId().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code dstore.engine.om_GetSurchargeTypes_Ad.Response.Row}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetSurchargeTypes_Ad.Response.Row)
          io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.RowOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_Row_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_Row_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.class, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.Builder.class);
        }

        // Construct using io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          rowId_ = 0;

          if (relativeBuilder_ == null) {
            relative_ = null;
          } else {
            relative_ = null;
            relativeBuilder_ = null;
          }
          if (unitIdBuilder_ == null) {
            unitId_ = null;
          } else {
            unitId_ = null;
            unitIdBuilder_ = null;
          }
          if (categoryPriorityNoBuilder_ == null) {
            categoryPriorityNo_ = null;
          } else {
            categoryPriorityNo_ = null;
            categoryPriorityNoBuilder_ = null;
          }
          if (translatedDescriptionBuilder_ == null) {
            translatedDescription_ = null;
          } else {
            translatedDescription_ = null;
            translatedDescriptionBuilder_ = null;
          }
          if (bruttoBuilder_ == null) {
            brutto_ = null;
          } else {
            brutto_ = null;
            bruttoBuilder_ = null;
          }
          if (unitSymbolBuilder_ == null) {
            unitSymbol_ = null;
          } else {
            unitSymbol_ = null;
            unitSymbolBuilder_ = null;
          }
          if (categoryDescriptionBuilder_ == null) {
            categoryDescription_ = null;
          } else {
            categoryDescription_ = null;
            categoryDescriptionBuilder_ = null;
          }
          if (surchargeTypeDescriptionBuilder_ == null) {
            surchargeTypeDescription_ = null;
          } else {
            surchargeTypeDescription_ = null;
            surchargeTypeDescriptionBuilder_ = null;
          }
          if (isAbsoluteValueBuilder_ == null) {
            isAbsoluteValue_ = null;
          } else {
            isAbsoluteValue_ = null;
            isAbsoluteValueBuilder_ = null;
          }
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeId_ = null;
          } else {
            surchargeTypeId_ = null;
            surchargeTypeIdBuilder_ = null;
          }
          if (surchargeTypeCategoryIdBuilder_ == null) {
            surchargeTypeCategoryId_ = null;
          } else {
            surchargeTypeCategoryId_ = null;
            surchargeTypeCategoryIdBuilder_ = null;
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_Row_descriptor;
        }

        public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row getDefaultInstanceForType() {
          return io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.getDefaultInstance();
        }

        public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row build() {
          io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row buildPartial() {
          io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row result = new io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row(this);
          result.rowId_ = rowId_;
          if (relativeBuilder_ == null) {
            result.relative_ = relative_;
          } else {
            result.relative_ = relativeBuilder_.build();
          }
          if (unitIdBuilder_ == null) {
            result.unitId_ = unitId_;
          } else {
            result.unitId_ = unitIdBuilder_.build();
          }
          if (categoryPriorityNoBuilder_ == null) {
            result.categoryPriorityNo_ = categoryPriorityNo_;
          } else {
            result.categoryPriorityNo_ = categoryPriorityNoBuilder_.build();
          }
          if (translatedDescriptionBuilder_ == null) {
            result.translatedDescription_ = translatedDescription_;
          } else {
            result.translatedDescription_ = translatedDescriptionBuilder_.build();
          }
          if (bruttoBuilder_ == null) {
            result.brutto_ = brutto_;
          } else {
            result.brutto_ = bruttoBuilder_.build();
          }
          if (unitSymbolBuilder_ == null) {
            result.unitSymbol_ = unitSymbol_;
          } else {
            result.unitSymbol_ = unitSymbolBuilder_.build();
          }
          if (categoryDescriptionBuilder_ == null) {
            result.categoryDescription_ = categoryDescription_;
          } else {
            result.categoryDescription_ = categoryDescriptionBuilder_.build();
          }
          if (surchargeTypeDescriptionBuilder_ == null) {
            result.surchargeTypeDescription_ = surchargeTypeDescription_;
          } else {
            result.surchargeTypeDescription_ = surchargeTypeDescriptionBuilder_.build();
          }
          if (isAbsoluteValueBuilder_ == null) {
            result.isAbsoluteValue_ = isAbsoluteValue_;
          } else {
            result.isAbsoluteValue_ = isAbsoluteValueBuilder_.build();
          }
          if (surchargeTypeIdBuilder_ == null) {
            result.surchargeTypeId_ = surchargeTypeId_;
          } else {
            result.surchargeTypeId_ = surchargeTypeIdBuilder_.build();
          }
          if (surchargeTypeCategoryIdBuilder_ == null) {
            result.surchargeTypeCategoryId_ = surchargeTypeCategoryId_;
          } else {
            result.surchargeTypeCategoryId_ = surchargeTypeCategoryIdBuilder_.build();
          }
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row) {
            return mergeFrom((io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row other) {
          if (other == io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.getDefaultInstance()) return this;
          if (other.getRowId() != 0) {
            setRowId(other.getRowId());
          }
          if (other.hasRelative()) {
            mergeRelative(other.getRelative());
          }
          if (other.hasUnitId()) {
            mergeUnitId(other.getUnitId());
          }
          if (other.hasCategoryPriorityNo()) {
            mergeCategoryPriorityNo(other.getCategoryPriorityNo());
          }
          if (other.hasTranslatedDescription()) {
            mergeTranslatedDescription(other.getTranslatedDescription());
          }
          if (other.hasBrutto()) {
            mergeBrutto(other.getBrutto());
          }
          if (other.hasUnitSymbol()) {
            mergeUnitSymbol(other.getUnitSymbol());
          }
          if (other.hasCategoryDescription()) {
            mergeCategoryDescription(other.getCategoryDescription());
          }
          if (other.hasSurchargeTypeDescription()) {
            mergeSurchargeTypeDescription(other.getSurchargeTypeDescription());
          }
          if (other.hasIsAbsoluteValue()) {
            mergeIsAbsoluteValue(other.getIsAbsoluteValue());
          }
          if (other.hasSurchargeTypeId()) {
            mergeSurchargeTypeId(other.getSurchargeTypeId());
          }
          if (other.hasSurchargeTypeCategoryId()) {
            mergeSurchargeTypeCategoryId(other.getSurchargeTypeCategoryId());
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int rowId_ ;
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public int getRowId() {
          return rowId_;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder setRowId(int value) {
          
          rowId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder clearRowId() {
          
          rowId_ = 0;
          onChanged();
          return this;
        }

        private io.dstore.Values.booleanValue relative_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> relativeBuilder_;
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue relative = 10001;</code>
         */
        public boolean hasRelative() {
          return relativeBuilder_ != null || relative_ != null;
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue relative = 10001;</code>
         */
        public io.dstore.Values.booleanValue getRelative() {
          if (relativeBuilder_ == null) {
            return relative_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : relative_;
          } else {
            return relativeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue relative = 10001;</code>
         */
        public Builder setRelative(io.dstore.Values.booleanValue value) {
          if (relativeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            relative_ = value;
            onChanged();
          } else {
            relativeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue relative = 10001;</code>
         */
        public Builder setRelative(
            io.dstore.Values.booleanValue.Builder builderForValue) {
          if (relativeBuilder_ == null) {
            relative_ = builderForValue.build();
            onChanged();
          } else {
            relativeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue relative = 10001;</code>
         */
        public Builder mergeRelative(io.dstore.Values.booleanValue value) {
          if (relativeBuilder_ == null) {
            if (relative_ != null) {
              relative_ =
                io.dstore.Values.booleanValue.newBuilder(relative_).mergeFrom(value).buildPartial();
            } else {
              relative_ = value;
            }
            onChanged();
          } else {
            relativeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue relative = 10001;</code>
         */
        public Builder clearRelative() {
          if (relativeBuilder_ == null) {
            relative_ = null;
            onChanged();
          } else {
            relative_ = null;
            relativeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue relative = 10001;</code>
         */
        public io.dstore.Values.booleanValue.Builder getRelativeBuilder() {
          
          onChanged();
          return getRelativeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue relative = 10001;</code>
         */
        public io.dstore.Values.booleanValueOrBuilder getRelativeOrBuilder() {
          if (relativeBuilder_ != null) {
            return relativeBuilder_.getMessageOrBuilder();
          } else {
            return relative_ == null ?
                io.dstore.Values.booleanValue.getDefaultInstance() : relative_;
          }
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob "Surcharge"-Werte absolut ("0") oder relativ/prozentual ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue relative = 10001;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
            getRelativeFieldBuilder() {
          if (relativeBuilder_ == null) {
            relativeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                    getRelative(),
                    getParentForChildren(),
                    isClean());
            relative_ = null;
          }
          return relativeBuilder_;
        }

        private io.dstore.Values.integerValue unitId_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> unitIdBuilder_;
        /**
         * <pre>
         * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
         */
        public boolean hasUnitId() {
          return unitIdBuilder_ != null || unitId_ != null;
        }
        /**
         * <pre>
         * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
         */
        public io.dstore.Values.integerValue getUnitId() {
          if (unitIdBuilder_ == null) {
            return unitId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : unitId_;
          } else {
            return unitIdBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
         */
        public Builder setUnitId(io.dstore.Values.integerValue value) {
          if (unitIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            unitId_ = value;
            onChanged();
          } else {
            unitIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
         */
        public Builder setUnitId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (unitIdBuilder_ == null) {
            unitId_ = builderForValue.build();
            onChanged();
          } else {
            unitIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
         */
        public Builder mergeUnitId(io.dstore.Values.integerValue value) {
          if (unitIdBuilder_ == null) {
            if (unitId_ != null) {
              unitId_ =
                io.dstore.Values.integerValue.newBuilder(unitId_).mergeFrom(value).buildPartial();
            } else {
              unitId_ = value;
            }
            onChanged();
          } else {
            unitIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
         */
        public Builder clearUnitId() {
          if (unitIdBuilder_ == null) {
            unitId_ = null;
            onChanged();
          } else {
            unitId_ = null;
            unitIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
         */
        public io.dstore.Values.integerValue.Builder getUnitIdBuilder() {
          
          onChanged();
          return getUnitIdFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getUnitIdOrBuilder() {
          if (unitIdBuilder_ != null) {
            return unitIdBuilder_.getMessageOrBuilder();
          } else {
            return unitId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : unitId_;
          }
        }
        /**
         * <pre>
         * ID einer Währungs-Einheit (wenn "IsAbsoluteValue &gt; 0") oder der Prozent-Einheit (wenn "IsAbsoluteValue = 0" ist) - also die Einheit, in der die konkreten Rabatte/Aufschläge (wie z.B. in "PersonSurcharges") zu verstehen sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10002;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getUnitIdFieldBuilder() {
          if (unitIdBuilder_ == null) {
            unitIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getUnitId(),
                    getParentForChildren(),
                    isClean());
            unitId_ = null;
          }
          return unitIdBuilder_;
        }

        private io.dstore.Values.integerValue categoryPriorityNo_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> categoryPriorityNoBuilder_;
        /**
         * <pre>
         * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
         */
        public boolean hasCategoryPriorityNo() {
          return categoryPriorityNoBuilder_ != null || categoryPriorityNo_ != null;
        }
        /**
         * <pre>
         * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
         */
        public io.dstore.Values.integerValue getCategoryPriorityNo() {
          if (categoryPriorityNoBuilder_ == null) {
            return categoryPriorityNo_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : categoryPriorityNo_;
          } else {
            return categoryPriorityNoBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
         */
        public Builder setCategoryPriorityNo(io.dstore.Values.integerValue value) {
          if (categoryPriorityNoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            categoryPriorityNo_ = value;
            onChanged();
          } else {
            categoryPriorityNoBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
         */
        public Builder setCategoryPriorityNo(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (categoryPriorityNoBuilder_ == null) {
            categoryPriorityNo_ = builderForValue.build();
            onChanged();
          } else {
            categoryPriorityNoBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
         */
        public Builder mergeCategoryPriorityNo(io.dstore.Values.integerValue value) {
          if (categoryPriorityNoBuilder_ == null) {
            if (categoryPriorityNo_ != null) {
              categoryPriorityNo_ =
                io.dstore.Values.integerValue.newBuilder(categoryPriorityNo_).mergeFrom(value).buildPartial();
            } else {
              categoryPriorityNo_ = value;
            }
            onChanged();
          } else {
            categoryPriorityNoBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
         */
        public Builder clearCategoryPriorityNo() {
          if (categoryPriorityNoBuilder_ == null) {
            categoryPriorityNo_ = null;
            onChanged();
          } else {
            categoryPriorityNo_ = null;
            categoryPriorityNoBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
         */
        public io.dstore.Values.integerValue.Builder getCategoryPriorityNoBuilder() {
          
          onChanged();
          return getCategoryPriorityNoFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getCategoryPriorityNoOrBuilder() {
          if (categoryPriorityNoBuilder_ != null) {
            return categoryPriorityNoBuilder_.getMessageOrBuilder();
          } else {
            return categoryPriorityNo_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : categoryPriorityNo_;
          }
        }
        /**
         * <pre>
         * Gibt die Priorität der Kategorie "SurchargeTypeCategoryID" innerhalb aller Kategorien an. Eine kleinere "PriorityNo" bedeutet, daß "Surcharges" dieser Kategorie früher angewendet werden. Besonderheit : "0" bedeutet, daß die Kategorie ignoriert wird.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_priority_no = 10003;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getCategoryPriorityNoFieldBuilder() {
          if (categoryPriorityNoBuilder_ == null) {
            categoryPriorityNoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getCategoryPriorityNo(),
                    getParentForChildren(),
                    isClean());
            categoryPriorityNo_ = null;
          }
          return categoryPriorityNoBuilder_;
        }

        private io.dstore.Values.stringValue translatedDescription_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> translatedDescriptionBuilder_;
        /**
         * <pre>
         * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
         */
        public boolean hasTranslatedDescription() {
          return translatedDescriptionBuilder_ != null || translatedDescription_ != null;
        }
        /**
         * <pre>
         * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
         */
        public io.dstore.Values.stringValue getTranslatedDescription() {
          if (translatedDescriptionBuilder_ == null) {
            return translatedDescription_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : translatedDescription_;
          } else {
            return translatedDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
         */
        public Builder setTranslatedDescription(io.dstore.Values.stringValue value) {
          if (translatedDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            translatedDescription_ = value;
            onChanged();
          } else {
            translatedDescriptionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
         */
        public Builder setTranslatedDescription(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (translatedDescriptionBuilder_ == null) {
            translatedDescription_ = builderForValue.build();
            onChanged();
          } else {
            translatedDescriptionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
         */
        public Builder mergeTranslatedDescription(io.dstore.Values.stringValue value) {
          if (translatedDescriptionBuilder_ == null) {
            if (translatedDescription_ != null) {
              translatedDescription_ =
                io.dstore.Values.stringValue.newBuilder(translatedDescription_).mergeFrom(value).buildPartial();
            } else {
              translatedDescription_ = value;
            }
            onChanged();
          } else {
            translatedDescriptionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
         */
        public Builder clearTranslatedDescription() {
          if (translatedDescriptionBuilder_ == null) {
            translatedDescription_ = null;
            onChanged();
          } else {
            translatedDescription_ = null;
            translatedDescriptionBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
         */
        public io.dstore.Values.stringValue.Builder getTranslatedDescriptionBuilder() {
          
          onChanged();
          return getTranslatedDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
         */
        public io.dstore.Values.stringValueOrBuilder getTranslatedDescriptionOrBuilder() {
          if (translatedDescriptionBuilder_ != null) {
            return translatedDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return translatedDescription_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : translatedDescription_;
          }
        }
        /**
         * <pre>
         * Übersetzung von "SurchargeTypeDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue translated_description = 10004;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getTranslatedDescriptionFieldBuilder() {
          if (translatedDescriptionBuilder_ == null) {
            translatedDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getTranslatedDescription(),
                    getParentForChildren(),
                    isClean());
            translatedDescription_ = null;
          }
          return translatedDescriptionBuilder_;
        }

        private io.dstore.Values.booleanValue brutto_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> bruttoBuilder_;
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
         */
        public boolean hasBrutto() {
          return bruttoBuilder_ != null || brutto_ != null;
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
         */
        public io.dstore.Values.booleanValue getBrutto() {
          if (bruttoBuilder_ == null) {
            return brutto_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : brutto_;
          } else {
            return bruttoBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
         */
        public Builder setBrutto(io.dstore.Values.booleanValue value) {
          if (bruttoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            brutto_ = value;
            onChanged();
          } else {
            bruttoBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
         */
        public Builder setBrutto(
            io.dstore.Values.booleanValue.Builder builderForValue) {
          if (bruttoBuilder_ == null) {
            brutto_ = builderForValue.build();
            onChanged();
          } else {
            bruttoBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
         */
        public Builder mergeBrutto(io.dstore.Values.booleanValue value) {
          if (bruttoBuilder_ == null) {
            if (brutto_ != null) {
              brutto_ =
                io.dstore.Values.booleanValue.newBuilder(brutto_).mergeFrom(value).buildPartial();
            } else {
              brutto_ = value;
            }
            onChanged();
          } else {
            bruttoBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
         */
        public Builder clearBrutto() {
          if (bruttoBuilder_ == null) {
            brutto_ = null;
            onChanged();
          } else {
            brutto_ = null;
            bruttoBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
         */
        public io.dstore.Values.booleanValue.Builder getBruttoBuilder() {
          
          onChanged();
          return getBruttoFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
         */
        public io.dstore.Values.booleanValueOrBuilder getBruttoOrBuilder() {
          if (bruttoBuilder_ != null) {
            return bruttoBuilder_.getMessageOrBuilder();
          } else {
            return brutto_ == null ?
                io.dstore.Values.booleanValue.getDefaultInstance() : brutto_;
          }
        }
        /**
         * <pre>
         * Redundante Information (s. "IsAbsoluteValue"), aufgrund der Abwärtskompatibilität beibehalten. Gibt an, ob absolute "Surcharge"-Werte (nur relevant im Fall "Relative = 1" also) Netto ("0") oder Brutto ("1") zu verstehen sind.
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue brutto = 10005;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
            getBruttoFieldBuilder() {
          if (bruttoBuilder_ == null) {
            bruttoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                    getBrutto(),
                    getParentForChildren(),
                    isClean());
            brutto_ = null;
          }
          return bruttoBuilder_;
        }

        private io.dstore.Values.stringValue unitSymbol_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> unitSymbolBuilder_;
        /**
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
         */
        public boolean hasUnitSymbol() {
          return unitSymbolBuilder_ != null || unitSymbol_ != null;
        }
        /**
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
         */
        public io.dstore.Values.stringValue getUnitSymbol() {
          if (unitSymbolBuilder_ == null) {
            return unitSymbol_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : unitSymbol_;
          } else {
            return unitSymbolBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
         */
        public Builder setUnitSymbol(io.dstore.Values.stringValue value) {
          if (unitSymbolBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            unitSymbol_ = value;
            onChanged();
          } else {
            unitSymbolBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
         */
        public Builder setUnitSymbol(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (unitSymbolBuilder_ == null) {
            unitSymbol_ = builderForValue.build();
            onChanged();
          } else {
            unitSymbolBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
         */
        public Builder mergeUnitSymbol(io.dstore.Values.stringValue value) {
          if (unitSymbolBuilder_ == null) {
            if (unitSymbol_ != null) {
              unitSymbol_ =
                io.dstore.Values.stringValue.newBuilder(unitSymbol_).mergeFrom(value).buildPartial();
            } else {
              unitSymbol_ = value;
            }
            onChanged();
          } else {
            unitSymbolBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
         */
        public Builder clearUnitSymbol() {
          if (unitSymbolBuilder_ == null) {
            unitSymbol_ = null;
            onChanged();
          } else {
            unitSymbol_ = null;
            unitSymbolBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
         */
        public io.dstore.Values.stringValue.Builder getUnitSymbolBuilder() {
          
          onChanged();
          return getUnitSymbolFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
         */
        public io.dstore.Values.stringValueOrBuilder getUnitSymbolOrBuilder() {
          if (unitSymbolBuilder_ != null) {
            return unitSymbolBuilder_.getMessageOrBuilder();
          } else {
            return unitSymbol_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : unitSymbol_;
          }
        }
        /**
         * <pre>
         * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue unit_symbol = 10006;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getUnitSymbolFieldBuilder() {
          if (unitSymbolBuilder_ == null) {
            unitSymbolBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getUnitSymbol(),
                    getParentForChildren(),
                    isClean());
            unitSymbol_ = null;
          }
          return unitSymbolBuilder_;
        }

        private io.dstore.Values.stringValue categoryDescription_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> categoryDescriptionBuilder_;
        /**
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10007;</code>
         */
        public boolean hasCategoryDescription() {
          return categoryDescriptionBuilder_ != null || categoryDescription_ != null;
        }
        /**
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10007;</code>
         */
        public io.dstore.Values.stringValue getCategoryDescription() {
          if (categoryDescriptionBuilder_ == null) {
            return categoryDescription_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : categoryDescription_;
          } else {
            return categoryDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10007;</code>
         */
        public Builder setCategoryDescription(io.dstore.Values.stringValue value) {
          if (categoryDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            categoryDescription_ = value;
            onChanged();
          } else {
            categoryDescriptionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10007;</code>
         */
        public Builder setCategoryDescription(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (categoryDescriptionBuilder_ == null) {
            categoryDescription_ = builderForValue.build();
            onChanged();
          } else {
            categoryDescriptionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10007;</code>
         */
        public Builder mergeCategoryDescription(io.dstore.Values.stringValue value) {
          if (categoryDescriptionBuilder_ == null) {
            if (categoryDescription_ != null) {
              categoryDescription_ =
                io.dstore.Values.stringValue.newBuilder(categoryDescription_).mergeFrom(value).buildPartial();
            } else {
              categoryDescription_ = value;
            }
            onChanged();
          } else {
            categoryDescriptionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10007;</code>
         */
        public Builder clearCategoryDescription() {
          if (categoryDescriptionBuilder_ == null) {
            categoryDescription_ = null;
            onChanged();
          } else {
            categoryDescription_ = null;
            categoryDescriptionBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10007;</code>
         */
        public io.dstore.Values.stringValue.Builder getCategoryDescriptionBuilder() {
          
          onChanged();
          return getCategoryDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10007;</code>
         */
        public io.dstore.Values.stringValueOrBuilder getCategoryDescriptionOrBuilder() {
          if (categoryDescriptionBuilder_ != null) {
            return categoryDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return categoryDescription_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : categoryDescription_;
          }
        }
        /**
         * <pre>
         * Bezeichnung von "SurchargeTypeCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10007;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getCategoryDescriptionFieldBuilder() {
          if (categoryDescriptionBuilder_ == null) {
            categoryDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getCategoryDescription(),
                    getParentForChildren(),
                    isClean());
            categoryDescription_ = null;
          }
          return categoryDescriptionBuilder_;
        }

        private io.dstore.Values.stringValue surchargeTypeDescription_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> surchargeTypeDescriptionBuilder_;
        /**
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
         */
        public boolean hasSurchargeTypeDescription() {
          return surchargeTypeDescriptionBuilder_ != null || surchargeTypeDescription_ != null;
        }
        /**
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
         */
        public io.dstore.Values.stringValue getSurchargeTypeDescription() {
          if (surchargeTypeDescriptionBuilder_ == null) {
            return surchargeTypeDescription_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : surchargeTypeDescription_;
          } else {
            return surchargeTypeDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
         */
        public Builder setSurchargeTypeDescription(io.dstore.Values.stringValue value) {
          if (surchargeTypeDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            surchargeTypeDescription_ = value;
            onChanged();
          } else {
            surchargeTypeDescriptionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
         */
        public Builder setSurchargeTypeDescription(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (surchargeTypeDescriptionBuilder_ == null) {
            surchargeTypeDescription_ = builderForValue.build();
            onChanged();
          } else {
            surchargeTypeDescriptionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
         */
        public Builder mergeSurchargeTypeDescription(io.dstore.Values.stringValue value) {
          if (surchargeTypeDescriptionBuilder_ == null) {
            if (surchargeTypeDescription_ != null) {
              surchargeTypeDescription_ =
                io.dstore.Values.stringValue.newBuilder(surchargeTypeDescription_).mergeFrom(value).buildPartial();
            } else {
              surchargeTypeDescription_ = value;
            }
            onChanged();
          } else {
            surchargeTypeDescriptionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
         */
        public Builder clearSurchargeTypeDescription() {
          if (surchargeTypeDescriptionBuilder_ == null) {
            surchargeTypeDescription_ = null;
            onChanged();
          } else {
            surchargeTypeDescription_ = null;
            surchargeTypeDescriptionBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
         */
        public io.dstore.Values.stringValue.Builder getSurchargeTypeDescriptionBuilder() {
          
          onChanged();
          return getSurchargeTypeDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
         */
        public io.dstore.Values.stringValueOrBuilder getSurchargeTypeDescriptionOrBuilder() {
          if (surchargeTypeDescriptionBuilder_ != null) {
            return surchargeTypeDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return surchargeTypeDescription_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : surchargeTypeDescription_;
          }
        }
        /**
         * <pre>
         * Bezeichnung der "SurchargeTypeID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue surcharge_type_description = 10008;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getSurchargeTypeDescriptionFieldBuilder() {
          if (surchargeTypeDescriptionBuilder_ == null) {
            surchargeTypeDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getSurchargeTypeDescription(),
                    getParentForChildren(),
                    isClean());
            surchargeTypeDescription_ = null;
          }
          return surchargeTypeDescriptionBuilder_;
        }

        private io.dstore.Values.integerValue isAbsoluteValue_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> isAbsoluteValueBuilder_;
        /**
         * <pre>
         * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
         * </pre>
         *
         * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
         */
        public boolean hasIsAbsoluteValue() {
          return isAbsoluteValueBuilder_ != null || isAbsoluteValue_ != null;
        }
        /**
         * <pre>
         * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
         * </pre>
         *
         * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
         */
        public io.dstore.Values.integerValue getIsAbsoluteValue() {
          if (isAbsoluteValueBuilder_ == null) {
            return isAbsoluteValue_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : isAbsoluteValue_;
          } else {
            return isAbsoluteValueBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
         * </pre>
         *
         * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
         */
        public Builder setIsAbsoluteValue(io.dstore.Values.integerValue value) {
          if (isAbsoluteValueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            isAbsoluteValue_ = value;
            onChanged();
          } else {
            isAbsoluteValueBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
         * </pre>
         *
         * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
         */
        public Builder setIsAbsoluteValue(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (isAbsoluteValueBuilder_ == null) {
            isAbsoluteValue_ = builderForValue.build();
            onChanged();
          } else {
            isAbsoluteValueBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
         * </pre>
         *
         * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
         */
        public Builder mergeIsAbsoluteValue(io.dstore.Values.integerValue value) {
          if (isAbsoluteValueBuilder_ == null) {
            if (isAbsoluteValue_ != null) {
              isAbsoluteValue_ =
                io.dstore.Values.integerValue.newBuilder(isAbsoluteValue_).mergeFrom(value).buildPartial();
            } else {
              isAbsoluteValue_ = value;
            }
            onChanged();
          } else {
            isAbsoluteValueBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
         * </pre>
         *
         * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
         */
        public Builder clearIsAbsoluteValue() {
          if (isAbsoluteValueBuilder_ == null) {
            isAbsoluteValue_ = null;
            onChanged();
          } else {
            isAbsoluteValue_ = null;
            isAbsoluteValueBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
         * </pre>
         *
         * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
         */
        public io.dstore.Values.integerValue.Builder getIsAbsoluteValueBuilder() {
          
          onChanged();
          return getIsAbsoluteValueFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
         * </pre>
         *
         * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getIsAbsoluteValueOrBuilder() {
          if (isAbsoluteValueBuilder_ != null) {
            return isAbsoluteValueBuilder_.getMessageOrBuilder();
          } else {
            return isAbsoluteValue_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : isAbsoluteValue_;
          }
        }
        /**
         * <pre>
         * Fasst "Relative" und "Brutto" in einer Einstellung zusammen, wie die Werte also zu verstehen sind :- "0" : relativ (prozentual)- "1" : absolute Netto-Werte- "2" : absolute Brutto-Werte
         * </pre>
         *
         * <code>optional .dstore.values.integerValue is_absolute_value = 10009;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getIsAbsoluteValueFieldBuilder() {
          if (isAbsoluteValueBuilder_ == null) {
            isAbsoluteValueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getIsAbsoluteValue(),
                    getParentForChildren(),
                    isClean());
            isAbsoluteValue_ = null;
          }
          return isAbsoluteValueBuilder_;
        }

        private io.dstore.Values.integerValue surchargeTypeId_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> surchargeTypeIdBuilder_;
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
         */
        public boolean hasSurchargeTypeId() {
          return surchargeTypeIdBuilder_ != null || surchargeTypeId_ != null;
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
         */
        public io.dstore.Values.integerValue getSurchargeTypeId() {
          if (surchargeTypeIdBuilder_ == null) {
            return surchargeTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeId_;
          } else {
            return surchargeTypeIdBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
         */
        public Builder setSurchargeTypeId(io.dstore.Values.integerValue value) {
          if (surchargeTypeIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            surchargeTypeId_ = value;
            onChanged();
          } else {
            surchargeTypeIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
         */
        public Builder setSurchargeTypeId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeId_ = builderForValue.build();
            onChanged();
          } else {
            surchargeTypeIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
         */
        public Builder mergeSurchargeTypeId(io.dstore.Values.integerValue value) {
          if (surchargeTypeIdBuilder_ == null) {
            if (surchargeTypeId_ != null) {
              surchargeTypeId_ =
                io.dstore.Values.integerValue.newBuilder(surchargeTypeId_).mergeFrom(value).buildPartial();
            } else {
              surchargeTypeId_ = value;
            }
            onChanged();
          } else {
            surchargeTypeIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
         */
        public Builder clearSurchargeTypeId() {
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeId_ = null;
            onChanged();
          } else {
            surchargeTypeId_ = null;
            surchargeTypeIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
         */
        public io.dstore.Values.integerValue.Builder getSurchargeTypeIdBuilder() {
          
          onChanged();
          return getSurchargeTypeIdFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getSurchargeTypeIdOrBuilder() {
          if (surchargeTypeIdBuilder_ != null) {
            return surchargeTypeIdBuilder_.getMessageOrBuilder();
          } else {
            return surchargeTypeId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeId_;
          }
        }
        /**
         * <pre>
         * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_id = 10010;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getSurchargeTypeIdFieldBuilder() {
          if (surchargeTypeIdBuilder_ == null) {
            surchargeTypeIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getSurchargeTypeId(),
                    getParentForChildren(),
                    isClean());
            surchargeTypeId_ = null;
          }
          return surchargeTypeIdBuilder_;
        }

        private io.dstore.Values.integerValue surchargeTypeCategoryId_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> surchargeTypeCategoryIdBuilder_;
        /**
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
         */
        public boolean hasSurchargeTypeCategoryId() {
          return surchargeTypeCategoryIdBuilder_ != null || surchargeTypeCategoryId_ != null;
        }
        /**
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
         */
        public io.dstore.Values.integerValue getSurchargeTypeCategoryId() {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            return surchargeTypeCategoryId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeCategoryId_;
          } else {
            return surchargeTypeCategoryIdBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
         */
        public Builder setSurchargeTypeCategoryId(io.dstore.Values.integerValue value) {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            surchargeTypeCategoryId_ = value;
            onChanged();
          } else {
            surchargeTypeCategoryIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
         */
        public Builder setSurchargeTypeCategoryId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            surchargeTypeCategoryId_ = builderForValue.build();
            onChanged();
          } else {
            surchargeTypeCategoryIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
         */
        public Builder mergeSurchargeTypeCategoryId(io.dstore.Values.integerValue value) {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            if (surchargeTypeCategoryId_ != null) {
              surchargeTypeCategoryId_ =
                io.dstore.Values.integerValue.newBuilder(surchargeTypeCategoryId_).mergeFrom(value).buildPartial();
            } else {
              surchargeTypeCategoryId_ = value;
            }
            onChanged();
          } else {
            surchargeTypeCategoryIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
         */
        public Builder clearSurchargeTypeCategoryId() {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            surchargeTypeCategoryId_ = null;
            onChanged();
          } else {
            surchargeTypeCategoryId_ = null;
            surchargeTypeCategoryIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
         */
        public io.dstore.Values.integerValue.Builder getSurchargeTypeCategoryIdBuilder() {
          
          onChanged();
          return getSurchargeTypeCategoryIdFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getSurchargeTypeCategoryIdOrBuilder() {
          if (surchargeTypeCategoryIdBuilder_ != null) {
            return surchargeTypeCategoryIdBuilder_.getMessageOrBuilder();
          } else {
            return surchargeTypeCategoryId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : surchargeTypeCategoryId_;
          }
        }
        /**
         * <pre>
         * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue surcharge_type_category_id = 10011;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getSurchargeTypeCategoryIdFieldBuilder() {
          if (surchargeTypeCategoryIdBuilder_ == null) {
            surchargeTypeCategoryIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getSurchargeTypeCategoryId(),
                    getParentForChildren(),
                    isClean());
            surchargeTypeCategoryId_ = null;
          }
          return surchargeTypeCategoryIdBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetSurchargeTypes_Ad.Response.Row)
      }

      // @@protoc_insertion_point(class_scope:dstore.engine.om_GetSurchargeTypes_Ad.Response.Row)
      private static final io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row();
      }

      public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Row>
          PARSER = new com.google.protobuf.AbstractParser<Row>() {
        public Row parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new Row(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Row> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Row> getParserForType() {
        return PARSER;
      }

      public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int META_INFORMATION_FIELD_NUMBER = 2;
    private java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> metaInformation_;
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> getMetaInformationList() {
      return metaInformation_;
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
        getMetaInformationOrBuilderList() {
      return metaInformation_;
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public int getMetaInformationCount() {
      return metaInformation_.size();
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index) {
      return metaInformation_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
     */
    public io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
        int index) {
      return metaInformation_.get(index);
    }

    public static final int MESSAGE_FIELD_NUMBER = 3;
    private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_;
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
        getMessageOrBuilderList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public int getMessageCount() {
      return message_.size();
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
      return message_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.message.Message message = 3;</code>
     */
    public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
        int index) {
      return message_.get(index);
    }

    public static final int ROW_FIELD_NUMBER = 4;
    private java.util.List<io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row> row_;
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
     */
    public java.util.List<io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row> getRowList() {
      return row_;
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
     */
    public java.util.List<? extends io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.RowOrBuilder> 
        getRowOrBuilderList() {
      return row_;
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
     */
    public int getRowCount() {
      return row_.size();
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
     */
    public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row getRow(int index) {
      return row_.get(index);
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
     */
    public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.RowOrBuilder getRowOrBuilder(
        int index) {
      return row_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < metaInformation_.size(); i++) {
        output.writeMessage(2, metaInformation_.get(i));
      }
      for (int i = 0; i < message_.size(); i++) {
        output.writeMessage(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        output.writeMessage(4, row_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < metaInformation_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, metaInformation_.get(i));
      }
      for (int i = 0; i < message_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, row_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response)) {
        return super.equals(obj);
      }
      io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response other = (io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response) obj;

      boolean result = true;
      result = result && getMetaInformationList()
          .equals(other.getMetaInformationList());
      result = result && getMessageList()
          .equals(other.getMessageList());
      result = result && getRowList()
          .equals(other.getRowList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getMetaInformationCount() > 0) {
        hash = (37 * hash) + META_INFORMATION_FIELD_NUMBER;
        hash = (53 * hash) + getMetaInformationList().hashCode();
      }
      if (getMessageCount() > 0) {
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessageList().hashCode();
      }
      if (getRowCount() > 0) {
        hash = (37 * hash) + ROW_FIELD_NUMBER;
        hash = (53 * hash) + getRowList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.om_GetSurchargeTypes_Ad.Response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.om_GetSurchargeTypes_Ad.Response)
        io.dstore.engine.procedures.OmGetSurchargeTypesAd.ResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.class, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Builder.class);
      }

      // Construct using io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMetaInformationFieldBuilder();
          getMessageFieldBuilder();
          getRowFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (metaInformationBuilder_ == null) {
          metaInformation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          metaInformationBuilder_.clear();
        }
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          messageBuilder_.clear();
        }
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          rowBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procedures.OmGetSurchargeTypesAd.internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_descriptor;
      }

      public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response getDefaultInstanceForType() {
        return io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.getDefaultInstance();
      }

      public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response build() {
        io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response buildPartial() {
        io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response result = new io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response(this);
        int from_bitField0_ = bitField0_;
        if (metaInformationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            metaInformation_ = java.util.Collections.unmodifiableList(metaInformation_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.metaInformation_ = metaInformation_;
        } else {
          result.metaInformation_ = metaInformationBuilder_.build();
        }
        if (messageBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            message_ = java.util.Collections.unmodifiableList(message_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.message_ = message_;
        } else {
          result.message_ = messageBuilder_.build();
        }
        if (rowBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            row_ = java.util.Collections.unmodifiableList(row_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.row_ = row_;
        } else {
          result.row_ = rowBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response) {
          return mergeFrom((io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response other) {
        if (other == io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.getDefaultInstance()) return this;
        if (metaInformationBuilder_ == null) {
          if (!other.metaInformation_.isEmpty()) {
            if (metaInformation_.isEmpty()) {
              metaInformation_ = other.metaInformation_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMetaInformationIsMutable();
              metaInformation_.addAll(other.metaInformation_);
            }
            onChanged();
          }
        } else {
          if (!other.metaInformation_.isEmpty()) {
            if (metaInformationBuilder_.isEmpty()) {
              metaInformationBuilder_.dispose();
              metaInformationBuilder_ = null;
              metaInformation_ = other.metaInformation_;
              bitField0_ = (bitField0_ & ~0x00000001);
              metaInformationBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMetaInformationFieldBuilder() : null;
            } else {
              metaInformationBuilder_.addAllMessages(other.metaInformation_);
            }
          }
        }
        if (messageBuilder_ == null) {
          if (!other.message_.isEmpty()) {
            if (message_.isEmpty()) {
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMessageIsMutable();
              message_.addAll(other.message_);
            }
            onChanged();
          }
        } else {
          if (!other.message_.isEmpty()) {
            if (messageBuilder_.isEmpty()) {
              messageBuilder_.dispose();
              messageBuilder_ = null;
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
              messageBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMessageFieldBuilder() : null;
            } else {
              messageBuilder_.addAllMessages(other.message_);
            }
          }
        }
        if (rowBuilder_ == null) {
          if (!other.row_.isEmpty()) {
            if (row_.isEmpty()) {
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureRowIsMutable();
              row_.addAll(other.row_);
            }
            onChanged();
          }
        } else {
          if (!other.row_.isEmpty()) {
            if (rowBuilder_.isEmpty()) {
              rowBuilder_.dispose();
              rowBuilder_ = null;
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
              rowBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRowFieldBuilder() : null;
            } else {
              rowBuilder_.addAllMessages(other.row_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> metaInformation_ =
        java.util.Collections.emptyList();
      private void ensureMetaInformationIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          metaInformation_ = new java.util.ArrayList<io.dstore.engine.EngineMetaInformation.MetaInformation>(metaInformation_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> metaInformationBuilder_;

      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation> getMetaInformationList() {
        if (metaInformationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(metaInformation_);
        } else {
          return metaInformationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public int getMetaInformationCount() {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.size();
        } else {
          return metaInformationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation getMetaInformation(int index) {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.get(index);
        } else {
          return metaInformationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder setMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.set(index, value);
          onChanged();
        } else {
          metaInformationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder setMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.set(index, builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.add(value);
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.add(index, value);
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.add(builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          int index, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.add(index, builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder addAllMetaInformation(
          java.lang.Iterable<? extends io.dstore.engine.EngineMetaInformation.MetaInformation> values) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, metaInformation_);
          onChanged();
        } else {
          metaInformationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder clearMetaInformation() {
        if (metaInformationBuilder_ == null) {
          metaInformation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          metaInformationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public Builder removeMetaInformation(int index) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.remove(index);
          onChanged();
        } else {
          metaInformationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder getMetaInformationBuilder(
          int index) {
        return getMetaInformationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder getMetaInformationOrBuilder(
          int index) {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.get(index);  } else {
          return metaInformationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<? extends io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
           getMetaInformationOrBuilderList() {
        if (metaInformationBuilder_ != null) {
          return metaInformationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(metaInformation_);
        }
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder addMetaInformationBuilder() {
        return getMetaInformationFieldBuilder().addBuilder(
            io.dstore.engine.EngineMetaInformation.MetaInformation.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.EngineMetaInformation.MetaInformation.Builder addMetaInformationBuilder(
          int index) {
        return getMetaInformationFieldBuilder().addBuilder(
            index, io.dstore.engine.EngineMetaInformation.MetaInformation.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.metainformation.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<io.dstore.engine.EngineMetaInformation.MetaInformation.Builder> 
           getMetaInformationBuilderList() {
        return getMetaInformationFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder> 
          getMetaInformationFieldBuilder() {
        if (metaInformationBuilder_ == null) {
          metaInformationBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.dstore.engine.EngineMetaInformation.MetaInformation, io.dstore.engine.EngineMetaInformation.MetaInformation.Builder, io.dstore.engine.EngineMetaInformation.MetaInformationOrBuilder>(
                  metaInformation_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          metaInformation_ = null;
        }
        return metaInformationBuilder_;
      }

      private java.util.List<io.dstore.engine.ProcedureMessage.Message> message_ =
        java.util.Collections.emptyList();
      private void ensureMessageIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = new java.util.ArrayList<io.dstore.engine.ProcedureMessage.Message>(message_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> messageBuilder_;

      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message> getMessageList() {
        if (messageBuilder_ == null) {
          return java.util.Collections.unmodifiableList(message_);
        } else {
          return messageBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public int getMessageCount() {
        if (messageBuilder_ == null) {
          return message_.size();
        } else {
          return messageBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message getMessage(int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);
        } else {
          return messageBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.set(index, value);
          onChanged();
        } else {
          messageBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.set(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(value);
          onChanged();
        } else {
          messageBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(index, value);
          onChanged();
        } else {
          messageBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.ProcedureMessage.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder addAllMessage(
          java.lang.Iterable<? extends io.dstore.engine.ProcedureMessage.Message> values) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, message_);
          onChanged();
        } else {
          messageBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder clearMessage() {
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          messageBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public Builder removeMessage(int index) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.remove(index);
          onChanged();
        } else {
          messageBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder getMessageBuilder(
          int index) {
        return getMessageFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.MessageOrBuilder getMessageOrBuilder(
          int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);  } else {
          return messageBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<? extends io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
           getMessageOrBuilderList() {
        if (messageBuilder_ != null) {
          return messageBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(message_);
        }
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder() {
        return getMessageFieldBuilder().addBuilder(
            io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public io.dstore.engine.ProcedureMessage.Message.Builder addMessageBuilder(
          int index) {
        return getMessageFieldBuilder().addBuilder(
            index, io.dstore.engine.ProcedureMessage.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.message.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.ProcedureMessage.Message.Builder> 
           getMessageBuilderList() {
        return getMessageFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder> 
          getMessageFieldBuilder() {
        if (messageBuilder_ == null) {
          messageBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.dstore.engine.ProcedureMessage.Message, io.dstore.engine.ProcedureMessage.Message.Builder, io.dstore.engine.ProcedureMessage.MessageOrBuilder>(
                  message_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        return messageBuilder_;
      }

      private java.util.List<io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row> row_ =
        java.util.Collections.emptyList();
      private void ensureRowIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = new java.util.ArrayList<io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row>(row_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.Builder, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.RowOrBuilder> rowBuilder_;

      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public java.util.List<io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row> getRowList() {
        if (rowBuilder_ == null) {
          return java.util.Collections.unmodifiableList(row_);
        } else {
          return rowBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public int getRowCount() {
        if (rowBuilder_ == null) {
          return row_.size();
        } else {
          return rowBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row getRow(int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);
        } else {
          return rowBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public Builder setRow(
          int index, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.set(index, value);
          onChanged();
        } else {
          rowBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public Builder setRow(
          int index, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.set(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public Builder addRow(io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(value);
          onChanged();
        } else {
          rowBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public Builder addRow(
          int index, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(index, value);
          onChanged();
        } else {
          rowBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public Builder addRow(
          io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public Builder addRow(
          int index, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public Builder addAllRow(
          java.lang.Iterable<? extends io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row> values) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, row_);
          onChanged();
        } else {
          rowBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public Builder clearRow() {
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          rowBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public Builder removeRow(int index) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.remove(index);
          onChanged();
        } else {
          rowBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.Builder getRowBuilder(
          int index) {
        return getRowFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.RowOrBuilder getRowOrBuilder(
          int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);  } else {
          return rowBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public java.util.List<? extends io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.RowOrBuilder> 
           getRowOrBuilderList() {
        if (rowBuilder_ != null) {
          return rowBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(row_);
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.Builder addRowBuilder() {
        return getRowFieldBuilder().addBuilder(
            io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.getDefaultInstance());
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.Builder addRowBuilder(
          int index) {
        return getRowFieldBuilder().addBuilder(
            index, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.getDefaultInstance());
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.om_GetSurchargeTypes_Ad.Response.Row row = 4;</code>
       */
      public java.util.List<io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.Builder> 
           getRowBuilderList() {
        return getRowFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.Builder, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.RowOrBuilder> 
          getRowFieldBuilder() {
        if (rowBuilder_ == null) {
          rowBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.Row.Builder, io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response.RowOrBuilder>(
                  row_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          row_ = null;
        }
        return rowBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.om_GetSurchargeTypes_Ad.Response)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.om_GetSurchargeTypes_Ad.Response)
    private static final io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response();
    }

    public static io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Response>
        PARSER = new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Response(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Response> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procedures.OmGetSurchargeTypesAd.Response getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Parameters_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Parameters_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_Row_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_Row_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n6dstore/engine/procedures/om_GetSurchar" +
      "geTypes_Ad.proto\022%dstore.engine.om_GetSu" +
      "rchargeTypes_Ad\032\023dstore/values.proto\032\033ds" +
      "tore/engine/message.proto\032#dstore/engine" +
      "/metainformation.proto\"\304\001\n\nParameters\0220\n" +
      "\013language_id\030\001 \001(\0132\033.dstore.values.integ" +
      "erValue\022\031\n\020language_id_null\030\351\007 \001(\010\022?\n\032su" +
      "rcharge_type_category_id\030\002 \001(\0132\033.dstore." +
      "values.integerValue\022(\n\037surcharge_type_ca" +
      "tegory_id_null\030\352\007 \001(\010\"\310\006\n\010Response\022H\n\020me",
      "ta_information\030\002 \003(\0132..dstore.engine.met" +
      "ainformation.MetaInformation\022/\n\007message\030" +
      "\003 \003(\0132\036.dstore.engine.message.Message\022@\n" +
      "\003row\030\004 \003(\01323.dstore.engine.om_GetSurchar" +
      "geTypes_Ad.Response.Row\032\376\004\n\003Row\022\017\n\006row_i" +
      "d\030\220N \001(\005\022.\n\010relative\030\221N \001(\0132\033.dstore.val" +
      "ues.booleanValue\022-\n\007unit_id\030\222N \001(\0132\033.dst" +
      "ore.values.integerValue\022:\n\024category_prio" +
      "rity_no\030\223N \001(\0132\033.dstore.values.integerVa" +
      "lue\022;\n\026translated_description\030\224N \001(\0132\032.d",
      "store.values.stringValue\022,\n\006brutto\030\225N \001(" +
      "\0132\033.dstore.values.booleanValue\0220\n\013unit_s" +
      "ymbol\030\226N \001(\0132\032.dstore.values.stringValue" +
      "\0229\n\024category_description\030\227N \001(\0132\032.dstore" +
      ".values.stringValue\022?\n\032surcharge_type_de" +
      "scription\030\230N \001(\0132\032.dstore.values.stringV" +
      "alue\0227\n\021is_absolute_value\030\231N \001(\0132\033.dstor" +
      "e.values.integerValue\0227\n\021surcharge_type_" +
      "id\030\232N \001(\0132\033.dstore.values.integerValue\022@" +
      "\n\032surcharge_type_category_id\030\233N \001(\0132\033.ds",
      "tore.values.integerValueBX\n\033io.dstore.en" +
      "gine.proceduresZ9gosdk.dstore.de/engine/" +
      "procedures/om_GetSurchargeTypes_Adb\006prot" +
      "o3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.dstore.Values.getDescriptor(),
          io.dstore.engine.ProcedureMessage.getDescriptor(),
          io.dstore.engine.EngineMetaInformation.getDescriptor(),
        }, assigner);
    internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Parameters_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Parameters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Parameters_descriptor,
        new java.lang.String[] { "LanguageId", "LanguageIdNull", "SurchargeTypeCategoryId", "SurchargeTypeCategoryIdNull", });
    internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_descriptor,
        new java.lang.String[] { "MetaInformation", "Message", "Row", });
    internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_Row_descriptor =
      internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_descriptor.getNestedTypes().get(0);
    internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_Row_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dstore_engine_om_GetSurchargeTypes_Ad_Response_Row_descriptor,
        new java.lang.String[] { "RowId", "Relative", "UnitId", "CategoryPriorityNo", "TranslatedDescription", "Brutto", "UnitSymbol", "CategoryDescription", "SurchargeTypeDescription", "IsAbsoluteValue", "SurchargeTypeId", "SurchargeTypeCategoryId", });
    io.dstore.Values.getDescriptor();
    io.dstore.engine.ProcedureMessage.getDescriptor();
    io.dstore.engine.EngineMetaInformation.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
