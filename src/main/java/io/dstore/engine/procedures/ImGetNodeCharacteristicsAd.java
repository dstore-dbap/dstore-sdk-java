// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dstore/engine/procedures/im_GetNodeCharacteristics_Ad.proto

package io.dstore.engine.procedures;

public final class ImGetNodeCharacteristicsAd {
  private ImGetNodeCharacteristicsAd() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ParametersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.im_GetNodeCharacteristics_Ad.Parameters)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
     */
    boolean hasIncludeCurrencyInformation();
    /**
     * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
     */
    io.dstore.Values.booleanValue getIncludeCurrencyInformation();
    /**
     * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
     */
    io.dstore.Values.booleanValueOrBuilder getIncludeCurrencyInformationOrBuilder();

    /**
     * <code>optional bool include_currency_information_null = 1001;</code>
     */
    boolean getIncludeCurrencyInformationNull();

    /**
     * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
     */
    boolean hasIncludeCurrencyInformations();
    /**
     * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
     */
    io.dstore.Values.booleanValue getIncludeCurrencyInformations();
    /**
     * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
     */
    io.dstore.Values.booleanValueOrBuilder getIncludeCurrencyInformationsOrBuilder();

    /**
     * <code>optional bool include_currency_informations_null = 1002;</code>
     */
    boolean getIncludeCurrencyInformationsNull();

    /**
     * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
     */
    boolean hasOnlyIdsInTableOneId();
    /**
     * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
     */
    io.dstore.Values.booleanValue getOnlyIdsInTableOneId();
    /**
     * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
     */
    io.dstore.Values.booleanValueOrBuilder getOnlyIdsInTableOneIdOrBuilder();

    /**
     * <code>optional bool only_ids_in_table_one_id_null = 1003;</code>
     */
    boolean getOnlyIdsInTableOneIdNull();

    /**
     * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
     */
    boolean hasNodeCharacCategoryId();
    /**
     * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
     */
    io.dstore.Values.integerValue getNodeCharacCategoryId();
    /**
     * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
     */
    io.dstore.Values.integerValueOrBuilder getNodeCharacCategoryIdOrBuilder();

    /**
     * <code>optional bool node_charac_category_id_null = 1004;</code>
     */
    boolean getNodeCharacCategoryIdNull();

    /**
     * <code>optional .dstore.values.integerValue sort_order = 5;</code>
     */
    boolean hasSortOrder();
    /**
     * <code>optional .dstore.values.integerValue sort_order = 5;</code>
     */
    io.dstore.Values.integerValue getSortOrder();
    /**
     * <code>optional .dstore.values.integerValue sort_order = 5;</code>
     */
    io.dstore.Values.integerValueOrBuilder getSortOrderOrBuilder();

    /**
     * <code>optional bool sort_order_null = 1005;</code>
     */
    boolean getSortOrderNull();

    /**
     * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
     */
    boolean hasGetCategoryInformation();
    /**
     * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
     */
    io.dstore.Values.booleanValue getGetCategoryInformation();
    /**
     * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
     */
    io.dstore.Values.booleanValueOrBuilder getGetCategoryInformationOrBuilder();

    /**
     * <code>optional bool get_category_information_null = 1006;</code>
     */
    boolean getGetCategoryInformationNull();
  }
  /**
   * Protobuf type {@code dstore.engine.im_GetNodeCharacteristics_Ad.Parameters}
   */
  public  static final class Parameters extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dstore.engine.im_GetNodeCharacteristics_Ad.Parameters)
      ParametersOrBuilder {
    // Use Parameters.newBuilder() to construct.
    private Parameters(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Parameters() {
      includeCurrencyInformationNull_ = false;
      includeCurrencyInformationsNull_ = false;
      onlyIdsInTableOneIdNull_ = false;
      nodeCharacCategoryIdNull_ = false;
      sortOrderNull_ = false;
      getCategoryInformationNull_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Parameters(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.dstore.Values.booleanValue.Builder subBuilder = null;
              if (includeCurrencyInformation_ != null) {
                subBuilder = includeCurrencyInformation_.toBuilder();
              }
              includeCurrencyInformation_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(includeCurrencyInformation_);
                includeCurrencyInformation_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.dstore.Values.booleanValue.Builder subBuilder = null;
              if (includeCurrencyInformations_ != null) {
                subBuilder = includeCurrencyInformations_.toBuilder();
              }
              includeCurrencyInformations_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(includeCurrencyInformations_);
                includeCurrencyInformations_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.dstore.Values.booleanValue.Builder subBuilder = null;
              if (onlyIdsInTableOneId_ != null) {
                subBuilder = onlyIdsInTableOneId_.toBuilder();
              }
              onlyIdsInTableOneId_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(onlyIdsInTableOneId_);
                onlyIdsInTableOneId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              io.dstore.Values.integerValue.Builder subBuilder = null;
              if (nodeCharacCategoryId_ != null) {
                subBuilder = nodeCharacCategoryId_.toBuilder();
              }
              nodeCharacCategoryId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(nodeCharacCategoryId_);
                nodeCharacCategoryId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              io.dstore.Values.integerValue.Builder subBuilder = null;
              if (sortOrder_ != null) {
                subBuilder = sortOrder_.toBuilder();
              }
              sortOrder_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sortOrder_);
                sortOrder_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              io.dstore.Values.booleanValue.Builder subBuilder = null;
              if (getCategoryInformation_ != null) {
                subBuilder = getCategoryInformation_.toBuilder();
              }
              getCategoryInformation_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(getCategoryInformation_);
                getCategoryInformation_ = subBuilder.buildPartial();
              }

              break;
            }
            case 8008: {

              includeCurrencyInformationNull_ = input.readBool();
              break;
            }
            case 8016: {

              includeCurrencyInformationsNull_ = input.readBool();
              break;
            }
            case 8024: {

              onlyIdsInTableOneIdNull_ = input.readBool();
              break;
            }
            case 8032: {

              nodeCharacCategoryIdNull_ = input.readBool();
              break;
            }
            case 8040: {

              sortOrderNull_ = input.readBool();
              break;
            }
            case 8048: {

              getCategoryInformationNull_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Parameters_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Parameters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters.class, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters.Builder.class);
    }

    public static final int INCLUDE_CURRENCY_INFORMATION_FIELD_NUMBER = 1;
    private io.dstore.Values.booleanValue includeCurrencyInformation_;
    /**
     * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
     */
    public boolean hasIncludeCurrencyInformation() {
      return includeCurrencyInformation_ != null;
    }
    /**
     * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
     */
    public io.dstore.Values.booleanValue getIncludeCurrencyInformation() {
      return includeCurrencyInformation_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : includeCurrencyInformation_;
    }
    /**
     * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
     */
    public io.dstore.Values.booleanValueOrBuilder getIncludeCurrencyInformationOrBuilder() {
      return getIncludeCurrencyInformation();
    }

    public static final int INCLUDE_CURRENCY_INFORMATION_NULL_FIELD_NUMBER = 1001;
    private boolean includeCurrencyInformationNull_;
    /**
     * <code>optional bool include_currency_information_null = 1001;</code>
     */
    public boolean getIncludeCurrencyInformationNull() {
      return includeCurrencyInformationNull_;
    }

    public static final int INCLUDE_CURRENCY_INFORMATIONS_FIELD_NUMBER = 2;
    private io.dstore.Values.booleanValue includeCurrencyInformations_;
    /**
     * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
     */
    public boolean hasIncludeCurrencyInformations() {
      return includeCurrencyInformations_ != null;
    }
    /**
     * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
     */
    public io.dstore.Values.booleanValue getIncludeCurrencyInformations() {
      return includeCurrencyInformations_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : includeCurrencyInformations_;
    }
    /**
     * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
     */
    public io.dstore.Values.booleanValueOrBuilder getIncludeCurrencyInformationsOrBuilder() {
      return getIncludeCurrencyInformations();
    }

    public static final int INCLUDE_CURRENCY_INFORMATIONS_NULL_FIELD_NUMBER = 1002;
    private boolean includeCurrencyInformationsNull_;
    /**
     * <code>optional bool include_currency_informations_null = 1002;</code>
     */
    public boolean getIncludeCurrencyInformationsNull() {
      return includeCurrencyInformationsNull_;
    }

    public static final int ONLY_IDS_IN_TABLE_ONE_ID_FIELD_NUMBER = 3;
    private io.dstore.Values.booleanValue onlyIdsInTableOneId_;
    /**
     * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
     */
    public boolean hasOnlyIdsInTableOneId() {
      return onlyIdsInTableOneId_ != null;
    }
    /**
     * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
     */
    public io.dstore.Values.booleanValue getOnlyIdsInTableOneId() {
      return onlyIdsInTableOneId_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : onlyIdsInTableOneId_;
    }
    /**
     * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
     */
    public io.dstore.Values.booleanValueOrBuilder getOnlyIdsInTableOneIdOrBuilder() {
      return getOnlyIdsInTableOneId();
    }

    public static final int ONLY_IDS_IN_TABLE_ONE_ID_NULL_FIELD_NUMBER = 1003;
    private boolean onlyIdsInTableOneIdNull_;
    /**
     * <code>optional bool only_ids_in_table_one_id_null = 1003;</code>
     */
    public boolean getOnlyIdsInTableOneIdNull() {
      return onlyIdsInTableOneIdNull_;
    }

    public static final int NODE_CHARAC_CATEGORY_ID_FIELD_NUMBER = 4;
    private io.dstore.Values.integerValue nodeCharacCategoryId_;
    /**
     * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
     */
    public boolean hasNodeCharacCategoryId() {
      return nodeCharacCategoryId_ != null;
    }
    /**
     * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
     */
    public io.dstore.Values.integerValue getNodeCharacCategoryId() {
      return nodeCharacCategoryId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : nodeCharacCategoryId_;
    }
    /**
     * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
     */
    public io.dstore.Values.integerValueOrBuilder getNodeCharacCategoryIdOrBuilder() {
      return getNodeCharacCategoryId();
    }

    public static final int NODE_CHARAC_CATEGORY_ID_NULL_FIELD_NUMBER = 1004;
    private boolean nodeCharacCategoryIdNull_;
    /**
     * <code>optional bool node_charac_category_id_null = 1004;</code>
     */
    public boolean getNodeCharacCategoryIdNull() {
      return nodeCharacCategoryIdNull_;
    }

    public static final int SORT_ORDER_FIELD_NUMBER = 5;
    private io.dstore.Values.integerValue sortOrder_;
    /**
     * <code>optional .dstore.values.integerValue sort_order = 5;</code>
     */
    public boolean hasSortOrder() {
      return sortOrder_ != null;
    }
    /**
     * <code>optional .dstore.values.integerValue sort_order = 5;</code>
     */
    public io.dstore.Values.integerValue getSortOrder() {
      return sortOrder_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : sortOrder_;
    }
    /**
     * <code>optional .dstore.values.integerValue sort_order = 5;</code>
     */
    public io.dstore.Values.integerValueOrBuilder getSortOrderOrBuilder() {
      return getSortOrder();
    }

    public static final int SORT_ORDER_NULL_FIELD_NUMBER = 1005;
    private boolean sortOrderNull_;
    /**
     * <code>optional bool sort_order_null = 1005;</code>
     */
    public boolean getSortOrderNull() {
      return sortOrderNull_;
    }

    public static final int GET_CATEGORY_INFORMATION_FIELD_NUMBER = 6;
    private io.dstore.Values.booleanValue getCategoryInformation_;
    /**
     * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
     */
    public boolean hasGetCategoryInformation() {
      return getCategoryInformation_ != null;
    }
    /**
     * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
     */
    public io.dstore.Values.booleanValue getGetCategoryInformation() {
      return getCategoryInformation_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : getCategoryInformation_;
    }
    /**
     * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
     */
    public io.dstore.Values.booleanValueOrBuilder getGetCategoryInformationOrBuilder() {
      return getGetCategoryInformation();
    }

    public static final int GET_CATEGORY_INFORMATION_NULL_FIELD_NUMBER = 1006;
    private boolean getCategoryInformationNull_;
    /**
     * <code>optional bool get_category_information_null = 1006;</code>
     */
    public boolean getGetCategoryInformationNull() {
      return getCategoryInformationNull_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (includeCurrencyInformation_ != null) {
        output.writeMessage(1, getIncludeCurrencyInformation());
      }
      if (includeCurrencyInformations_ != null) {
        output.writeMessage(2, getIncludeCurrencyInformations());
      }
      if (onlyIdsInTableOneId_ != null) {
        output.writeMessage(3, getOnlyIdsInTableOneId());
      }
      if (nodeCharacCategoryId_ != null) {
        output.writeMessage(4, getNodeCharacCategoryId());
      }
      if (sortOrder_ != null) {
        output.writeMessage(5, getSortOrder());
      }
      if (getCategoryInformation_ != null) {
        output.writeMessage(6, getGetCategoryInformation());
      }
      if (includeCurrencyInformationNull_ != false) {
        output.writeBool(1001, includeCurrencyInformationNull_);
      }
      if (includeCurrencyInformationsNull_ != false) {
        output.writeBool(1002, includeCurrencyInformationsNull_);
      }
      if (onlyIdsInTableOneIdNull_ != false) {
        output.writeBool(1003, onlyIdsInTableOneIdNull_);
      }
      if (nodeCharacCategoryIdNull_ != false) {
        output.writeBool(1004, nodeCharacCategoryIdNull_);
      }
      if (sortOrderNull_ != false) {
        output.writeBool(1005, sortOrderNull_);
      }
      if (getCategoryInformationNull_ != false) {
        output.writeBool(1006, getCategoryInformationNull_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (includeCurrencyInformation_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getIncludeCurrencyInformation());
      }
      if (includeCurrencyInformations_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getIncludeCurrencyInformations());
      }
      if (onlyIdsInTableOneId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getOnlyIdsInTableOneId());
      }
      if (nodeCharacCategoryId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getNodeCharacCategoryId());
      }
      if (sortOrder_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getSortOrder());
      }
      if (getCategoryInformation_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getGetCategoryInformation());
      }
      if (includeCurrencyInformationNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1001, includeCurrencyInformationNull_);
      }
      if (includeCurrencyInformationsNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1002, includeCurrencyInformationsNull_);
      }
      if (onlyIdsInTableOneIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1003, onlyIdsInTableOneIdNull_);
      }
      if (nodeCharacCategoryIdNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1004, nodeCharacCategoryIdNull_);
      }
      if (sortOrderNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1005, sortOrderNull_);
      }
      if (getCategoryInformationNull_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1006, getCategoryInformationNull_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters)) {
        return super.equals(obj);
      }
      io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters other = (io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters) obj;

      boolean result = true;
      result = result && (hasIncludeCurrencyInformation() == other.hasIncludeCurrencyInformation());
      if (hasIncludeCurrencyInformation()) {
        result = result && getIncludeCurrencyInformation()
            .equals(other.getIncludeCurrencyInformation());
      }
      result = result && (getIncludeCurrencyInformationNull()
          == other.getIncludeCurrencyInformationNull());
      result = result && (hasIncludeCurrencyInformations() == other.hasIncludeCurrencyInformations());
      if (hasIncludeCurrencyInformations()) {
        result = result && getIncludeCurrencyInformations()
            .equals(other.getIncludeCurrencyInformations());
      }
      result = result && (getIncludeCurrencyInformationsNull()
          == other.getIncludeCurrencyInformationsNull());
      result = result && (hasOnlyIdsInTableOneId() == other.hasOnlyIdsInTableOneId());
      if (hasOnlyIdsInTableOneId()) {
        result = result && getOnlyIdsInTableOneId()
            .equals(other.getOnlyIdsInTableOneId());
      }
      result = result && (getOnlyIdsInTableOneIdNull()
          == other.getOnlyIdsInTableOneIdNull());
      result = result && (hasNodeCharacCategoryId() == other.hasNodeCharacCategoryId());
      if (hasNodeCharacCategoryId()) {
        result = result && getNodeCharacCategoryId()
            .equals(other.getNodeCharacCategoryId());
      }
      result = result && (getNodeCharacCategoryIdNull()
          == other.getNodeCharacCategoryIdNull());
      result = result && (hasSortOrder() == other.hasSortOrder());
      if (hasSortOrder()) {
        result = result && getSortOrder()
            .equals(other.getSortOrder());
      }
      result = result && (getSortOrderNull()
          == other.getSortOrderNull());
      result = result && (hasGetCategoryInformation() == other.hasGetCategoryInformation());
      if (hasGetCategoryInformation()) {
        result = result && getGetCategoryInformation()
            .equals(other.getGetCategoryInformation());
      }
      result = result && (getGetCategoryInformationNull()
          == other.getGetCategoryInformationNull());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasIncludeCurrencyInformation()) {
        hash = (37 * hash) + INCLUDE_CURRENCY_INFORMATION_FIELD_NUMBER;
        hash = (53 * hash) + getIncludeCurrencyInformation().hashCode();
      }
      hash = (37 * hash) + INCLUDE_CURRENCY_INFORMATION_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIncludeCurrencyInformationNull());
      if (hasIncludeCurrencyInformations()) {
        hash = (37 * hash) + INCLUDE_CURRENCY_INFORMATIONS_FIELD_NUMBER;
        hash = (53 * hash) + getIncludeCurrencyInformations().hashCode();
      }
      hash = (37 * hash) + INCLUDE_CURRENCY_INFORMATIONS_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIncludeCurrencyInformationsNull());
      if (hasOnlyIdsInTableOneId()) {
        hash = (37 * hash) + ONLY_IDS_IN_TABLE_ONE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getOnlyIdsInTableOneId().hashCode();
      }
      hash = (37 * hash) + ONLY_IDS_IN_TABLE_ONE_ID_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getOnlyIdsInTableOneIdNull());
      if (hasNodeCharacCategoryId()) {
        hash = (37 * hash) + NODE_CHARAC_CATEGORY_ID_FIELD_NUMBER;
        hash = (53 * hash) + getNodeCharacCategoryId().hashCode();
      }
      hash = (37 * hash) + NODE_CHARAC_CATEGORY_ID_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getNodeCharacCategoryIdNull());
      if (hasSortOrder()) {
        hash = (37 * hash) + SORT_ORDER_FIELD_NUMBER;
        hash = (53 * hash) + getSortOrder().hashCode();
      }
      hash = (37 * hash) + SORT_ORDER_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getSortOrderNull());
      if (hasGetCategoryInformation()) {
        hash = (37 * hash) + GET_CATEGORY_INFORMATION_FIELD_NUMBER;
        hash = (53 * hash) + getGetCategoryInformation().hashCode();
      }
      hash = (37 * hash) + GET_CATEGORY_INFORMATION_NULL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getGetCategoryInformationNull());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.im_GetNodeCharacteristics_Ad.Parameters}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.im_GetNodeCharacteristics_Ad.Parameters)
        io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.ParametersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Parameters_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Parameters_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters.class, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters.Builder.class);
      }

      // Construct using io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (includeCurrencyInformationBuilder_ == null) {
          includeCurrencyInformation_ = null;
        } else {
          includeCurrencyInformation_ = null;
          includeCurrencyInformationBuilder_ = null;
        }
        includeCurrencyInformationNull_ = false;

        if (includeCurrencyInformationsBuilder_ == null) {
          includeCurrencyInformations_ = null;
        } else {
          includeCurrencyInformations_ = null;
          includeCurrencyInformationsBuilder_ = null;
        }
        includeCurrencyInformationsNull_ = false;

        if (onlyIdsInTableOneIdBuilder_ == null) {
          onlyIdsInTableOneId_ = null;
        } else {
          onlyIdsInTableOneId_ = null;
          onlyIdsInTableOneIdBuilder_ = null;
        }
        onlyIdsInTableOneIdNull_ = false;

        if (nodeCharacCategoryIdBuilder_ == null) {
          nodeCharacCategoryId_ = null;
        } else {
          nodeCharacCategoryId_ = null;
          nodeCharacCategoryIdBuilder_ = null;
        }
        nodeCharacCategoryIdNull_ = false;

        if (sortOrderBuilder_ == null) {
          sortOrder_ = null;
        } else {
          sortOrder_ = null;
          sortOrderBuilder_ = null;
        }
        sortOrderNull_ = false;

        if (getCategoryInformationBuilder_ == null) {
          getCategoryInformation_ = null;
        } else {
          getCategoryInformation_ = null;
          getCategoryInformationBuilder_ = null;
        }
        getCategoryInformationNull_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Parameters_descriptor;
      }

      public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters getDefaultInstanceForType() {
        return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters.getDefaultInstance();
      }

      public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters build() {
        io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters buildPartial() {
        io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters result = new io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters(this);
        if (includeCurrencyInformationBuilder_ == null) {
          result.includeCurrencyInformation_ = includeCurrencyInformation_;
        } else {
          result.includeCurrencyInformation_ = includeCurrencyInformationBuilder_.build();
        }
        result.includeCurrencyInformationNull_ = includeCurrencyInformationNull_;
        if (includeCurrencyInformationsBuilder_ == null) {
          result.includeCurrencyInformations_ = includeCurrencyInformations_;
        } else {
          result.includeCurrencyInformations_ = includeCurrencyInformationsBuilder_.build();
        }
        result.includeCurrencyInformationsNull_ = includeCurrencyInformationsNull_;
        if (onlyIdsInTableOneIdBuilder_ == null) {
          result.onlyIdsInTableOneId_ = onlyIdsInTableOneId_;
        } else {
          result.onlyIdsInTableOneId_ = onlyIdsInTableOneIdBuilder_.build();
        }
        result.onlyIdsInTableOneIdNull_ = onlyIdsInTableOneIdNull_;
        if (nodeCharacCategoryIdBuilder_ == null) {
          result.nodeCharacCategoryId_ = nodeCharacCategoryId_;
        } else {
          result.nodeCharacCategoryId_ = nodeCharacCategoryIdBuilder_.build();
        }
        result.nodeCharacCategoryIdNull_ = nodeCharacCategoryIdNull_;
        if (sortOrderBuilder_ == null) {
          result.sortOrder_ = sortOrder_;
        } else {
          result.sortOrder_ = sortOrderBuilder_.build();
        }
        result.sortOrderNull_ = sortOrderNull_;
        if (getCategoryInformationBuilder_ == null) {
          result.getCategoryInformation_ = getCategoryInformation_;
        } else {
          result.getCategoryInformation_ = getCategoryInformationBuilder_.build();
        }
        result.getCategoryInformationNull_ = getCategoryInformationNull_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters) {
          return mergeFrom((io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters other) {
        if (other == io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters.getDefaultInstance()) return this;
        if (other.hasIncludeCurrencyInformation()) {
          mergeIncludeCurrencyInformation(other.getIncludeCurrencyInformation());
        }
        if (other.getIncludeCurrencyInformationNull() != false) {
          setIncludeCurrencyInformationNull(other.getIncludeCurrencyInformationNull());
        }
        if (other.hasIncludeCurrencyInformations()) {
          mergeIncludeCurrencyInformations(other.getIncludeCurrencyInformations());
        }
        if (other.getIncludeCurrencyInformationsNull() != false) {
          setIncludeCurrencyInformationsNull(other.getIncludeCurrencyInformationsNull());
        }
        if (other.hasOnlyIdsInTableOneId()) {
          mergeOnlyIdsInTableOneId(other.getOnlyIdsInTableOneId());
        }
        if (other.getOnlyIdsInTableOneIdNull() != false) {
          setOnlyIdsInTableOneIdNull(other.getOnlyIdsInTableOneIdNull());
        }
        if (other.hasNodeCharacCategoryId()) {
          mergeNodeCharacCategoryId(other.getNodeCharacCategoryId());
        }
        if (other.getNodeCharacCategoryIdNull() != false) {
          setNodeCharacCategoryIdNull(other.getNodeCharacCategoryIdNull());
        }
        if (other.hasSortOrder()) {
          mergeSortOrder(other.getSortOrder());
        }
        if (other.getSortOrderNull() != false) {
          setSortOrderNull(other.getSortOrderNull());
        }
        if (other.hasGetCategoryInformation()) {
          mergeGetCategoryInformation(other.getGetCategoryInformation());
        }
        if (other.getGetCategoryInformationNull() != false) {
          setGetCategoryInformationNull(other.getGetCategoryInformationNull());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.dstore.Values.booleanValue includeCurrencyInformation_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> includeCurrencyInformationBuilder_;
      /**
       * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
       */
      public boolean hasIncludeCurrencyInformation() {
        return includeCurrencyInformationBuilder_ != null || includeCurrencyInformation_ != null;
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
       */
      public io.dstore.Values.booleanValue getIncludeCurrencyInformation() {
        if (includeCurrencyInformationBuilder_ == null) {
          return includeCurrencyInformation_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : includeCurrencyInformation_;
        } else {
          return includeCurrencyInformationBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
       */
      public Builder setIncludeCurrencyInformation(io.dstore.Values.booleanValue value) {
        if (includeCurrencyInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          includeCurrencyInformation_ = value;
          onChanged();
        } else {
          includeCurrencyInformationBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
       */
      public Builder setIncludeCurrencyInformation(
          io.dstore.Values.booleanValue.Builder builderForValue) {
        if (includeCurrencyInformationBuilder_ == null) {
          includeCurrencyInformation_ = builderForValue.build();
          onChanged();
        } else {
          includeCurrencyInformationBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
       */
      public Builder mergeIncludeCurrencyInformation(io.dstore.Values.booleanValue value) {
        if (includeCurrencyInformationBuilder_ == null) {
          if (includeCurrencyInformation_ != null) {
            includeCurrencyInformation_ =
              io.dstore.Values.booleanValue.newBuilder(includeCurrencyInformation_).mergeFrom(value).buildPartial();
          } else {
            includeCurrencyInformation_ = value;
          }
          onChanged();
        } else {
          includeCurrencyInformationBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
       */
      public Builder clearIncludeCurrencyInformation() {
        if (includeCurrencyInformationBuilder_ == null) {
          includeCurrencyInformation_ = null;
          onChanged();
        } else {
          includeCurrencyInformation_ = null;
          includeCurrencyInformationBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
       */
      public io.dstore.Values.booleanValue.Builder getIncludeCurrencyInformationBuilder() {
        
        onChanged();
        return getIncludeCurrencyInformationFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getIncludeCurrencyInformationOrBuilder() {
        if (includeCurrencyInformationBuilder_ != null) {
          return includeCurrencyInformationBuilder_.getMessageOrBuilder();
        } else {
          return includeCurrencyInformation_ == null ?
              io.dstore.Values.booleanValue.getDefaultInstance() : includeCurrencyInformation_;
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_information = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
          getIncludeCurrencyInformationFieldBuilder() {
        if (includeCurrencyInformationBuilder_ == null) {
          includeCurrencyInformationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                  getIncludeCurrencyInformation(),
                  getParentForChildren(),
                  isClean());
          includeCurrencyInformation_ = null;
        }
        return includeCurrencyInformationBuilder_;
      }

      private boolean includeCurrencyInformationNull_ ;
      /**
       * <code>optional bool include_currency_information_null = 1001;</code>
       */
      public boolean getIncludeCurrencyInformationNull() {
        return includeCurrencyInformationNull_;
      }
      /**
       * <code>optional bool include_currency_information_null = 1001;</code>
       */
      public Builder setIncludeCurrencyInformationNull(boolean value) {
        
        includeCurrencyInformationNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool include_currency_information_null = 1001;</code>
       */
      public Builder clearIncludeCurrencyInformationNull() {
        
        includeCurrencyInformationNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.booleanValue includeCurrencyInformations_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> includeCurrencyInformationsBuilder_;
      /**
       * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
       */
      public boolean hasIncludeCurrencyInformations() {
        return includeCurrencyInformationsBuilder_ != null || includeCurrencyInformations_ != null;
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
       */
      public io.dstore.Values.booleanValue getIncludeCurrencyInformations() {
        if (includeCurrencyInformationsBuilder_ == null) {
          return includeCurrencyInformations_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : includeCurrencyInformations_;
        } else {
          return includeCurrencyInformationsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
       */
      public Builder setIncludeCurrencyInformations(io.dstore.Values.booleanValue value) {
        if (includeCurrencyInformationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          includeCurrencyInformations_ = value;
          onChanged();
        } else {
          includeCurrencyInformationsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
       */
      public Builder setIncludeCurrencyInformations(
          io.dstore.Values.booleanValue.Builder builderForValue) {
        if (includeCurrencyInformationsBuilder_ == null) {
          includeCurrencyInformations_ = builderForValue.build();
          onChanged();
        } else {
          includeCurrencyInformationsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
       */
      public Builder mergeIncludeCurrencyInformations(io.dstore.Values.booleanValue value) {
        if (includeCurrencyInformationsBuilder_ == null) {
          if (includeCurrencyInformations_ != null) {
            includeCurrencyInformations_ =
              io.dstore.Values.booleanValue.newBuilder(includeCurrencyInformations_).mergeFrom(value).buildPartial();
          } else {
            includeCurrencyInformations_ = value;
          }
          onChanged();
        } else {
          includeCurrencyInformationsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
       */
      public Builder clearIncludeCurrencyInformations() {
        if (includeCurrencyInformationsBuilder_ == null) {
          includeCurrencyInformations_ = null;
          onChanged();
        } else {
          includeCurrencyInformations_ = null;
          includeCurrencyInformationsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
       */
      public io.dstore.Values.booleanValue.Builder getIncludeCurrencyInformationsBuilder() {
        
        onChanged();
        return getIncludeCurrencyInformationsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getIncludeCurrencyInformationsOrBuilder() {
        if (includeCurrencyInformationsBuilder_ != null) {
          return includeCurrencyInformationsBuilder_.getMessageOrBuilder();
        } else {
          return includeCurrencyInformations_ == null ?
              io.dstore.Values.booleanValue.getDefaultInstance() : includeCurrencyInformations_;
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue include_currency_informations = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
          getIncludeCurrencyInformationsFieldBuilder() {
        if (includeCurrencyInformationsBuilder_ == null) {
          includeCurrencyInformationsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                  getIncludeCurrencyInformations(),
                  getParentForChildren(),
                  isClean());
          includeCurrencyInformations_ = null;
        }
        return includeCurrencyInformationsBuilder_;
      }

      private boolean includeCurrencyInformationsNull_ ;
      /**
       * <code>optional bool include_currency_informations_null = 1002;</code>
       */
      public boolean getIncludeCurrencyInformationsNull() {
        return includeCurrencyInformationsNull_;
      }
      /**
       * <code>optional bool include_currency_informations_null = 1002;</code>
       */
      public Builder setIncludeCurrencyInformationsNull(boolean value) {
        
        includeCurrencyInformationsNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool include_currency_informations_null = 1002;</code>
       */
      public Builder clearIncludeCurrencyInformationsNull() {
        
        includeCurrencyInformationsNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.booleanValue onlyIdsInTableOneId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> onlyIdsInTableOneIdBuilder_;
      /**
       * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
       */
      public boolean hasOnlyIdsInTableOneId() {
        return onlyIdsInTableOneIdBuilder_ != null || onlyIdsInTableOneId_ != null;
      }
      /**
       * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
       */
      public io.dstore.Values.booleanValue getOnlyIdsInTableOneId() {
        if (onlyIdsInTableOneIdBuilder_ == null) {
          return onlyIdsInTableOneId_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : onlyIdsInTableOneId_;
        } else {
          return onlyIdsInTableOneIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
       */
      public Builder setOnlyIdsInTableOneId(io.dstore.Values.booleanValue value) {
        if (onlyIdsInTableOneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          onlyIdsInTableOneId_ = value;
          onChanged();
        } else {
          onlyIdsInTableOneIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
       */
      public Builder setOnlyIdsInTableOneId(
          io.dstore.Values.booleanValue.Builder builderForValue) {
        if (onlyIdsInTableOneIdBuilder_ == null) {
          onlyIdsInTableOneId_ = builderForValue.build();
          onChanged();
        } else {
          onlyIdsInTableOneIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
       */
      public Builder mergeOnlyIdsInTableOneId(io.dstore.Values.booleanValue value) {
        if (onlyIdsInTableOneIdBuilder_ == null) {
          if (onlyIdsInTableOneId_ != null) {
            onlyIdsInTableOneId_ =
              io.dstore.Values.booleanValue.newBuilder(onlyIdsInTableOneId_).mergeFrom(value).buildPartial();
          } else {
            onlyIdsInTableOneId_ = value;
          }
          onChanged();
        } else {
          onlyIdsInTableOneIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
       */
      public Builder clearOnlyIdsInTableOneId() {
        if (onlyIdsInTableOneIdBuilder_ == null) {
          onlyIdsInTableOneId_ = null;
          onChanged();
        } else {
          onlyIdsInTableOneId_ = null;
          onlyIdsInTableOneIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
       */
      public io.dstore.Values.booleanValue.Builder getOnlyIdsInTableOneIdBuilder() {
        
        onChanged();
        return getOnlyIdsInTableOneIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getOnlyIdsInTableOneIdOrBuilder() {
        if (onlyIdsInTableOneIdBuilder_ != null) {
          return onlyIdsInTableOneIdBuilder_.getMessageOrBuilder();
        } else {
          return onlyIdsInTableOneId_ == null ?
              io.dstore.Values.booleanValue.getDefaultInstance() : onlyIdsInTableOneId_;
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue only_ids_in_table_one_id = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
          getOnlyIdsInTableOneIdFieldBuilder() {
        if (onlyIdsInTableOneIdBuilder_ == null) {
          onlyIdsInTableOneIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                  getOnlyIdsInTableOneId(),
                  getParentForChildren(),
                  isClean());
          onlyIdsInTableOneId_ = null;
        }
        return onlyIdsInTableOneIdBuilder_;
      }

      private boolean onlyIdsInTableOneIdNull_ ;
      /**
       * <code>optional bool only_ids_in_table_one_id_null = 1003;</code>
       */
      public boolean getOnlyIdsInTableOneIdNull() {
        return onlyIdsInTableOneIdNull_;
      }
      /**
       * <code>optional bool only_ids_in_table_one_id_null = 1003;</code>
       */
      public Builder setOnlyIdsInTableOneIdNull(boolean value) {
        
        onlyIdsInTableOneIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool only_ids_in_table_one_id_null = 1003;</code>
       */
      public Builder clearOnlyIdsInTableOneIdNull() {
        
        onlyIdsInTableOneIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.integerValue nodeCharacCategoryId_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> nodeCharacCategoryIdBuilder_;
      /**
       * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
       */
      public boolean hasNodeCharacCategoryId() {
        return nodeCharacCategoryIdBuilder_ != null || nodeCharacCategoryId_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
       */
      public io.dstore.Values.integerValue getNodeCharacCategoryId() {
        if (nodeCharacCategoryIdBuilder_ == null) {
          return nodeCharacCategoryId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : nodeCharacCategoryId_;
        } else {
          return nodeCharacCategoryIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
       */
      public Builder setNodeCharacCategoryId(io.dstore.Values.integerValue value) {
        if (nodeCharacCategoryIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          nodeCharacCategoryId_ = value;
          onChanged();
        } else {
          nodeCharacCategoryIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
       */
      public Builder setNodeCharacCategoryId(
          io.dstore.Values.integerValue.Builder builderForValue) {
        if (nodeCharacCategoryIdBuilder_ == null) {
          nodeCharacCategoryId_ = builderForValue.build();
          onChanged();
        } else {
          nodeCharacCategoryIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
       */
      public Builder mergeNodeCharacCategoryId(io.dstore.Values.integerValue value) {
        if (nodeCharacCategoryIdBuilder_ == null) {
          if (nodeCharacCategoryId_ != null) {
            nodeCharacCategoryId_ =
              io.dstore.Values.integerValue.newBuilder(nodeCharacCategoryId_).mergeFrom(value).buildPartial();
          } else {
            nodeCharacCategoryId_ = value;
          }
          onChanged();
        } else {
          nodeCharacCategoryIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
       */
      public Builder clearNodeCharacCategoryId() {
        if (nodeCharacCategoryIdBuilder_ == null) {
          nodeCharacCategoryId_ = null;
          onChanged();
        } else {
          nodeCharacCategoryId_ = null;
          nodeCharacCategoryIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
       */
      public io.dstore.Values.integerValue.Builder getNodeCharacCategoryIdBuilder() {
        
        onChanged();
        return getNodeCharacCategoryIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getNodeCharacCategoryIdOrBuilder() {
        if (nodeCharacCategoryIdBuilder_ != null) {
          return nodeCharacCategoryIdBuilder_.getMessageOrBuilder();
        } else {
          return nodeCharacCategoryId_ == null ?
              io.dstore.Values.integerValue.getDefaultInstance() : nodeCharacCategoryId_;
        }
      }
      /**
       * <code>optional .dstore.values.integerValue node_charac_category_id = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
          getNodeCharacCategoryIdFieldBuilder() {
        if (nodeCharacCategoryIdBuilder_ == null) {
          nodeCharacCategoryIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                  getNodeCharacCategoryId(),
                  getParentForChildren(),
                  isClean());
          nodeCharacCategoryId_ = null;
        }
        return nodeCharacCategoryIdBuilder_;
      }

      private boolean nodeCharacCategoryIdNull_ ;
      /**
       * <code>optional bool node_charac_category_id_null = 1004;</code>
       */
      public boolean getNodeCharacCategoryIdNull() {
        return nodeCharacCategoryIdNull_;
      }
      /**
       * <code>optional bool node_charac_category_id_null = 1004;</code>
       */
      public Builder setNodeCharacCategoryIdNull(boolean value) {
        
        nodeCharacCategoryIdNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool node_charac_category_id_null = 1004;</code>
       */
      public Builder clearNodeCharacCategoryIdNull() {
        
        nodeCharacCategoryIdNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.integerValue sortOrder_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> sortOrderBuilder_;
      /**
       * <code>optional .dstore.values.integerValue sort_order = 5;</code>
       */
      public boolean hasSortOrder() {
        return sortOrderBuilder_ != null || sortOrder_ != null;
      }
      /**
       * <code>optional .dstore.values.integerValue sort_order = 5;</code>
       */
      public io.dstore.Values.integerValue getSortOrder() {
        if (sortOrderBuilder_ == null) {
          return sortOrder_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : sortOrder_;
        } else {
          return sortOrderBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.integerValue sort_order = 5;</code>
       */
      public Builder setSortOrder(io.dstore.Values.integerValue value) {
        if (sortOrderBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sortOrder_ = value;
          onChanged();
        } else {
          sortOrderBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue sort_order = 5;</code>
       */
      public Builder setSortOrder(
          io.dstore.Values.integerValue.Builder builderForValue) {
        if (sortOrderBuilder_ == null) {
          sortOrder_ = builderForValue.build();
          onChanged();
        } else {
          sortOrderBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue sort_order = 5;</code>
       */
      public Builder mergeSortOrder(io.dstore.Values.integerValue value) {
        if (sortOrderBuilder_ == null) {
          if (sortOrder_ != null) {
            sortOrder_ =
              io.dstore.Values.integerValue.newBuilder(sortOrder_).mergeFrom(value).buildPartial();
          } else {
            sortOrder_ = value;
          }
          onChanged();
        } else {
          sortOrderBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue sort_order = 5;</code>
       */
      public Builder clearSortOrder() {
        if (sortOrderBuilder_ == null) {
          sortOrder_ = null;
          onChanged();
        } else {
          sortOrder_ = null;
          sortOrderBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.integerValue sort_order = 5;</code>
       */
      public io.dstore.Values.integerValue.Builder getSortOrderBuilder() {
        
        onChanged();
        return getSortOrderFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.integerValue sort_order = 5;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getSortOrderOrBuilder() {
        if (sortOrderBuilder_ != null) {
          return sortOrderBuilder_.getMessageOrBuilder();
        } else {
          return sortOrder_ == null ?
              io.dstore.Values.integerValue.getDefaultInstance() : sortOrder_;
        }
      }
      /**
       * <code>optional .dstore.values.integerValue sort_order = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
          getSortOrderFieldBuilder() {
        if (sortOrderBuilder_ == null) {
          sortOrderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                  getSortOrder(),
                  getParentForChildren(),
                  isClean());
          sortOrder_ = null;
        }
        return sortOrderBuilder_;
      }

      private boolean sortOrderNull_ ;
      /**
       * <code>optional bool sort_order_null = 1005;</code>
       */
      public boolean getSortOrderNull() {
        return sortOrderNull_;
      }
      /**
       * <code>optional bool sort_order_null = 1005;</code>
       */
      public Builder setSortOrderNull(boolean value) {
        
        sortOrderNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool sort_order_null = 1005;</code>
       */
      public Builder clearSortOrderNull() {
        
        sortOrderNull_ = false;
        onChanged();
        return this;
      }

      private io.dstore.Values.booleanValue getCategoryInformation_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> getCategoryInformationBuilder_;
      /**
       * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
       */
      public boolean hasGetCategoryInformation() {
        return getCategoryInformationBuilder_ != null || getCategoryInformation_ != null;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
       */
      public io.dstore.Values.booleanValue getGetCategoryInformation() {
        if (getCategoryInformationBuilder_ == null) {
          return getCategoryInformation_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : getCategoryInformation_;
        } else {
          return getCategoryInformationBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
       */
      public Builder setGetCategoryInformation(io.dstore.Values.booleanValue value) {
        if (getCategoryInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          getCategoryInformation_ = value;
          onChanged();
        } else {
          getCategoryInformationBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
       */
      public Builder setGetCategoryInformation(
          io.dstore.Values.booleanValue.Builder builderForValue) {
        if (getCategoryInformationBuilder_ == null) {
          getCategoryInformation_ = builderForValue.build();
          onChanged();
        } else {
          getCategoryInformationBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
       */
      public Builder mergeGetCategoryInformation(io.dstore.Values.booleanValue value) {
        if (getCategoryInformationBuilder_ == null) {
          if (getCategoryInformation_ != null) {
            getCategoryInformation_ =
              io.dstore.Values.booleanValue.newBuilder(getCategoryInformation_).mergeFrom(value).buildPartial();
          } else {
            getCategoryInformation_ = value;
          }
          onChanged();
        } else {
          getCategoryInformationBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
       */
      public Builder clearGetCategoryInformation() {
        if (getCategoryInformationBuilder_ == null) {
          getCategoryInformation_ = null;
          onChanged();
        } else {
          getCategoryInformation_ = null;
          getCategoryInformationBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
       */
      public io.dstore.Values.booleanValue.Builder getGetCategoryInformationBuilder() {
        
        onChanged();
        return getGetCategoryInformationFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getGetCategoryInformationOrBuilder() {
        if (getCategoryInformationBuilder_ != null) {
          return getCategoryInformationBuilder_.getMessageOrBuilder();
        } else {
          return getCategoryInformation_ == null ?
              io.dstore.Values.booleanValue.getDefaultInstance() : getCategoryInformation_;
        }
      }
      /**
       * <code>optional .dstore.values.booleanValue get_category_information = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
          getGetCategoryInformationFieldBuilder() {
        if (getCategoryInformationBuilder_ == null) {
          getCategoryInformationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                  getGetCategoryInformation(),
                  getParentForChildren(),
                  isClean());
          getCategoryInformation_ = null;
        }
        return getCategoryInformationBuilder_;
      }

      private boolean getCategoryInformationNull_ ;
      /**
       * <code>optional bool get_category_information_null = 1006;</code>
       */
      public boolean getGetCategoryInformationNull() {
        return getCategoryInformationNull_;
      }
      /**
       * <code>optional bool get_category_information_null = 1006;</code>
       */
      public Builder setGetCategoryInformationNull(boolean value) {
        
        getCategoryInformationNull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool get_category_information_null = 1006;</code>
       */
      public Builder clearGetCategoryInformationNull() {
        
        getCategoryInformationNull_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.im_GetNodeCharacteristics_Ad.Parameters)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.im_GetNodeCharacteristics_Ad.Parameters)
    private static final io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters();
    }

    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Parameters>
        PARSER = new com.google.protobuf.AbstractParser<Parameters>() {
      public Parameters parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Parameters(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Parameters> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Parameters> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Parameters getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dstore.engine.im_GetNodeCharacteristics_Ad.Response)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    java.util.List<io.dstore.engine.MetaInformation> 
        getMetaInformationList();
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    io.dstore.engine.MetaInformation getMetaInformation(int index);
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    int getMetaInformationCount();
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    java.util.List<? extends io.dstore.engine.MetaInformationOrBuilder> 
        getMetaInformationOrBuilderList();
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    io.dstore.engine.MetaInformationOrBuilder getMetaInformationOrBuilder(
        int index);

    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    java.util.List<io.dstore.engine.Message> 
        getMessageList();
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    io.dstore.engine.Message getMessage(int index);
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    int getMessageCount();
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    java.util.List<? extends io.dstore.engine.MessageOrBuilder> 
        getMessageOrBuilderList();
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    io.dstore.engine.MessageOrBuilder getMessageOrBuilder(
        int index);

    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
     */
    java.util.List<io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row> 
        getRowList();
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
     */
    io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row getRow(int index);
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
     */
    int getRowCount();
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
     */
    java.util.List<? extends io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.RowOrBuilder> 
        getRowOrBuilderList();
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
     */
    io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.RowOrBuilder getRowOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dstore.engine.im_GetNodeCharacteristics_Ad.Response}
   */
  public  static final class Response extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dstore.engine.im_GetNodeCharacteristics_Ad.Response)
      ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Response() {
      metaInformation_ = java.util.Collections.emptyList();
      message_ = java.util.Collections.emptyList();
      row_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                metaInformation_ = new java.util.ArrayList<io.dstore.engine.MetaInformation>();
                mutable_bitField0_ |= 0x00000001;
              }
              metaInformation_.add(
                  input.readMessage(io.dstore.engine.MetaInformation.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                message_ = new java.util.ArrayList<io.dstore.engine.Message>();
                mutable_bitField0_ |= 0x00000002;
              }
              message_.add(
                  input.readMessage(io.dstore.engine.Message.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                row_ = new java.util.ArrayList<io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row>();
                mutable_bitField0_ |= 0x00000004;
              }
              row_.add(
                  input.readMessage(io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          metaInformation_ = java.util.Collections.unmodifiableList(metaInformation_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = java.util.Collections.unmodifiableList(message_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = java.util.Collections.unmodifiableList(row_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.class, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Builder.class);
    }

    public interface RowOrBuilder extends
        // @@protoc_insertion_point(interface_extends:dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      int getRowId();

      /**
       * <pre>
       * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
       */
      boolean hasDeleteable();
      /**
       * <pre>
       * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
       */
      io.dstore.Values.booleanValue getDeleteable();
      /**
       * <pre>
       * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
       */
      io.dstore.Values.booleanValueOrBuilder getDeleteableOrBuilder();

      /**
       * <pre>
       * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
       * </pre>
       *
       * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
       */
      boolean hasPredecessorCategoryId();
      /**
       * <pre>
       * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
       * </pre>
       *
       * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
       */
      io.dstore.Values.integerValue getPredecessorCategoryId();
      /**
       * <pre>
       * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
       * </pre>
       *
       * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
       */
      io.dstore.Values.integerValueOrBuilder getPredecessorCategoryIdOrBuilder();

      /**
       * <pre>
       * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
       */
      boolean hasCharacteristicDescription();
      /**
       * <pre>
       * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
       */
      io.dstore.Values.stringValue getCharacteristicDescription();
      /**
       * <pre>
       * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
       */
      io.dstore.Values.stringValueOrBuilder getCharacteristicDescriptionOrBuilder();

      /**
       * <pre>
       * Bezeichnung der Sprache "ValueLanguageID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue value_language = 10004;</code>
       */
      boolean hasValueLanguage();
      /**
       * <pre>
       * Bezeichnung der Sprache "ValueLanguageID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue value_language = 10004;</code>
       */
      io.dstore.Values.stringValue getValueLanguage();
      /**
       * <pre>
       * Bezeichnung der Sprache "ValueLanguageID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue value_language = 10004;</code>
       */
      io.dstore.Values.stringValueOrBuilder getValueLanguageOrBuilder();

      /**
       * <pre>
       * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
       * </pre>
       *
       * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
       */
      boolean hasFieldTypeId();
      /**
       * <pre>
       * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
       * </pre>
       *
       * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
       */
      io.dstore.Values.integerValue getFieldTypeId();
      /**
       * <pre>
       * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
       * </pre>
       *
       * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
       */
      io.dstore.Values.integerValueOrBuilder getFieldTypeIdOrBuilder();

      /**
       * <pre>
       * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
       * </pre>
       *
       * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
       */
      boolean hasInNetto();
      /**
       * <pre>
       * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
       * </pre>
       *
       * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
       */
      io.dstore.Values.integerValue getInNetto();
      /**
       * <pre>
       * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
       * </pre>
       *
       * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
       */
      io.dstore.Values.integerValueOrBuilder getInNettoOrBuilder();

      /**
       * <pre>
       * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
       */
      boolean hasNodeCharacteristicId();
      /**
       * <pre>
       * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
       */
      io.dstore.Values.integerValue getNodeCharacteristicId();
      /**
       * <pre>
       * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
       */
      io.dstore.Values.integerValueOrBuilder getNodeCharacteristicIdOrBuilder();

      /**
       * <pre>
       * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
       * </pre>
       *
       * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
       */
      boolean hasSortNo();
      /**
       * <pre>
       * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
       * </pre>
       *
       * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
       */
      io.dstore.Values.integerValue getSortNo();
      /**
       * <pre>
       * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
       * </pre>
       *
       * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
       */
      io.dstore.Values.integerValueOrBuilder getSortNoOrBuilder();

      /**
       * <pre>
       * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
       */
      boolean hasKeepPropertiesHistoryInHours();
      /**
       * <pre>
       * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
       */
      io.dstore.Values.integerValue getKeepPropertiesHistoryInHours();
      /**
       * <pre>
       * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
       */
      io.dstore.Values.integerValueOrBuilder getKeepPropertiesHistoryInHoursOrBuilder();

      /**
       * <pre>
       * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
       */
      boolean hasPredefinedValues();
      /**
       * <pre>
       * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
       */
      io.dstore.Values.booleanValue getPredefinedValues();
      /**
       * <pre>
       * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
       */
      io.dstore.Values.booleanValueOrBuilder getPredefinedValuesOrBuilder();

      /**
       * <pre>
       * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
       */
      boolean hasNodeCharacCategoryId();
      /**
       * <pre>
       * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
       */
      io.dstore.Values.integerValue getNodeCharacCategoryId();
      /**
       * <pre>
       * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
       */
      io.dstore.Values.integerValueOrBuilder getNodeCharacCategoryIdOrBuilder();

      /**
       * <pre>
       * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
       * </pre>
       *
       * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
       */
      boolean hasHasCurrencyUnitValsAreNetVals();
      /**
       * <pre>
       * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
       * </pre>
       *
       * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
       */
      io.dstore.Values.integerValue getHasCurrencyUnitValsAreNetVals();
      /**
       * <pre>
       * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
       * </pre>
       *
       * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
       */
      io.dstore.Values.integerValueOrBuilder getHasCurrencyUnitValsAreNetValsOrBuilder();

      /**
       * <pre>
       * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
       * </pre>
       *
       * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
       */
      boolean hasCategorySortNo();
      /**
       * <pre>
       * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
       * </pre>
       *
       * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
       */
      io.dstore.Values.integerValue getCategorySortNo();
      /**
       * <pre>
       * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
       * </pre>
       *
       * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
       */
      io.dstore.Values.integerValueOrBuilder getCategorySortNoOrBuilder();

      /**
       * <pre>
       * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
       */
      boolean hasUnitId();
      /**
       * <pre>
       * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
       */
      io.dstore.Values.integerValue getUnitId();
      /**
       * <pre>
       * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
       */
      io.dstore.Values.integerValueOrBuilder getUnitIdOrBuilder();

      /**
       * <pre>
       * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
       */
      boolean hasIsUnique();
      /**
       * <pre>
       * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
       */
      io.dstore.Values.booleanValue getIsUnique();
      /**
       * <pre>
       * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
       */
      io.dstore.Values.booleanValueOrBuilder getIsUniqueOrBuilder();

      /**
       * <pre>
       * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
       */
      boolean hasValueLanguageId();
      /**
       * <pre>
       * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
       */
      io.dstore.Values.integerValue getValueLanguageId();
      /**
       * <pre>
       * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
       */
      io.dstore.Values.integerValueOrBuilder getValueLanguageIdOrBuilder();

      /**
       * <pre>
       * Bezeichnung der Kategorie "NodeCharacCategoryID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue category_description = 10017;</code>
       */
      boolean hasCategoryDescription();
      /**
       * <pre>
       * Bezeichnung der Kategorie "NodeCharacCategoryID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue category_description = 10017;</code>
       */
      io.dstore.Values.stringValue getCategoryDescription();
      /**
       * <pre>
       * Bezeichnung der Kategorie "NodeCharacCategoryID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue category_description = 10017;</code>
       */
      io.dstore.Values.stringValueOrBuilder getCategoryDescriptionOrBuilder();

      /**
       * <pre>
       * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
       */
      boolean hasRecursive();
      /**
       * <pre>
       * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
       */
      io.dstore.Values.booleanValue getRecursive();
      /**
       * <pre>
       * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
       */
      io.dstore.Values.booleanValueOrBuilder getRecursiveOrBuilder();
    }
    /**
     * Protobuf type {@code dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row}
     */
    public  static final class Row extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row)
        RowOrBuilder {
      // Use Row.newBuilder() to construct.
      private Row(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Row() {
        rowId_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private Row(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 80000: {

                rowId_ = input.readInt32();
                break;
              }
              case 80010: {
                io.dstore.Values.booleanValue.Builder subBuilder = null;
                if (deleteable_ != null) {
                  subBuilder = deleteable_.toBuilder();
                }
                deleteable_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(deleteable_);
                  deleteable_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80018: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (predecessorCategoryId_ != null) {
                  subBuilder = predecessorCategoryId_.toBuilder();
                }
                predecessorCategoryId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(predecessorCategoryId_);
                  predecessorCategoryId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80026: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (characteristicDescription_ != null) {
                  subBuilder = characteristicDescription_.toBuilder();
                }
                characteristicDescription_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(characteristicDescription_);
                  characteristicDescription_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80034: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (valueLanguage_ != null) {
                  subBuilder = valueLanguage_.toBuilder();
                }
                valueLanguage_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(valueLanguage_);
                  valueLanguage_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80042: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (fieldTypeId_ != null) {
                  subBuilder = fieldTypeId_.toBuilder();
                }
                fieldTypeId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(fieldTypeId_);
                  fieldTypeId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80050: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (inNetto_ != null) {
                  subBuilder = inNetto_.toBuilder();
                }
                inNetto_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(inNetto_);
                  inNetto_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80058: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (nodeCharacteristicId_ != null) {
                  subBuilder = nodeCharacteristicId_.toBuilder();
                }
                nodeCharacteristicId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(nodeCharacteristicId_);
                  nodeCharacteristicId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80066: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (sortNo_ != null) {
                  subBuilder = sortNo_.toBuilder();
                }
                sortNo_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(sortNo_);
                  sortNo_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80074: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (keepPropertiesHistoryInHours_ != null) {
                  subBuilder = keepPropertiesHistoryInHours_.toBuilder();
                }
                keepPropertiesHistoryInHours_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(keepPropertiesHistoryInHours_);
                  keepPropertiesHistoryInHours_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80082: {
                io.dstore.Values.booleanValue.Builder subBuilder = null;
                if (predefinedValues_ != null) {
                  subBuilder = predefinedValues_.toBuilder();
                }
                predefinedValues_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(predefinedValues_);
                  predefinedValues_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80090: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (nodeCharacCategoryId_ != null) {
                  subBuilder = nodeCharacCategoryId_.toBuilder();
                }
                nodeCharacCategoryId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(nodeCharacCategoryId_);
                  nodeCharacCategoryId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80098: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (hasCurrencyUnitValsAreNetVals_ != null) {
                  subBuilder = hasCurrencyUnitValsAreNetVals_.toBuilder();
                }
                hasCurrencyUnitValsAreNetVals_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(hasCurrencyUnitValsAreNetVals_);
                  hasCurrencyUnitValsAreNetVals_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80106: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (categorySortNo_ != null) {
                  subBuilder = categorySortNo_.toBuilder();
                }
                categorySortNo_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(categorySortNo_);
                  categorySortNo_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80114: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (unitId_ != null) {
                  subBuilder = unitId_.toBuilder();
                }
                unitId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(unitId_);
                  unitId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80122: {
                io.dstore.Values.booleanValue.Builder subBuilder = null;
                if (isUnique_ != null) {
                  subBuilder = isUnique_.toBuilder();
                }
                isUnique_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(isUnique_);
                  isUnique_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80130: {
                io.dstore.Values.integerValue.Builder subBuilder = null;
                if (valueLanguageId_ != null) {
                  subBuilder = valueLanguageId_.toBuilder();
                }
                valueLanguageId_ = input.readMessage(io.dstore.Values.integerValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(valueLanguageId_);
                  valueLanguageId_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80138: {
                io.dstore.Values.stringValue.Builder subBuilder = null;
                if (categoryDescription_ != null) {
                  subBuilder = categoryDescription_.toBuilder();
                }
                categoryDescription_ = input.readMessage(io.dstore.Values.stringValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(categoryDescription_);
                  categoryDescription_ = subBuilder.buildPartial();
                }

                break;
              }
              case 80146: {
                io.dstore.Values.booleanValue.Builder subBuilder = null;
                if (recursive_ != null) {
                  subBuilder = recursive_.toBuilder();
                }
                recursive_ = input.readMessage(io.dstore.Values.booleanValue.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(recursive_);
                  recursive_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_Row_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_Row_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.class, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.Builder.class);
      }

      public static final int ROW_ID_FIELD_NUMBER = 10000;
      private int rowId_;
      /**
       * <code>optional int32 row_id = 10000;</code>
       */
      public int getRowId() {
        return rowId_;
      }

      public static final int DELETEABLE_FIELD_NUMBER = 10001;
      private io.dstore.Values.booleanValue deleteable_;
      /**
       * <pre>
       * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
       */
      public boolean hasDeleteable() {
        return deleteable_ != null;
      }
      /**
       * <pre>
       * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
       */
      public io.dstore.Values.booleanValue getDeleteable() {
        return deleteable_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : deleteable_;
      }
      /**
       * <pre>
       * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getDeleteableOrBuilder() {
        return getDeleteable();
      }

      public static final int PREDECESSOR_CATEGORY_ID_FIELD_NUMBER = 10002;
      private io.dstore.Values.integerValue predecessorCategoryId_;
      /**
       * <pre>
       * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
       * </pre>
       *
       * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
       */
      public boolean hasPredecessorCategoryId() {
        return predecessorCategoryId_ != null;
      }
      /**
       * <pre>
       * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
       * </pre>
       *
       * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
       */
      public io.dstore.Values.integerValue getPredecessorCategoryId() {
        return predecessorCategoryId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : predecessorCategoryId_;
      }
      /**
       * <pre>
       * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
       * </pre>
       *
       * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getPredecessorCategoryIdOrBuilder() {
        return getPredecessorCategoryId();
      }

      public static final int CHARACTERISTIC_DESCRIPTION_FIELD_NUMBER = 10003;
      private io.dstore.Values.stringValue characteristicDescription_;
      /**
       * <pre>
       * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
       */
      public boolean hasCharacteristicDescription() {
        return characteristicDescription_ != null;
      }
      /**
       * <pre>
       * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
       */
      public io.dstore.Values.stringValue getCharacteristicDescription() {
        return characteristicDescription_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : characteristicDescription_;
      }
      /**
       * <pre>
       * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
       * </pre>
       *
       * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getCharacteristicDescriptionOrBuilder() {
        return getCharacteristicDescription();
      }

      public static final int VALUE_LANGUAGE_FIELD_NUMBER = 10004;
      private io.dstore.Values.stringValue valueLanguage_;
      /**
       * <pre>
       * Bezeichnung der Sprache "ValueLanguageID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue value_language = 10004;</code>
       */
      public boolean hasValueLanguage() {
        return valueLanguage_ != null;
      }
      /**
       * <pre>
       * Bezeichnung der Sprache "ValueLanguageID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue value_language = 10004;</code>
       */
      public io.dstore.Values.stringValue getValueLanguage() {
        return valueLanguage_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : valueLanguage_;
      }
      /**
       * <pre>
       * Bezeichnung der Sprache "ValueLanguageID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue value_language = 10004;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getValueLanguageOrBuilder() {
        return getValueLanguage();
      }

      public static final int FIELD_TYPE_ID_FIELD_NUMBER = 10005;
      private io.dstore.Values.integerValue fieldTypeId_;
      /**
       * <pre>
       * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
       * </pre>
       *
       * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
       */
      public boolean hasFieldTypeId() {
        return fieldTypeId_ != null;
      }
      /**
       * <pre>
       * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
       * </pre>
       *
       * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
       */
      public io.dstore.Values.integerValue getFieldTypeId() {
        return fieldTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : fieldTypeId_;
      }
      /**
       * <pre>
       * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
       * </pre>
       *
       * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getFieldTypeIdOrBuilder() {
        return getFieldTypeId();
      }

      public static final int IN_NETTO_FIELD_NUMBER = 10006;
      private io.dstore.Values.integerValue inNetto_;
      /**
       * <pre>
       * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
       * </pre>
       *
       * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
       */
      public boolean hasInNetto() {
        return inNetto_ != null;
      }
      /**
       * <pre>
       * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
       * </pre>
       *
       * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
       */
      public io.dstore.Values.integerValue getInNetto() {
        return inNetto_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : inNetto_;
      }
      /**
       * <pre>
       * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
       * </pre>
       *
       * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getInNettoOrBuilder() {
        return getInNetto();
      }

      public static final int NODE_CHARACTERISTIC_ID_FIELD_NUMBER = 10007;
      private io.dstore.Values.integerValue nodeCharacteristicId_;
      /**
       * <pre>
       * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
       */
      public boolean hasNodeCharacteristicId() {
        return nodeCharacteristicId_ != null;
      }
      /**
       * <pre>
       * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
       */
      public io.dstore.Values.integerValue getNodeCharacteristicId() {
        return nodeCharacteristicId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : nodeCharacteristicId_;
      }
      /**
       * <pre>
       * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getNodeCharacteristicIdOrBuilder() {
        return getNodeCharacteristicId();
      }

      public static final int SORT_NO_FIELD_NUMBER = 10008;
      private io.dstore.Values.integerValue sortNo_;
      /**
       * <pre>
       * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
       * </pre>
       *
       * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
       */
      public boolean hasSortNo() {
        return sortNo_ != null;
      }
      /**
       * <pre>
       * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
       * </pre>
       *
       * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
       */
      public io.dstore.Values.integerValue getSortNo() {
        return sortNo_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : sortNo_;
      }
      /**
       * <pre>
       * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
       * </pre>
       *
       * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getSortNoOrBuilder() {
        return getSortNo();
      }

      public static final int KEEP_PROPERTIES_HISTORY_IN_HOURS_FIELD_NUMBER = 10009;
      private io.dstore.Values.integerValue keepPropertiesHistoryInHours_;
      /**
       * <pre>
       * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
       */
      public boolean hasKeepPropertiesHistoryInHours() {
        return keepPropertiesHistoryInHours_ != null;
      }
      /**
       * <pre>
       * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
       */
      public io.dstore.Values.integerValue getKeepPropertiesHistoryInHours() {
        return keepPropertiesHistoryInHours_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : keepPropertiesHistoryInHours_;
      }
      /**
       * <pre>
       * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getKeepPropertiesHistoryInHoursOrBuilder() {
        return getKeepPropertiesHistoryInHours();
      }

      public static final int PREDEFINED_VALUES_FIELD_NUMBER = 10010;
      private io.dstore.Values.booleanValue predefinedValues_;
      /**
       * <pre>
       * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
       */
      public boolean hasPredefinedValues() {
        return predefinedValues_ != null;
      }
      /**
       * <pre>
       * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
       */
      public io.dstore.Values.booleanValue getPredefinedValues() {
        return predefinedValues_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : predefinedValues_;
      }
      /**
       * <pre>
       * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getPredefinedValuesOrBuilder() {
        return getPredefinedValues();
      }

      public static final int NODE_CHARAC_CATEGORY_ID_FIELD_NUMBER = 10011;
      private io.dstore.Values.integerValue nodeCharacCategoryId_;
      /**
       * <pre>
       * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
       */
      public boolean hasNodeCharacCategoryId() {
        return nodeCharacCategoryId_ != null;
      }
      /**
       * <pre>
       * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
       */
      public io.dstore.Values.integerValue getNodeCharacCategoryId() {
        return nodeCharacCategoryId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : nodeCharacCategoryId_;
      }
      /**
       * <pre>
       * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
       * </pre>
       *
       * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getNodeCharacCategoryIdOrBuilder() {
        return getNodeCharacCategoryId();
      }

      public static final int HAS_CURRENCY_UNIT_VALS_ARE_NET_VALS_FIELD_NUMBER = 10012;
      private io.dstore.Values.integerValue hasCurrencyUnitValsAreNetVals_;
      /**
       * <pre>
       * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
       * </pre>
       *
       * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
       */
      public boolean hasHasCurrencyUnitValsAreNetVals() {
        return hasCurrencyUnitValsAreNetVals_ != null;
      }
      /**
       * <pre>
       * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
       * </pre>
       *
       * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
       */
      public io.dstore.Values.integerValue getHasCurrencyUnitValsAreNetVals() {
        return hasCurrencyUnitValsAreNetVals_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : hasCurrencyUnitValsAreNetVals_;
      }
      /**
       * <pre>
       * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
       * </pre>
       *
       * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getHasCurrencyUnitValsAreNetValsOrBuilder() {
        return getHasCurrencyUnitValsAreNetVals();
      }

      public static final int CATEGORY_SORT_NO_FIELD_NUMBER = 10013;
      private io.dstore.Values.integerValue categorySortNo_;
      /**
       * <pre>
       * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
       * </pre>
       *
       * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
       */
      public boolean hasCategorySortNo() {
        return categorySortNo_ != null;
      }
      /**
       * <pre>
       * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
       * </pre>
       *
       * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
       */
      public io.dstore.Values.integerValue getCategorySortNo() {
        return categorySortNo_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : categorySortNo_;
      }
      /**
       * <pre>
       * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
       * </pre>
       *
       * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getCategorySortNoOrBuilder() {
        return getCategorySortNo();
      }

      public static final int UNIT_ID_FIELD_NUMBER = 10014;
      private io.dstore.Values.integerValue unitId_;
      /**
       * <pre>
       * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
       */
      public boolean hasUnitId() {
        return unitId_ != null;
      }
      /**
       * <pre>
       * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
       */
      public io.dstore.Values.integerValue getUnitId() {
        return unitId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : unitId_;
      }
      /**
       * <pre>
       * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getUnitIdOrBuilder() {
        return getUnitId();
      }

      public static final int IS_UNIQUE_FIELD_NUMBER = 10015;
      private io.dstore.Values.booleanValue isUnique_;
      /**
       * <pre>
       * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
       */
      public boolean hasIsUnique() {
        return isUnique_ != null;
      }
      /**
       * <pre>
       * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
       */
      public io.dstore.Values.booleanValue getIsUnique() {
        return isUnique_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : isUnique_;
      }
      /**
       * <pre>
       * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getIsUniqueOrBuilder() {
        return getIsUnique();
      }

      public static final int VALUE_LANGUAGE_ID_FIELD_NUMBER = 10016;
      private io.dstore.Values.integerValue valueLanguageId_;
      /**
       * <pre>
       * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
       */
      public boolean hasValueLanguageId() {
        return valueLanguageId_ != null;
      }
      /**
       * <pre>
       * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
       */
      public io.dstore.Values.integerValue getValueLanguageId() {
        return valueLanguageId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : valueLanguageId_;
      }
      /**
       * <pre>
       * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
       * </pre>
       *
       * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
       */
      public io.dstore.Values.integerValueOrBuilder getValueLanguageIdOrBuilder() {
        return getValueLanguageId();
      }

      public static final int CATEGORY_DESCRIPTION_FIELD_NUMBER = 10017;
      private io.dstore.Values.stringValue categoryDescription_;
      /**
       * <pre>
       * Bezeichnung der Kategorie "NodeCharacCategoryID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue category_description = 10017;</code>
       */
      public boolean hasCategoryDescription() {
        return categoryDescription_ != null;
      }
      /**
       * <pre>
       * Bezeichnung der Kategorie "NodeCharacCategoryID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue category_description = 10017;</code>
       */
      public io.dstore.Values.stringValue getCategoryDescription() {
        return categoryDescription_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : categoryDescription_;
      }
      /**
       * <pre>
       * Bezeichnung der Kategorie "NodeCharacCategoryID"
       * </pre>
       *
       * <code>optional .dstore.values.stringValue category_description = 10017;</code>
       */
      public io.dstore.Values.stringValueOrBuilder getCategoryDescriptionOrBuilder() {
        return getCategoryDescription();
      }

      public static final int RECURSIVE_FIELD_NUMBER = 10018;
      private io.dstore.Values.booleanValue recursive_;
      /**
       * <pre>
       * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
       */
      public boolean hasRecursive() {
        return recursive_ != null;
      }
      /**
       * <pre>
       * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
       */
      public io.dstore.Values.booleanValue getRecursive() {
        return recursive_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : recursive_;
      }
      /**
       * <pre>
       * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
       * </pre>
       *
       * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
       */
      public io.dstore.Values.booleanValueOrBuilder getRecursiveOrBuilder() {
        return getRecursive();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (rowId_ != 0) {
          output.writeInt32(10000, rowId_);
        }
        if (deleteable_ != null) {
          output.writeMessage(10001, getDeleteable());
        }
        if (predecessorCategoryId_ != null) {
          output.writeMessage(10002, getPredecessorCategoryId());
        }
        if (characteristicDescription_ != null) {
          output.writeMessage(10003, getCharacteristicDescription());
        }
        if (valueLanguage_ != null) {
          output.writeMessage(10004, getValueLanguage());
        }
        if (fieldTypeId_ != null) {
          output.writeMessage(10005, getFieldTypeId());
        }
        if (inNetto_ != null) {
          output.writeMessage(10006, getInNetto());
        }
        if (nodeCharacteristicId_ != null) {
          output.writeMessage(10007, getNodeCharacteristicId());
        }
        if (sortNo_ != null) {
          output.writeMessage(10008, getSortNo());
        }
        if (keepPropertiesHistoryInHours_ != null) {
          output.writeMessage(10009, getKeepPropertiesHistoryInHours());
        }
        if (predefinedValues_ != null) {
          output.writeMessage(10010, getPredefinedValues());
        }
        if (nodeCharacCategoryId_ != null) {
          output.writeMessage(10011, getNodeCharacCategoryId());
        }
        if (hasCurrencyUnitValsAreNetVals_ != null) {
          output.writeMessage(10012, getHasCurrencyUnitValsAreNetVals());
        }
        if (categorySortNo_ != null) {
          output.writeMessage(10013, getCategorySortNo());
        }
        if (unitId_ != null) {
          output.writeMessage(10014, getUnitId());
        }
        if (isUnique_ != null) {
          output.writeMessage(10015, getIsUnique());
        }
        if (valueLanguageId_ != null) {
          output.writeMessage(10016, getValueLanguageId());
        }
        if (categoryDescription_ != null) {
          output.writeMessage(10017, getCategoryDescription());
        }
        if (recursive_ != null) {
          output.writeMessage(10018, getRecursive());
        }
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (rowId_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10000, rowId_);
        }
        if (deleteable_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10001, getDeleteable());
        }
        if (predecessorCategoryId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10002, getPredecessorCategoryId());
        }
        if (characteristicDescription_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10003, getCharacteristicDescription());
        }
        if (valueLanguage_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10004, getValueLanguage());
        }
        if (fieldTypeId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10005, getFieldTypeId());
        }
        if (inNetto_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10006, getInNetto());
        }
        if (nodeCharacteristicId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10007, getNodeCharacteristicId());
        }
        if (sortNo_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10008, getSortNo());
        }
        if (keepPropertiesHistoryInHours_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10009, getKeepPropertiesHistoryInHours());
        }
        if (predefinedValues_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10010, getPredefinedValues());
        }
        if (nodeCharacCategoryId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10011, getNodeCharacCategoryId());
        }
        if (hasCurrencyUnitValsAreNetVals_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10012, getHasCurrencyUnitValsAreNetVals());
        }
        if (categorySortNo_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10013, getCategorySortNo());
        }
        if (unitId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10014, getUnitId());
        }
        if (isUnique_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10015, getIsUnique());
        }
        if (valueLanguageId_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10016, getValueLanguageId());
        }
        if (categoryDescription_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10017, getCategoryDescription());
        }
        if (recursive_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10018, getRecursive());
        }
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row)) {
          return super.equals(obj);
        }
        io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row other = (io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row) obj;

        boolean result = true;
        result = result && (getRowId()
            == other.getRowId());
        result = result && (hasDeleteable() == other.hasDeleteable());
        if (hasDeleteable()) {
          result = result && getDeleteable()
              .equals(other.getDeleteable());
        }
        result = result && (hasPredecessorCategoryId() == other.hasPredecessorCategoryId());
        if (hasPredecessorCategoryId()) {
          result = result && getPredecessorCategoryId()
              .equals(other.getPredecessorCategoryId());
        }
        result = result && (hasCharacteristicDescription() == other.hasCharacteristicDescription());
        if (hasCharacteristicDescription()) {
          result = result && getCharacteristicDescription()
              .equals(other.getCharacteristicDescription());
        }
        result = result && (hasValueLanguage() == other.hasValueLanguage());
        if (hasValueLanguage()) {
          result = result && getValueLanguage()
              .equals(other.getValueLanguage());
        }
        result = result && (hasFieldTypeId() == other.hasFieldTypeId());
        if (hasFieldTypeId()) {
          result = result && getFieldTypeId()
              .equals(other.getFieldTypeId());
        }
        result = result && (hasInNetto() == other.hasInNetto());
        if (hasInNetto()) {
          result = result && getInNetto()
              .equals(other.getInNetto());
        }
        result = result && (hasNodeCharacteristicId() == other.hasNodeCharacteristicId());
        if (hasNodeCharacteristicId()) {
          result = result && getNodeCharacteristicId()
              .equals(other.getNodeCharacteristicId());
        }
        result = result && (hasSortNo() == other.hasSortNo());
        if (hasSortNo()) {
          result = result && getSortNo()
              .equals(other.getSortNo());
        }
        result = result && (hasKeepPropertiesHistoryInHours() == other.hasKeepPropertiesHistoryInHours());
        if (hasKeepPropertiesHistoryInHours()) {
          result = result && getKeepPropertiesHistoryInHours()
              .equals(other.getKeepPropertiesHistoryInHours());
        }
        result = result && (hasPredefinedValues() == other.hasPredefinedValues());
        if (hasPredefinedValues()) {
          result = result && getPredefinedValues()
              .equals(other.getPredefinedValues());
        }
        result = result && (hasNodeCharacCategoryId() == other.hasNodeCharacCategoryId());
        if (hasNodeCharacCategoryId()) {
          result = result && getNodeCharacCategoryId()
              .equals(other.getNodeCharacCategoryId());
        }
        result = result && (hasHasCurrencyUnitValsAreNetVals() == other.hasHasCurrencyUnitValsAreNetVals());
        if (hasHasCurrencyUnitValsAreNetVals()) {
          result = result && getHasCurrencyUnitValsAreNetVals()
              .equals(other.getHasCurrencyUnitValsAreNetVals());
        }
        result = result && (hasCategorySortNo() == other.hasCategorySortNo());
        if (hasCategorySortNo()) {
          result = result && getCategorySortNo()
              .equals(other.getCategorySortNo());
        }
        result = result && (hasUnitId() == other.hasUnitId());
        if (hasUnitId()) {
          result = result && getUnitId()
              .equals(other.getUnitId());
        }
        result = result && (hasIsUnique() == other.hasIsUnique());
        if (hasIsUnique()) {
          result = result && getIsUnique()
              .equals(other.getIsUnique());
        }
        result = result && (hasValueLanguageId() == other.hasValueLanguageId());
        if (hasValueLanguageId()) {
          result = result && getValueLanguageId()
              .equals(other.getValueLanguageId());
        }
        result = result && (hasCategoryDescription() == other.hasCategoryDescription());
        if (hasCategoryDescription()) {
          result = result && getCategoryDescription()
              .equals(other.getCategoryDescription());
        }
        result = result && (hasRecursive() == other.hasRecursive());
        if (hasRecursive()) {
          result = result && getRecursive()
              .equals(other.getRecursive());
        }
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptorForType().hashCode();
        hash = (37 * hash) + ROW_ID_FIELD_NUMBER;
        hash = (53 * hash) + getRowId();
        if (hasDeleteable()) {
          hash = (37 * hash) + DELETEABLE_FIELD_NUMBER;
          hash = (53 * hash) + getDeleteable().hashCode();
        }
        if (hasPredecessorCategoryId()) {
          hash = (37 * hash) + PREDECESSOR_CATEGORY_ID_FIELD_NUMBER;
          hash = (53 * hash) + getPredecessorCategoryId().hashCode();
        }
        if (hasCharacteristicDescription()) {
          hash = (37 * hash) + CHARACTERISTIC_DESCRIPTION_FIELD_NUMBER;
          hash = (53 * hash) + getCharacteristicDescription().hashCode();
        }
        if (hasValueLanguage()) {
          hash = (37 * hash) + VALUE_LANGUAGE_FIELD_NUMBER;
          hash = (53 * hash) + getValueLanguage().hashCode();
        }
        if (hasFieldTypeId()) {
          hash = (37 * hash) + FIELD_TYPE_ID_FIELD_NUMBER;
          hash = (53 * hash) + getFieldTypeId().hashCode();
        }
        if (hasInNetto()) {
          hash = (37 * hash) + IN_NETTO_FIELD_NUMBER;
          hash = (53 * hash) + getInNetto().hashCode();
        }
        if (hasNodeCharacteristicId()) {
          hash = (37 * hash) + NODE_CHARACTERISTIC_ID_FIELD_NUMBER;
          hash = (53 * hash) + getNodeCharacteristicId().hashCode();
        }
        if (hasSortNo()) {
          hash = (37 * hash) + SORT_NO_FIELD_NUMBER;
          hash = (53 * hash) + getSortNo().hashCode();
        }
        if (hasKeepPropertiesHistoryInHours()) {
          hash = (37 * hash) + KEEP_PROPERTIES_HISTORY_IN_HOURS_FIELD_NUMBER;
          hash = (53 * hash) + getKeepPropertiesHistoryInHours().hashCode();
        }
        if (hasPredefinedValues()) {
          hash = (37 * hash) + PREDEFINED_VALUES_FIELD_NUMBER;
          hash = (53 * hash) + getPredefinedValues().hashCode();
        }
        if (hasNodeCharacCategoryId()) {
          hash = (37 * hash) + NODE_CHARAC_CATEGORY_ID_FIELD_NUMBER;
          hash = (53 * hash) + getNodeCharacCategoryId().hashCode();
        }
        if (hasHasCurrencyUnitValsAreNetVals()) {
          hash = (37 * hash) + HAS_CURRENCY_UNIT_VALS_ARE_NET_VALS_FIELD_NUMBER;
          hash = (53 * hash) + getHasCurrencyUnitValsAreNetVals().hashCode();
        }
        if (hasCategorySortNo()) {
          hash = (37 * hash) + CATEGORY_SORT_NO_FIELD_NUMBER;
          hash = (53 * hash) + getCategorySortNo().hashCode();
        }
        if (hasUnitId()) {
          hash = (37 * hash) + UNIT_ID_FIELD_NUMBER;
          hash = (53 * hash) + getUnitId().hashCode();
        }
        if (hasIsUnique()) {
          hash = (37 * hash) + IS_UNIQUE_FIELD_NUMBER;
          hash = (53 * hash) + getIsUnique().hashCode();
        }
        if (hasValueLanguageId()) {
          hash = (37 * hash) + VALUE_LANGUAGE_ID_FIELD_NUMBER;
          hash = (53 * hash) + getValueLanguageId().hashCode();
        }
        if (hasCategoryDescription()) {
          hash = (37 * hash) + CATEGORY_DESCRIPTION_FIELD_NUMBER;
          hash = (53 * hash) + getCategoryDescription().hashCode();
        }
        if (hasRecursive()) {
          hash = (37 * hash) + RECURSIVE_FIELD_NUMBER;
          hash = (53 * hash) + getRecursive().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row)
          io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.RowOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_Row_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_Row_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.class, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.Builder.class);
        }

        // Construct using io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          rowId_ = 0;

          if (deleteableBuilder_ == null) {
            deleteable_ = null;
          } else {
            deleteable_ = null;
            deleteableBuilder_ = null;
          }
          if (predecessorCategoryIdBuilder_ == null) {
            predecessorCategoryId_ = null;
          } else {
            predecessorCategoryId_ = null;
            predecessorCategoryIdBuilder_ = null;
          }
          if (characteristicDescriptionBuilder_ == null) {
            characteristicDescription_ = null;
          } else {
            characteristicDescription_ = null;
            characteristicDescriptionBuilder_ = null;
          }
          if (valueLanguageBuilder_ == null) {
            valueLanguage_ = null;
          } else {
            valueLanguage_ = null;
            valueLanguageBuilder_ = null;
          }
          if (fieldTypeIdBuilder_ == null) {
            fieldTypeId_ = null;
          } else {
            fieldTypeId_ = null;
            fieldTypeIdBuilder_ = null;
          }
          if (inNettoBuilder_ == null) {
            inNetto_ = null;
          } else {
            inNetto_ = null;
            inNettoBuilder_ = null;
          }
          if (nodeCharacteristicIdBuilder_ == null) {
            nodeCharacteristicId_ = null;
          } else {
            nodeCharacteristicId_ = null;
            nodeCharacteristicIdBuilder_ = null;
          }
          if (sortNoBuilder_ == null) {
            sortNo_ = null;
          } else {
            sortNo_ = null;
            sortNoBuilder_ = null;
          }
          if (keepPropertiesHistoryInHoursBuilder_ == null) {
            keepPropertiesHistoryInHours_ = null;
          } else {
            keepPropertiesHistoryInHours_ = null;
            keepPropertiesHistoryInHoursBuilder_ = null;
          }
          if (predefinedValuesBuilder_ == null) {
            predefinedValues_ = null;
          } else {
            predefinedValues_ = null;
            predefinedValuesBuilder_ = null;
          }
          if (nodeCharacCategoryIdBuilder_ == null) {
            nodeCharacCategoryId_ = null;
          } else {
            nodeCharacCategoryId_ = null;
            nodeCharacCategoryIdBuilder_ = null;
          }
          if (hasCurrencyUnitValsAreNetValsBuilder_ == null) {
            hasCurrencyUnitValsAreNetVals_ = null;
          } else {
            hasCurrencyUnitValsAreNetVals_ = null;
            hasCurrencyUnitValsAreNetValsBuilder_ = null;
          }
          if (categorySortNoBuilder_ == null) {
            categorySortNo_ = null;
          } else {
            categorySortNo_ = null;
            categorySortNoBuilder_ = null;
          }
          if (unitIdBuilder_ == null) {
            unitId_ = null;
          } else {
            unitId_ = null;
            unitIdBuilder_ = null;
          }
          if (isUniqueBuilder_ == null) {
            isUnique_ = null;
          } else {
            isUnique_ = null;
            isUniqueBuilder_ = null;
          }
          if (valueLanguageIdBuilder_ == null) {
            valueLanguageId_ = null;
          } else {
            valueLanguageId_ = null;
            valueLanguageIdBuilder_ = null;
          }
          if (categoryDescriptionBuilder_ == null) {
            categoryDescription_ = null;
          } else {
            categoryDescription_ = null;
            categoryDescriptionBuilder_ = null;
          }
          if (recursiveBuilder_ == null) {
            recursive_ = null;
          } else {
            recursive_ = null;
            recursiveBuilder_ = null;
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_Row_descriptor;
        }

        public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row getDefaultInstanceForType() {
          return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.getDefaultInstance();
        }

        public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row build() {
          io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row buildPartial() {
          io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row result = new io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row(this);
          result.rowId_ = rowId_;
          if (deleteableBuilder_ == null) {
            result.deleteable_ = deleteable_;
          } else {
            result.deleteable_ = deleteableBuilder_.build();
          }
          if (predecessorCategoryIdBuilder_ == null) {
            result.predecessorCategoryId_ = predecessorCategoryId_;
          } else {
            result.predecessorCategoryId_ = predecessorCategoryIdBuilder_.build();
          }
          if (characteristicDescriptionBuilder_ == null) {
            result.characteristicDescription_ = characteristicDescription_;
          } else {
            result.characteristicDescription_ = characteristicDescriptionBuilder_.build();
          }
          if (valueLanguageBuilder_ == null) {
            result.valueLanguage_ = valueLanguage_;
          } else {
            result.valueLanguage_ = valueLanguageBuilder_.build();
          }
          if (fieldTypeIdBuilder_ == null) {
            result.fieldTypeId_ = fieldTypeId_;
          } else {
            result.fieldTypeId_ = fieldTypeIdBuilder_.build();
          }
          if (inNettoBuilder_ == null) {
            result.inNetto_ = inNetto_;
          } else {
            result.inNetto_ = inNettoBuilder_.build();
          }
          if (nodeCharacteristicIdBuilder_ == null) {
            result.nodeCharacteristicId_ = nodeCharacteristicId_;
          } else {
            result.nodeCharacteristicId_ = nodeCharacteristicIdBuilder_.build();
          }
          if (sortNoBuilder_ == null) {
            result.sortNo_ = sortNo_;
          } else {
            result.sortNo_ = sortNoBuilder_.build();
          }
          if (keepPropertiesHistoryInHoursBuilder_ == null) {
            result.keepPropertiesHistoryInHours_ = keepPropertiesHistoryInHours_;
          } else {
            result.keepPropertiesHistoryInHours_ = keepPropertiesHistoryInHoursBuilder_.build();
          }
          if (predefinedValuesBuilder_ == null) {
            result.predefinedValues_ = predefinedValues_;
          } else {
            result.predefinedValues_ = predefinedValuesBuilder_.build();
          }
          if (nodeCharacCategoryIdBuilder_ == null) {
            result.nodeCharacCategoryId_ = nodeCharacCategoryId_;
          } else {
            result.nodeCharacCategoryId_ = nodeCharacCategoryIdBuilder_.build();
          }
          if (hasCurrencyUnitValsAreNetValsBuilder_ == null) {
            result.hasCurrencyUnitValsAreNetVals_ = hasCurrencyUnitValsAreNetVals_;
          } else {
            result.hasCurrencyUnitValsAreNetVals_ = hasCurrencyUnitValsAreNetValsBuilder_.build();
          }
          if (categorySortNoBuilder_ == null) {
            result.categorySortNo_ = categorySortNo_;
          } else {
            result.categorySortNo_ = categorySortNoBuilder_.build();
          }
          if (unitIdBuilder_ == null) {
            result.unitId_ = unitId_;
          } else {
            result.unitId_ = unitIdBuilder_.build();
          }
          if (isUniqueBuilder_ == null) {
            result.isUnique_ = isUnique_;
          } else {
            result.isUnique_ = isUniqueBuilder_.build();
          }
          if (valueLanguageIdBuilder_ == null) {
            result.valueLanguageId_ = valueLanguageId_;
          } else {
            result.valueLanguageId_ = valueLanguageIdBuilder_.build();
          }
          if (categoryDescriptionBuilder_ == null) {
            result.categoryDescription_ = categoryDescription_;
          } else {
            result.categoryDescription_ = categoryDescriptionBuilder_.build();
          }
          if (recursiveBuilder_ == null) {
            result.recursive_ = recursive_;
          } else {
            result.recursive_ = recursiveBuilder_.build();
          }
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row) {
            return mergeFrom((io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row other) {
          if (other == io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.getDefaultInstance()) return this;
          if (other.getRowId() != 0) {
            setRowId(other.getRowId());
          }
          if (other.hasDeleteable()) {
            mergeDeleteable(other.getDeleteable());
          }
          if (other.hasPredecessorCategoryId()) {
            mergePredecessorCategoryId(other.getPredecessorCategoryId());
          }
          if (other.hasCharacteristicDescription()) {
            mergeCharacteristicDescription(other.getCharacteristicDescription());
          }
          if (other.hasValueLanguage()) {
            mergeValueLanguage(other.getValueLanguage());
          }
          if (other.hasFieldTypeId()) {
            mergeFieldTypeId(other.getFieldTypeId());
          }
          if (other.hasInNetto()) {
            mergeInNetto(other.getInNetto());
          }
          if (other.hasNodeCharacteristicId()) {
            mergeNodeCharacteristicId(other.getNodeCharacteristicId());
          }
          if (other.hasSortNo()) {
            mergeSortNo(other.getSortNo());
          }
          if (other.hasKeepPropertiesHistoryInHours()) {
            mergeKeepPropertiesHistoryInHours(other.getKeepPropertiesHistoryInHours());
          }
          if (other.hasPredefinedValues()) {
            mergePredefinedValues(other.getPredefinedValues());
          }
          if (other.hasNodeCharacCategoryId()) {
            mergeNodeCharacCategoryId(other.getNodeCharacCategoryId());
          }
          if (other.hasHasCurrencyUnitValsAreNetVals()) {
            mergeHasCurrencyUnitValsAreNetVals(other.getHasCurrencyUnitValsAreNetVals());
          }
          if (other.hasCategorySortNo()) {
            mergeCategorySortNo(other.getCategorySortNo());
          }
          if (other.hasUnitId()) {
            mergeUnitId(other.getUnitId());
          }
          if (other.hasIsUnique()) {
            mergeIsUnique(other.getIsUnique());
          }
          if (other.hasValueLanguageId()) {
            mergeValueLanguageId(other.getValueLanguageId());
          }
          if (other.hasCategoryDescription()) {
            mergeCategoryDescription(other.getCategoryDescription());
          }
          if (other.hasRecursive()) {
            mergeRecursive(other.getRecursive());
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int rowId_ ;
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public int getRowId() {
          return rowId_;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder setRowId(int value) {
          
          rowId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 row_id = 10000;</code>
         */
        public Builder clearRowId() {
          
          rowId_ = 0;
          onChanged();
          return this;
        }

        private io.dstore.Values.booleanValue deleteable_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> deleteableBuilder_;
        /**
         * <pre>
         * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
         */
        public boolean hasDeleteable() {
          return deleteableBuilder_ != null || deleteable_ != null;
        }
        /**
         * <pre>
         * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
         */
        public io.dstore.Values.booleanValue getDeleteable() {
          if (deleteableBuilder_ == null) {
            return deleteable_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : deleteable_;
          } else {
            return deleteableBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
         */
        public Builder setDeleteable(io.dstore.Values.booleanValue value) {
          if (deleteableBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            deleteable_ = value;
            onChanged();
          } else {
            deleteableBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
         */
        public Builder setDeleteable(
            io.dstore.Values.booleanValue.Builder builderForValue) {
          if (deleteableBuilder_ == null) {
            deleteable_ = builderForValue.build();
            onChanged();
          } else {
            deleteableBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
         */
        public Builder mergeDeleteable(io.dstore.Values.booleanValue value) {
          if (deleteableBuilder_ == null) {
            if (deleteable_ != null) {
              deleteable_ =
                io.dstore.Values.booleanValue.newBuilder(deleteable_).mergeFrom(value).buildPartial();
            } else {
              deleteable_ = value;
            }
            onChanged();
          } else {
            deleteableBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
         */
        public Builder clearDeleteable() {
          if (deleteableBuilder_ == null) {
            deleteable_ = null;
            onChanged();
          } else {
            deleteable_ = null;
            deleteableBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
         */
        public io.dstore.Values.booleanValue.Builder getDeleteableBuilder() {
          
          onChanged();
          return getDeleteableFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
         */
        public io.dstore.Values.booleanValueOrBuilder getDeleteableOrBuilder() {
          if (deleteableBuilder_ != null) {
            return deleteableBuilder_.getMessageOrBuilder();
          } else {
            return deleteable_ == null ?
                io.dstore.Values.booleanValue.getDefaultInstance() : deleteable_;
          }
        }
        /**
         * <pre>
         * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue deleteable = 10001;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
            getDeleteableFieldBuilder() {
          if (deleteableBuilder_ == null) {
            deleteableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                    getDeleteable(),
                    getParentForChildren(),
                    isClean());
            deleteable_ = null;
          }
          return deleteableBuilder_;
        }

        private io.dstore.Values.integerValue predecessorCategoryId_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> predecessorCategoryIdBuilder_;
        /**
         * <pre>
         * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
         * </pre>
         *
         * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
         */
        public boolean hasPredecessorCategoryId() {
          return predecessorCategoryIdBuilder_ != null || predecessorCategoryId_ != null;
        }
        /**
         * <pre>
         * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
         * </pre>
         *
         * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
         */
        public io.dstore.Values.integerValue getPredecessorCategoryId() {
          if (predecessorCategoryIdBuilder_ == null) {
            return predecessorCategoryId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : predecessorCategoryId_;
          } else {
            return predecessorCategoryIdBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
         * </pre>
         *
         * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
         */
        public Builder setPredecessorCategoryId(io.dstore.Values.integerValue value) {
          if (predecessorCategoryIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            predecessorCategoryId_ = value;
            onChanged();
          } else {
            predecessorCategoryIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
         * </pre>
         *
         * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
         */
        public Builder setPredecessorCategoryId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (predecessorCategoryIdBuilder_ == null) {
            predecessorCategoryId_ = builderForValue.build();
            onChanged();
          } else {
            predecessorCategoryIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
         * </pre>
         *
         * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
         */
        public Builder mergePredecessorCategoryId(io.dstore.Values.integerValue value) {
          if (predecessorCategoryIdBuilder_ == null) {
            if (predecessorCategoryId_ != null) {
              predecessorCategoryId_ =
                io.dstore.Values.integerValue.newBuilder(predecessorCategoryId_).mergeFrom(value).buildPartial();
            } else {
              predecessorCategoryId_ = value;
            }
            onChanged();
          } else {
            predecessorCategoryIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
         * </pre>
         *
         * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
         */
        public Builder clearPredecessorCategoryId() {
          if (predecessorCategoryIdBuilder_ == null) {
            predecessorCategoryId_ = null;
            onChanged();
          } else {
            predecessorCategoryId_ = null;
            predecessorCategoryIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
         * </pre>
         *
         * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
         */
        public io.dstore.Values.integerValue.Builder getPredecessorCategoryIdBuilder() {
          
          onChanged();
          return getPredecessorCategoryIdFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
         * </pre>
         *
         * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getPredecessorCategoryIdOrBuilder() {
          if (predecessorCategoryIdBuilder_ != null) {
            return predecessorCategoryIdBuilder_.getMessageOrBuilder();
          } else {
            return predecessorCategoryId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : predecessorCategoryId_;
          }
        }
        /**
         * <pre>
         * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
         * </pre>
         *
         * <code>optional .dstore.values.integerValue predecessor_category_id = 10002;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getPredecessorCategoryIdFieldBuilder() {
          if (predecessorCategoryIdBuilder_ == null) {
            predecessorCategoryIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getPredecessorCategoryId(),
                    getParentForChildren(),
                    isClean());
            predecessorCategoryId_ = null;
          }
          return predecessorCategoryIdBuilder_;
        }

        private io.dstore.Values.stringValue characteristicDescription_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> characteristicDescriptionBuilder_;
        /**
         * <pre>
         * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
         */
        public boolean hasCharacteristicDescription() {
          return characteristicDescriptionBuilder_ != null || characteristicDescription_ != null;
        }
        /**
         * <pre>
         * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
         */
        public io.dstore.Values.stringValue getCharacteristicDescription() {
          if (characteristicDescriptionBuilder_ == null) {
            return characteristicDescription_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : characteristicDescription_;
          } else {
            return characteristicDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
         */
        public Builder setCharacteristicDescription(io.dstore.Values.stringValue value) {
          if (characteristicDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            characteristicDescription_ = value;
            onChanged();
          } else {
            characteristicDescriptionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
         */
        public Builder setCharacteristicDescription(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (characteristicDescriptionBuilder_ == null) {
            characteristicDescription_ = builderForValue.build();
            onChanged();
          } else {
            characteristicDescriptionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
         */
        public Builder mergeCharacteristicDescription(io.dstore.Values.stringValue value) {
          if (characteristicDescriptionBuilder_ == null) {
            if (characteristicDescription_ != null) {
              characteristicDescription_ =
                io.dstore.Values.stringValue.newBuilder(characteristicDescription_).mergeFrom(value).buildPartial();
            } else {
              characteristicDescription_ = value;
            }
            onChanged();
          } else {
            characteristicDescriptionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
         */
        public Builder clearCharacteristicDescription() {
          if (characteristicDescriptionBuilder_ == null) {
            characteristicDescription_ = null;
            onChanged();
          } else {
            characteristicDescription_ = null;
            characteristicDescriptionBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
         */
        public io.dstore.Values.stringValue.Builder getCharacteristicDescriptionBuilder() {
          
          onChanged();
          return getCharacteristicDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
         */
        public io.dstore.Values.stringValueOrBuilder getCharacteristicDescriptionOrBuilder() {
          if (characteristicDescriptionBuilder_ != null) {
            return characteristicDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return characteristicDescription_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : characteristicDescription_;
          }
        }
        /**
         * <pre>
         * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
         * </pre>
         *
         * <code>optional .dstore.values.stringValue characteristic_description = 10003;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getCharacteristicDescriptionFieldBuilder() {
          if (characteristicDescriptionBuilder_ == null) {
            characteristicDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getCharacteristicDescription(),
                    getParentForChildren(),
                    isClean());
            characteristicDescription_ = null;
          }
          return characteristicDescriptionBuilder_;
        }

        private io.dstore.Values.stringValue valueLanguage_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> valueLanguageBuilder_;
        /**
         * <pre>
         * Bezeichnung der Sprache "ValueLanguageID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue value_language = 10004;</code>
         */
        public boolean hasValueLanguage() {
          return valueLanguageBuilder_ != null || valueLanguage_ != null;
        }
        /**
         * <pre>
         * Bezeichnung der Sprache "ValueLanguageID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue value_language = 10004;</code>
         */
        public io.dstore.Values.stringValue getValueLanguage() {
          if (valueLanguageBuilder_ == null) {
            return valueLanguage_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : valueLanguage_;
          } else {
            return valueLanguageBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Bezeichnung der Sprache "ValueLanguageID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue value_language = 10004;</code>
         */
        public Builder setValueLanguage(io.dstore.Values.stringValue value) {
          if (valueLanguageBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            valueLanguage_ = value;
            onChanged();
          } else {
            valueLanguageBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung der Sprache "ValueLanguageID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue value_language = 10004;</code>
         */
        public Builder setValueLanguage(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (valueLanguageBuilder_ == null) {
            valueLanguage_ = builderForValue.build();
            onChanged();
          } else {
            valueLanguageBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung der Sprache "ValueLanguageID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue value_language = 10004;</code>
         */
        public Builder mergeValueLanguage(io.dstore.Values.stringValue value) {
          if (valueLanguageBuilder_ == null) {
            if (valueLanguage_ != null) {
              valueLanguage_ =
                io.dstore.Values.stringValue.newBuilder(valueLanguage_).mergeFrom(value).buildPartial();
            } else {
              valueLanguage_ = value;
            }
            onChanged();
          } else {
            valueLanguageBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung der Sprache "ValueLanguageID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue value_language = 10004;</code>
         */
        public Builder clearValueLanguage() {
          if (valueLanguageBuilder_ == null) {
            valueLanguage_ = null;
            onChanged();
          } else {
            valueLanguage_ = null;
            valueLanguageBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung der Sprache "ValueLanguageID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue value_language = 10004;</code>
         */
        public io.dstore.Values.stringValue.Builder getValueLanguageBuilder() {
          
          onChanged();
          return getValueLanguageFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Bezeichnung der Sprache "ValueLanguageID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue value_language = 10004;</code>
         */
        public io.dstore.Values.stringValueOrBuilder getValueLanguageOrBuilder() {
          if (valueLanguageBuilder_ != null) {
            return valueLanguageBuilder_.getMessageOrBuilder();
          } else {
            return valueLanguage_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : valueLanguage_;
          }
        }
        /**
         * <pre>
         * Bezeichnung der Sprache "ValueLanguageID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue value_language = 10004;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getValueLanguageFieldBuilder() {
          if (valueLanguageBuilder_ == null) {
            valueLanguageBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getValueLanguage(),
                    getParentForChildren(),
                    isClean());
            valueLanguage_ = null;
          }
          return valueLanguageBuilder_;
        }

        private io.dstore.Values.integerValue fieldTypeId_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> fieldTypeIdBuilder_;
        /**
         * <pre>
         * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
         * </pre>
         *
         * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
         */
        public boolean hasFieldTypeId() {
          return fieldTypeIdBuilder_ != null || fieldTypeId_ != null;
        }
        /**
         * <pre>
         * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
         * </pre>
         *
         * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
         */
        public io.dstore.Values.integerValue getFieldTypeId() {
          if (fieldTypeIdBuilder_ == null) {
            return fieldTypeId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : fieldTypeId_;
          } else {
            return fieldTypeIdBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
         * </pre>
         *
         * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
         */
        public Builder setFieldTypeId(io.dstore.Values.integerValue value) {
          if (fieldTypeIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            fieldTypeId_ = value;
            onChanged();
          } else {
            fieldTypeIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
         * </pre>
         *
         * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
         */
        public Builder setFieldTypeId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (fieldTypeIdBuilder_ == null) {
            fieldTypeId_ = builderForValue.build();
            onChanged();
          } else {
            fieldTypeIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
         * </pre>
         *
         * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
         */
        public Builder mergeFieldTypeId(io.dstore.Values.integerValue value) {
          if (fieldTypeIdBuilder_ == null) {
            if (fieldTypeId_ != null) {
              fieldTypeId_ =
                io.dstore.Values.integerValue.newBuilder(fieldTypeId_).mergeFrom(value).buildPartial();
            } else {
              fieldTypeId_ = value;
            }
            onChanged();
          } else {
            fieldTypeIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
         * </pre>
         *
         * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
         */
        public Builder clearFieldTypeId() {
          if (fieldTypeIdBuilder_ == null) {
            fieldTypeId_ = null;
            onChanged();
          } else {
            fieldTypeId_ = null;
            fieldTypeIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
         * </pre>
         *
         * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
         */
        public io.dstore.Values.integerValue.Builder getFieldTypeIdBuilder() {
          
          onChanged();
          return getFieldTypeIdFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
         * </pre>
         *
         * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getFieldTypeIdOrBuilder() {
          if (fieldTypeIdBuilder_ != null) {
            return fieldTypeIdBuilder_.getMessageOrBuilder();
          } else {
            return fieldTypeId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : fieldTypeId_;
          }
        }
        /**
         * <pre>
         * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
         * </pre>
         *
         * <code>optional .dstore.values.integerValue field_type_id = 10005;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getFieldTypeIdFieldBuilder() {
          if (fieldTypeIdBuilder_ == null) {
            fieldTypeIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getFieldTypeId(),
                    getParentForChildren(),
                    isClean());
            fieldTypeId_ = null;
          }
          return fieldTypeIdBuilder_;
        }

        private io.dstore.Values.integerValue inNetto_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> inNettoBuilder_;
        /**
         * <pre>
         * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
         */
        public boolean hasInNetto() {
          return inNettoBuilder_ != null || inNetto_ != null;
        }
        /**
         * <pre>
         * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
         */
        public io.dstore.Values.integerValue getInNetto() {
          if (inNettoBuilder_ == null) {
            return inNetto_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : inNetto_;
          } else {
            return inNettoBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
         */
        public Builder setInNetto(io.dstore.Values.integerValue value) {
          if (inNettoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            inNetto_ = value;
            onChanged();
          } else {
            inNettoBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
         */
        public Builder setInNetto(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (inNettoBuilder_ == null) {
            inNetto_ = builderForValue.build();
            onChanged();
          } else {
            inNettoBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
         */
        public Builder mergeInNetto(io.dstore.Values.integerValue value) {
          if (inNettoBuilder_ == null) {
            if (inNetto_ != null) {
              inNetto_ =
                io.dstore.Values.integerValue.newBuilder(inNetto_).mergeFrom(value).buildPartial();
            } else {
              inNetto_ = value;
            }
            onChanged();
          } else {
            inNettoBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
         */
        public Builder clearInNetto() {
          if (inNettoBuilder_ == null) {
            inNetto_ = null;
            onChanged();
          } else {
            inNetto_ = null;
            inNettoBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
         */
        public io.dstore.Values.integerValue.Builder getInNettoBuilder() {
          
          onChanged();
          return getInNettoFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getInNettoOrBuilder() {
          if (inNettoBuilder_ != null) {
            return inNettoBuilder_.getMessageOrBuilder();
          } else {
            return inNetto_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : inNetto_;
          }
        }
        /**
         * <pre>
         * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
         * </pre>
         *
         * <code>optional .dstore.values.integerValue in_netto = 10006;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getInNettoFieldBuilder() {
          if (inNettoBuilder_ == null) {
            inNettoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getInNetto(),
                    getParentForChildren(),
                    isClean());
            inNetto_ = null;
          }
          return inNettoBuilder_;
        }

        private io.dstore.Values.integerValue nodeCharacteristicId_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> nodeCharacteristicIdBuilder_;
        /**
         * <pre>
         * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
         */
        public boolean hasNodeCharacteristicId() {
          return nodeCharacteristicIdBuilder_ != null || nodeCharacteristicId_ != null;
        }
        /**
         * <pre>
         * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
         */
        public io.dstore.Values.integerValue getNodeCharacteristicId() {
          if (nodeCharacteristicIdBuilder_ == null) {
            return nodeCharacteristicId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : nodeCharacteristicId_;
          } else {
            return nodeCharacteristicIdBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
         */
        public Builder setNodeCharacteristicId(io.dstore.Values.integerValue value) {
          if (nodeCharacteristicIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            nodeCharacteristicId_ = value;
            onChanged();
          } else {
            nodeCharacteristicIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
         */
        public Builder setNodeCharacteristicId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (nodeCharacteristicIdBuilder_ == null) {
            nodeCharacteristicId_ = builderForValue.build();
            onChanged();
          } else {
            nodeCharacteristicIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
         */
        public Builder mergeNodeCharacteristicId(io.dstore.Values.integerValue value) {
          if (nodeCharacteristicIdBuilder_ == null) {
            if (nodeCharacteristicId_ != null) {
              nodeCharacteristicId_ =
                io.dstore.Values.integerValue.newBuilder(nodeCharacteristicId_).mergeFrom(value).buildPartial();
            } else {
              nodeCharacteristicId_ = value;
            }
            onChanged();
          } else {
            nodeCharacteristicIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
         */
        public Builder clearNodeCharacteristicId() {
          if (nodeCharacteristicIdBuilder_ == null) {
            nodeCharacteristicId_ = null;
            onChanged();
          } else {
            nodeCharacteristicId_ = null;
            nodeCharacteristicIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
         */
        public io.dstore.Values.integerValue.Builder getNodeCharacteristicIdBuilder() {
          
          onChanged();
          return getNodeCharacteristicIdFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getNodeCharacteristicIdOrBuilder() {
          if (nodeCharacteristicIdBuilder_ != null) {
            return nodeCharacteristicIdBuilder_.getMessageOrBuilder();
          } else {
            return nodeCharacteristicId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : nodeCharacteristicId_;
          }
        }
        /**
         * <pre>
         * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_characteristic_id = 10007;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getNodeCharacteristicIdFieldBuilder() {
          if (nodeCharacteristicIdBuilder_ == null) {
            nodeCharacteristicIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getNodeCharacteristicId(),
                    getParentForChildren(),
                    isClean());
            nodeCharacteristicId_ = null;
          }
          return nodeCharacteristicIdBuilder_;
        }

        private io.dstore.Values.integerValue sortNo_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> sortNoBuilder_;
        /**
         * <pre>
         * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
         */
        public boolean hasSortNo() {
          return sortNoBuilder_ != null || sortNo_ != null;
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
         */
        public io.dstore.Values.integerValue getSortNo() {
          if (sortNoBuilder_ == null) {
            return sortNo_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : sortNo_;
          } else {
            return sortNoBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
         */
        public Builder setSortNo(io.dstore.Values.integerValue value) {
          if (sortNoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            sortNo_ = value;
            onChanged();
          } else {
            sortNoBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
         */
        public Builder setSortNo(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (sortNoBuilder_ == null) {
            sortNo_ = builderForValue.build();
            onChanged();
          } else {
            sortNoBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
         */
        public Builder mergeSortNo(io.dstore.Values.integerValue value) {
          if (sortNoBuilder_ == null) {
            if (sortNo_ != null) {
              sortNo_ =
                io.dstore.Values.integerValue.newBuilder(sortNo_).mergeFrom(value).buildPartial();
            } else {
              sortNo_ = value;
            }
            onChanged();
          } else {
            sortNoBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
         */
        public Builder clearSortNo() {
          if (sortNoBuilder_ == null) {
            sortNo_ = null;
            onChanged();
          } else {
            sortNo_ = null;
            sortNoBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
         */
        public io.dstore.Values.integerValue.Builder getSortNoBuilder() {
          
          onChanged();
          return getSortNoFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getSortNoOrBuilder() {
          if (sortNoBuilder_ != null) {
            return sortNoBuilder_.getMessageOrBuilder();
          } else {
            return sortNo_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : sortNo_;
          }
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue sort_no = 10008;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getSortNoFieldBuilder() {
          if (sortNoBuilder_ == null) {
            sortNoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getSortNo(),
                    getParentForChildren(),
                    isClean());
            sortNo_ = null;
          }
          return sortNoBuilder_;
        }

        private io.dstore.Values.integerValue keepPropertiesHistoryInHours_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> keepPropertiesHistoryInHoursBuilder_;
        /**
         * <pre>
         * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
         */
        public boolean hasKeepPropertiesHistoryInHours() {
          return keepPropertiesHistoryInHoursBuilder_ != null || keepPropertiesHistoryInHours_ != null;
        }
        /**
         * <pre>
         * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
         */
        public io.dstore.Values.integerValue getKeepPropertiesHistoryInHours() {
          if (keepPropertiesHistoryInHoursBuilder_ == null) {
            return keepPropertiesHistoryInHours_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : keepPropertiesHistoryInHours_;
          } else {
            return keepPropertiesHistoryInHoursBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
         */
        public Builder setKeepPropertiesHistoryInHours(io.dstore.Values.integerValue value) {
          if (keepPropertiesHistoryInHoursBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            keepPropertiesHistoryInHours_ = value;
            onChanged();
          } else {
            keepPropertiesHistoryInHoursBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
         */
        public Builder setKeepPropertiesHistoryInHours(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (keepPropertiesHistoryInHoursBuilder_ == null) {
            keepPropertiesHistoryInHours_ = builderForValue.build();
            onChanged();
          } else {
            keepPropertiesHistoryInHoursBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
         */
        public Builder mergeKeepPropertiesHistoryInHours(io.dstore.Values.integerValue value) {
          if (keepPropertiesHistoryInHoursBuilder_ == null) {
            if (keepPropertiesHistoryInHours_ != null) {
              keepPropertiesHistoryInHours_ =
                io.dstore.Values.integerValue.newBuilder(keepPropertiesHistoryInHours_).mergeFrom(value).buildPartial();
            } else {
              keepPropertiesHistoryInHours_ = value;
            }
            onChanged();
          } else {
            keepPropertiesHistoryInHoursBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
         */
        public Builder clearKeepPropertiesHistoryInHours() {
          if (keepPropertiesHistoryInHoursBuilder_ == null) {
            keepPropertiesHistoryInHours_ = null;
            onChanged();
          } else {
            keepPropertiesHistoryInHours_ = null;
            keepPropertiesHistoryInHoursBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
         */
        public io.dstore.Values.integerValue.Builder getKeepPropertiesHistoryInHoursBuilder() {
          
          onChanged();
          return getKeepPropertiesHistoryInHoursFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getKeepPropertiesHistoryInHoursOrBuilder() {
          if (keepPropertiesHistoryInHoursBuilder_ != null) {
            return keepPropertiesHistoryInHoursBuilder_.getMessageOrBuilder();
          } else {
            return keepPropertiesHistoryInHours_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : keepPropertiesHistoryInHours_;
          }
        }
        /**
         * <pre>
         * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue keep_properties_history_in_hours = 10009;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getKeepPropertiesHistoryInHoursFieldBuilder() {
          if (keepPropertiesHistoryInHoursBuilder_ == null) {
            keepPropertiesHistoryInHoursBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getKeepPropertiesHistoryInHours(),
                    getParentForChildren(),
                    isClean());
            keepPropertiesHistoryInHours_ = null;
          }
          return keepPropertiesHistoryInHoursBuilder_;
        }

        private io.dstore.Values.booleanValue predefinedValues_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> predefinedValuesBuilder_;
        /**
         * <pre>
         * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
         */
        public boolean hasPredefinedValues() {
          return predefinedValuesBuilder_ != null || predefinedValues_ != null;
        }
        /**
         * <pre>
         * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
         */
        public io.dstore.Values.booleanValue getPredefinedValues() {
          if (predefinedValuesBuilder_ == null) {
            return predefinedValues_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : predefinedValues_;
          } else {
            return predefinedValuesBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
         */
        public Builder setPredefinedValues(io.dstore.Values.booleanValue value) {
          if (predefinedValuesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            predefinedValues_ = value;
            onChanged();
          } else {
            predefinedValuesBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
         */
        public Builder setPredefinedValues(
            io.dstore.Values.booleanValue.Builder builderForValue) {
          if (predefinedValuesBuilder_ == null) {
            predefinedValues_ = builderForValue.build();
            onChanged();
          } else {
            predefinedValuesBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
         */
        public Builder mergePredefinedValues(io.dstore.Values.booleanValue value) {
          if (predefinedValuesBuilder_ == null) {
            if (predefinedValues_ != null) {
              predefinedValues_ =
                io.dstore.Values.booleanValue.newBuilder(predefinedValues_).mergeFrom(value).buildPartial();
            } else {
              predefinedValues_ = value;
            }
            onChanged();
          } else {
            predefinedValuesBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
         */
        public Builder clearPredefinedValues() {
          if (predefinedValuesBuilder_ == null) {
            predefinedValues_ = null;
            onChanged();
          } else {
            predefinedValues_ = null;
            predefinedValuesBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
         */
        public io.dstore.Values.booleanValue.Builder getPredefinedValuesBuilder() {
          
          onChanged();
          return getPredefinedValuesFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
         */
        public io.dstore.Values.booleanValueOrBuilder getPredefinedValuesOrBuilder() {
          if (predefinedValuesBuilder_ != null) {
            return predefinedValuesBuilder_.getMessageOrBuilder();
          } else {
            return predefinedValues_ == null ?
                io.dstore.Values.booleanValue.getDefaultInstance() : predefinedValues_;
          }
        }
        /**
         * <pre>
         * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue predefined_values = 10010;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
            getPredefinedValuesFieldBuilder() {
          if (predefinedValuesBuilder_ == null) {
            predefinedValuesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                    getPredefinedValues(),
                    getParentForChildren(),
                    isClean());
            predefinedValues_ = null;
          }
          return predefinedValuesBuilder_;
        }

        private io.dstore.Values.integerValue nodeCharacCategoryId_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> nodeCharacCategoryIdBuilder_;
        /**
         * <pre>
         * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
         */
        public boolean hasNodeCharacCategoryId() {
          return nodeCharacCategoryIdBuilder_ != null || nodeCharacCategoryId_ != null;
        }
        /**
         * <pre>
         * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
         */
        public io.dstore.Values.integerValue getNodeCharacCategoryId() {
          if (nodeCharacCategoryIdBuilder_ == null) {
            return nodeCharacCategoryId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : nodeCharacCategoryId_;
          } else {
            return nodeCharacCategoryIdBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
         */
        public Builder setNodeCharacCategoryId(io.dstore.Values.integerValue value) {
          if (nodeCharacCategoryIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            nodeCharacCategoryId_ = value;
            onChanged();
          } else {
            nodeCharacCategoryIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
         */
        public Builder setNodeCharacCategoryId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (nodeCharacCategoryIdBuilder_ == null) {
            nodeCharacCategoryId_ = builderForValue.build();
            onChanged();
          } else {
            nodeCharacCategoryIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
         */
        public Builder mergeNodeCharacCategoryId(io.dstore.Values.integerValue value) {
          if (nodeCharacCategoryIdBuilder_ == null) {
            if (nodeCharacCategoryId_ != null) {
              nodeCharacCategoryId_ =
                io.dstore.Values.integerValue.newBuilder(nodeCharacCategoryId_).mergeFrom(value).buildPartial();
            } else {
              nodeCharacCategoryId_ = value;
            }
            onChanged();
          } else {
            nodeCharacCategoryIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
         */
        public Builder clearNodeCharacCategoryId() {
          if (nodeCharacCategoryIdBuilder_ == null) {
            nodeCharacCategoryId_ = null;
            onChanged();
          } else {
            nodeCharacCategoryId_ = null;
            nodeCharacCategoryIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
         */
        public io.dstore.Values.integerValue.Builder getNodeCharacCategoryIdBuilder() {
          
          onChanged();
          return getNodeCharacCategoryIdFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getNodeCharacCategoryIdOrBuilder() {
          if (nodeCharacCategoryIdBuilder_ != null) {
            return nodeCharacCategoryIdBuilder_.getMessageOrBuilder();
          } else {
            return nodeCharacCategoryId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : nodeCharacCategoryId_;
          }
        }
        /**
         * <pre>
         * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
         * </pre>
         *
         * <code>optional .dstore.values.integerValue node_charac_category_id = 10011;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getNodeCharacCategoryIdFieldBuilder() {
          if (nodeCharacCategoryIdBuilder_ == null) {
            nodeCharacCategoryIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getNodeCharacCategoryId(),
                    getParentForChildren(),
                    isClean());
            nodeCharacCategoryId_ = null;
          }
          return nodeCharacCategoryIdBuilder_;
        }

        private io.dstore.Values.integerValue hasCurrencyUnitValsAreNetVals_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> hasCurrencyUnitValsAreNetValsBuilder_;
        /**
         * <pre>
         * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
         * </pre>
         *
         * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
         */
        public boolean hasHasCurrencyUnitValsAreNetVals() {
          return hasCurrencyUnitValsAreNetValsBuilder_ != null || hasCurrencyUnitValsAreNetVals_ != null;
        }
        /**
         * <pre>
         * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
         * </pre>
         *
         * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
         */
        public io.dstore.Values.integerValue getHasCurrencyUnitValsAreNetVals() {
          if (hasCurrencyUnitValsAreNetValsBuilder_ == null) {
            return hasCurrencyUnitValsAreNetVals_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : hasCurrencyUnitValsAreNetVals_;
          } else {
            return hasCurrencyUnitValsAreNetValsBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
         * </pre>
         *
         * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
         */
        public Builder setHasCurrencyUnitValsAreNetVals(io.dstore.Values.integerValue value) {
          if (hasCurrencyUnitValsAreNetValsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            hasCurrencyUnitValsAreNetVals_ = value;
            onChanged();
          } else {
            hasCurrencyUnitValsAreNetValsBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
         * </pre>
         *
         * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
         */
        public Builder setHasCurrencyUnitValsAreNetVals(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (hasCurrencyUnitValsAreNetValsBuilder_ == null) {
            hasCurrencyUnitValsAreNetVals_ = builderForValue.build();
            onChanged();
          } else {
            hasCurrencyUnitValsAreNetValsBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
         * </pre>
         *
         * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
         */
        public Builder mergeHasCurrencyUnitValsAreNetVals(io.dstore.Values.integerValue value) {
          if (hasCurrencyUnitValsAreNetValsBuilder_ == null) {
            if (hasCurrencyUnitValsAreNetVals_ != null) {
              hasCurrencyUnitValsAreNetVals_ =
                io.dstore.Values.integerValue.newBuilder(hasCurrencyUnitValsAreNetVals_).mergeFrom(value).buildPartial();
            } else {
              hasCurrencyUnitValsAreNetVals_ = value;
            }
            onChanged();
          } else {
            hasCurrencyUnitValsAreNetValsBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
         * </pre>
         *
         * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
         */
        public Builder clearHasCurrencyUnitValsAreNetVals() {
          if (hasCurrencyUnitValsAreNetValsBuilder_ == null) {
            hasCurrencyUnitValsAreNetVals_ = null;
            onChanged();
          } else {
            hasCurrencyUnitValsAreNetVals_ = null;
            hasCurrencyUnitValsAreNetValsBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
         * </pre>
         *
         * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
         */
        public io.dstore.Values.integerValue.Builder getHasCurrencyUnitValsAreNetValsBuilder() {
          
          onChanged();
          return getHasCurrencyUnitValsAreNetValsFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
         * </pre>
         *
         * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getHasCurrencyUnitValsAreNetValsOrBuilder() {
          if (hasCurrencyUnitValsAreNetValsBuilder_ != null) {
            return hasCurrencyUnitValsAreNetValsBuilder_.getMessageOrBuilder();
          } else {
            return hasCurrencyUnitValsAreNetVals_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : hasCurrencyUnitValsAreNetVals_;
          }
        }
        /**
         * <pre>
         * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
         * </pre>
         *
         * <code>optional .dstore.values.integerValue has_currency_unit_vals_are_net_vals = 10012;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getHasCurrencyUnitValsAreNetValsFieldBuilder() {
          if (hasCurrencyUnitValsAreNetValsBuilder_ == null) {
            hasCurrencyUnitValsAreNetValsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getHasCurrencyUnitValsAreNetVals(),
                    getParentForChildren(),
                    isClean());
            hasCurrencyUnitValsAreNetVals_ = null;
          }
          return hasCurrencyUnitValsAreNetValsBuilder_;
        }

        private io.dstore.Values.integerValue categorySortNo_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> categorySortNoBuilder_;
        /**
         * <pre>
         * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
         */
        public boolean hasCategorySortNo() {
          return categorySortNoBuilder_ != null || categorySortNo_ != null;
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
         */
        public io.dstore.Values.integerValue getCategorySortNo() {
          if (categorySortNoBuilder_ == null) {
            return categorySortNo_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : categorySortNo_;
          } else {
            return categorySortNoBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
         */
        public Builder setCategorySortNo(io.dstore.Values.integerValue value) {
          if (categorySortNoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            categorySortNo_ = value;
            onChanged();
          } else {
            categorySortNoBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
         */
        public Builder setCategorySortNo(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (categorySortNoBuilder_ == null) {
            categorySortNo_ = builderForValue.build();
            onChanged();
          } else {
            categorySortNoBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
         */
        public Builder mergeCategorySortNo(io.dstore.Values.integerValue value) {
          if (categorySortNoBuilder_ == null) {
            if (categorySortNo_ != null) {
              categorySortNo_ =
                io.dstore.Values.integerValue.newBuilder(categorySortNo_).mergeFrom(value).buildPartial();
            } else {
              categorySortNo_ = value;
            }
            onChanged();
          } else {
            categorySortNoBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
         */
        public Builder clearCategorySortNo() {
          if (categorySortNoBuilder_ == null) {
            categorySortNo_ = null;
            onChanged();
          } else {
            categorySortNo_ = null;
            categorySortNoBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
         */
        public io.dstore.Values.integerValue.Builder getCategorySortNoBuilder() {
          
          onChanged();
          return getCategorySortNoFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getCategorySortNoOrBuilder() {
          if (categorySortNoBuilder_ != null) {
            return categorySortNoBuilder_.getMessageOrBuilder();
          } else {
            return categorySortNo_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : categorySortNo_;
          }
        }
        /**
         * <pre>
         * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
         * </pre>
         *
         * <code>optional .dstore.values.integerValue category_sort_no = 10013;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getCategorySortNoFieldBuilder() {
          if (categorySortNoBuilder_ == null) {
            categorySortNoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getCategorySortNo(),
                    getParentForChildren(),
                    isClean());
            categorySortNo_ = null;
          }
          return categorySortNoBuilder_;
        }

        private io.dstore.Values.integerValue unitId_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> unitIdBuilder_;
        /**
         * <pre>
         * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
         */
        public boolean hasUnitId() {
          return unitIdBuilder_ != null || unitId_ != null;
        }
        /**
         * <pre>
         * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
         */
        public io.dstore.Values.integerValue getUnitId() {
          if (unitIdBuilder_ == null) {
            return unitId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : unitId_;
          } else {
            return unitIdBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
         */
        public Builder setUnitId(io.dstore.Values.integerValue value) {
          if (unitIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            unitId_ = value;
            onChanged();
          } else {
            unitIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
         */
        public Builder setUnitId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (unitIdBuilder_ == null) {
            unitId_ = builderForValue.build();
            onChanged();
          } else {
            unitIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
         */
        public Builder mergeUnitId(io.dstore.Values.integerValue value) {
          if (unitIdBuilder_ == null) {
            if (unitId_ != null) {
              unitId_ =
                io.dstore.Values.integerValue.newBuilder(unitId_).mergeFrom(value).buildPartial();
            } else {
              unitId_ = value;
            }
            onChanged();
          } else {
            unitIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
         */
        public Builder clearUnitId() {
          if (unitIdBuilder_ == null) {
            unitId_ = null;
            onChanged();
          } else {
            unitId_ = null;
            unitIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
         */
        public io.dstore.Values.integerValue.Builder getUnitIdBuilder() {
          
          onChanged();
          return getUnitIdFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getUnitIdOrBuilder() {
          if (unitIdBuilder_ != null) {
            return unitIdBuilder_.getMessageOrBuilder();
          } else {
            return unitId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : unitId_;
          }
        }
        /**
         * <pre>
         * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue unit_id = 10014;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getUnitIdFieldBuilder() {
          if (unitIdBuilder_ == null) {
            unitIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getUnitId(),
                    getParentForChildren(),
                    isClean());
            unitId_ = null;
          }
          return unitIdBuilder_;
        }

        private io.dstore.Values.booleanValue isUnique_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> isUniqueBuilder_;
        /**
         * <pre>
         * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
         */
        public boolean hasIsUnique() {
          return isUniqueBuilder_ != null || isUnique_ != null;
        }
        /**
         * <pre>
         * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
         */
        public io.dstore.Values.booleanValue getIsUnique() {
          if (isUniqueBuilder_ == null) {
            return isUnique_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : isUnique_;
          } else {
            return isUniqueBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
         */
        public Builder setIsUnique(io.dstore.Values.booleanValue value) {
          if (isUniqueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            isUnique_ = value;
            onChanged();
          } else {
            isUniqueBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
         */
        public Builder setIsUnique(
            io.dstore.Values.booleanValue.Builder builderForValue) {
          if (isUniqueBuilder_ == null) {
            isUnique_ = builderForValue.build();
            onChanged();
          } else {
            isUniqueBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
         */
        public Builder mergeIsUnique(io.dstore.Values.booleanValue value) {
          if (isUniqueBuilder_ == null) {
            if (isUnique_ != null) {
              isUnique_ =
                io.dstore.Values.booleanValue.newBuilder(isUnique_).mergeFrom(value).buildPartial();
            } else {
              isUnique_ = value;
            }
            onChanged();
          } else {
            isUniqueBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
         */
        public Builder clearIsUnique() {
          if (isUniqueBuilder_ == null) {
            isUnique_ = null;
            onChanged();
          } else {
            isUnique_ = null;
            isUniqueBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
         */
        public io.dstore.Values.booleanValue.Builder getIsUniqueBuilder() {
          
          onChanged();
          return getIsUniqueFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
         */
        public io.dstore.Values.booleanValueOrBuilder getIsUniqueOrBuilder() {
          if (isUniqueBuilder_ != null) {
            return isUniqueBuilder_.getMessageOrBuilder();
          } else {
            return isUnique_ == null ?
                io.dstore.Values.booleanValue.getDefaultInstance() : isUnique_;
          }
        }
        /**
         * <pre>
         * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue is_unique = 10015;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
            getIsUniqueFieldBuilder() {
          if (isUniqueBuilder_ == null) {
            isUniqueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                    getIsUnique(),
                    getParentForChildren(),
                    isClean());
            isUnique_ = null;
          }
          return isUniqueBuilder_;
        }

        private io.dstore.Values.integerValue valueLanguageId_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> valueLanguageIdBuilder_;
        /**
         * <pre>
         * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
         */
        public boolean hasValueLanguageId() {
          return valueLanguageIdBuilder_ != null || valueLanguageId_ != null;
        }
        /**
         * <pre>
         * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
         */
        public io.dstore.Values.integerValue getValueLanguageId() {
          if (valueLanguageIdBuilder_ == null) {
            return valueLanguageId_ == null ? io.dstore.Values.integerValue.getDefaultInstance() : valueLanguageId_;
          } else {
            return valueLanguageIdBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
         */
        public Builder setValueLanguageId(io.dstore.Values.integerValue value) {
          if (valueLanguageIdBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            valueLanguageId_ = value;
            onChanged();
          } else {
            valueLanguageIdBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
         */
        public Builder setValueLanguageId(
            io.dstore.Values.integerValue.Builder builderForValue) {
          if (valueLanguageIdBuilder_ == null) {
            valueLanguageId_ = builderForValue.build();
            onChanged();
          } else {
            valueLanguageIdBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
         */
        public Builder mergeValueLanguageId(io.dstore.Values.integerValue value) {
          if (valueLanguageIdBuilder_ == null) {
            if (valueLanguageId_ != null) {
              valueLanguageId_ =
                io.dstore.Values.integerValue.newBuilder(valueLanguageId_).mergeFrom(value).buildPartial();
            } else {
              valueLanguageId_ = value;
            }
            onChanged();
          } else {
            valueLanguageIdBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
         */
        public Builder clearValueLanguageId() {
          if (valueLanguageIdBuilder_ == null) {
            valueLanguageId_ = null;
            onChanged();
          } else {
            valueLanguageId_ = null;
            valueLanguageIdBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
         */
        public io.dstore.Values.integerValue.Builder getValueLanguageIdBuilder() {
          
          onChanged();
          return getValueLanguageIdFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
         */
        public io.dstore.Values.integerValueOrBuilder getValueLanguageIdOrBuilder() {
          if (valueLanguageIdBuilder_ != null) {
            return valueLanguageIdBuilder_.getMessageOrBuilder();
          } else {
            return valueLanguageId_ == null ?
                io.dstore.Values.integerValue.getDefaultInstance() : valueLanguageId_;
          }
        }
        /**
         * <pre>
         * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
         * </pre>
         *
         * <code>optional .dstore.values.integerValue value_language_id = 10016;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder> 
            getValueLanguageIdFieldBuilder() {
          if (valueLanguageIdBuilder_ == null) {
            valueLanguageIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.integerValue, io.dstore.Values.integerValue.Builder, io.dstore.Values.integerValueOrBuilder>(
                    getValueLanguageId(),
                    getParentForChildren(),
                    isClean());
            valueLanguageId_ = null;
          }
          return valueLanguageIdBuilder_;
        }

        private io.dstore.Values.stringValue categoryDescription_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> categoryDescriptionBuilder_;
        /**
         * <pre>
         * Bezeichnung der Kategorie "NodeCharacCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10017;</code>
         */
        public boolean hasCategoryDescription() {
          return categoryDescriptionBuilder_ != null || categoryDescription_ != null;
        }
        /**
         * <pre>
         * Bezeichnung der Kategorie "NodeCharacCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10017;</code>
         */
        public io.dstore.Values.stringValue getCategoryDescription() {
          if (categoryDescriptionBuilder_ == null) {
            return categoryDescription_ == null ? io.dstore.Values.stringValue.getDefaultInstance() : categoryDescription_;
          } else {
            return categoryDescriptionBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Bezeichnung der Kategorie "NodeCharacCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10017;</code>
         */
        public Builder setCategoryDescription(io.dstore.Values.stringValue value) {
          if (categoryDescriptionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            categoryDescription_ = value;
            onChanged();
          } else {
            categoryDescriptionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung der Kategorie "NodeCharacCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10017;</code>
         */
        public Builder setCategoryDescription(
            io.dstore.Values.stringValue.Builder builderForValue) {
          if (categoryDescriptionBuilder_ == null) {
            categoryDescription_ = builderForValue.build();
            onChanged();
          } else {
            categoryDescriptionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung der Kategorie "NodeCharacCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10017;</code>
         */
        public Builder mergeCategoryDescription(io.dstore.Values.stringValue value) {
          if (categoryDescriptionBuilder_ == null) {
            if (categoryDescription_ != null) {
              categoryDescription_ =
                io.dstore.Values.stringValue.newBuilder(categoryDescription_).mergeFrom(value).buildPartial();
            } else {
              categoryDescription_ = value;
            }
            onChanged();
          } else {
            categoryDescriptionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung der Kategorie "NodeCharacCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10017;</code>
         */
        public Builder clearCategoryDescription() {
          if (categoryDescriptionBuilder_ == null) {
            categoryDescription_ = null;
            onChanged();
          } else {
            categoryDescription_ = null;
            categoryDescriptionBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Bezeichnung der Kategorie "NodeCharacCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10017;</code>
         */
        public io.dstore.Values.stringValue.Builder getCategoryDescriptionBuilder() {
          
          onChanged();
          return getCategoryDescriptionFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Bezeichnung der Kategorie "NodeCharacCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10017;</code>
         */
        public io.dstore.Values.stringValueOrBuilder getCategoryDescriptionOrBuilder() {
          if (categoryDescriptionBuilder_ != null) {
            return categoryDescriptionBuilder_.getMessageOrBuilder();
          } else {
            return categoryDescription_ == null ?
                io.dstore.Values.stringValue.getDefaultInstance() : categoryDescription_;
          }
        }
        /**
         * <pre>
         * Bezeichnung der Kategorie "NodeCharacCategoryID"
         * </pre>
         *
         * <code>optional .dstore.values.stringValue category_description = 10017;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder> 
            getCategoryDescriptionFieldBuilder() {
          if (categoryDescriptionBuilder_ == null) {
            categoryDescriptionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.stringValue, io.dstore.Values.stringValue.Builder, io.dstore.Values.stringValueOrBuilder>(
                    getCategoryDescription(),
                    getParentForChildren(),
                    isClean());
            categoryDescription_ = null;
          }
          return categoryDescriptionBuilder_;
        }

        private io.dstore.Values.booleanValue recursive_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> recursiveBuilder_;
        /**
         * <pre>
         * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
         */
        public boolean hasRecursive() {
          return recursiveBuilder_ != null || recursive_ != null;
        }
        /**
         * <pre>
         * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
         */
        public io.dstore.Values.booleanValue getRecursive() {
          if (recursiveBuilder_ == null) {
            return recursive_ == null ? io.dstore.Values.booleanValue.getDefaultInstance() : recursive_;
          } else {
            return recursiveBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
         */
        public Builder setRecursive(io.dstore.Values.booleanValue value) {
          if (recursiveBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            recursive_ = value;
            onChanged();
          } else {
            recursiveBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
         */
        public Builder setRecursive(
            io.dstore.Values.booleanValue.Builder builderForValue) {
          if (recursiveBuilder_ == null) {
            recursive_ = builderForValue.build();
            onChanged();
          } else {
            recursiveBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
         */
        public Builder mergeRecursive(io.dstore.Values.booleanValue value) {
          if (recursiveBuilder_ == null) {
            if (recursive_ != null) {
              recursive_ =
                io.dstore.Values.booleanValue.newBuilder(recursive_).mergeFrom(value).buildPartial();
            } else {
              recursive_ = value;
            }
            onChanged();
          } else {
            recursiveBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
         */
        public Builder clearRecursive() {
          if (recursiveBuilder_ == null) {
            recursive_ = null;
            onChanged();
          } else {
            recursive_ = null;
            recursiveBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
         */
        public io.dstore.Values.booleanValue.Builder getRecursiveBuilder() {
          
          onChanged();
          return getRecursiveFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
         */
        public io.dstore.Values.booleanValueOrBuilder getRecursiveOrBuilder() {
          if (recursiveBuilder_ != null) {
            return recursiveBuilder_.getMessageOrBuilder();
          } else {
            return recursive_ == null ?
                io.dstore.Values.booleanValue.getDefaultInstance() : recursive_;
          }
        }
        /**
         * <pre>
         * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
         * </pre>
         *
         * <code>optional .dstore.values.booleanValue recursive = 10018;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder> 
            getRecursiveFieldBuilder() {
          if (recursiveBuilder_ == null) {
            recursiveBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.dstore.Values.booleanValue, io.dstore.Values.booleanValue.Builder, io.dstore.Values.booleanValueOrBuilder>(
                    getRecursive(),
                    getParentForChildren(),
                    isClean());
            recursive_ = null;
          }
          return recursiveBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row)
      }

      // @@protoc_insertion_point(class_scope:dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row)
      private static final io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row();
      }

      public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Row>
          PARSER = new com.google.protobuf.AbstractParser<Row>() {
        public Row parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new Row(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Row> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Row> getParserForType() {
        return PARSER;
      }

      public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int META_INFORMATION_FIELD_NUMBER = 2;
    private java.util.List<io.dstore.engine.MetaInformation> metaInformation_;
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    public java.util.List<io.dstore.engine.MetaInformation> getMetaInformationList() {
      return metaInformation_;
    }
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    public java.util.List<? extends io.dstore.engine.MetaInformationOrBuilder> 
        getMetaInformationOrBuilderList() {
      return metaInformation_;
    }
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    public int getMetaInformationCount() {
      return metaInformation_.size();
    }
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    public io.dstore.engine.MetaInformation getMetaInformation(int index) {
      return metaInformation_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
     */
    public io.dstore.engine.MetaInformationOrBuilder getMetaInformationOrBuilder(
        int index) {
      return metaInformation_.get(index);
    }

    public static final int MESSAGE_FIELD_NUMBER = 3;
    private java.util.List<io.dstore.engine.Message> message_;
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    public java.util.List<io.dstore.engine.Message> getMessageList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    public java.util.List<? extends io.dstore.engine.MessageOrBuilder> 
        getMessageOrBuilderList() {
      return message_;
    }
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    public int getMessageCount() {
      return message_.size();
    }
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    public io.dstore.engine.Message getMessage(int index) {
      return message_.get(index);
    }
    /**
     * <code>repeated .dstore.engine.Message message = 3;</code>
     */
    public io.dstore.engine.MessageOrBuilder getMessageOrBuilder(
        int index) {
      return message_.get(index);
    }

    public static final int ROW_FIELD_NUMBER = 4;
    private java.util.List<io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row> row_;
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
     */
    public java.util.List<io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row> getRowList() {
      return row_;
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
     */
    public java.util.List<? extends io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.RowOrBuilder> 
        getRowOrBuilderList() {
      return row_;
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
     */
    public int getRowCount() {
      return row_.size();
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
     */
    public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row getRow(int index) {
      return row_.get(index);
    }
    /**
     * <pre>
     * no output parameters
     * </pre>
     *
     * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
     */
    public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.RowOrBuilder getRowOrBuilder(
        int index) {
      return row_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < metaInformation_.size(); i++) {
        output.writeMessage(2, metaInformation_.get(i));
      }
      for (int i = 0; i < message_.size(); i++) {
        output.writeMessage(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        output.writeMessage(4, row_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < metaInformation_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, metaInformation_.get(i));
      }
      for (int i = 0; i < message_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, message_.get(i));
      }
      for (int i = 0; i < row_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, row_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response)) {
        return super.equals(obj);
      }
      io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response other = (io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response) obj;

      boolean result = true;
      result = result && getMetaInformationList()
          .equals(other.getMetaInformationList());
      result = result && getMessageList()
          .equals(other.getMessageList());
      result = result && getRowList()
          .equals(other.getRowList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getMetaInformationCount() > 0) {
        hash = (37 * hash) + META_INFORMATION_FIELD_NUMBER;
        hash = (53 * hash) + getMetaInformationList().hashCode();
      }
      if (getMessageCount() > 0) {
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessageList().hashCode();
      }
      if (getRowCount() > 0) {
        hash = (37 * hash) + ROW_FIELD_NUMBER;
        hash = (53 * hash) + getRowList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dstore.engine.im_GetNodeCharacteristics_Ad.Response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dstore.engine.im_GetNodeCharacteristics_Ad.Response)
        io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.ResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.class, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Builder.class);
      }

      // Construct using io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMetaInformationFieldBuilder();
          getMessageFieldBuilder();
          getRowFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (metaInformationBuilder_ == null) {
          metaInformation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          metaInformationBuilder_.clear();
        }
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          messageBuilder_.clear();
        }
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          rowBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_descriptor;
      }

      public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response getDefaultInstanceForType() {
        return io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.getDefaultInstance();
      }

      public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response build() {
        io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response buildPartial() {
        io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response result = new io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response(this);
        int from_bitField0_ = bitField0_;
        if (metaInformationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            metaInformation_ = java.util.Collections.unmodifiableList(metaInformation_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.metaInformation_ = metaInformation_;
        } else {
          result.metaInformation_ = metaInformationBuilder_.build();
        }
        if (messageBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            message_ = java.util.Collections.unmodifiableList(message_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.message_ = message_;
        } else {
          result.message_ = messageBuilder_.build();
        }
        if (rowBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            row_ = java.util.Collections.unmodifiableList(row_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.row_ = row_;
        } else {
          result.row_ = rowBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response) {
          return mergeFrom((io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response other) {
        if (other == io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.getDefaultInstance()) return this;
        if (metaInformationBuilder_ == null) {
          if (!other.metaInformation_.isEmpty()) {
            if (metaInformation_.isEmpty()) {
              metaInformation_ = other.metaInformation_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMetaInformationIsMutable();
              metaInformation_.addAll(other.metaInformation_);
            }
            onChanged();
          }
        } else {
          if (!other.metaInformation_.isEmpty()) {
            if (metaInformationBuilder_.isEmpty()) {
              metaInformationBuilder_.dispose();
              metaInformationBuilder_ = null;
              metaInformation_ = other.metaInformation_;
              bitField0_ = (bitField0_ & ~0x00000001);
              metaInformationBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMetaInformationFieldBuilder() : null;
            } else {
              metaInformationBuilder_.addAllMessages(other.metaInformation_);
            }
          }
        }
        if (messageBuilder_ == null) {
          if (!other.message_.isEmpty()) {
            if (message_.isEmpty()) {
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMessageIsMutable();
              message_.addAll(other.message_);
            }
            onChanged();
          }
        } else {
          if (!other.message_.isEmpty()) {
            if (messageBuilder_.isEmpty()) {
              messageBuilder_.dispose();
              messageBuilder_ = null;
              message_ = other.message_;
              bitField0_ = (bitField0_ & ~0x00000002);
              messageBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMessageFieldBuilder() : null;
            } else {
              messageBuilder_.addAllMessages(other.message_);
            }
          }
        }
        if (rowBuilder_ == null) {
          if (!other.row_.isEmpty()) {
            if (row_.isEmpty()) {
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureRowIsMutable();
              row_.addAll(other.row_);
            }
            onChanged();
          }
        } else {
          if (!other.row_.isEmpty()) {
            if (rowBuilder_.isEmpty()) {
              rowBuilder_.dispose();
              rowBuilder_ = null;
              row_ = other.row_;
              bitField0_ = (bitField0_ & ~0x00000004);
              rowBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRowFieldBuilder() : null;
            } else {
              rowBuilder_.addAllMessages(other.row_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.dstore.engine.MetaInformation> metaInformation_ =
        java.util.Collections.emptyList();
      private void ensureMetaInformationIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          metaInformation_ = new java.util.ArrayList<io.dstore.engine.MetaInformation>(metaInformation_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.MetaInformation, io.dstore.engine.MetaInformation.Builder, io.dstore.engine.MetaInformationOrBuilder> metaInformationBuilder_;

      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<io.dstore.engine.MetaInformation> getMetaInformationList() {
        if (metaInformationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(metaInformation_);
        } else {
          return metaInformationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public int getMetaInformationCount() {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.size();
        } else {
          return metaInformationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.MetaInformation getMetaInformation(int index) {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.get(index);
        } else {
          return metaInformationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder setMetaInformation(
          int index, io.dstore.engine.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.set(index, value);
          onChanged();
        } else {
          metaInformationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder setMetaInformation(
          int index, io.dstore.engine.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.set(index, builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(io.dstore.engine.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.add(value);
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          int index, io.dstore.engine.MetaInformation value) {
        if (metaInformationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaInformationIsMutable();
          metaInformation_.add(index, value);
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          io.dstore.engine.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.add(builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder addMetaInformation(
          int index, io.dstore.engine.MetaInformation.Builder builderForValue) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.add(index, builderForValue.build());
          onChanged();
        } else {
          metaInformationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder addAllMetaInformation(
          java.lang.Iterable<? extends io.dstore.engine.MetaInformation> values) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, metaInformation_);
          onChanged();
        } else {
          metaInformationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder clearMetaInformation() {
        if (metaInformationBuilder_ == null) {
          metaInformation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          metaInformationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public Builder removeMetaInformation(int index) {
        if (metaInformationBuilder_ == null) {
          ensureMetaInformationIsMutable();
          metaInformation_.remove(index);
          onChanged();
        } else {
          metaInformationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.MetaInformation.Builder getMetaInformationBuilder(
          int index) {
        return getMetaInformationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.MetaInformationOrBuilder getMetaInformationOrBuilder(
          int index) {
        if (metaInformationBuilder_ == null) {
          return metaInformation_.get(index);  } else {
          return metaInformationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<? extends io.dstore.engine.MetaInformationOrBuilder> 
           getMetaInformationOrBuilderList() {
        if (metaInformationBuilder_ != null) {
          return metaInformationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(metaInformation_);
        }
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.MetaInformation.Builder addMetaInformationBuilder() {
        return getMetaInformationFieldBuilder().addBuilder(
            io.dstore.engine.MetaInformation.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public io.dstore.engine.MetaInformation.Builder addMetaInformationBuilder(
          int index) {
        return getMetaInformationFieldBuilder().addBuilder(
            index, io.dstore.engine.MetaInformation.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.MetaInformation meta_information = 2;</code>
       */
      public java.util.List<io.dstore.engine.MetaInformation.Builder> 
           getMetaInformationBuilderList() {
        return getMetaInformationFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.MetaInformation, io.dstore.engine.MetaInformation.Builder, io.dstore.engine.MetaInformationOrBuilder> 
          getMetaInformationFieldBuilder() {
        if (metaInformationBuilder_ == null) {
          metaInformationBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.dstore.engine.MetaInformation, io.dstore.engine.MetaInformation.Builder, io.dstore.engine.MetaInformationOrBuilder>(
                  metaInformation_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          metaInformation_ = null;
        }
        return metaInformationBuilder_;
      }

      private java.util.List<io.dstore.engine.Message> message_ =
        java.util.Collections.emptyList();
      private void ensureMessageIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          message_ = new java.util.ArrayList<io.dstore.engine.Message>(message_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.Message, io.dstore.engine.Message.Builder, io.dstore.engine.MessageOrBuilder> messageBuilder_;

      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.Message> getMessageList() {
        if (messageBuilder_ == null) {
          return java.util.Collections.unmodifiableList(message_);
        } else {
          return messageBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public int getMessageCount() {
        if (messageBuilder_ == null) {
          return message_.size();
        } else {
          return messageBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public io.dstore.engine.Message getMessage(int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);
        } else {
          return messageBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.set(index, value);
          onChanged();
        } else {
          messageBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder setMessage(
          int index, io.dstore.engine.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.set(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder addMessage(io.dstore.engine.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(value);
          onChanged();
        } else {
          messageBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMessageIsMutable();
          message_.add(index, value);
          onChanged();
        } else {
          messageBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder addMessage(
          io.dstore.engine.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder addMessage(
          int index, io.dstore.engine.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.add(index, builderForValue.build());
          onChanged();
        } else {
          messageBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder addAllMessage(
          java.lang.Iterable<? extends io.dstore.engine.Message> values) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, message_);
          onChanged();
        } else {
          messageBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder clearMessage() {
        if (messageBuilder_ == null) {
          message_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          messageBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public Builder removeMessage(int index) {
        if (messageBuilder_ == null) {
          ensureMessageIsMutable();
          message_.remove(index);
          onChanged();
        } else {
          messageBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public io.dstore.engine.Message.Builder getMessageBuilder(
          int index) {
        return getMessageFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public io.dstore.engine.MessageOrBuilder getMessageOrBuilder(
          int index) {
        if (messageBuilder_ == null) {
          return message_.get(index);  } else {
          return messageBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public java.util.List<? extends io.dstore.engine.MessageOrBuilder> 
           getMessageOrBuilderList() {
        if (messageBuilder_ != null) {
          return messageBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(message_);
        }
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public io.dstore.engine.Message.Builder addMessageBuilder() {
        return getMessageFieldBuilder().addBuilder(
            io.dstore.engine.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public io.dstore.engine.Message.Builder addMessageBuilder(
          int index) {
        return getMessageFieldBuilder().addBuilder(
            index, io.dstore.engine.Message.getDefaultInstance());
      }
      /**
       * <code>repeated .dstore.engine.Message message = 3;</code>
       */
      public java.util.List<io.dstore.engine.Message.Builder> 
           getMessageBuilderList() {
        return getMessageFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.Message, io.dstore.engine.Message.Builder, io.dstore.engine.MessageOrBuilder> 
          getMessageFieldBuilder() {
        if (messageBuilder_ == null) {
          messageBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.dstore.engine.Message, io.dstore.engine.Message.Builder, io.dstore.engine.MessageOrBuilder>(
                  message_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        return messageBuilder_;
      }

      private java.util.List<io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row> row_ =
        java.util.Collections.emptyList();
      private void ensureRowIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          row_ = new java.util.ArrayList<io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row>(row_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.Builder, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.RowOrBuilder> rowBuilder_;

      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public java.util.List<io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row> getRowList() {
        if (rowBuilder_ == null) {
          return java.util.Collections.unmodifiableList(row_);
        } else {
          return rowBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public int getRowCount() {
        if (rowBuilder_ == null) {
          return row_.size();
        } else {
          return rowBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row getRow(int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);
        } else {
          return rowBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public Builder setRow(
          int index, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.set(index, value);
          onChanged();
        } else {
          rowBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public Builder setRow(
          int index, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.set(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public Builder addRow(io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(value);
          onChanged();
        } else {
          rowBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public Builder addRow(
          int index, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowIsMutable();
          row_.add(index, value);
          onChanged();
        } else {
          rowBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public Builder addRow(
          io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public Builder addRow(
          int index, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.add(index, builderForValue.build());
          onChanged();
        } else {
          rowBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public Builder addAllRow(
          java.lang.Iterable<? extends io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row> values) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, row_);
          onChanged();
        } else {
          rowBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public Builder clearRow() {
        if (rowBuilder_ == null) {
          row_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          rowBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public Builder removeRow(int index) {
        if (rowBuilder_ == null) {
          ensureRowIsMutable();
          row_.remove(index);
          onChanged();
        } else {
          rowBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.Builder getRowBuilder(
          int index) {
        return getRowFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.RowOrBuilder getRowOrBuilder(
          int index) {
        if (rowBuilder_ == null) {
          return row_.get(index);  } else {
          return rowBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public java.util.List<? extends io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.RowOrBuilder> 
           getRowOrBuilderList() {
        if (rowBuilder_ != null) {
          return rowBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(row_);
        }
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.Builder addRowBuilder() {
        return getRowFieldBuilder().addBuilder(
            io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.getDefaultInstance());
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.Builder addRowBuilder(
          int index) {
        return getRowFieldBuilder().addBuilder(
            index, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.getDefaultInstance());
      }
      /**
       * <pre>
       * no output parameters
       * </pre>
       *
       * <code>repeated .dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row row = 4;</code>
       */
      public java.util.List<io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.Builder> 
           getRowBuilderList() {
        return getRowFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.Builder, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.RowOrBuilder> 
          getRowFieldBuilder() {
        if (rowBuilder_ == null) {
          rowBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.Row.Builder, io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response.RowOrBuilder>(
                  row_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          row_ = null;
        }
        return rowBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:dstore.engine.im_GetNodeCharacteristics_Ad.Response)
    }

    // @@protoc_insertion_point(class_scope:dstore.engine.im_GetNodeCharacteristics_Ad.Response)
    private static final io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response();
    }

    public static io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Response>
        PARSER = new com.google.protobuf.AbstractParser<Response>() {
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Response(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Response> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    public io.dstore.engine.procedures.ImGetNodeCharacteristicsAd.Response getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Parameters_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Parameters_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_Row_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_Row_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n;dstore/engine/procedures/im_GetNodeCha" +
      "racteristics_Ad.proto\022*dstore.engine.im_" +
      "GetNodeCharacteristics_Ad\032\023dstore/values" +
      ".proto\032\032dstore/engine/engine.proto\"\352\004\n\nP" +
      "arameters\022A\n\034include_currency_informatio" +
      "n\030\001 \001(\0132\033.dstore.values.booleanValue\022*\n!" +
      "include_currency_information_null\030\351\007 \001(\010" +
      "\022B\n\035include_currency_informations\030\002 \001(\0132" +
      "\033.dstore.values.booleanValue\022+\n\"include_" +
      "currency_informations_null\030\352\007 \001(\010\022=\n\030onl",
      "y_ids_in_table_one_id\030\003 \001(\0132\033.dstore.val" +
      "ues.booleanValue\022&\n\035only_ids_in_table_on" +
      "e_id_null\030\353\007 \001(\010\022<\n\027node_charac_category" +
      "_id\030\004 \001(\0132\033.dstore.values.integerValue\022%" +
      "\n\034node_charac_category_id_null\030\354\007 \001(\010\022/\n" +
      "\nsort_order\030\005 \001(\0132\033.dstore.values.intege" +
      "rValue\022\030\n\017sort_order_null\030\355\007 \001(\010\022=\n\030get_" +
      "category_information\030\006 \001(\0132\033.dstore.valu" +
      "es.booleanValue\022&\n\035get_category_informat" +
      "ion_null\030\356\007 \001(\010\"\316\t\n\010Response\0228\n\020meta_inf",
      "ormation\030\002 \003(\0132\036.dstore.engine.MetaInfor" +
      "mation\022\'\n\007message\030\003 \003(\0132\026.dstore.engine." +
      "Message\022E\n\003row\030\004 \003(\01328.dstore.engine.im_" +
      "GetNodeCharacteristics_Ad.Response.Row\032\227" +
      "\010\n\003Row\022\017\n\006row_id\030\220N \001(\005\0220\n\ndeleteable\030\221N" +
      " \001(\0132\033.dstore.values.booleanValue\022=\n\027pre" +
      "decessor_category_id\030\222N \001(\0132\033.dstore.val" +
      "ues.integerValue\022?\n\032characteristic_descr" +
      "iption\030\223N \001(\0132\032.dstore.values.stringValu" +
      "e\0223\n\016value_language\030\224N \001(\0132\032.dstore.valu",
      "es.stringValue\0223\n\rfield_type_id\030\225N \001(\0132\033" +
      ".dstore.values.integerValue\022.\n\010in_netto\030" +
      "\226N \001(\0132\033.dstore.values.integerValue\022<\n\026n" +
      "ode_characteristic_id\030\227N \001(\0132\033.dstore.va" +
      "lues.integerValue\022-\n\007sort_no\030\230N \001(\0132\033.ds" +
      "tore.values.integerValue\022F\n keep_propert" +
      "ies_history_in_hours\030\231N \001(\0132\033.dstore.val" +
      "ues.integerValue\0227\n\021predefined_values\030\232N" +
      " \001(\0132\033.dstore.values.booleanValue\022=\n\027nod" +
      "e_charac_category_id\030\233N \001(\0132\033.dstore.val",
      "ues.integerValue\022I\n#has_currency_unit_va" +
      "ls_are_net_vals\030\234N \001(\0132\033.dstore.values.i" +
      "ntegerValue\0226\n\020category_sort_no\030\235N \001(\0132\033" +
      ".dstore.values.integerValue\022-\n\007unit_id\030\236" +
      "N \001(\0132\033.dstore.values.integerValue\022/\n\tis" +
      "_unique\030\237N \001(\0132\033.dstore.values.booleanVa" +
      "lue\0227\n\021value_language_id\030\240N \001(\0132\033.dstore" +
      ".values.integerValue\0229\n\024category_descrip" +
      "tion\030\241N \001(\0132\032.dstore.values.stringValue\022" +
      "/\n\trecursive\030\242N \001(\0132\033.dstore.values.bool",
      "eanValueB]\n\033io.dstore.engine.proceduresZ" +
      ">gosdk.dstore.de/engine/procedures/im_Ge" +
      "tNodeCharacteristics_Adb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.dstore.Values.getDescriptor(),
          io.dstore.engine.EngineOuterClass.getDescriptor(),
        }, assigner);
    internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Parameters_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Parameters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Parameters_descriptor,
        new java.lang.String[] { "IncludeCurrencyInformation", "IncludeCurrencyInformationNull", "IncludeCurrencyInformations", "IncludeCurrencyInformationsNull", "OnlyIdsInTableOneId", "OnlyIdsInTableOneIdNull", "NodeCharacCategoryId", "NodeCharacCategoryIdNull", "SortOrder", "SortOrderNull", "GetCategoryInformation", "GetCategoryInformationNull", });
    internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_descriptor,
        new java.lang.String[] { "MetaInformation", "Message", "Row", });
    internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_Row_descriptor =
      internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_descriptor.getNestedTypes().get(0);
    internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_Row_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dstore_engine_im_GetNodeCharacteristics_Ad_Response_Row_descriptor,
        new java.lang.String[] { "RowId", "Deleteable", "PredecessorCategoryId", "CharacteristicDescription", "ValueLanguage", "FieldTypeId", "InNetto", "NodeCharacteristicId", "SortNo", "KeepPropertiesHistoryInHours", "PredefinedValues", "NodeCharacCategoryId", "HasCurrencyUnitValsAreNetVals", "CategorySortNo", "UnitId", "IsUnique", "ValueLanguageId", "CategoryDescription", "Recursive", });
    io.dstore.Values.getDescriptor();
    io.dstore.engine.EngineOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
